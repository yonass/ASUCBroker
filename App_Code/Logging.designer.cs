#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;


namespace Broker.LoggingDataAccess
{
    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "ASUCBroker")]
    public partial class LoggingDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertDBUpdatedTable(DBUpdatedTable instance);
        partial void UpdateDBUpdatedTable(DBUpdatedTable instance);
        partial void DeleteDBUpdatedTable(DBUpdatedTable instance);
        partial void InsertDBAccessedPage(DBAccessedPage instance);
        partial void UpdateDBAccessedPage(DBAccessedPage instance);
        partial void DeleteDBAccessedPage(DBAccessedPage instance);
        partial void InsertDBActivity(DBActivity instance);
        partial void UpdateDBActivity(DBActivity instance);
        partial void DeleteDBActivity(DBActivity instance);
        partial void InsertDBActivityParameter(DBActivityParameter instance);
        partial void UpdateDBActivityParameter(DBActivityParameter instance);
        partial void DeleteDBActivityParameter(DBActivityParameter instance);
        partial void InsertDBLoggingControl(DBLoggingControl instance);
        partial void UpdateDBLoggingControl(DBLoggingControl instance);
        partial void DeleteDBLoggingControl(DBLoggingControl instance);
        partial void InsertDBLoggingIgnoredTableActivity(DBLoggingIgnoredTableActivity instance);
        partial void UpdateDBLoggingIgnoredTableActivity(DBLoggingIgnoredTableActivity instance);
        partial void DeleteDBLoggingIgnoredTableActivity(DBLoggingIgnoredTableActivity instance);
        partial void InsertDBLoggingIgnoredTable(DBLoggingIgnoredTable instance);
        partial void UpdateDBLoggingIgnoredTable(DBLoggingIgnoredTable instance);
        partial void DeleteDBLoggingIgnoredTable(DBLoggingIgnoredTable instance);
        partial void InsertDBUpdatedTableField(DBUpdatedTableField instance);
        partial void UpdateDBUpdatedTableField(DBUpdatedTableField instance);
        partial void DeleteDBUpdatedTableField(DBUpdatedTableField instance);
        partial void InsertDBTranslatedColumnName(DBTranslatedColumnName instance);
        partial void UpdateDBTranslatedColumnName(DBTranslatedColumnName instance);
        partial void DeleteDBTranslatedColumnName(DBTranslatedColumnName instance);
        partial void InsertDBAccessedPageAction(DBAccessedPageAction instance);
        partial void UpdateDBAccessedPageAction(DBAccessedPageAction instance);
        partial void DeleteDBAccessedPageAction(DBAccessedPageAction instance);
        #endregion

        public LoggingDataContext() :
            base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ASUCBrokerConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public LoggingDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public LoggingDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public LoggingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public LoggingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<DBUpdatedTable> DBUpdatedTables
        {
            get
            {
                return this.GetTable<DBUpdatedTable>();
            }
        }

        public System.Data.Linq.Table<DBAccessedPage> DBAccessedPages
        {
            get
            {
                return this.GetTable<DBAccessedPage>();
            }
        }

        public System.Data.Linq.Table<DBActivity> DBActivities
        {
            get
            {
                return this.GetTable<DBActivity>();
            }
        }

        public System.Data.Linq.Table<DBActivityParameter> DBActivityParameters
        {
            get
            {
                return this.GetTable<DBActivityParameter>();
            }
        }

        public System.Data.Linq.Table<DBLoggingControl> DBLoggingControls
        {
            get
            {
                return this.GetTable<DBLoggingControl>();
            }
        }

        public System.Data.Linq.Table<DBLoggingIgnoredTableActivity> DBLoggingIgnoredTableActivities
        {
            get
            {
                return this.GetTable<DBLoggingIgnoredTableActivity>();
            }
        }

        public System.Data.Linq.Table<DBLoggingIgnoredTable> DBLoggingIgnoredTables
        {
            get
            {
                return this.GetTable<DBLoggingIgnoredTable>();
            }
        }

        public System.Data.Linq.Table<DBUpdatedTableField> DBUpdatedTableFields
        {
            get
            {
                return this.GetTable<DBUpdatedTableField>();
            }
        }

        public System.Data.Linq.Table<ViewDBAccessedPageAction> ViewDBAccessedPageActions
        {
            get
            {
                return this.GetTable<ViewDBAccessedPageAction>();
            }
        }

        public System.Data.Linq.Table<ViewDBUsersActivity> ViewDBUsersActivities
        {
            get
            {
                return this.GetTable<ViewDBUsersActivity>();
            }
        }

        public System.Data.Linq.Table<ViewDBAccessedPage> ViewDBAccessedPages
        {
            get
            {
                return this.GetTable<ViewDBAccessedPage>();
            }
        }

        public System.Data.Linq.Table<ViewDBActivity> ViewDBActivities
        {
            get
            {
                return this.GetTable<ViewDBActivity>();
            }
        }

        public System.Data.Linq.Table<ViewDBActivitiesBase> ViewDBActivitiesBases
        {
            get
            {
                return this.GetTable<ViewDBActivitiesBase>();
            }
        }

        public System.Data.Linq.Table<ViewDBActivitiesUpdatedTableField> ViewDBActivitiesUpdatedTableFields
        {
            get
            {
                return this.GetTable<ViewDBActivitiesUpdatedTableField>();
            }
        }

        public System.Data.Linq.Table<ViewDBActivityParameter> ViewDBActivityParameters
        {
            get
            {
                return this.GetTable<ViewDBActivityParameter>();
            }
        }

        public System.Data.Linq.Table<ViewDBUpdatedTable> ViewDBUpdatedTables
        {
            get
            {
                return this.GetTable<ViewDBUpdatedTable>();
            }
        }

        public System.Data.Linq.Table<DBTranslatedColumnName> DBTranslatedColumnNames
        {
            get
            {
                return this.GetTable<DBTranslatedColumnName>();
            }
        }

        public System.Data.Linq.Table<ViewDBLoggingByPageWithTableID> ViewDBLoggingByPageWithTableIDs
        {
            get
            {
                return this.GetTable<ViewDBLoggingByPageWithTableID>();
            }
        }

        public System.Data.Linq.Table<DBAccessedPageAction> DBAccessedPageActions
        {
            get
            {
                return this.GetTable<DBAccessedPageAction>();
            }
        }

        public System.Data.Linq.Table<ViewDBOtvoreniEdit> ViewDBOtvoreniEdits
        {
            get
            {
                return this.GetTable<ViewDBOtvoreniEdit>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DBUpdatedTables")]
    public partial class DBUpdatedTable : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _UserID;

        private string _SessionID;

        private string _TableName;

        private System.DateTime _TimeOfUpdate;

        private int _DBAccessedPageActionID;

        private EntitySet<DBActivity> _DBActivities;

        private EntitySet<DBUpdatedTableField> _DBUpdatedTableFields;

        private EntityRef<DBAccessedPageAction> _DBAccessedPageAction;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnSessionIDChanging(string value);
        partial void OnSessionIDChanged();
        partial void OnTableNameChanging(string value);
        partial void OnTableNameChanged();
        partial void OnTimeOfUpdateChanging(System.DateTime value);
        partial void OnTimeOfUpdateChanged();
        partial void OnDBAccessedPageActionIDChanging(int value);
        partial void OnDBAccessedPageActionIDChanged();
        #endregion

        public DBUpdatedTable()
        {
            this._DBActivities = new EntitySet<DBActivity>(new Action<DBActivity>(this.attach_DBActivities), new Action<DBActivity>(this.detach_DBActivities));
            this._DBUpdatedTableFields = new EntitySet<DBUpdatedTableField>(new Action<DBUpdatedTableField>(this.attach_DBUpdatedTableFields), new Action<DBUpdatedTableField>(this.detach_DBUpdatedTableFields));
            this._DBAccessedPageAction = default(EntityRef<DBAccessedPageAction>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SessionID", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this.OnSessionIDChanging(value);
                    this.SendPropertyChanging();
                    this._SessionID = value;
                    this.SendPropertyChanged("SessionID");
                    this.OnSessionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TableName", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if ((this._TableName != value))
                {
                    this.OnTableNameChanging(value);
                    this.SendPropertyChanging();
                    this._TableName = value;
                    this.SendPropertyChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeOfUpdate", DbType = "DateTime NOT NULL")]
        public System.DateTime TimeOfUpdate
        {
            get
            {
                return this._TimeOfUpdate;
            }
            set
            {
                if ((this._TimeOfUpdate != value))
                {
                    this.OnTimeOfUpdateChanging(value);
                    this.SendPropertyChanging();
                    this._TimeOfUpdate = value;
                    this.SendPropertyChanged("TimeOfUpdate");
                    this.OnTimeOfUpdateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DBAccessedPageActionID", DbType = "Int NOT NULL")]
        public int DBAccessedPageActionID
        {
            get
            {
                return this._DBAccessedPageActionID;
            }
            set
            {
                if ((this._DBAccessedPageActionID != value))
                {
                    if (this._DBAccessedPageAction.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDBAccessedPageActionIDChanging(value);
                    this.SendPropertyChanging();
                    this._DBAccessedPageActionID = value;
                    this.SendPropertyChanged("DBAccessedPageActionID");
                    this.OnDBAccessedPageActionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBUpdatedTable_DBActivity", Storage = "_DBActivities", ThisKey = "ID", OtherKey = "DBUpdatedTableID")]
        public EntitySet<DBActivity> DBActivities
        {
            get
            {
                return this._DBActivities;
            }
            set
            {
                this._DBActivities.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBUpdatedTable_DBUpdatedTableField", Storage = "_DBUpdatedTableFields", ThisKey = "ID", OtherKey = "DBUpdatedTableID")]
        public EntitySet<DBUpdatedTableField> DBUpdatedTableFields
        {
            get
            {
                return this._DBUpdatedTableFields;
            }
            set
            {
                this._DBUpdatedTableFields.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBAccessedPageAction_DBUpdatedTable", Storage = "_DBAccessedPageAction", ThisKey = "DBAccessedPageActionID", OtherKey = "ID", IsForeignKey = true)]
        public DBAccessedPageAction DBAccessedPageAction
        {
            get
            {
                return this._DBAccessedPageAction.Entity;
            }
            set
            {
                DBAccessedPageAction previousValue = this._DBAccessedPageAction.Entity;
                if (((previousValue != value)
                            || (this._DBAccessedPageAction.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DBAccessedPageAction.Entity = null;
                        previousValue.DBUpdatedTables.Remove(this);
                    }
                    this._DBAccessedPageAction.Entity = value;
                    if ((value != null))
                    {
                        value.DBUpdatedTables.Add(this);
                        this._DBAccessedPageActionID = value.ID;
                    }
                    else
                    {
                        this._DBAccessedPageActionID = default(int);
                    }
                    this.SendPropertyChanged("DBAccessedPageAction");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_DBActivities(DBActivity entity)
        {
            this.SendPropertyChanging();
            entity.DBUpdatedTable = this;
        }

        private void detach_DBActivities(DBActivity entity)
        {
            this.SendPropertyChanging();
            entity.DBUpdatedTable = null;
        }

        private void attach_DBUpdatedTableFields(DBUpdatedTableField entity)
        {
            this.SendPropertyChanging();
            entity.DBUpdatedTable = this;
        }

        private void detach_DBUpdatedTableFields(DBUpdatedTableField entity)
        {
            this.SendPropertyChanging();
            entity.DBUpdatedTable = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DBAccessedPages")]
    public partial class DBAccessedPage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _UserID;

        private string _IpAddress;

        private System.DateTime _TimeOfAccess;

        private string _SessionID;

        private string _Title;

        private string _RelativeUrl;

        private EntitySet<DBAccessedPageAction> _DBAccessedPageActions;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnIpAddressChanging(string value);
        partial void OnIpAddressChanged();
        partial void OnTimeOfAccessChanging(System.DateTime value);
        partial void OnTimeOfAccessChanged();
        partial void OnSessionIDChanging(string value);
        partial void OnSessionIDChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnRelativeUrlChanging(string value);
        partial void OnRelativeUrlChanged();
        #endregion

        public DBAccessedPage()
        {
            this._DBAccessedPageActions = new EntitySet<DBAccessedPageAction>(new Action<DBAccessedPageAction>(this.attach_DBAccessedPageActions), new Action<DBAccessedPageAction>(this.detach_DBAccessedPageActions));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IpAddress", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string IpAddress
        {
            get
            {
                return this._IpAddress;
            }
            set
            {
                if ((this._IpAddress != value))
                {
                    this.OnIpAddressChanging(value);
                    this.SendPropertyChanging();
                    this._IpAddress = value;
                    this.SendPropertyChanged("IpAddress");
                    this.OnIpAddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeOfAccess", DbType = "DateTime NOT NULL")]
        public System.DateTime TimeOfAccess
        {
            get
            {
                return this._TimeOfAccess;
            }
            set
            {
                if ((this._TimeOfAccess != value))
                {
                    this.OnTimeOfAccessChanging(value);
                    this.SendPropertyChanging();
                    this._TimeOfAccess = value;
                    this.SendPropertyChanged("TimeOfAccess");
                    this.OnTimeOfAccessChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SessionID", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this.OnSessionIDChanging(value);
                    this.SendPropertyChanging();
                    this._SessionID = value;
                    this.SendPropertyChanged("SessionID");
                    this.OnSessionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Title", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if ((this._Title != value))
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RelativeUrl", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string RelativeUrl
        {
            get
            {
                return this._RelativeUrl;
            }
            set
            {
                if ((this._RelativeUrl != value))
                {
                    this.OnRelativeUrlChanging(value);
                    this.SendPropertyChanging();
                    this._RelativeUrl = value;
                    this.SendPropertyChanged("RelativeUrl");
                    this.OnRelativeUrlChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBAccessedPage_DBAccessedPageAction", Storage = "_DBAccessedPageActions", ThisKey = "ID", OtherKey = "DbAccesedPagesID")]
        public EntitySet<DBAccessedPageAction> DBAccessedPageActions
        {
            get
            {
                return this._DBAccessedPageActions;
            }
            set
            {
                this._DBAccessedPageActions.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_DBAccessedPageActions(DBAccessedPageAction entity)
        {
            this.SendPropertyChanging();
            entity.DBAccessedPage = this;
        }

        private void detach_DBAccessedPageActions(DBAccessedPageAction entity)
        {
            this.SendPropertyChanging();
            entity.DBAccessedPage = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DBActivities")]
    public partial class DBActivity : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ActivityTypeID;

        private string _Query;

        private int _UserID;

        private string _SessionID;

        private string _AdditionalInfo;

        private System.DateTime _Date;

        private System.Nullable<int> _DBUpdatedTableID;

        private string _TableName;

        private EntitySet<DBActivityParameter> _DBActivityParameters;

        private EntityRef<DBUpdatedTable> _DBUpdatedTable;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnActivityTypeIDChanging(int value);
        partial void OnActivityTypeIDChanged();
        partial void OnQueryChanging(string value);
        partial void OnQueryChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnSessionIDChanging(string value);
        partial void OnSessionIDChanged();
        partial void OnAdditionalInfoChanging(string value);
        partial void OnAdditionalInfoChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnDBUpdatedTableIDChanging(System.Nullable<int> value);
        partial void OnDBUpdatedTableIDChanged();
        partial void OnTableNameChanging(string value);
        partial void OnTableNameChanged();
        #endregion

        public DBActivity()
        {
            this._DBActivityParameters = new EntitySet<DBActivityParameter>(new Action<DBActivityParameter>(this.attach_DBActivityParameters), new Action<DBActivityParameter>(this.detach_DBActivityParameters));
            this._DBUpdatedTable = default(EntityRef<DBUpdatedTable>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ActivityTypeID", DbType = "Int NOT NULL")]
        public int ActivityTypeID
        {
            get
            {
                return this._ActivityTypeID;
            }
            set
            {
                if ((this._ActivityTypeID != value))
                {
                    this.OnActivityTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._ActivityTypeID = value;
                    this.SendPropertyChanged("ActivityTypeID");
                    this.OnActivityTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Query", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string Query
        {
            get
            {
                return this._Query;
            }
            set
            {
                if ((this._Query != value))
                {
                    this.OnQueryChanging(value);
                    this.SendPropertyChanging();
                    this._Query = value;
                    this.SendPropertyChanged("Query");
                    this.OnQueryChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SessionID", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this.OnSessionIDChanging(value);
                    this.SendPropertyChanging();
                    this._SessionID = value;
                    this.SendPropertyChanged("SessionID");
                    this.OnSessionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AdditionalInfo", DbType = "NVarChar(1000)")]
        public string AdditionalInfo
        {
            get
            {
                return this._AdditionalInfo;
            }
            set
            {
                if ((this._AdditionalInfo != value))
                {
                    this.OnAdditionalInfoChanging(value);
                    this.SendPropertyChanging();
                    this._AdditionalInfo = value;
                    this.SendPropertyChanged("AdditionalInfo");
                    this.OnAdditionalInfoChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DBUpdatedTableID", DbType = "Int")]
        public System.Nullable<int> DBUpdatedTableID
        {
            get
            {
                return this._DBUpdatedTableID;
            }
            set
            {
                if ((this._DBUpdatedTableID != value))
                {
                    if (this._DBUpdatedTable.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDBUpdatedTableIDChanging(value);
                    this.SendPropertyChanging();
                    this._DBUpdatedTableID = value;
                    this.SendPropertyChanged("DBUpdatedTableID");
                    this.OnDBUpdatedTableIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TableName", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if ((this._TableName != value))
                {
                    this.OnTableNameChanging(value);
                    this.SendPropertyChanging();
                    this._TableName = value;
                    this.SendPropertyChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBActivity_DBActivityParameter", Storage = "_DBActivityParameters", ThisKey = "ID", OtherKey = "DBActivityID")]
        public EntitySet<DBActivityParameter> DBActivityParameters
        {
            get
            {
                return this._DBActivityParameters;
            }
            set
            {
                this._DBActivityParameters.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBUpdatedTable_DBActivity", Storage = "_DBUpdatedTable", ThisKey = "DBUpdatedTableID", OtherKey = "ID", IsForeignKey = true)]
        public DBUpdatedTable DBUpdatedTable
        {
            get
            {
                return this._DBUpdatedTable.Entity;
            }
            set
            {
                DBUpdatedTable previousValue = this._DBUpdatedTable.Entity;
                if (((previousValue != value)
                            || (this._DBUpdatedTable.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DBUpdatedTable.Entity = null;
                        previousValue.DBActivities.Remove(this);
                    }
                    this._DBUpdatedTable.Entity = value;
                    if ((value != null))
                    {
                        value.DBActivities.Add(this);
                        this._DBUpdatedTableID = value.ID;
                    }
                    else
                    {
                        this._DBUpdatedTableID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("DBUpdatedTable");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_DBActivityParameters(DBActivityParameter entity)
        {
            this.SendPropertyChanging();
            entity.DBActivity = this;
        }

        private void detach_DBActivityParameters(DBActivityParameter entity)
        {
            this.SendPropertyChanging();
            entity.DBActivity = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DBActivityParameters")]
    public partial class DBActivityParameter : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _DBActivityID;

        private string _Value;

        private EntityRef<DBActivity> _DBActivity;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDBActivityIDChanging(int value);
        partial void OnDBActivityIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        #endregion

        public DBActivityParameter()
        {
            this._DBActivity = default(EntityRef<DBActivity>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DBActivityID", DbType = "Int NOT NULL")]
        public int DBActivityID
        {
            get
            {
                return this._DBActivityID;
            }
            set
            {
                if ((this._DBActivityID != value))
                {
                    if (this._DBActivity.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDBActivityIDChanging(value);
                    this.SendPropertyChanging();
                    this._DBActivityID = value;
                    this.SendPropertyChanged("DBActivityID");
                    this.OnDBActivityIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBActivity_DBActivityParameter", Storage = "_DBActivity", ThisKey = "DBActivityID", OtherKey = "ID", IsForeignKey = true)]
        public DBActivity DBActivity
        {
            get
            {
                return this._DBActivity.Entity;
            }
            set
            {
                DBActivity previousValue = this._DBActivity.Entity;
                if (((previousValue != value)
                            || (this._DBActivity.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DBActivity.Entity = null;
                        previousValue.DBActivityParameters.Remove(this);
                    }
                    this._DBActivity.Entity = value;
                    if ((value != null))
                    {
                        value.DBActivityParameters.Add(this);
                        this._DBActivityID = value.ID;
                    }
                    else
                    {
                        this._DBActivityID = default(int);
                    }
                    this.SendPropertyChanged("DBActivity");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DBLoggingControl")]
    public partial class DBLoggingControl : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private bool _IgnoreNext;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIgnoreNextChanging(bool value);
        partial void OnIgnoreNextChanged();
        #endregion

        public DBLoggingControl()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IgnoreNext", DbType = "Bit NOT NULL")]
        public bool IgnoreNext
        {
            get
            {
                return this._IgnoreNext;
            }
            set
            {
                if ((this._IgnoreNext != value))
                {
                    this.OnIgnoreNextChanging(value);
                    this.SendPropertyChanging();
                    this._IgnoreNext = value;
                    this.SendPropertyChanged("IgnoreNext");
                    this.OnIgnoreNextChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DBLoggingIgnoredTableActivities")]
    public partial class DBLoggingIgnoredTableActivity : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _DbLoggingIgnoredTableID;

        private int _ActivityTypeID;

        private EntityRef<DBLoggingIgnoredTable> _DBLoggingIgnoredTable;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDbLoggingIgnoredTableIDChanging(int value);
        partial void OnDbLoggingIgnoredTableIDChanged();
        partial void OnActivityTypeIDChanging(int value);
        partial void OnActivityTypeIDChanged();
        #endregion

        public DBLoggingIgnoredTableActivity()
        {
            this._DBLoggingIgnoredTable = default(EntityRef<DBLoggingIgnoredTable>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DbLoggingIgnoredTableID", DbType = "Int NOT NULL")]
        public int DbLoggingIgnoredTableID
        {
            get
            {
                return this._DbLoggingIgnoredTableID;
            }
            set
            {
                if ((this._DbLoggingIgnoredTableID != value))
                {
                    if (this._DBLoggingIgnoredTable.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDbLoggingIgnoredTableIDChanging(value);
                    this.SendPropertyChanging();
                    this._DbLoggingIgnoredTableID = value;
                    this.SendPropertyChanged("DbLoggingIgnoredTableID");
                    this.OnDbLoggingIgnoredTableIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ActivityTypeID", DbType = "Int NOT NULL")]
        public int ActivityTypeID
        {
            get
            {
                return this._ActivityTypeID;
            }
            set
            {
                if ((this._ActivityTypeID != value))
                {
                    this.OnActivityTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._ActivityTypeID = value;
                    this.SendPropertyChanged("ActivityTypeID");
                    this.OnActivityTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBLoggingIgnoredTable_DBLoggingIgnoredTableActivity", Storage = "_DBLoggingIgnoredTable", ThisKey = "DbLoggingIgnoredTableID", OtherKey = "ID", IsForeignKey = true)]
        public DBLoggingIgnoredTable DBLoggingIgnoredTable
        {
            get
            {
                return this._DBLoggingIgnoredTable.Entity;
            }
            set
            {
                DBLoggingIgnoredTable previousValue = this._DBLoggingIgnoredTable.Entity;
                if (((previousValue != value)
                            || (this._DBLoggingIgnoredTable.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DBLoggingIgnoredTable.Entity = null;
                        previousValue.DBLoggingIgnoredTableActivities.Remove(this);
                    }
                    this._DBLoggingIgnoredTable.Entity = value;
                    if ((value != null))
                    {
                        value.DBLoggingIgnoredTableActivities.Add(this);
                        this._DbLoggingIgnoredTableID = value.ID;
                    }
                    else
                    {
                        this._DbLoggingIgnoredTableID = default(int);
                    }
                    this.SendPropertyChanged("DBLoggingIgnoredTable");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DBLoggingIgnoredTables")]
    public partial class DBLoggingIgnoredTable : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _TableName;

        private EntitySet<DBLoggingIgnoredTableActivity> _DBLoggingIgnoredTableActivities;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnTableNameChanging(string value);
        partial void OnTableNameChanged();
        #endregion

        public DBLoggingIgnoredTable()
        {
            this._DBLoggingIgnoredTableActivities = new EntitySet<DBLoggingIgnoredTableActivity>(new Action<DBLoggingIgnoredTableActivity>(this.attach_DBLoggingIgnoredTableActivities), new Action<DBLoggingIgnoredTableActivity>(this.detach_DBLoggingIgnoredTableActivities));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TableName", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if ((this._TableName != value))
                {
                    this.OnTableNameChanging(value);
                    this.SendPropertyChanging();
                    this._TableName = value;
                    this.SendPropertyChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBLoggingIgnoredTable_DBLoggingIgnoredTableActivity", Storage = "_DBLoggingIgnoredTableActivities", ThisKey = "ID", OtherKey = "DbLoggingIgnoredTableID")]
        public EntitySet<DBLoggingIgnoredTableActivity> DBLoggingIgnoredTableActivities
        {
            get
            {
                return this._DBLoggingIgnoredTableActivities;
            }
            set
            {
                this._DBLoggingIgnoredTableActivities.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_DBLoggingIgnoredTableActivities(DBLoggingIgnoredTableActivity entity)
        {
            this.SendPropertyChanging();
            entity.DBLoggingIgnoredTable = this;
        }

        private void detach_DBLoggingIgnoredTableActivities(DBLoggingIgnoredTableActivity entity)
        {
            this.SendPropertyChanging();
            entity.DBLoggingIgnoredTable = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DBUpdatedTableFields")]
    public partial class DBUpdatedTableField : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _DBUpdatedTableID;

        private string _FieldName;

        private string _Value;

        private string _OldValue;

        private EntityRef<DBUpdatedTable> _DBUpdatedTable;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDBUpdatedTableIDChanging(int value);
        partial void OnDBUpdatedTableIDChanged();
        partial void OnFieldNameChanging(string value);
        partial void OnFieldNameChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnOldValueChanging(string value);
        partial void OnOldValueChanged();
        #endregion

        public DBUpdatedTableField()
        {
            this._DBUpdatedTable = default(EntityRef<DBUpdatedTable>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DBUpdatedTableID", DbType = "Int NOT NULL")]
        public int DBUpdatedTableID
        {
            get
            {
                return this._DBUpdatedTableID;
            }
            set
            {
                if ((this._DBUpdatedTableID != value))
                {
                    if (this._DBUpdatedTable.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDBUpdatedTableIDChanging(value);
                    this.SendPropertyChanging();
                    this._DBUpdatedTableID = value;
                    this.SendPropertyChanged("DBUpdatedTableID");
                    this.OnDBUpdatedTableIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FieldName", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string FieldName
        {
            get
            {
                return this._FieldName;
            }
            set
            {
                if ((this._FieldName != value))
                {
                    this.OnFieldNameChanging(value);
                    this.SendPropertyChanging();
                    this._FieldName = value;
                    this.SendPropertyChanged("FieldName");
                    this.OnFieldNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OldValue", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string OldValue
        {
            get
            {
                return this._OldValue;
            }
            set
            {
                if ((this._OldValue != value))
                {
                    this.OnOldValueChanging(value);
                    this.SendPropertyChanging();
                    this._OldValue = value;
                    this.SendPropertyChanged("OldValue");
                    this.OnOldValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBUpdatedTable_DBUpdatedTableField", Storage = "_DBUpdatedTable", ThisKey = "DBUpdatedTableID", OtherKey = "ID", IsForeignKey = true)]
        public DBUpdatedTable DBUpdatedTable
        {
            get
            {
                return this._DBUpdatedTable.Entity;
            }
            set
            {
                DBUpdatedTable previousValue = this._DBUpdatedTable.Entity;
                if (((previousValue != value)
                            || (this._DBUpdatedTable.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DBUpdatedTable.Entity = null;
                        previousValue.DBUpdatedTableFields.Remove(this);
                    }
                    this._DBUpdatedTable.Entity = value;
                    if ((value != null))
                    {
                        value.DBUpdatedTableFields.Add(this);
                        this._DBUpdatedTableID = value.ID;
                    }
                    else
                    {
                        this._DBUpdatedTableID = default(int);
                    }
                    this.SendPropertyChanged("DBUpdatedTable");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDBAccessedPageActions")]
    public partial class ViewDBAccessedPageAction
    {

        private int _ID;

        private int _DbAccesedPagesID;

        private string _ControlID;

        private System.DateTime _TimeAccessed;

        private string _Action;

        private string _ControlNamingContainer;

        private string _ControlUniqueID;

        private string _RelativeUrl;

        private string _TableName;

        private System.Nullable<System.DateTime> _TimeOfUpdate;

        public ViewDBAccessedPageAction()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DbAccesedPagesID", DbType = "Int NOT NULL")]
        public int DbAccesedPagesID
        {
            get
            {
                return this._DbAccesedPagesID;
            }
            set
            {
                if ((this._DbAccesedPagesID != value))
                {
                    this._DbAccesedPagesID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlID", DbType = "NVarChar(500)")]
        public string ControlID
        {
            get
            {
                return this._ControlID;
            }
            set
            {
                if ((this._ControlID != value))
                {
                    this._ControlID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeAccessed", DbType = "DateTime NOT NULL")]
        public System.DateTime TimeAccessed
        {
            get
            {
                return this._TimeAccessed;
            }
            set
            {
                if ((this._TimeAccessed != value))
                {
                    this._TimeAccessed = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Action", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if ((this._Action != value))
                {
                    this._Action = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlNamingContainer", DbType = "NVarChar(1000)")]
        public string ControlNamingContainer
        {
            get
            {
                return this._ControlNamingContainer;
            }
            set
            {
                if ((this._ControlNamingContainer != value))
                {
                    this._ControlNamingContainer = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlUniqueID", DbType = "NVarChar(1000)")]
        public string ControlUniqueID
        {
            get
            {
                return this._ControlUniqueID;
            }
            set
            {
                if ((this._ControlUniqueID != value))
                {
                    this._ControlUniqueID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RelativeUrl", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string RelativeUrl
        {
            get
            {
                return this._RelativeUrl;
            }
            set
            {
                if ((this._RelativeUrl != value))
                {
                    this._RelativeUrl = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TableName", DbType = "NVarChar(200)")]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if ((this._TableName != value))
                {
                    this._TableName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeOfUpdate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> TimeOfUpdate
        {
            get
            {
                return this._TimeOfUpdate;
            }
            set
            {
                if ((this._TimeOfUpdate != value))
                {
                    this._TimeOfUpdate = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDBUsersActivities")]
    public partial class ViewDBUsersActivity
    {

        private int _ID;

        private string _IpAddress;

        private string _RelativeUrl;

        private System.Nullable<System.DateTime> _TimeVisit;

        private string _SessionID;

        private string _ControlID;

        private string _ControlNamingContainer;

        private string _ControlUniqueID;

        private string _ActionTextName;

        private int _UserID;

        private string _UserName;

        private string _Name;

        public ViewDBUsersActivity()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IpAddress", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string IpAddress
        {
            get
            {
                return this._IpAddress;
            }
            set
            {
                if ((this._IpAddress != value))
                {
                    this._IpAddress = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RelativeUrl", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string RelativeUrl
        {
            get
            {
                return this._RelativeUrl;
            }
            set
            {
                if ((this._RelativeUrl != value))
                {
                    this._RelativeUrl = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeVisit", DbType = "DateTime")]
        public System.Nullable<System.DateTime> TimeVisit
        {
            get
            {
                return this._TimeVisit;
            }
            set
            {
                if ((this._TimeVisit != value))
                {
                    this._TimeVisit = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SessionID", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this._SessionID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlID", DbType = "NVarChar(1000)")]
        public string ControlID
        {
            get
            {
                return this._ControlID;
            }
            set
            {
                if ((this._ControlID != value))
                {
                    this._ControlID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlNamingContainer", DbType = "NVarChar(1000)")]
        public string ControlNamingContainer
        {
            get
            {
                return this._ControlNamingContainer;
            }
            set
            {
                if ((this._ControlNamingContainer != value))
                {
                    this._ControlNamingContainer = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlUniqueID", DbType = "NVarChar(1000)")]
        public string ControlUniqueID
        {
            get
            {
                return this._ControlUniqueID;
            }
            set
            {
                if ((this._ControlUniqueID != value))
                {
                    this._ControlUniqueID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ActionTextName", DbType = "NVarChar(100)")]
        public string ActionTextName
        {
            get
            {
                return this._ActionTextName;
            }
            set
            {
                if ((this._ActionTextName != value))
                {
                    this._ActionTextName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this._UserName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDBAccessedPages")]
    public partial class ViewDBAccessedPage
    {

        private int _ID;

        private int _UserID;

        private string _IpAddress;

        private System.DateTime _TimeOfAccess;

        private string _SessionID;

        private string _Title;

        private string _RelativeUrl;

        private string _UserName;

        private string _Name;

        public ViewDBAccessedPage()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IpAddress", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string IpAddress
        {
            get
            {
                return this._IpAddress;
            }
            set
            {
                if ((this._IpAddress != value))
                {
                    this._IpAddress = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeOfAccess", DbType = "DateTime NOT NULL")]
        public System.DateTime TimeOfAccess
        {
            get
            {
                return this._TimeOfAccess;
            }
            set
            {
                if ((this._TimeOfAccess != value))
                {
                    this._TimeOfAccess = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SessionID", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this._SessionID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Title", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if ((this._Title != value))
                {
                    this._Title = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RelativeUrl", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string RelativeUrl
        {
            get
            {
                return this._RelativeUrl;
            }
            set
            {
                if ((this._RelativeUrl != value))
                {
                    this._RelativeUrl = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this._UserName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDBActivities")]
    public partial class ViewDBActivity
    {

        private int _ViewDBActivitiesID;

        private int _ActivityTypeID;

        private string _Query;

        private int _UserID;

        private string _SessionID;

        private string _AdditionalInfo;

        private System.DateTime _Date;

        private System.Nullable<int> _DBUpdatedTableID;

        private string _Description;

        private string _TableName;

        public ViewDBActivity()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ViewDBActivitiesID", DbType = "Int NOT NULL")]
        public int ViewDBActivitiesID
        {
            get
            {
                return this._ViewDBActivitiesID;
            }
            set
            {
                if ((this._ViewDBActivitiesID != value))
                {
                    this._ViewDBActivitiesID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ActivityTypeID", DbType = "Int NOT NULL")]
        public int ActivityTypeID
        {
            get
            {
                return this._ActivityTypeID;
            }
            set
            {
                if ((this._ActivityTypeID != value))
                {
                    this._ActivityTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Query", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string Query
        {
            get
            {
                return this._Query;
            }
            set
            {
                if ((this._Query != value))
                {
                    this._Query = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SessionID", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this._SessionID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AdditionalInfo", DbType = "NVarChar(1000)")]
        public string AdditionalInfo
        {
            get
            {
                return this._AdditionalInfo;
            }
            set
            {
                if ((this._AdditionalInfo != value))
                {
                    this._AdditionalInfo = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DBUpdatedTableID", DbType = "Int")]
        public System.Nullable<int> DBUpdatedTableID
        {
            get
            {
                return this._DBUpdatedTableID;
            }
            set
            {
                if ((this._DBUpdatedTableID != value))
                {
                    this._DBUpdatedTableID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TableName", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if ((this._TableName != value))
                {
                    this._TableName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDBActivitiesBase")]
    public partial class ViewDBActivitiesBase
    {

        private System.Nullable<long> _ID;

        private int _UserID;

        private string _SessionID;

        private string _UserName;

        private string _Password;

        private string _Name;

        public ViewDBActivitiesBase()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "BigInt")]
        public System.Nullable<long> ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SessionID", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this._SessionID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this._UserName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Password", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if ((this._Password != value))
                {
                    this._Password = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDBActivitiesUpdatedTableFields")]
    public partial class ViewDBActivitiesUpdatedTableField
    {

        private int _ID;

        private int _ActivityTypeID;

        private string _Query;

        private int _UserID;

        private string _SessionID;

        private string _AdditionalInfo;

        private System.DateTime _Date;

        private System.Nullable<int> _DBUpdatedTableID;

        private string _TableName;

        private string _DbUpdatedTableName;

        private System.Nullable<System.DateTime> _TimeOfUpdate;

        private string _FieldName;

        private string _Value;

        private string _OldValue;

        public ViewDBActivitiesUpdatedTableField()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ActivityTypeID", DbType = "Int NOT NULL")]
        public int ActivityTypeID
        {
            get
            {
                return this._ActivityTypeID;
            }
            set
            {
                if ((this._ActivityTypeID != value))
                {
                    this._ActivityTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Query", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string Query
        {
            get
            {
                return this._Query;
            }
            set
            {
                if ((this._Query != value))
                {
                    this._Query = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SessionID", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this._SessionID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AdditionalInfo", DbType = "NVarChar(1000)")]
        public string AdditionalInfo
        {
            get
            {
                return this._AdditionalInfo;
            }
            set
            {
                if ((this._AdditionalInfo != value))
                {
                    this._AdditionalInfo = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DBUpdatedTableID", DbType = "Int")]
        public System.Nullable<int> DBUpdatedTableID
        {
            get
            {
                return this._DBUpdatedTableID;
            }
            set
            {
                if ((this._DBUpdatedTableID != value))
                {
                    this._DBUpdatedTableID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TableName", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if ((this._TableName != value))
                {
                    this._TableName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DbUpdatedTableName", DbType = "NVarChar(200)")]
        public string DbUpdatedTableName
        {
            get
            {
                return this._DbUpdatedTableName;
            }
            set
            {
                if ((this._DbUpdatedTableName != value))
                {
                    this._DbUpdatedTableName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeOfUpdate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> TimeOfUpdate
        {
            get
            {
                return this._TimeOfUpdate;
            }
            set
            {
                if ((this._TimeOfUpdate != value))
                {
                    this._TimeOfUpdate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FieldName", DbType = "NVarChar(150)")]
        public string FieldName
        {
            get
            {
                return this._FieldName;
            }
            set
            {
                if ((this._FieldName != value))
                {
                    this._FieldName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "NVarChar(200)")]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this._Value = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OldValue", DbType = "NVarChar(200)")]
        public string OldValue
        {
            get
            {
                return this._OldValue;
            }
            set
            {
                if ((this._OldValue != value))
                {
                    this._OldValue = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDBActivityParameters")]
    public partial class ViewDBActivityParameter
    {

        private int _ID;

        private int _ActivityTypeID;

        private string _Query;

        private int _UserID;

        private string _SessionID;

        private string _AdditionalInfo;

        private System.DateTime _Date;

        private string _TableName;

        private int _DBActivityID;

        private string _Value;

        private string _Description;

        public ViewDBActivityParameter()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ActivityTypeID", DbType = "Int NOT NULL")]
        public int ActivityTypeID
        {
            get
            {
                return this._ActivityTypeID;
            }
            set
            {
                if ((this._ActivityTypeID != value))
                {
                    this._ActivityTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Query", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string Query
        {
            get
            {
                return this._Query;
            }
            set
            {
                if ((this._Query != value))
                {
                    this._Query = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SessionID", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this._SessionID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AdditionalInfo", DbType = "NVarChar(1000)")]
        public string AdditionalInfo
        {
            get
            {
                return this._AdditionalInfo;
            }
            set
            {
                if ((this._AdditionalInfo != value))
                {
                    this._AdditionalInfo = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TableName", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if ((this._TableName != value))
                {
                    this._TableName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DBActivityID", DbType = "Int NOT NULL")]
        public int DBActivityID
        {
            get
            {
                return this._DBActivityID;
            }
            set
            {
                if ((this._DBActivityID != value))
                {
                    this._DBActivityID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this._Value = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDBUpdatedTables")]
    public partial class ViewDBUpdatedTable
    {

        private int _ID;

        private int _UserID;

        private string _SessionID;

        private string _TableName;

        private System.DateTime _TimeOfUpdate;

        private string _FieldName;

        private string _Value;

        private string _OldValue;

        private int _DBAccessedPageActionID;

        public ViewDBUpdatedTable()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SessionID", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this._SessionID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TableName", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if ((this._TableName != value))
                {
                    this._TableName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeOfUpdate", DbType = "DateTime NOT NULL")]
        public System.DateTime TimeOfUpdate
        {
            get
            {
                return this._TimeOfUpdate;
            }
            set
            {
                if ((this._TimeOfUpdate != value))
                {
                    this._TimeOfUpdate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FieldName", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string FieldName
        {
            get
            {
                return this._FieldName;
            }
            set
            {
                if ((this._FieldName != value))
                {
                    this._FieldName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this._Value = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OldValue", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string OldValue
        {
            get
            {
                return this._OldValue;
            }
            set
            {
                if ((this._OldValue != value))
                {
                    this._OldValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DBAccessedPageActionID", DbType = "Int NOT NULL")]
        public int DBAccessedPageActionID
        {
            get
            {
                return this._DBAccessedPageActionID;
            }
            set
            {
                if ((this._DBAccessedPageActionID != value))
                {
                    this._DBAccessedPageActionID = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DBTranslatedColumnNames")]
    public partial class DBTranslatedColumnName : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private string _NameMKD;

        private string _Description;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNameMKDChanging(string value);
        partial void OnNameMKDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public DBTranslatedColumnName()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NameMKD", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string NameMKD
        {
            get
            {
                return this._NameMKD;
            }
            set
            {
                if ((this._NameMKD != value))
                {
                    this.OnNameMKDChanging(value);
                    this.SendPropertyChanging();
                    this._NameMKD = value;
                    this.SendPropertyChanged("NameMKD");
                    this.OnNameMKDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(500)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDBLoggingByPageWithTableID")]
    public partial class ViewDBLoggingByPageWithTableID
    {

        private int _ID;

        private int _DbAccesedPagesID;

        private string _ControlID;

        private System.DateTime _TimeAccessed;

        private string _Action;

        private string _ControlNamingContainer;

        private string _ControlUniqueID;

        private string _RelativeUrl;

        private int _UserID;

        private string _SessionID;

        private string _TableName;

        private System.DateTime _TimeOfUpdate;

        private string _FieldName;

        private string _OldValue;

        private string _Value;

        private string _Name;

        public ViewDBLoggingByPageWithTableID()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DbAccesedPagesID", DbType = "Int NOT NULL")]
        public int DbAccesedPagesID
        {
            get
            {
                return this._DbAccesedPagesID;
            }
            set
            {
                if ((this._DbAccesedPagesID != value))
                {
                    this._DbAccesedPagesID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlID", DbType = "NVarChar(500)")]
        public string ControlID
        {
            get
            {
                return this._ControlID;
            }
            set
            {
                if ((this._ControlID != value))
                {
                    this._ControlID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeAccessed", DbType = "DateTime NOT NULL")]
        public System.DateTime TimeAccessed
        {
            get
            {
                return this._TimeAccessed;
            }
            set
            {
                if ((this._TimeAccessed != value))
                {
                    this._TimeAccessed = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Action", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if ((this._Action != value))
                {
                    this._Action = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlNamingContainer", DbType = "NVarChar(1000)")]
        public string ControlNamingContainer
        {
            get
            {
                return this._ControlNamingContainer;
            }
            set
            {
                if ((this._ControlNamingContainer != value))
                {
                    this._ControlNamingContainer = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlUniqueID", DbType = "NVarChar(1000)")]
        public string ControlUniqueID
        {
            get
            {
                return this._ControlUniqueID;
            }
            set
            {
                if ((this._ControlUniqueID != value))
                {
                    this._ControlUniqueID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RelativeUrl", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string RelativeUrl
        {
            get
            {
                return this._RelativeUrl;
            }
            set
            {
                if ((this._RelativeUrl != value))
                {
                    this._RelativeUrl = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SessionID", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string SessionID
        {
            get
            {
                return this._SessionID;
            }
            set
            {
                if ((this._SessionID != value))
                {
                    this._SessionID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TableName", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if ((this._TableName != value))
                {
                    this._TableName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeOfUpdate", DbType = "DateTime NOT NULL")]
        public System.DateTime TimeOfUpdate
        {
            get
            {
                return this._TimeOfUpdate;
            }
            set
            {
                if ((this._TimeOfUpdate != value))
                {
                    this._TimeOfUpdate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FieldName", DbType = "NVarChar(150)")]
        public string FieldName
        {
            get
            {
                return this._FieldName;
            }
            set
            {
                if ((this._FieldName != value))
                {
                    this._FieldName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OldValue", DbType = "NVarChar(200)")]
        public string OldValue
        {
            get
            {
                return this._OldValue;
            }
            set
            {
                if ((this._OldValue != value))
                {
                    this._OldValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "NVarChar(200)")]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this._Value = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DBAccessedPageActions")]
    public partial class DBAccessedPageAction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _DbAccesedPagesID;

        private string _ControlID;

        private System.DateTime _TimeAccessed;

        private string _Action;

        private string _ControlNamingContainer;

        private string _ControlUniqueID;

        private string _RelativeUrl;

        private string _OpenedFormID;

        private EntitySet<DBUpdatedTable> _DBUpdatedTables;

        private EntityRef<DBAccessedPage> _DBAccessedPage;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDbAccesedPagesIDChanging(int value);
        partial void OnDbAccesedPagesIDChanged();
        partial void OnControlIDChanging(string value);
        partial void OnControlIDChanged();
        partial void OnTimeAccessedChanging(System.DateTime value);
        partial void OnTimeAccessedChanged();
        partial void OnActionChanging(string value);
        partial void OnActionChanged();
        partial void OnControlNamingContainerChanging(string value);
        partial void OnControlNamingContainerChanged();
        partial void OnControlUniqueIDChanging(string value);
        partial void OnControlUniqueIDChanged();
        partial void OnRelativeUrlChanging(string value);
        partial void OnRelativeUrlChanged();
        partial void OnOpenedFormIDChanging(string value);
        partial void OnOpenedFormIDChanged();
        #endregion

        public DBAccessedPageAction()
        {
            this._DBUpdatedTables = new EntitySet<DBUpdatedTable>(new Action<DBUpdatedTable>(this.attach_DBUpdatedTables), new Action<DBUpdatedTable>(this.detach_DBUpdatedTables));
            this._DBAccessedPage = default(EntityRef<DBAccessedPage>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DbAccesedPagesID", DbType = "Int NOT NULL")]
        public int DbAccesedPagesID
        {
            get
            {
                return this._DbAccesedPagesID;
            }
            set
            {
                if ((this._DbAccesedPagesID != value))
                {
                    if (this._DBAccessedPage.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDbAccesedPagesIDChanging(value);
                    this.SendPropertyChanging();
                    this._DbAccesedPagesID = value;
                    this.SendPropertyChanged("DbAccesedPagesID");
                    this.OnDbAccesedPagesIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlID", DbType = "NVarChar(500)")]
        public string ControlID
        {
            get
            {
                return this._ControlID;
            }
            set
            {
                if ((this._ControlID != value))
                {
                    this.OnControlIDChanging(value);
                    this.SendPropertyChanging();
                    this._ControlID = value;
                    this.SendPropertyChanged("ControlID");
                    this.OnControlIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeAccessed", DbType = "DateTime NOT NULL")]
        public System.DateTime TimeAccessed
        {
            get
            {
                return this._TimeAccessed;
            }
            set
            {
                if ((this._TimeAccessed != value))
                {
                    this.OnTimeAccessedChanging(value);
                    this.SendPropertyChanging();
                    this._TimeAccessed = value;
                    this.SendPropertyChanged("TimeAccessed");
                    this.OnTimeAccessedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Action", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if ((this._Action != value))
                {
                    this.OnActionChanging(value);
                    this.SendPropertyChanging();
                    this._Action = value;
                    this.SendPropertyChanged("Action");
                    this.OnActionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlNamingContainer", DbType = "NVarChar(1000)")]
        public string ControlNamingContainer
        {
            get
            {
                return this._ControlNamingContainer;
            }
            set
            {
                if ((this._ControlNamingContainer != value))
                {
                    this.OnControlNamingContainerChanging(value);
                    this.SendPropertyChanging();
                    this._ControlNamingContainer = value;
                    this.SendPropertyChanged("ControlNamingContainer");
                    this.OnControlNamingContainerChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlUniqueID", DbType = "NVarChar(1000)")]
        public string ControlUniqueID
        {
            get
            {
                return this._ControlUniqueID;
            }
            set
            {
                if ((this._ControlUniqueID != value))
                {
                    this.OnControlUniqueIDChanging(value);
                    this.SendPropertyChanging();
                    this._ControlUniqueID = value;
                    this.SendPropertyChanged("ControlUniqueID");
                    this.OnControlUniqueIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RelativeUrl", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string RelativeUrl
        {
            get
            {
                return this._RelativeUrl;
            }
            set
            {
                if ((this._RelativeUrl != value))
                {
                    this.OnRelativeUrlChanging(value);
                    this.SendPropertyChanging();
                    this._RelativeUrl = value;
                    this.SendPropertyChanged("RelativeUrl");
                    this.OnRelativeUrlChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OpenedFormID", DbType = "NVarChar(50)")]
        public string OpenedFormID
        {
            get
            {
                return this._OpenedFormID;
            }
            set
            {
                if ((this._OpenedFormID != value))
                {
                    this.OnOpenedFormIDChanging(value);
                    this.SendPropertyChanging();
                    this._OpenedFormID = value;
                    this.SendPropertyChanged("OpenedFormID");
                    this.OnOpenedFormIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBAccessedPageAction_DBUpdatedTable", Storage = "_DBUpdatedTables", ThisKey = "ID", OtherKey = "DBAccessedPageActionID")]
        public EntitySet<DBUpdatedTable> DBUpdatedTables
        {
            get
            {
                return this._DBUpdatedTables;
            }
            set
            {
                this._DBUpdatedTables.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DBAccessedPage_DBAccessedPageAction", Storage = "_DBAccessedPage", ThisKey = "DbAccesedPagesID", OtherKey = "ID", IsForeignKey = true)]
        public DBAccessedPage DBAccessedPage
        {
            get
            {
                return this._DBAccessedPage.Entity;
            }
            set
            {
                DBAccessedPage previousValue = this._DBAccessedPage.Entity;
                if (((previousValue != value)
                            || (this._DBAccessedPage.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DBAccessedPage.Entity = null;
                        previousValue.DBAccessedPageActions.Remove(this);
                    }
                    this._DBAccessedPage.Entity = value;
                    if ((value != null))
                    {
                        value.DBAccessedPageActions.Add(this);
                        this._DbAccesedPagesID = value.ID;
                    }
                    else
                    {
                        this._DbAccesedPagesID = default(int);
                    }
                    this.SendPropertyChanged("DBAccessedPage");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_DBUpdatedTables(DBUpdatedTable entity)
        {
            this.SendPropertyChanging();
            entity.DBAccessedPageAction = this;
        }

        private void detach_DBUpdatedTables(DBUpdatedTable entity)
        {
            this.SendPropertyChanging();
            entity.DBAccessedPageAction = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDBOtvoreniEdits")]
    public partial class ViewDBOtvoreniEdit
    {

        private int _DbAccesedPagesID;

        private string _ControlID;

        private System.DateTime _TimeAccessed;

        private string _Action;

        private string _ControlNamingContainer;

        private string _RelativeUrl;

        private string _ControlUniqueID;

        private string _OpenedFormID;

        private int _UserID;

        private string _Name;

        public ViewDBOtvoreniEdit()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DbAccesedPagesID", DbType = "Int NOT NULL")]
        public int DbAccesedPagesID
        {
            get
            {
                return this._DbAccesedPagesID;
            }
            set
            {
                if ((this._DbAccesedPagesID != value))
                {
                    this._DbAccesedPagesID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlID", DbType = "NVarChar(500)")]
        public string ControlID
        {
            get
            {
                return this._ControlID;
            }
            set
            {
                if ((this._ControlID != value))
                {
                    this._ControlID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TimeAccessed", DbType = "DateTime NOT NULL")]
        public System.DateTime TimeAccessed
        {
            get
            {
                return this._TimeAccessed;
            }
            set
            {
                if ((this._TimeAccessed != value))
                {
                    this._TimeAccessed = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Action", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if ((this._Action != value))
                {
                    this._Action = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlNamingContainer", DbType = "NVarChar(1000)")]
        public string ControlNamingContainer
        {
            get
            {
                return this._ControlNamingContainer;
            }
            set
            {
                if ((this._ControlNamingContainer != value))
                {
                    this._ControlNamingContainer = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RelativeUrl", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string RelativeUrl
        {
            get
            {
                return this._RelativeUrl;
            }
            set
            {
                if ((this._RelativeUrl != value))
                {
                    this._RelativeUrl = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlUniqueID", DbType = "NVarChar(1000)")]
        public string ControlUniqueID
        {
            get
            {
                return this._ControlUniqueID;
            }
            set
            {
                if ((this._ControlUniqueID != value))
                {
                    this._ControlUniqueID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OpenedFormID", DbType = "NVarChar(50)")]
        public string OpenedFormID
        {
            get
            {
                return this._OpenedFormID;
            }
            set
            {
                if ((this._OpenedFormID != value))
                {
                    this._OpenedFormID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }
    }
#pragma warning restore 1591
}