#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;






[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ASUCBrokerFinansovo")]
public partial class FinansovoDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAbesceType(AbesceType instance);
  partial void UpdateAbesceType(AbesceType instance);
  partial void DeleteAbesceType(AbesceType instance);
  partial void InsertWorkUnit(WorkUnit instance);
  partial void UpdateWorkUnit(WorkUnit instance);
  partial void DeleteWorkUnit(WorkUnit instance);
  partial void InsertAbsence(Absence instance);
  partial void UpdateAbsence(Absence instance);
  partial void DeleteAbsence(Absence instance);
  partial void InsertAbsencesPercentage(AbsencesPercentage instance);
  partial void UpdateAbsencesPercentage(AbsencesPercentage instance);
  partial void DeleteAbsencesPercentage(AbsencesPercentage instance);
  partial void InsertAccount(Account instance);
  partial void UpdateAccount(Account instance);
  partial void DeleteAccount(Account instance);
  partial void InsertAccountsItem(AccountsItem instance);
  partial void UpdateAccountsItem(AccountsItem instance);
  partial void DeleteAccountsItem(AccountsItem instance);
  partial void InsertAction(Action instance);
  partial void UpdateAction(Action instance);
  partial void DeleteAction(Action instance);
  partial void InsertAdvanceInvoiceItem(AdvanceInvoiceItem instance);
  partial void UpdateAdvanceInvoiceItem(AdvanceInvoiceItem instance);
  partial void DeleteAdvanceInvoiceItem(AdvanceInvoiceItem instance);
  partial void InsertAdvanceInvoice(AdvanceInvoice instance);
  partial void UpdateAdvanceInvoice(AdvanceInvoice instance);
  partial void DeleteAdvanceInvoice(AdvanceInvoice instance);
  partial void InsertAlgorithm(Algorithm instance);
  partial void UpdateAlgorithm(Algorithm instance);
  partial void DeleteAlgorithm(Algorithm instance);
  partial void InsertAllowance(Allowance instance);
  partial void UpdateAllowance(Allowance instance);
  partial void DeleteAllowance(Allowance instance);
  partial void InsertAllowanceType(AllowanceType instance);
  partial void UpdateAllowanceType(AllowanceType instance);
  partial void DeleteAllowanceType(AllowanceType instance);
  partial void InsertAmortizationGroup(AmortizationGroup instance);
  partial void UpdateAmortizationGroup(AmortizationGroup instance);
  partial void DeleteAmortizationGroup(AmortizationGroup instance);
  partial void InsertBalanceCarriedForward(BalanceCarriedForward instance);
  partial void UpdateBalanceCarriedForward(BalanceCarriedForward instance);
  partial void DeleteBalanceCarriedForward(BalanceCarriedForward instance);
  partial void InsertBank(Bank instance);
  partial void UpdateBank(Bank instance);
  partial void DeleteBank(Bank instance);
  partial void InsertBranch(Branch instance);
  partial void UpdateBranch(Branch instance);
  partial void DeleteBranch(Branch instance);
  partial void InsertBrokerABAccountFacturesSetup(BrokerABAccountFacturesSetup instance);
  partial void UpdateBrokerABAccountFacturesSetup(BrokerABAccountFacturesSetup instance);
  partial void DeleteBrokerABAccountFacturesSetup(BrokerABAccountFacturesSetup instance);
  partial void InsertBrokerABCashSetup(BrokerABCashSetup instance);
  partial void UpdateBrokerABCashSetup(BrokerABCashSetup instance);
  partial void DeleteBrokerABCashSetup(BrokerABCashSetup instance);
  partial void InsertBrokerABCreditCardsSetup(BrokerABCreditCardsSetup instance);
  partial void UpdateBrokerABCreditCardsSetup(BrokerABCreditCardsSetup instance);
  partial void DeleteBrokerABCreditCardsSetup(BrokerABCreditCardsSetup instance);
  partial void InsertBrokerABIncomeFacturesForExpencesSetup(BrokerABIncomeFacturesForExpencesSetup instance);
  partial void UpdateBrokerABIncomeFacturesForExpencesSetup(BrokerABIncomeFacturesForExpencesSetup instance);
  partial void DeleteBrokerABIncomeFacturesForExpencesSetup(BrokerABIncomeFacturesForExpencesSetup instance);
  partial void InsertBrokerABIncomeFacturesSetup(BrokerABIncomeFacturesSetup instance);
  partial void UpdateBrokerABIncomeFacturesSetup(BrokerABIncomeFacturesSetup instance);
  partial void DeleteBrokerABIncomeFacturesSetup(BrokerABIncomeFacturesSetup instance);
  partial void InsertCapitalAssetsCardAmortization(CapitalAssetsCardAmortization instance);
  partial void UpdateCapitalAssetsCardAmortization(CapitalAssetsCardAmortization instance);
  partial void DeleteCapitalAssetsCardAmortization(CapitalAssetsCardAmortization instance);
  partial void InsertCapitalAssetsCardRevaluation(CapitalAssetsCardRevaluation instance);
  partial void UpdateCapitalAssetsCardRevaluation(CapitalAssetsCardRevaluation instance);
  partial void DeleteCapitalAssetsCardRevaluation(CapitalAssetsCardRevaluation instance);
  partial void InsertCapitalAssetsCard(CapitalAssetsCard instance);
  partial void UpdateCapitalAssetsCard(CapitalAssetsCard instance);
  partial void DeleteCapitalAssetsCard(CapitalAssetsCard instance);
  partial void InsertCashDeskEntryDescription(CashDeskEntryDescription instance);
  partial void UpdateCashDeskEntryDescription(CashDeskEntryDescription instance);
  partial void DeleteCashDeskEntryDescription(CashDeskEntryDescription instance);
  partial void InsertCashDeskEntryType(CashDeskEntryType instance);
  partial void UpdateCashDeskEntryType(CashDeskEntryType instance);
  partial void DeleteCashDeskEntryType(CashDeskEntryType instance);
  partial void InsertCashDeskLogbookItem(CashDeskLogbookItem instance);
  partial void UpdateCashDeskLogbookItem(CashDeskLogbookItem instance);
  partial void DeleteCashDeskLogbookItem(CashDeskLogbookItem instance);
  partial void InsertCashDeskLogbook(CashDeskLogbook instance);
  partial void UpdateCashDeskLogbook(CashDeskLogbook instance);
  partial void DeleteCashDeskLogbook(CashDeskLogbook instance);
  partial void InsertCashDeskPerson(CashDeskPerson instance);
  partial void UpdateCashDeskPerson(CashDeskPerson instance);
  partial void DeleteCashDeskPerson(CashDeskPerson instance);
  partial void InsertCashDeskType(CashDeskType instance);
  partial void UpdateCashDeskType(CashDeskType instance);
  partial void DeleteCashDeskType(CashDeskType instance);
  partial void InsertCashPaymentItem(CashPaymentItem instance);
  partial void UpdateCashPaymentItem(CashPaymentItem instance);
  partial void DeleteCashPaymentItem(CashPaymentItem instance);
  partial void InsertCashPayment(CashPayment instance);
  partial void UpdateCashPayment(CashPayment instance);
  partial void DeleteCashPayment(CashPayment instance);
  partial void InsertChartOfAccount(ChartOfAccount instance);
  partial void UpdateChartOfAccount(ChartOfAccount instance);
  partial void DeleteChartOfAccount(ChartOfAccount instance);
  partial void InsertChartOfAccountsDocumentType(ChartOfAccountsDocumentType instance);
  partial void UpdateChartOfAccountsDocumentType(ChartOfAccountsDocumentType instance);
  partial void DeleteChartOfAccountsDocumentType(ChartOfAccountsDocumentType instance);
  partial void InsertClient(Client instance);
  partial void UpdateClient(Client instance);
  partial void DeleteClient(Client instance);
  partial void InsertClientsBank(ClientsBank instance);
  partial void UpdateClientsBank(ClientsBank instance);
  partial void DeleteClientsBank(ClientsBank instance);
  partial void InsertCompany(Company instance);
  partial void UpdateCompany(Company instance);
  partial void DeleteCompany(Company instance);
  partial void InsertCompanyAccount(CompanyAccount instance);
  partial void UpdateCompanyAccount(CompanyAccount instance);
  partial void DeleteCompanyAccount(CompanyAccount instance);
  partial void InsertCompanyAccountsUser(CompanyAccountsUser instance);
  partial void UpdateCompanyAccountsUser(CompanyAccountsUser instance);
  partial void DeleteCompanyAccountsUser(CompanyAccountsUser instance);
  partial void InsertContribution(Contribution instance);
  partial void UpdateContribution(Contribution instance);
  partial void DeleteContribution(Contribution instance);
  partial void InsertCostClass(CostClass instance);
  partial void UpdateCostClass(CostClass instance);
  partial void DeleteCostClass(CostClass instance);
  partial void InsertCostSubType(CostSubType instance);
  partial void UpdateCostSubType(CostSubType instance);
  partial void DeleteCostSubType(CostSubType instance);
  partial void InsertCostType(CostType instance);
  partial void UpdateCostType(CostType instance);
  partial void DeleteCostType(CostType instance);
  partial void InsertCurrency(Currency instance);
  partial void UpdateCurrency(Currency instance);
  partial void DeleteCurrency(Currency instance);
  partial void InsertDDVType(DDVType instance);
  partial void UpdateDDVType(DDVType instance);
  partial void DeleteDDVType(DDVType instance);
  partial void InsertDDVtypesChartOfAccount(DDVtypesChartOfAccount instance);
  partial void UpdateDDVtypesChartOfAccount(DDVtypesChartOfAccount instance);
  partial void DeleteDDVtypesChartOfAccount(DDVtypesChartOfAccount instance);
  partial void InsertDocumentType(DocumentType instance);
  partial void UpdateDocumentType(DocumentType instance);
  partial void DeleteDocumentType(DocumentType instance);
  partial void InsertEmployee(Employee instance);
  partial void UpdateEmployee(Employee instance);
  partial void DeleteEmployee(Employee instance);
  partial void InsertEntranceExpence(EntranceExpence instance);
  partial void UpdateEntranceExpence(EntranceExpence instance);
  partial void DeleteEntranceExpence(EntranceExpence instance);
  partial void InsertEntranceFacture(EntranceFacture instance);
  partial void UpdateEntranceFacture(EntranceFacture instance);
  partial void DeleteEntranceFacture(EntranceFacture instance);
  partial void InsertEntranceItem(EntranceItem instance);
  partial void UpdateEntranceItem(EntranceItem instance);
  partial void DeleteEntranceItem(EntranceItem instance);
  partial void InsertEntrance(Entrance instance);
  partial void UpdateEntrance(Entrance instance);
  partial void DeleteEntrance(Entrance instance);
  partial void InsertEntranceSubExpence(EntranceSubExpence instance);
  partial void UpdateEntranceSubExpence(EntranceSubExpence instance);
  partial void DeleteEntranceSubExpence(EntranceSubExpence instance);
  partial void InsertEntryControl(EntryControl instance);
  partial void UpdateEntryControl(EntryControl instance);
  partial void DeleteEntryControl(EntryControl instance);
  partial void InsertEntryControlsChartOfAccount(EntryControlsChartOfAccount instance);
  partial void UpdateEntryControlsChartOfAccount(EntryControlsChartOfAccount instance);
  partial void DeleteEntryControlsChartOfAccount(EntryControlsChartOfAccount instance);
  partial void InsertEntryType(EntryType instance);
  partial void UpdateEntryType(EntryType instance);
  partial void DeleteEntryType(EntryType instance);
  partial void InsertFacturePolicyNumber(FacturePolicyNumber instance);
  partial void UpdateFacturePolicyNumber(FacturePolicyNumber instance);
  partial void DeleteFacturePolicyNumber(FacturePolicyNumber instance);
  partial void InsertFacture(Facture instance);
  partial void UpdateFacture(Facture instance);
  partial void DeleteFacture(Facture instance);
  partial void InsertFactureSpecification(FactureSpecification instance);
  partial void UpdateFactureSpecification(FactureSpecification instance);
  partial void DeleteFactureSpecification(FactureSpecification instance);
  partial void InsertForm(Form instance);
  partial void UpdateForm(Form instance);
  partial void DeleteForm(Form instance);
  partial void InsertHistoryCashDeskLogBookItem(HistoryCashDeskLogBookItem instance);
  partial void UpdateHistoryCashDeskLogBookItem(HistoryCashDeskLogBookItem instance);
  partial void DeleteHistoryCashDeskLogBookItem(HistoryCashDeskLogBookItem instance);
  partial void InsertHistoryItemOriginalCost(HistoryItemOriginalCost instance);
  partial void UpdateHistoryItemOriginalCost(HistoryItemOriginalCost instance);
  partial void DeleteHistoryItemOriginalCost(HistoryItemOriginalCost instance);
  partial void InsertHistorySalary(HistorySalary instance);
  partial void UpdateHistorySalary(HistorySalary instance);
  partial void DeleteHistorySalary(HistorySalary instance);
  partial void InsertIndebtPerson(IndebtPerson instance);
  partial void UpdateIndebtPerson(IndebtPerson instance);
  partial void DeleteIndebtPerson(IndebtPerson instance);
  partial void InsertIntershipType(IntershipType instance);
  partial void UpdateIntershipType(IntershipType instance);
  partial void DeleteIntershipType(IntershipType instance);
  partial void InsertItemCostForRestaurant(ItemCostForRestaurant instance);
  partial void UpdateItemCostForRestaurant(ItemCostForRestaurant instance);
  partial void DeleteItemCostForRestaurant(ItemCostForRestaurant instance);
  partial void InsertItemGroup(ItemGroup instance);
  partial void UpdateItemGroup(ItemGroup instance);
  partial void DeleteItemGroup(ItemGroup instance);
  partial void InsertItemOriginalCost(ItemOriginalCost instance);
  partial void UpdateItemOriginalCost(ItemOriginalCost instance);
  partial void DeleteItemOriginalCost(ItemOriginalCost instance);
  partial void InsertItem(Item instance);
  partial void UpdateItem(Item instance);
  partial void DeleteItem(Item instance);
  partial void InsertItemSubGroup(ItemSubGroup instance);
  partial void UpdateItemSubGroup(ItemSubGroup instance);
  partial void DeleteItemSubGroup(ItemSubGroup instance);
  partial void InsertLevellingItem(LevellingItem instance);
  partial void UpdateLevellingItem(LevellingItem instance);
  partial void DeleteLevellingItem(LevellingItem instance);
  partial void InsertLevelling(Levelling instance);
  partial void UpdateLevelling(Levelling instance);
  partial void DeleteLevelling(Levelling instance);
  partial void InsertLocation(Location instance);
  partial void UpdateLocation(Location instance);
  partial void DeleteLocation(Location instance);
  partial void InsertMaterialDocumentSubType(MaterialDocumentSubType instance);
  partial void UpdateMaterialDocumentSubType(MaterialDocumentSubType instance);
  partial void DeleteMaterialDocumentSubType(MaterialDocumentSubType instance);
  partial void InsertMaterialDocumentType(MaterialDocumentType instance);
  partial void UpdateMaterialDocumentType(MaterialDocumentType instance);
  partial void DeleteMaterialDocumentType(MaterialDocumentType instance);
  partial void InsertMaterialFacture(MaterialFacture instance);
  partial void UpdateMaterialFacture(MaterialFacture instance);
  partial void DeleteMaterialFacture(MaterialFacture instance);
  partial void InsertMonthlyData(MonthlyData instance);
  partial void UpdateMonthlyData(MonthlyData instance);
  partial void DeleteMonthlyData(MonthlyData instance);
  partial void InsertMonthlyWithholding(MonthlyWithholding instance);
  partial void UpdateMonthlyWithholding(MonthlyWithholding instance);
  partial void DeleteMonthlyWithholding(MonthlyWithholding instance);
  partial void InsertMPINCompanyInformation(MPINCompanyInformation instance);
  partial void UpdateMPINCompanyInformation(MPINCompanyInformation instance);
  partial void DeleteMPINCompanyInformation(MPINCompanyInformation instance);
  partial void InsertMunicipality(Municipality instance);
  partial void UpdateMunicipality(Municipality instance);
  partial void DeleteMunicipality(Municipality instance);
  partial void InsertNationality(Nationality instance);
  partial void UpdateNationality(Nationality instance);
  partial void DeleteNationality(Nationality instance);
  partial void InsertNormative(Normative instance);
  partial void UpdateNormative(Normative instance);
  partial void DeleteNormative(Normative instance);
  partial void InsertNormativesItem(NormativesItem instance);
  partial void UpdateNormativesItem(NormativesItem instance);
  partial void DeleteNormativesItem(NormativesItem instance);
  partial void InsertOrderItem(OrderItem instance);
  partial void UpdateOrderItem(OrderItem instance);
  partial void DeleteOrderItem(OrderItem instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  partial void InsertOutgoingFactureItem(OutgoingFactureItem instance);
  partial void UpdateOutgoingFactureItem(OutgoingFactureItem instance);
  partial void DeleteOutgoingFactureItem(OutgoingFactureItem instance);
  partial void InsertOutgoingFacture(OutgoingFacture instance);
  partial void UpdateOutgoingFacture(OutgoingFacture instance);
  partial void DeleteOutgoingFacture(OutgoingFacture instance);
  partial void InsertParameterBindableValue(ParameterBindableValue instance);
  partial void UpdateParameterBindableValue(ParameterBindableValue instance);
  partial void DeleteParameterBindableValue(ParameterBindableValue instance);
  partial void InsertParameter(Parameter instance);
  partial void UpdateParameter(Parameter instance);
  partial void DeleteParameter(Parameter instance);
  partial void InsertPaymentForm(PaymentForm instance);
  partial void UpdatePaymentForm(PaymentForm instance);
  partial void DeletePaymentForm(PaymentForm instance);
  partial void InsertPaymentType(PaymentType instance);
  partial void UpdatePaymentType(PaymentType instance);
  partial void DeletePaymentType(PaymentType instance);
  partial void InsertPayOffItem(PayOffItem instance);
  partial void UpdatePayOffItem(PayOffItem instance);
  partial void DeletePayOffItem(PayOffItem instance);
  partial void InsertPayOff(PayOff instance);
  partial void UpdatePayOff(PayOff instance);
  partial void DeletePayOff(PayOff instance);
  partial void InsertPayOffStoreWorkUnit(PayOffStoreWorkUnit instance);
  partial void UpdatePayOffStoreWorkUnit(PayOffStoreWorkUnit instance);
  partial void DeletePayOffStoreWorkUnit(PayOffStoreWorkUnit instance);
  partial void InsertPerson(Person instance);
  partial void UpdatePerson(Person instance);
  partial void DeletePerson(Person instance);
  partial void InsertPlace(Place instance);
  partial void UpdatePlace(Place instance);
  partial void DeletePlace(Place instance);
  partial void InsertProgram(Program instance);
  partial void UpdateProgram(Program instance);
  partial void DeleteProgram(Program instance);
  partial void InsertReligion(Religion instance);
  partial void UpdateReligion(Religion instance);
  partial void DeleteReligion(Religion instance);
  partial void InsertReturnee(Returnee instance);
  partial void UpdateReturnee(Returnee instance);
  partial void DeleteReturnee(Returnee instance);
  partial void InsertReturnyItem(ReturnyItem instance);
  partial void UpdateReturnyItem(ReturnyItem instance);
  partial void DeleteReturnyItem(ReturnyItem instance);
  partial void InsertRevaluationFactor(RevaluationFactor instance);
  partial void UpdateRevaluationFactor(RevaluationFactor instance);
  partial void DeleteRevaluationFactor(RevaluationFactor instance);
  partial void InsertRole(Role instance);
  partial void UpdateRole(Role instance);
  partial void DeleteRole(Role instance);
  partial void InsertRolesFunction(RolesFunction instance);
  partial void UpdateRolesFunction(RolesFunction instance);
  partial void DeleteRolesFunction(RolesFunction instance);
  partial void InsertSalary(Salary instance);
  partial void UpdateSalary(Salary instance);
  partial void DeleteSalary(Salary instance);
  partial void InsertSalaryParameter(SalaryParameter instance);
  partial void UpdateSalaryParameter(SalaryParameter instance);
  partial void DeleteSalaryParameter(SalaryParameter instance);
  partial void InsertSector(Sector instance);
  partial void UpdateSector(Sector instance);
  partial void DeleteSector(Sector instance);
  partial void InsertStateHoliday(StateHoliday instance);
  partial void UpdateStateHoliday(StateHoliday instance);
  partial void DeleteStateHoliday(StateHoliday instance);
  partial void InsertStateHolidaysNationality(StateHolidaysNationality instance);
  partial void UpdateStateHolidaysNationality(StateHolidaysNationality instance);
  partial void DeleteStateHolidaysNationality(StateHolidaysNationality instance);
  partial void InsertStateHolidaysReligion(StateHolidaysReligion instance);
  partial void UpdateStateHolidaysReligion(StateHolidaysReligion instance);
  partial void DeleteStateHolidaysReligion(StateHolidaysReligion instance);
  partial void InsertState(State instance);
  partial void UpdateState(State instance);
  partial void DeleteState(State instance);
  partial void InsertStoreEntanceItem(StoreEntanceItem instance);
  partial void UpdateStoreEntanceItem(StoreEntanceItem instance);
  partial void DeleteStoreEntanceItem(StoreEntanceItem instance);
  partial void InsertStoreEntancesFacture(StoreEntancesFacture instance);
  partial void UpdateStoreEntancesFacture(StoreEntancesFacture instance);
  partial void DeleteStoreEntancesFacture(StoreEntancesFacture instance);
  partial void InsertStorePayOffItem(StorePayOffItem instance);
  partial void UpdateStorePayOffItem(StorePayOffItem instance);
  partial void DeleteStorePayOffItem(StorePayOffItem instance);
  partial void InsertStorePayOff(StorePayOff instance);
  partial void UpdateStorePayOff(StorePayOff instance);
  partial void DeleteStorePayOff(StorePayOff instance);
  partial void InsertStoreReturnee(StoreReturnee instance);
  partial void UpdateStoreReturnee(StoreReturnee instance);
  partial void DeleteStoreReturnee(StoreReturnee instance);
  partial void InsertStoreReturnyItem(StoreReturnyItem instance);
  partial void UpdateStoreReturnyItem(StoreReturnyItem instance);
  partial void DeleteStoreReturnyItem(StoreReturnyItem instance);
  partial void InsertStoreWorkUnitEntrance(StoreWorkUnitEntrance instance);
  partial void UpdateStoreWorkUnitEntrance(StoreWorkUnitEntrance instance);
  partial void DeleteStoreWorkUnitEntrance(StoreWorkUnitEntrance instance);
  partial void InsertStoreWorkUnitEntrancesFacture(StoreWorkUnitEntrancesFacture instance);
  partial void UpdateStoreWorkUnitEntrancesFacture(StoreWorkUnitEntrancesFacture instance);
  partial void DeleteStoreWorkUnitEntrancesFacture(StoreWorkUnitEntrancesFacture instance);
  partial void InsertTableName(TableName instance);
  partial void UpdateTableName(TableName instance);
  partial void DeleteTableName(TableName instance);
  partial void InsertTemporaryCapitalAssetsCard(TemporaryCapitalAssetsCard instance);
  partial void UpdateTemporaryCapitalAssetsCard(TemporaryCapitalAssetsCard instance);
  partial void DeleteTemporaryCapitalAssetsCard(TemporaryCapitalAssetsCard instance);
  partial void InsertUnit(Unit instance);
  partial void UpdateUnit(Unit instance);
  partial void DeleteUnit(Unit instance);
  partial void InsertUserLog(UserLog instance);
  partial void UpdateUserLog(UserLog instance);
  partial void DeleteUserLog(UserLog instance);
  partial void InsertVariableType(VariableType instance);
  partial void UpdateVariableType(VariableType instance);
  partial void DeleteVariableType(VariableType instance);
  partial void InsertWithholding(Withholding instance);
  partial void UpdateWithholding(Withholding instance);
  partial void DeleteWithholding(Withholding instance);
  partial void InsertWorkPosition(WorkPosition instance);
  partial void UpdateWorkPosition(WorkPosition instance);
  partial void DeleteWorkPosition(WorkPosition instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public FinansovoDataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ASUCBrokerFinansovoConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public FinansovoDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FinansovoDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FinansovoDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FinansovoDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<AbesceType> AbesceTypes
	{
		get
		{
			return this.GetTable<AbesceType>();
		}
	}
	
	public System.Data.Linq.Table<WorkUnit> WorkUnits
	{
		get
		{
			return this.GetTable<WorkUnit>();
		}
	}
	
	public System.Data.Linq.Table<Absence> Absences
	{
		get
		{
			return this.GetTable<Absence>();
		}
	}
	
	public System.Data.Linq.Table<AbsencesPercentage> AbsencesPercentages
	{
		get
		{
			return this.GetTable<AbsencesPercentage>();
		}
	}
	
	public System.Data.Linq.Table<Account> Accounts
	{
		get
		{
			return this.GetTable<Account>();
		}
	}
	
	public System.Data.Linq.Table<AccountsItem> AccountsItems
	{
		get
		{
			return this.GetTable<AccountsItem>();
		}
	}
	
	public System.Data.Linq.Table<Action> Actions
	{
		get
		{
			return this.GetTable<Action>();
		}
	}
	
	public System.Data.Linq.Table<AdvanceInvoiceItem> AdvanceInvoiceItems
	{
		get
		{
			return this.GetTable<AdvanceInvoiceItem>();
		}
	}
	
	public System.Data.Linq.Table<AdvanceInvoice> AdvanceInvoices
	{
		get
		{
			return this.GetTable<AdvanceInvoice>();
		}
	}
	
	public System.Data.Linq.Table<Algorithm> Algorithms
	{
		get
		{
			return this.GetTable<Algorithm>();
		}
	}
	
	public System.Data.Linq.Table<Allowance> Allowances
	{
		get
		{
			return this.GetTable<Allowance>();
		}
	}
	
	public System.Data.Linq.Table<AllowanceType> AllowanceTypes
	{
		get
		{
			return this.GetTable<AllowanceType>();
		}
	}
	
	public System.Data.Linq.Table<AmortizationGroup> AmortizationGroups
	{
		get
		{
			return this.GetTable<AmortizationGroup>();
		}
	}
	
	public System.Data.Linq.Table<BalanceCarriedForward> BalanceCarriedForwards
	{
		get
		{
			return this.GetTable<BalanceCarriedForward>();
		}
	}
	
	public System.Data.Linq.Table<Bank> Banks
	{
		get
		{
			return this.GetTable<Bank>();
		}
	}
	
	public System.Data.Linq.Table<Branch> Branches
	{
		get
		{
			return this.GetTable<Branch>();
		}
	}
	
	public System.Data.Linq.Table<BrokerABAccountFacturesSetup> BrokerABAccountFacturesSetups
	{
		get
		{
			return this.GetTable<BrokerABAccountFacturesSetup>();
		}
	}
	
	public System.Data.Linq.Table<BrokerABCashSetup> BrokerABCashSetups
	{
		get
		{
			return this.GetTable<BrokerABCashSetup>();
		}
	}
	
	public System.Data.Linq.Table<BrokerABCreditCardsSetup> BrokerABCreditCardsSetups
	{
		get
		{
			return this.GetTable<BrokerABCreditCardsSetup>();
		}
	}
	
	public System.Data.Linq.Table<BrokerABIncomeFacturesForExpencesSetup> BrokerABIncomeFacturesForExpencesSetups
	{
		get
		{
			return this.GetTable<BrokerABIncomeFacturesForExpencesSetup>();
		}
	}
	
	public System.Data.Linq.Table<BrokerABIncomeFacturesSetup> BrokerABIncomeFacturesSetups
	{
		get
		{
			return this.GetTable<BrokerABIncomeFacturesSetup>();
		}
	}
	
	public System.Data.Linq.Table<CapitalAssetsCardAmortization> CapitalAssetsCardAmortizations
	{
		get
		{
			return this.GetTable<CapitalAssetsCardAmortization>();
		}
	}
	
	public System.Data.Linq.Table<CapitalAssetsCardRevaluation> CapitalAssetsCardRevaluations
	{
		get
		{
			return this.GetTable<CapitalAssetsCardRevaluation>();
		}
	}
	
	public System.Data.Linq.Table<CapitalAssetsCard> CapitalAssetsCards
	{
		get
		{
			return this.GetTable<CapitalAssetsCard>();
		}
	}
	
	public System.Data.Linq.Table<CashDeskEntryDescription> CashDeskEntryDescriptions
	{
		get
		{
			return this.GetTable<CashDeskEntryDescription>();
		}
	}
	
	public System.Data.Linq.Table<CashDeskEntryType> CashDeskEntryTypes
	{
		get
		{
			return this.GetTable<CashDeskEntryType>();
		}
	}
	
	public System.Data.Linq.Table<CashDeskLogbookItem> CashDeskLogbookItems
	{
		get
		{
			return this.GetTable<CashDeskLogbookItem>();
		}
	}
	
	public System.Data.Linq.Table<CashDeskLogbook> CashDeskLogbooks
	{
		get
		{
			return this.GetTable<CashDeskLogbook>();
		}
	}
	
	public System.Data.Linq.Table<CashDeskPerson> CashDeskPersons
	{
		get
		{
			return this.GetTable<CashDeskPerson>();
		}
	}
	
	public System.Data.Linq.Table<CashDeskType> CashDeskTypes
	{
		get
		{
			return this.GetTable<CashDeskType>();
		}
	}
	
	public System.Data.Linq.Table<CashPaymentItem> CashPaymentItems
	{
		get
		{
			return this.GetTable<CashPaymentItem>();
		}
	}
	
	public System.Data.Linq.Table<CashPayment> CashPayments
	{
		get
		{
			return this.GetTable<CashPayment>();
		}
	}
	
	public System.Data.Linq.Table<ChartOfAccount> ChartOfAccounts
	{
		get
		{
			return this.GetTable<ChartOfAccount>();
		}
	}
	
	public System.Data.Linq.Table<ChartOfAccountsDocumentType> ChartOfAccountsDocumentTypes
	{
		get
		{
			return this.GetTable<ChartOfAccountsDocumentType>();
		}
	}
	
	public System.Data.Linq.Table<Client> Clients
	{
		get
		{
			return this.GetTable<Client>();
		}
	}
	
	public System.Data.Linq.Table<ClientsBank> ClientsBanks
	{
		get
		{
			return this.GetTable<ClientsBank>();
		}
	}
	
	public System.Data.Linq.Table<Company> Companies
	{
		get
		{
			return this.GetTable<Company>();
		}
	}
	
	public System.Data.Linq.Table<CompanyAccount> CompanyAccounts
	{
		get
		{
			return this.GetTable<CompanyAccount>();
		}
	}
	
	public System.Data.Linq.Table<CompanyAccountsUser> CompanyAccountsUsers
	{
		get
		{
			return this.GetTable<CompanyAccountsUser>();
		}
	}
	
	public System.Data.Linq.Table<Contribution> Contributions
	{
		get
		{
			return this.GetTable<Contribution>();
		}
	}
	
	public System.Data.Linq.Table<CostClass> CostClasses
	{
		get
		{
			return this.GetTable<CostClass>();
		}
	}
	
	public System.Data.Linq.Table<CostSubType> CostSubTypes
	{
		get
		{
			return this.GetTable<CostSubType>();
		}
	}
	
	public System.Data.Linq.Table<CostType> CostTypes
	{
		get
		{
			return this.GetTable<CostType>();
		}
	}
	
	public System.Data.Linq.Table<Currency> Currencies
	{
		get
		{
			return this.GetTable<Currency>();
		}
	}
	
	public System.Data.Linq.Table<DDVType> DDVTypes
	{
		get
		{
			return this.GetTable<DDVType>();
		}
	}
	
	public System.Data.Linq.Table<DDVtypesChartOfAccount> DDVtypesChartOfAccounts
	{
		get
		{
			return this.GetTable<DDVtypesChartOfAccount>();
		}
	}
	
	public System.Data.Linq.Table<DocumentType> DocumentTypes
	{
		get
		{
			return this.GetTable<DocumentType>();
		}
	}
	
	public System.Data.Linq.Table<Employee> Employees
	{
		get
		{
			return this.GetTable<Employee>();
		}
	}
	
	public System.Data.Linq.Table<EntranceExpence> EntranceExpences
	{
		get
		{
			return this.GetTable<EntranceExpence>();
		}
	}
	
	public System.Data.Linq.Table<EntranceFacture> EntranceFactures
	{
		get
		{
			return this.GetTable<EntranceFacture>();
		}
	}
	
	public System.Data.Linq.Table<EntranceItem> EntranceItems
	{
		get
		{
			return this.GetTable<EntranceItem>();
		}
	}
	
	public System.Data.Linq.Table<Entrance> Entrances
	{
		get
		{
			return this.GetTable<Entrance>();
		}
	}
	
	public System.Data.Linq.Table<EntranceSubExpence> EntranceSubExpences
	{
		get
		{
			return this.GetTable<EntranceSubExpence>();
		}
	}
	
	public System.Data.Linq.Table<EntryControl> EntryControls
	{
		get
		{
			return this.GetTable<EntryControl>();
		}
	}
	
	public System.Data.Linq.Table<EntryControlsChartOfAccount> EntryControlsChartOfAccounts
	{
		get
		{
			return this.GetTable<EntryControlsChartOfAccount>();
		}
	}
	
	public System.Data.Linq.Table<EntryType> EntryTypes
	{
		get
		{
			return this.GetTable<EntryType>();
		}
	}
	
	public System.Data.Linq.Table<FacturePolicyNumber> FacturePolicyNumbers
	{
		get
		{
			return this.GetTable<FacturePolicyNumber>();
		}
	}
	
	public System.Data.Linq.Table<Facture> Factures
	{
		get
		{
			return this.GetTable<Facture>();
		}
	}
	
	public System.Data.Linq.Table<FactureSpecification> FactureSpecifications
	{
		get
		{
			return this.GetTable<FactureSpecification>();
		}
	}
	
	public System.Data.Linq.Table<Form> Forms
	{
		get
		{
			return this.GetTable<Form>();
		}
	}
	
	public System.Data.Linq.Table<HistoryCashDeskLogBookItem> HistoryCashDeskLogBookItems
	{
		get
		{
			return this.GetTable<HistoryCashDeskLogBookItem>();
		}
	}
	
	public System.Data.Linq.Table<HistoryItemOriginalCost> HistoryItemOriginalCosts
	{
		get
		{
			return this.GetTable<HistoryItemOriginalCost>();
		}
	}
	
	public System.Data.Linq.Table<HistorySalary> HistorySalaries
	{
		get
		{
			return this.GetTable<HistorySalary>();
		}
	}
	
	public System.Data.Linq.Table<IndebtPerson> IndebtPersons
	{
		get
		{
			return this.GetTable<IndebtPerson>();
		}
	}
	
	public System.Data.Linq.Table<IntershipType> IntershipTypes
	{
		get
		{
			return this.GetTable<IntershipType>();
		}
	}
	
	public System.Data.Linq.Table<ItemCostForRestaurant> ItemCostForRestaurants
	{
		get
		{
			return this.GetTable<ItemCostForRestaurant>();
		}
	}
	
	public System.Data.Linq.Table<ItemGroup> ItemGroups
	{
		get
		{
			return this.GetTable<ItemGroup>();
		}
	}
	
	public System.Data.Linq.Table<ItemOriginalCost> ItemOriginalCosts
	{
		get
		{
			return this.GetTable<ItemOriginalCost>();
		}
	}
	
	public System.Data.Linq.Table<Item> Items
	{
		get
		{
			return this.GetTable<Item>();
		}
	}
	
	public System.Data.Linq.Table<ItemSubGroup> ItemSubGroups
	{
		get
		{
			return this.GetTable<ItemSubGroup>();
		}
	}
	
	public System.Data.Linq.Table<LevellingItem> LevellingItems
	{
		get
		{
			return this.GetTable<LevellingItem>();
		}
	}
	
	public System.Data.Linq.Table<Levelling> Levellings
	{
		get
		{
			return this.GetTable<Levelling>();
		}
	}
	
	public System.Data.Linq.Table<Location> Locations
	{
		get
		{
			return this.GetTable<Location>();
		}
	}
	
	public System.Data.Linq.Table<MaterialBalanceReport> MaterialBalanceReports
	{
		get
		{
			return this.GetTable<MaterialBalanceReport>();
		}
	}
	
	public System.Data.Linq.Table<MaterialDocumentSubType> MaterialDocumentSubTypes
	{
		get
		{
			return this.GetTable<MaterialDocumentSubType>();
		}
	}
	
	public System.Data.Linq.Table<MaterialDocumentType> MaterialDocumentTypes
	{
		get
		{
			return this.GetTable<MaterialDocumentType>();
		}
	}
	
	public System.Data.Linq.Table<MaterialFacture> MaterialFactures
	{
		get
		{
			return this.GetTable<MaterialFacture>();
		}
	}
	
	public System.Data.Linq.Table<MonthlyData> MonthlyDatas
	{
		get
		{
			return this.GetTable<MonthlyData>();
		}
	}
	
	public System.Data.Linq.Table<MonthlyWithholding> MonthlyWithholdings
	{
		get
		{
			return this.GetTable<MonthlyWithholding>();
		}
	}
	
	public System.Data.Linq.Table<MPINCompanyInformation> MPINCompanyInformations
	{
		get
		{
			return this.GetTable<MPINCompanyInformation>();
		}
	}
	
	public System.Data.Linq.Table<Municipality> Municipalities
	{
		get
		{
			return this.GetTable<Municipality>();
		}
	}
	
	public System.Data.Linq.Table<Nationality> Nationalities
	{
		get
		{
			return this.GetTable<Nationality>();
		}
	}
	
	public System.Data.Linq.Table<Normative> Normatives
	{
		get
		{
			return this.GetTable<Normative>();
		}
	}
	
	public System.Data.Linq.Table<NormativesItem> NormativesItems
	{
		get
		{
			return this.GetTable<NormativesItem>();
		}
	}
	
	public System.Data.Linq.Table<OrderItem> OrderItems
	{
		get
		{
			return this.GetTable<OrderItem>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<OutgoingFactureItem> OutgoingFactureItems
	{
		get
		{
			return this.GetTable<OutgoingFactureItem>();
		}
	}
	
	public System.Data.Linq.Table<OutgoingFacture> OutgoingFactures
	{
		get
		{
			return this.GetTable<OutgoingFacture>();
		}
	}
	
	public System.Data.Linq.Table<ParameterBindableValue> ParameterBindableValues
	{
		get
		{
			return this.GetTable<ParameterBindableValue>();
		}
	}
	
	public System.Data.Linq.Table<Parameter> Parameters
	{
		get
		{
			return this.GetTable<Parameter>();
		}
	}
	
	public System.Data.Linq.Table<PaymentForm> PaymentForms
	{
		get
		{
			return this.GetTable<PaymentForm>();
		}
	}
	
	public System.Data.Linq.Table<PaymentType> PaymentTypes
	{
		get
		{
			return this.GetTable<PaymentType>();
		}
	}
	
	public System.Data.Linq.Table<PayOffItem> PayOffItems
	{
		get
		{
			return this.GetTable<PayOffItem>();
		}
	}
	
	public System.Data.Linq.Table<PayOff> PayOffs
	{
		get
		{
			return this.GetTable<PayOff>();
		}
	}
	
	public System.Data.Linq.Table<PayOffStoreWorkUnit> PayOffStoreWorkUnits
	{
		get
		{
			return this.GetTable<PayOffStoreWorkUnit>();
		}
	}
	
	public System.Data.Linq.Table<Person> Persons
	{
		get
		{
			return this.GetTable<Person>();
		}
	}
	
	public System.Data.Linq.Table<Place> Places
	{
		get
		{
			return this.GetTable<Place>();
		}
	}
	
	public System.Data.Linq.Table<Program> Programs
	{
		get
		{
			return this.GetTable<Program>();
		}
	}
	
	public System.Data.Linq.Table<Religion> Religions
	{
		get
		{
			return this.GetTable<Religion>();
		}
	}
	
	public System.Data.Linq.Table<Returnee> Returnees
	{
		get
		{
			return this.GetTable<Returnee>();
		}
	}
	
	public System.Data.Linq.Table<ReturnyItem> ReturnyItems
	{
		get
		{
			return this.GetTable<ReturnyItem>();
		}
	}
	
	public System.Data.Linq.Table<RevaluationFactor> RevaluationFactors
	{
		get
		{
			return this.GetTable<RevaluationFactor>();
		}
	}
	
	public System.Data.Linq.Table<Role> Roles
	{
		get
		{
			return this.GetTable<Role>();
		}
	}
	
	public System.Data.Linq.Table<RolesFunction> RolesFunctions
	{
		get
		{
			return this.GetTable<RolesFunction>();
		}
	}
	
	public System.Data.Linq.Table<Salary> Salaries
	{
		get
		{
			return this.GetTable<Salary>();
		}
	}
	
	public System.Data.Linq.Table<SalaryParameter> SalaryParameters
	{
		get
		{
			return this.GetTable<SalaryParameter>();
		}
	}
	
	public System.Data.Linq.Table<Sector> Sectors
	{
		get
		{
			return this.GetTable<Sector>();
		}
	}
	
	public System.Data.Linq.Table<StateHoliday> StateHolidays
	{
		get
		{
			return this.GetTable<StateHoliday>();
		}
	}
	
	public System.Data.Linq.Table<StateHolidaysNationality> StateHolidaysNationalities
	{
		get
		{
			return this.GetTable<StateHolidaysNationality>();
		}
	}
	
	public System.Data.Linq.Table<StateHolidaysReligion> StateHolidaysReligions
	{
		get
		{
			return this.GetTable<StateHolidaysReligion>();
		}
	}
	
	public System.Data.Linq.Table<State> States
	{
		get
		{
			return this.GetTable<State>();
		}
	}
	
	public System.Data.Linq.Table<StoreEntanceItem> StoreEntanceItems
	{
		get
		{
			return this.GetTable<StoreEntanceItem>();
		}
	}
	
	public System.Data.Linq.Table<StoreEntancesFacture> StoreEntancesFactures
	{
		get
		{
			return this.GetTable<StoreEntancesFacture>();
		}
	}
	
	public System.Data.Linq.Table<StorePayOffItem> StorePayOffItems
	{
		get
		{
			return this.GetTable<StorePayOffItem>();
		}
	}
	
	public System.Data.Linq.Table<StorePayOff> StorePayOffs
	{
		get
		{
			return this.GetTable<StorePayOff>();
		}
	}
	
	public System.Data.Linq.Table<StoreReturnee> StoreReturnees
	{
		get
		{
			return this.GetTable<StoreReturnee>();
		}
	}
	
	public System.Data.Linq.Table<StoreReturnyItem> StoreReturnyItems
	{
		get
		{
			return this.GetTable<StoreReturnyItem>();
		}
	}
	
	public System.Data.Linq.Table<StoreWorkUnitEntrance> StoreWorkUnitEntrances
	{
		get
		{
			return this.GetTable<StoreWorkUnitEntrance>();
		}
	}
	
	public System.Data.Linq.Table<StoreWorkUnitEntrancesFacture> StoreWorkUnitEntrancesFactures
	{
		get
		{
			return this.GetTable<StoreWorkUnitEntrancesFacture>();
		}
	}
	
	public System.Data.Linq.Table<TableName> TableNames
	{
		get
		{
			return this.GetTable<TableName>();
		}
	}
	
	public System.Data.Linq.Table<TemporaryCapitalAssetsCard> TemporaryCapitalAssetsCards
	{
		get
		{
			return this.GetTable<TemporaryCapitalAssetsCard>();
		}
	}
	
	public System.Data.Linq.Table<Unit> Units
	{
		get
		{
			return this.GetTable<Unit>();
		}
	}
	
	public System.Data.Linq.Table<UserLog> UserLogs
	{
		get
		{
			return this.GetTable<UserLog>();
		}
	}
	
	public System.Data.Linq.Table<VariableType> VariableTypes
	{
		get
		{
			return this.GetTable<VariableType>();
		}
	}
	
	public System.Data.Linq.Table<Withholding> Withholdings
	{
		get
		{
			return this.GetTable<Withholding>();
		}
	}
	
	public System.Data.Linq.Table<WorkPosition> WorkPositions
	{
		get
		{
			return this.GetTable<WorkPosition>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AbesceTypes")]
public partial class AbesceType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Description;
	
	private string _Code;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<Absence> _Absences;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public AbesceType()
	{
		this._Absences = new EntitySet<Absence>(new Action<Absence>(this.attach_Absences), new Action<Absence>(this.detach_Absences));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AbesceType_Absence", Storage="_Absences", ThisKey="ID", OtherKey="AbsenceTypeID")]
	public EntitySet<Absence> Absences
	{
		get
		{
			return this._Absences;
		}
		set
		{
			this._Absences.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_AbesceType", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.AbesceTypes.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.AbesceTypes.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Absences(Absence entity)
	{
		this.SendPropertyChanging();
		entity.AbesceType = this;
	}
	
	private void detach_Absences(Absence entity)
	{
		this.SendPropertyChanging();
		entity.AbesceType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkUnits")]
public partial class WorkUnit : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<CapitalAssetsCard> _CapitalAssetsCards;
	
	private EntitySet<PayOff> _PayOffs;
	
	private EntitySet<Returnee> _Returnees;
	
	private EntitySet<StorePayOff> _StorePayOffs;
	
	private EntitySet<StorePayOff> _StorePayOffs1;
	
	private EntitySet<StoreReturnee> _StoreReturnees;
	
	private EntitySet<StoreReturnee> _StoreReturnees1;
	
	private EntitySet<StoreWorkUnitEntrance> _StoreWorkUnitEntrances;
	
	private EntitySet<StoreWorkUnitEntrance> _StoreWorkUnitEntrances1;
	
	private EntitySet<User> _Users;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public WorkUnit()
	{
		this._CapitalAssetsCards = new EntitySet<CapitalAssetsCard>(new Action<CapitalAssetsCard>(this.attach_CapitalAssetsCards), new Action<CapitalAssetsCard>(this.detach_CapitalAssetsCards));
		this._PayOffs = new EntitySet<PayOff>(new Action<PayOff>(this.attach_PayOffs), new Action<PayOff>(this.detach_PayOffs));
		this._Returnees = new EntitySet<Returnee>(new Action<Returnee>(this.attach_Returnees), new Action<Returnee>(this.detach_Returnees));
		this._StorePayOffs = new EntitySet<StorePayOff>(new Action<StorePayOff>(this.attach_StorePayOffs), new Action<StorePayOff>(this.detach_StorePayOffs));
		this._StorePayOffs1 = new EntitySet<StorePayOff>(new Action<StorePayOff>(this.attach_StorePayOffs1), new Action<StorePayOff>(this.detach_StorePayOffs1));
		this._StoreReturnees = new EntitySet<StoreReturnee>(new Action<StoreReturnee>(this.attach_StoreReturnees), new Action<StoreReturnee>(this.detach_StoreReturnees));
		this._StoreReturnees1 = new EntitySet<StoreReturnee>(new Action<StoreReturnee>(this.attach_StoreReturnees1), new Action<StoreReturnee>(this.detach_StoreReturnees1));
		this._StoreWorkUnitEntrances = new EntitySet<StoreWorkUnitEntrance>(new Action<StoreWorkUnitEntrance>(this.attach_StoreWorkUnitEntrances), new Action<StoreWorkUnitEntrance>(this.detach_StoreWorkUnitEntrances));
		this._StoreWorkUnitEntrances1 = new EntitySet<StoreWorkUnitEntrance>(new Action<StoreWorkUnitEntrance>(this.attach_StoreWorkUnitEntrances1), new Action<StoreWorkUnitEntrance>(this.detach_StoreWorkUnitEntrances1));
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_CapitalAssetsCard", Storage="_CapitalAssetsCards", ThisKey="ID", OtherKey="WorkUnitID")]
	public EntitySet<CapitalAssetsCard> CapitalAssetsCards
	{
		get
		{
			return this._CapitalAssetsCards;
		}
		set
		{
			this._CapitalAssetsCards.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_PayOff", Storage="_PayOffs", ThisKey="ID", OtherKey="WorkUnitID")]
	public EntitySet<PayOff> PayOffs
	{
		get
		{
			return this._PayOffs;
		}
		set
		{
			this._PayOffs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_Returnee", Storage="_Returnees", ThisKey="ID", OtherKey="WorkUnitsID")]
	public EntitySet<Returnee> Returnees
	{
		get
		{
			return this._Returnees;
		}
		set
		{
			this._Returnees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StorePayOff", Storage="_StorePayOffs", ThisKey="ID", OtherKey="WorkUnitID")]
	public EntitySet<StorePayOff> StorePayOffs
	{
		get
		{
			return this._StorePayOffs;
		}
		set
		{
			this._StorePayOffs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StorePayOff1", Storage="_StorePayOffs1", ThisKey="ID", OtherKey="WorkUnitID")]
	public EntitySet<StorePayOff> StorePayOffs1
	{
		get
		{
			return this._StorePayOffs1;
		}
		set
		{
			this._StorePayOffs1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StoreReturnee", Storage="_StoreReturnees", ThisKey="ID", OtherKey="WorkUnitID")]
	public EntitySet<StoreReturnee> StoreReturnees
	{
		get
		{
			return this._StoreReturnees;
		}
		set
		{
			this._StoreReturnees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StoreReturnee1", Storage="_StoreReturnees1", ThisKey="ID", OtherKey="ForWorkUnitID")]
	public EntitySet<StoreReturnee> StoreReturnees1
	{
		get
		{
			return this._StoreReturnees1;
		}
		set
		{
			this._StoreReturnees1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StoreWorkUnitEntrance", Storage="_StoreWorkUnitEntrances", ThisKey="ID", OtherKey="WorkUnitID")]
	public EntitySet<StoreWorkUnitEntrance> StoreWorkUnitEntrances
	{
		get
		{
			return this._StoreWorkUnitEntrances;
		}
		set
		{
			this._StoreWorkUnitEntrances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StoreWorkUnitEntrance1", Storage="_StoreWorkUnitEntrances1", ThisKey="ID", OtherKey="ForWorkUnitID")]
	public EntitySet<StoreWorkUnitEntrance> StoreWorkUnitEntrances1
	{
		get
		{
			return this._StoreWorkUnitEntrances1;
		}
		set
		{
			this._StoreWorkUnitEntrances1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_User", Storage="_Users", ThisKey="ID", OtherKey="WorkUnitID")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_WorkUnit", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.WorkUnits.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.WorkUnits.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = this;
	}
	
	private void detach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = null;
	}
	
	private void attach_PayOffs(PayOff entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = this;
	}
	
	private void detach_PayOffs(PayOff entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = null;
	}
	
	private void attach_Returnees(Returnee entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = this;
	}
	
	private void detach_Returnees(Returnee entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = null;
	}
	
	private void attach_StorePayOffs(StorePayOff entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = this;
	}
	
	private void detach_StorePayOffs(StorePayOff entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = null;
	}
	
	private void attach_StorePayOffs1(StorePayOff entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit1 = this;
	}
	
	private void detach_StorePayOffs1(StorePayOff entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit1 = null;
	}
	
	private void attach_StoreReturnees(StoreReturnee entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = this;
	}
	
	private void detach_StoreReturnees(StoreReturnee entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = null;
	}
	
	private void attach_StoreReturnees1(StoreReturnee entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit1 = this;
	}
	
	private void detach_StoreReturnees1(StoreReturnee entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit1 = null;
	}
	
	private void attach_StoreWorkUnitEntrances(StoreWorkUnitEntrance entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = this;
	}
	
	private void detach_StoreWorkUnitEntrances(StoreWorkUnitEntrance entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = null;
	}
	
	private void attach_StoreWorkUnitEntrances1(StoreWorkUnitEntrance entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit1 = this;
	}
	
	private void detach_StoreWorkUnitEntrances1(StoreWorkUnitEntrance entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit1 = null;
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.WorkUnit = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Absences")]
public partial class Absence : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _AbsenceTypeID;
	
	private System.DateTime _StartDate;
	
	private System.DateTime _EndDate;
	
	private int _Hours;
	
	private int _EmployeeID;
	
	private System.Nullable<int> _CompanyID;
	
	private EntityRef<AbesceType> _AbesceType;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Employee> _Employee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAbsenceTypeIDChanging(int value);
    partial void OnAbsenceTypeIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnHoursChanging(int value);
    partial void OnHoursChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Absence()
	{
		this._AbesceType = default(EntityRef<AbesceType>);
		this._Company = default(EntityRef<Company>);
		this._Employee = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbsenceTypeID", DbType="Int NOT NULL")]
	public int AbsenceTypeID
	{
		get
		{
			return this._AbsenceTypeID;
		}
		set
		{
			if ((this._AbsenceTypeID != value))
			{
				if (this._AbesceType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAbsenceTypeIDChanging(value);
				this.SendPropertyChanging();
				this._AbsenceTypeID = value;
				this.SendPropertyChanged("AbsenceTypeID");
				this.OnAbsenceTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
	public System.DateTime StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
	public System.DateTime EndDate
	{
		get
		{
			return this._EndDate;
		}
		set
		{
			if ((this._EndDate != value))
			{
				this.OnEndDateChanging(value);
				this.SendPropertyChanging();
				this._EndDate = value;
				this.SendPropertyChanged("EndDate");
				this.OnEndDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hours", DbType="Int NOT NULL")]
	public int Hours
	{
		get
		{
			return this._Hours;
		}
		set
		{
			if ((this._Hours != value))
			{
				this.OnHoursChanging(value);
				this.SendPropertyChanging();
				this._Hours = value;
				this.SendPropertyChanged("Hours");
				this.OnHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
	public int EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AbesceType_Absence", Storage="_AbesceType", ThisKey="AbsenceTypeID", OtherKey="ID", IsForeignKey=true)]
	public AbesceType AbesceType
	{
		get
		{
			return this._AbesceType.Entity;
		}
		set
		{
			AbesceType previousValue = this._AbesceType.Entity;
			if (((previousValue != value) 
						|| (this._AbesceType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._AbesceType.Entity = null;
					previousValue.Absences.Remove(this);
				}
				this._AbesceType.Entity = value;
				if ((value != null))
				{
					value.Absences.Add(this);
					this._AbsenceTypeID = value.ID;
				}
				else
				{
					this._AbsenceTypeID = default(int);
				}
				this.SendPropertyChanged("AbesceType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Absence", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Absences.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Absences.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Absence", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Absences.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Absences.Add(this);
					this._EmployeeID = value.ID;
				}
				else
				{
					this._EmployeeID = default(int);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AbsencesPercentage")]
public partial class AbsencesPercentage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private int _FromDays;
	
	private int _ToDays;
	
	private decimal _Percentage;
	
	private string _Description;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnFromDaysChanging(int value);
    partial void OnFromDaysChanged();
    partial void OnToDaysChanging(int value);
    partial void OnToDaysChanged();
    partial void OnPercentageChanging(decimal value);
    partial void OnPercentageChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public AbsencesPercentage()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDays", DbType="Int NOT NULL")]
	public int FromDays
	{
		get
		{
			return this._FromDays;
		}
		set
		{
			if ((this._FromDays != value))
			{
				this.OnFromDaysChanging(value);
				this.SendPropertyChanging();
				this._FromDays = value;
				this.SendPropertyChanged("FromDays");
				this.OnFromDaysChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDays", DbType="Int NOT NULL")]
	public int ToDays
	{
		get
		{
			return this._ToDays;
		}
		set
		{
			if ((this._ToDays != value))
			{
				this.OnToDaysChanging(value);
				this.SendPropertyChanging();
				this._ToDays = value;
				this.SendPropertyChanged("ToDays");
				this.OnToDaysChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Percentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal Percentage
	{
		get
		{
			return this._Percentage;
		}
		set
		{
			if ((this._Percentage != value))
			{
				this.OnPercentageChanging(value);
				this.SendPropertyChanging();
				this._Percentage = value;
				this.SendPropertyChanged("Percentage");
				this.OnPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OrdinalNumber;
	
	private System.DateTime _DateTimeOpen;
	
	private System.Nullable<System.DateTime> _DateTimeClose;
	
	private System.Nullable<decimal> _Value;
	
	private System.Nullable<decimal> _TaxValue;
	
	private System.Nullable<decimal> _TotalValue;
	
	private bool _IsOpen;
	
	private bool _IsDiscard;
	
	private int _TableID;
	
	private int _UserID;
	
	private EntityRef<Account> _Account2;
	
	private EntitySet<AccountsItem> _AccountsItems;
	
	private EntitySet<AccountsItem> _AccountsItems1;
	
	private EntityRef<Account> _Account1;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnDateTimeOpenChanging(System.DateTime value);
    partial void OnDateTimeOpenChanged();
    partial void OnDateTimeCloseChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeCloseChanged();
    partial void OnValueChanging(System.Nullable<decimal> value);
    partial void OnValueChanged();
    partial void OnTaxValueChanging(System.Nullable<decimal> value);
    partial void OnTaxValueChanged();
    partial void OnTotalValueChanging(System.Nullable<decimal> value);
    partial void OnTotalValueChanged();
    partial void OnIsOpenChanging(bool value);
    partial void OnIsOpenChanged();
    partial void OnIsDiscardChanging(bool value);
    partial void OnIsDiscardChanged();
    partial void OnTableIDChanging(int value);
    partial void OnTableIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
	
	public Account()
	{
		this._Account2 = default(EntityRef<Account>);
		this._AccountsItems = new EntitySet<AccountsItem>(new Action<AccountsItem>(this.attach_AccountsItems), new Action<AccountsItem>(this.detach_AccountsItems));
		this._AccountsItems1 = new EntitySet<AccountsItem>(new Action<AccountsItem>(this.attach_AccountsItems1), new Action<AccountsItem>(this.detach_AccountsItems1));
		this._Account1 = default(EntityRef<Account>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				if (this._Account1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeOpen", DbType="DateTime NOT NULL")]
	public System.DateTime DateTimeOpen
	{
		get
		{
			return this._DateTimeOpen;
		}
		set
		{
			if ((this._DateTimeOpen != value))
			{
				this.OnDateTimeOpenChanging(value);
				this.SendPropertyChanging();
				this._DateTimeOpen = value;
				this.SendPropertyChanged("DateTimeOpen");
				this.OnDateTimeOpenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeClose", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateTimeClose
	{
		get
		{
			return this._DateTimeClose;
		}
		set
		{
			if ((this._DateTimeClose != value))
			{
				this.OnDateTimeCloseChanging(value);
				this.SendPropertyChanging();
				this._DateTimeClose = value;
				this.SendPropertyChanged("DateTimeClose");
				this.OnDateTimeCloseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2)")]
	public System.Nullable<decimal> Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxValue", DbType="Decimal(18,2)")]
	public System.Nullable<decimal> TaxValue
	{
		get
		{
			return this._TaxValue;
		}
		set
		{
			if ((this._TaxValue != value))
			{
				this.OnTaxValueChanging(value);
				this.SendPropertyChanging();
				this._TaxValue = value;
				this.SendPropertyChanged("TaxValue");
				this.OnTaxValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalValue", DbType="Decimal(18,2)")]
	public System.Nullable<decimal> TotalValue
	{
		get
		{
			return this._TotalValue;
		}
		set
		{
			if ((this._TotalValue != value))
			{
				this.OnTotalValueChanging(value);
				this.SendPropertyChanging();
				this._TotalValue = value;
				this.SendPropertyChanged("TotalValue");
				this.OnTotalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOpen", DbType="Bit NOT NULL")]
	public bool IsOpen
	{
		get
		{
			return this._IsOpen;
		}
		set
		{
			if ((this._IsOpen != value))
			{
				this.OnIsOpenChanging(value);
				this.SendPropertyChanging();
				this._IsOpen = value;
				this.SendPropertyChanged("IsOpen");
				this.OnIsOpenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDiscard", DbType="Bit NOT NULL")]
	public bool IsDiscard
	{
		get
		{
			return this._IsDiscard;
		}
		set
		{
			if ((this._IsDiscard != value))
			{
				this.OnIsDiscardChanging(value);
				this.SendPropertyChanging();
				this._IsDiscard = value;
				this.SendPropertyChanged("IsDiscard");
				this.OnIsDiscardChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", DbType="Int NOT NULL")]
	public int TableID
	{
		get
		{
			return this._TableID;
		}
		set
		{
			if ((this._TableID != value))
			{
				this.OnTableIDChanging(value);
				this.SendPropertyChanging();
				this._TableID = value;
				this.SendPropertyChanged("TableID");
				this.OnTableIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Account", Storage="_Account2", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
	public Account Account2
	{
		get
		{
			return this._Account2.Entity;
		}
		set
		{
			Account previousValue = this._Account2.Entity;
			if (((previousValue != value) 
						|| (this._Account2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Account2.Entity = null;
					previousValue.Account1 = null;
				}
				this._Account2.Entity = value;
				if ((value != null))
				{
					value.Account1 = this;
				}
				this.SendPropertyChanged("Account2");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountsItem", Storage="_AccountsItems", ThisKey="ID", OtherKey="AccountID")]
	public EntitySet<AccountsItem> AccountsItems
	{
		get
		{
			return this._AccountsItems;
		}
		set
		{
			this._AccountsItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountsItem1", Storage="_AccountsItems1", ThisKey="ID", OtherKey="AccountID")]
	public EntitySet<AccountsItem> AccountsItems1
	{
		get
		{
			return this._AccountsItems1;
		}
		set
		{
			this._AccountsItems1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Account", Storage="_Account1", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
	public Account Account1
	{
		get
		{
			return this._Account1.Entity;
		}
		set
		{
			Account previousValue = this._Account1.Entity;
			if (((previousValue != value) 
						|| (this._Account1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Account1.Entity = null;
					previousValue.Account2 = null;
				}
				this._Account1.Entity = value;
				if ((value != null))
				{
					value.Account2 = this;
					this._ID = value.ID;
				}
				else
				{
					this._ID = default(int);
				}
				this.SendPropertyChanged("Account1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Account", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Accounts.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Accounts.Add(this);
					this._UserID = value.ID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AccountsItems(AccountsItem entity)
	{
		this.SendPropertyChanging();
		entity.Account = this;
	}
	
	private void detach_AccountsItems(AccountsItem entity)
	{
		this.SendPropertyChanging();
		entity.Account = null;
	}
	
	private void attach_AccountsItems1(AccountsItem entity)
	{
		this.SendPropertyChanging();
		entity.Account1 = this;
	}
	
	private void detach_AccountsItems1(AccountsItem entity)
	{
		this.SendPropertyChanging();
		entity.Account1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountsItems")]
public partial class AccountsItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OrdinalNumber;
	
	private int _AccountID;
	
	private int _ItemID;
	
	private decimal _Quantity;
	
	private decimal _CostWithoutTax;
	
	private decimal _TaxValue;
	
	private decimal _TotalCost;
	
	private EntityRef<Account> _Account;
	
	private EntityRef<Account> _Account1;
	
	private EntityRef<Item> _Item;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnCostWithoutTaxChanging(decimal value);
    partial void OnCostWithoutTaxChanged();
    partial void OnTaxValueChanging(decimal value);
    partial void OnTaxValueChanged();
    partial void OnTotalCostChanging(decimal value);
    partial void OnTotalCostChanged();
    #endregion
	
	public AccountsItem()
	{
		this._Account = default(EntityRef<Account>);
		this._Account1 = default(EntityRef<Account>);
		this._Item = default(EntityRef<Item>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
	public int AccountID
	{
		get
		{
			return this._AccountID;
		}
		set
		{
			if ((this._AccountID != value))
			{
				if ((this._Account.HasLoadedOrAssignedValue || this._Account1.HasLoadedOrAssignedValue))
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAccountIDChanging(value);
				this.SendPropertyChanging();
				this._AccountID = value;
				this.SendPropertyChanged("AccountID");
				this.OnAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,4) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostWithoutTax", DbType="Decimal(18,2) NOT NULL")]
	public decimal CostWithoutTax
	{
		get
		{
			return this._CostWithoutTax;
		}
		set
		{
			if ((this._CostWithoutTax != value))
			{
				this.OnCostWithoutTaxChanging(value);
				this.SendPropertyChanging();
				this._CostWithoutTax = value;
				this.SendPropertyChanged("CostWithoutTax");
				this.OnCostWithoutTaxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxValue
	{
		get
		{
			return this._TaxValue;
		}
		set
		{
			if ((this._TaxValue != value))
			{
				this.OnTaxValueChanging(value);
				this.SendPropertyChanging();
				this._TaxValue = value;
				this.SendPropertyChanged("TaxValue");
				this.OnTaxValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal TotalCost
	{
		get
		{
			return this._TotalCost;
		}
		set
		{
			if ((this._TotalCost != value))
			{
				this.OnTotalCostChanging(value);
				this.SendPropertyChanging();
				this._TotalCost = value;
				this.SendPropertyChanged("TotalCost");
				this.OnTotalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountsItem", Storage="_Account", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
	public Account Account
	{
		get
		{
			return this._Account.Entity;
		}
		set
		{
			Account previousValue = this._Account.Entity;
			if (((previousValue != value) 
						|| (this._Account.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Account.Entity = null;
					previousValue.AccountsItems.Remove(this);
				}
				this._Account.Entity = value;
				if ((value != null))
				{
					value.AccountsItems.Add(this);
					this._AccountID = value.ID;
				}
				else
				{
					this._AccountID = default(int);
				}
				this.SendPropertyChanged("Account");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountsItem1", Storage="_Account1", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
	public Account Account1
	{
		get
		{
			return this._Account1.Entity;
		}
		set
		{
			Account previousValue = this._Account1.Entity;
			if (((previousValue != value) 
						|| (this._Account1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Account1.Entity = null;
					previousValue.AccountsItems1.Remove(this);
				}
				this._Account1.Entity = value;
				if ((value != null))
				{
					value.AccountsItems1.Add(this);
					this._AccountID = value.ID;
				}
				else
				{
					this._AccountID = default(int);
				}
				this.SendPropertyChanged("Account1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_AccountsItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.AccountsItems.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.AccountsItems.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Actions")]
public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _ActionName;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActionNameChanging(string value);
    partial void OnActionNameChanged();
    #endregion
	
	public Action()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ActionName
	{
		get
		{
			return this._ActionName;
		}
		set
		{
			if ((this._ActionName != value))
			{
				this.OnActionNameChanging(value);
				this.SendPropertyChanging();
				this._ActionName = value;
				this.SendPropertyChanged("ActionName");
				this.OnActionNameChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdvanceInvoiceItems")]
public partial class AdvanceInvoiceItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _AdvanceInvoiceID;
	
	private int _OrdinalNumber;
	
	private decimal _Quantity;
	
	private int _ItemID;
	
	private decimal _ValueInCurrency;
	
	private decimal _ValueInDenars;
	
	private int _DDVTypeID;
	
	private decimal _DDVPercentage;
	
	private decimal _SellPrice;
	
	private EntityRef<AdvanceInvoice> _AdvanceInvoice;
	
	private EntityRef<DDVType> _DDVType;
	
	private EntityRef<Item> _Item;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAdvanceInvoiceIDChanging(int value);
    partial void OnAdvanceInvoiceIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnValueInCurrencyChanging(decimal value);
    partial void OnValueInCurrencyChanged();
    partial void OnValueInDenarsChanging(decimal value);
    partial void OnValueInDenarsChanged();
    partial void OnDDVTypeIDChanging(int value);
    partial void OnDDVTypeIDChanged();
    partial void OnDDVPercentageChanging(decimal value);
    partial void OnDDVPercentageChanged();
    partial void OnSellPriceChanging(decimal value);
    partial void OnSellPriceChanged();
    #endregion
	
	public AdvanceInvoiceItem()
	{
		this._AdvanceInvoice = default(EntityRef<AdvanceInvoice>);
		this._DDVType = default(EntityRef<DDVType>);
		this._Item = default(EntityRef<Item>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvanceInvoiceID", DbType="Int NOT NULL")]
	public int AdvanceInvoiceID
	{
		get
		{
			return this._AdvanceInvoiceID;
		}
		set
		{
			if ((this._AdvanceInvoiceID != value))
			{
				if (this._AdvanceInvoice.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAdvanceInvoiceIDChanging(value);
				this.SendPropertyChanging();
				this._AdvanceInvoiceID = value;
				this.SendPropertyChanged("AdvanceInvoiceID");
				this.OnAdvanceInvoiceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueInCurrency", DbType="Decimal(18,2) NOT NULL")]
	public decimal ValueInCurrency
	{
		get
		{
			return this._ValueInCurrency;
		}
		set
		{
			if ((this._ValueInCurrency != value))
			{
				this.OnValueInCurrencyChanging(value);
				this.SendPropertyChanging();
				this._ValueInCurrency = value;
				this.SendPropertyChanged("ValueInCurrency");
				this.OnValueInCurrencyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueInDenars", DbType="Decimal(18,2) NOT NULL")]
	public decimal ValueInDenars
	{
		get
		{
			return this._ValueInDenars;
		}
		set
		{
			if ((this._ValueInDenars != value))
			{
				this.OnValueInDenarsChanging(value);
				this.SendPropertyChanging();
				this._ValueInDenars = value;
				this.SendPropertyChanged("ValueInDenars");
				this.OnValueInDenarsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDVTypeID", DbType="Int NOT NULL")]
	public int DDVTypeID
	{
		get
		{
			return this._DDVTypeID;
		}
		set
		{
			if ((this._DDVTypeID != value))
			{
				if (this._DDVType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDDVTypeIDChanging(value);
				this.SendPropertyChanging();
				this._DDVTypeID = value;
				this.SendPropertyChanged("DDVTypeID");
				this.OnDDVTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDVPercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal DDVPercentage
	{
		get
		{
			return this._DDVPercentage;
		}
		set
		{
			if ((this._DDVPercentage != value))
			{
				this.OnDDVPercentageChanging(value);
				this.SendPropertyChanging();
				this._DDVPercentage = value;
				this.SendPropertyChanged("DDVPercentage");
				this.OnDDVPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellPrice", DbType="Decimal(18,2) NOT NULL")]
	public decimal SellPrice
	{
		get
		{
			return this._SellPrice;
		}
		set
		{
			if ((this._SellPrice != value))
			{
				this.OnSellPriceChanging(value);
				this.SendPropertyChanging();
				this._SellPrice = value;
				this.SendPropertyChanged("SellPrice");
				this.OnSellPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdvanceInvoice_AdvanceInvoiceItem", Storage="_AdvanceInvoice", ThisKey="AdvanceInvoiceID", OtherKey="ID", IsForeignKey=true)]
	public AdvanceInvoice AdvanceInvoice
	{
		get
		{
			return this._AdvanceInvoice.Entity;
		}
		set
		{
			AdvanceInvoice previousValue = this._AdvanceInvoice.Entity;
			if (((previousValue != value) 
						|| (this._AdvanceInvoice.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._AdvanceInvoice.Entity = null;
					previousValue.AdvanceInvoiceItems.Remove(this);
				}
				this._AdvanceInvoice.Entity = value;
				if ((value != null))
				{
					value.AdvanceInvoiceItems.Add(this);
					this._AdvanceInvoiceID = value.ID;
				}
				else
				{
					this._AdvanceInvoiceID = default(int);
				}
				this.SendPropertyChanged("AdvanceInvoice");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DDVType_AdvanceInvoiceItem", Storage="_DDVType", ThisKey="DDVTypeID", OtherKey="ID", IsForeignKey=true)]
	public DDVType DDVType
	{
		get
		{
			return this._DDVType.Entity;
		}
		set
		{
			DDVType previousValue = this._DDVType.Entity;
			if (((previousValue != value) 
						|| (this._DDVType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DDVType.Entity = null;
					previousValue.AdvanceInvoiceItems.Remove(this);
				}
				this._DDVType.Entity = value;
				if ((value != null))
				{
					value.AdvanceInvoiceItems.Add(this);
					this._DDVTypeID = value.ID;
				}
				else
				{
					this._DDVTypeID = default(int);
				}
				this.SendPropertyChanged("DDVType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_AdvanceInvoiceItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.AdvanceInvoiceItems.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.AdvanceInvoiceItems.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdvanceInvoices")]
public partial class AdvanceInvoice : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _AdvanceInvoiceNumber;
	
	private int _ClientID;
	
	private bool _HasDescription;
	
	private string _Description;
	
	private int _CurrencyID;
	
	private decimal _CourseValue;
	
	private System.DateTime _Date;
	
	private System.Nullable<int> _OutgoingFactureID;
	
	private EntitySet<AdvanceInvoiceItem> _AdvanceInvoiceItems;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Currency> _Currency;
	
	private EntityRef<OutgoingFacture> _OutgoingFacture;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAdvanceInvoiceNumberChanging(string value);
    partial void OnAdvanceInvoiceNumberChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnHasDescriptionChanging(bool value);
    partial void OnHasDescriptionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnCourseValueChanging(decimal value);
    partial void OnCourseValueChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnOutgoingFactureIDChanging(System.Nullable<int> value);
    partial void OnOutgoingFactureIDChanged();
    #endregion
	
	public AdvanceInvoice()
	{
		this._AdvanceInvoiceItems = new EntitySet<AdvanceInvoiceItem>(new Action<AdvanceInvoiceItem>(this.attach_AdvanceInvoiceItems), new Action<AdvanceInvoiceItem>(this.detach_AdvanceInvoiceItems));
		this._Client = default(EntityRef<Client>);
		this._Currency = default(EntityRef<Currency>);
		this._OutgoingFacture = default(EntityRef<OutgoingFacture>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvanceInvoiceNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string AdvanceInvoiceNumber
	{
		get
		{
			return this._AdvanceInvoiceNumber;
		}
		set
		{
			if ((this._AdvanceInvoiceNumber != value))
			{
				this.OnAdvanceInvoiceNumberChanging(value);
				this.SendPropertyChanging();
				this._AdvanceInvoiceNumber = value;
				this.SendPropertyChanged("AdvanceInvoiceNumber");
				this.OnAdvanceInvoiceNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
	public int ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasDescription", DbType="Bit NOT NULL")]
	public bool HasDescription
	{
		get
		{
			return this._HasDescription;
		}
		set
		{
			if ((this._HasDescription != value))
			{
				this.OnHasDescriptionChanging(value);
				this.SendPropertyChanging();
				this._HasDescription = value;
				this.SendPropertyChanged("HasDescription");
				this.OnHasDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int NOT NULL")]
	public int CurrencyID
	{
		get
		{
			return this._CurrencyID;
		}
		set
		{
			if ((this._CurrencyID != value))
			{
				if (this._Currency.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCurrencyIDChanging(value);
				this.SendPropertyChanging();
				this._CurrencyID = value;
				this.SendPropertyChanged("CurrencyID");
				this.OnCurrencyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal CourseValue
	{
		get
		{
			return this._CourseValue;
		}
		set
		{
			if ((this._CourseValue != value))
			{
				this.OnCourseValueChanging(value);
				this.SendPropertyChanging();
				this._CourseValue = value;
				this.SendPropertyChanged("CourseValue");
				this.OnCourseValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutgoingFactureID", DbType="Int")]
	public System.Nullable<int> OutgoingFactureID
	{
		get
		{
			return this._OutgoingFactureID;
		}
		set
		{
			if ((this._OutgoingFactureID != value))
			{
				if (this._OutgoingFacture.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOutgoingFactureIDChanging(value);
				this.SendPropertyChanging();
				this._OutgoingFactureID = value;
				this.SendPropertyChanged("OutgoingFactureID");
				this.OnOutgoingFactureIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdvanceInvoice_AdvanceInvoiceItem", Storage="_AdvanceInvoiceItems", ThisKey="ID", OtherKey="AdvanceInvoiceID")]
	public EntitySet<AdvanceInvoiceItem> AdvanceInvoiceItems
	{
		get
		{
			return this._AdvanceInvoiceItems;
		}
		set
		{
			this._AdvanceInvoiceItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AdvanceInvoice", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.AdvanceInvoices.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.AdvanceInvoices.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(int);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_AdvanceInvoice", Storage="_Currency", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
	public Currency Currency
	{
		get
		{
			return this._Currency.Entity;
		}
		set
		{
			Currency previousValue = this._Currency.Entity;
			if (((previousValue != value) 
						|| (this._Currency.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Currency.Entity = null;
					previousValue.AdvanceInvoices.Remove(this);
				}
				this._Currency.Entity = value;
				if ((value != null))
				{
					value.AdvanceInvoices.Add(this);
					this._CurrencyID = value.ID;
				}
				else
				{
					this._CurrencyID = default(int);
				}
				this.SendPropertyChanged("Currency");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutgoingFacture_AdvanceInvoice", Storage="_OutgoingFacture", ThisKey="OutgoingFactureID", OtherKey="ID", IsForeignKey=true)]
	public OutgoingFacture OutgoingFacture
	{
		get
		{
			return this._OutgoingFacture.Entity;
		}
		set
		{
			OutgoingFacture previousValue = this._OutgoingFacture.Entity;
			if (((previousValue != value) 
						|| (this._OutgoingFacture.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._OutgoingFacture.Entity = null;
					previousValue.AdvanceInvoices.Remove(this);
				}
				this._OutgoingFacture.Entity = value;
				if ((value != null))
				{
					value.AdvanceInvoices.Add(this);
					this._OutgoingFactureID = value.ID;
				}
				else
				{
					this._OutgoingFactureID = default(Nullable<int>);
				}
				this.SendPropertyChanged("OutgoingFacture");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AdvanceInvoiceItems(AdvanceInvoiceItem entity)
	{
		this.SendPropertyChanging();
		entity.AdvanceInvoice = this;
	}
	
	private void detach_AdvanceInvoiceItems(AdvanceInvoiceItem entity)
	{
		this.SendPropertyChanging();
		entity.AdvanceInvoice = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Algorithms")]
public partial class Algorithm : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _DocumentTypeID;
	
	private bool _IsInput;
	
	private string _Description;
	
	private EntitySet<DDVtypesChartOfAccount> _DDVtypesChartOfAccounts;
	
	private EntityRef<DocumentType> _DocumentType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentTypeIDChanging(int value);
    partial void OnDocumentTypeIDChanged();
    partial void OnIsInputChanging(bool value);
    partial void OnIsInputChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Algorithm()
	{
		this._DDVtypesChartOfAccounts = new EntitySet<DDVtypesChartOfAccount>(new Action<DDVtypesChartOfAccount>(this.attach_DDVtypesChartOfAccounts), new Action<DDVtypesChartOfAccount>(this.detach_DDVtypesChartOfAccounts));
		this._DocumentType = default(EntityRef<DocumentType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeID", DbType="Int NOT NULL")]
	public int DocumentTypeID
	{
		get
		{
			return this._DocumentTypeID;
		}
		set
		{
			if ((this._DocumentTypeID != value))
			{
				if (this._DocumentType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocumentTypeIDChanging(value);
				this.SendPropertyChanging();
				this._DocumentTypeID = value;
				this.SendPropertyChanged("DocumentTypeID");
				this.OnDocumentTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInput", DbType="Bit NOT NULL")]
	public bool IsInput
	{
		get
		{
			return this._IsInput;
		}
		set
		{
			if ((this._IsInput != value))
			{
				this.OnIsInputChanging(value);
				this.SendPropertyChanging();
				this._IsInput = value;
				this.SendPropertyChanged("IsInput");
				this.OnIsInputChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_DDVtypesChartOfAccount", Storage="_DDVtypesChartOfAccounts", ThisKey="ID", OtherKey="AlgorithmID")]
	public EntitySet<DDVtypesChartOfAccount> DDVtypesChartOfAccounts
	{
		get
		{
			return this._DDVtypesChartOfAccounts;
		}
		set
		{
			this._DDVtypesChartOfAccounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_Algorithm", Storage="_DocumentType", ThisKey="DocumentTypeID", OtherKey="ID", IsForeignKey=true)]
	public DocumentType DocumentType
	{
		get
		{
			return this._DocumentType.Entity;
		}
		set
		{
			DocumentType previousValue = this._DocumentType.Entity;
			if (((previousValue != value) 
						|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DocumentType.Entity = null;
					previousValue.Algorithms.Remove(this);
				}
				this._DocumentType.Entity = value;
				if ((value != null))
				{
					value.Algorithms.Add(this);
					this._DocumentTypeID = value.ID;
				}
				else
				{
					this._DocumentTypeID = default(int);
				}
				this.SendPropertyChanged("DocumentType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DDVtypesChartOfAccounts(DDVtypesChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.Algorithm = this;
	}
	
	private void detach_DDVtypesChartOfAccounts(DDVtypesChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.Algorithm = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Allowances")]
public partial class Allowance : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.DateTime _Date;
	
	private int _AllowanceTypeID;
	
	private int _EmployeeID;
	
	private int _Hours;
	
	private decimal _Percentage;
	
	private decimal _Value;
	
	private System.Nullable<int> _CompanyID;
	
	private EntityRef<AllowanceType> _AllowanceType;
	
	private EntityRef<Employee> _Employee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAllowanceTypeIDChanging(int value);
    partial void OnAllowanceTypeIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnHoursChanging(int value);
    partial void OnHoursChanged();
    partial void OnPercentageChanging(decimal value);
    partial void OnPercentageChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Allowance()
	{
		this._AllowanceType = default(EntityRef<AllowanceType>);
		this._Employee = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowanceTypeID", DbType="Int NOT NULL")]
	public int AllowanceTypeID
	{
		get
		{
			return this._AllowanceTypeID;
		}
		set
		{
			if ((this._AllowanceTypeID != value))
			{
				if (this._AllowanceType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAllowanceTypeIDChanging(value);
				this.SendPropertyChanging();
				this._AllowanceTypeID = value;
				this.SendPropertyChanged("AllowanceTypeID");
				this.OnAllowanceTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
	public int EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hours", DbType="Int NOT NULL")]
	public int Hours
	{
		get
		{
			return this._Hours;
		}
		set
		{
			if ((this._Hours != value))
			{
				this.OnHoursChanging(value);
				this.SendPropertyChanging();
				this._Hours = value;
				this.SendPropertyChanged("Hours");
				this.OnHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Percentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal Percentage
	{
		get
		{
			return this._Percentage;
		}
		set
		{
			if ((this._Percentage != value))
			{
				this.OnPercentageChanging(value);
				this.SendPropertyChanging();
				this._Percentage = value;
				this.SendPropertyChanged("Percentage");
				this.OnPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
	public decimal Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AllowanceType_Allowance", Storage="_AllowanceType", ThisKey="AllowanceTypeID", OtherKey="ID", IsForeignKey=true)]
	public AllowanceType AllowanceType
	{
		get
		{
			return this._AllowanceType.Entity;
		}
		set
		{
			AllowanceType previousValue = this._AllowanceType.Entity;
			if (((previousValue != value) 
						|| (this._AllowanceType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._AllowanceType.Entity = null;
					previousValue.Allowances.Remove(this);
				}
				this._AllowanceType.Entity = value;
				if ((value != null))
				{
					value.Allowances.Add(this);
					this._AllowanceTypeID = value.ID;
				}
				else
				{
					this._AllowanceTypeID = default(int);
				}
				this.SendPropertyChanged("AllowanceType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Allowance", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Allowances.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Allowances.Add(this);
					this._EmployeeID = value.ID;
				}
				else
				{
					this._EmployeeID = default(int);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AllowanceTypes")]
public partial class AllowanceType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Description;
	
	private decimal _Percentage;
	
	private EntitySet<Allowance> _Allowances;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPercentageChanging(decimal value);
    partial void OnPercentageChanged();
    #endregion
	
	public AllowanceType()
	{
		this._Allowances = new EntitySet<Allowance>(new Action<Allowance>(this.attach_Allowances), new Action<Allowance>(this.detach_Allowances));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Percentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal Percentage
	{
		get
		{
			return this._Percentage;
		}
		set
		{
			if ((this._Percentage != value))
			{
				this.OnPercentageChanging(value);
				this.SendPropertyChanging();
				this._Percentage = value;
				this.SendPropertyChanged("Percentage");
				this.OnPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AllowanceType_Allowance", Storage="_Allowances", ThisKey="ID", OtherKey="AllowanceTypeID")]
	public EntitySet<Allowance> Allowances
	{
		get
		{
			return this._Allowances;
		}
		set
		{
			this._Allowances.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Allowances(Allowance entity)
	{
		this.SendPropertyChanging();
		entity.AllowanceType = this;
	}
	
	private void detach_Allowances(Allowance entity)
	{
		this.SendPropertyChanging();
		entity.AllowanceType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AmortizationGroups")]
public partial class AmortizationGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Nomenclature;
	
	private decimal _Factor;
	
	private string _AccountCode;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<CapitalAssetsCard> _CapitalAssetsCards;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNomenclatureChanging(string value);
    partial void OnNomenclatureChanged();
    partial void OnFactorChanging(decimal value);
    partial void OnFactorChanged();
    partial void OnAccountCodeChanging(string value);
    partial void OnAccountCodeChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public AmortizationGroup()
	{
		this._CapitalAssetsCards = new EntitySet<CapitalAssetsCard>(new Action<CapitalAssetsCard>(this.attach_CapitalAssetsCards), new Action<CapitalAssetsCard>(this.detach_CapitalAssetsCards));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nomenclature", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Nomenclature
	{
		get
		{
			return this._Nomenclature;
		}
		set
		{
			if ((this._Nomenclature != value))
			{
				this.OnNomenclatureChanging(value);
				this.SendPropertyChanging();
				this._Nomenclature = value;
				this.SendPropertyChanged("Nomenclature");
				this.OnNomenclatureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Factor", DbType="Decimal(18,2) NOT NULL")]
	public decimal Factor
	{
		get
		{
			return this._Factor;
		}
		set
		{
			if ((this._Factor != value))
			{
				this.OnFactorChanging(value);
				this.SendPropertyChanging();
				this._Factor = value;
				this.SendPropertyChanged("Factor");
				this.OnFactorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountCode", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string AccountCode
	{
		get
		{
			return this._AccountCode;
		}
		set
		{
			if ((this._AccountCode != value))
			{
				this.OnAccountCodeChanging(value);
				this.SendPropertyChanging();
				this._AccountCode = value;
				this.SendPropertyChanged("AccountCode");
				this.OnAccountCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AmortizationGroup_CapitalAssetsCard", Storage="_CapitalAssetsCards", ThisKey="ID", OtherKey="AmortizationGroupID")]
	public EntitySet<CapitalAssetsCard> CapitalAssetsCards
	{
		get
		{
			return this._CapitalAssetsCards;
		}
		set
		{
			this._CapitalAssetsCards.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_AmortizationGroup", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.AmortizationGroups.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.AmortizationGroups.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.AmortizationGroup = this;
	}
	
	private void detach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.AmortizationGroup = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BalanceCarriedForwards")]
public partial class BalanceCarriedForward : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _CompanyID;
	
	private int _ChartOfAccountID;
	
	private bool _IsDebt;
	
	private decimal _Value;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnChartOfAccountIDChanging(int value);
    partial void OnChartOfAccountIDChanged();
    partial void OnIsDebtChanging(bool value);
    partial void OnIsDebtChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    #endregion
	
	public BalanceCarriedForward()
	{
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountID", DbType="Int NOT NULL")]
	public int ChartOfAccountID
	{
		get
		{
			return this._ChartOfAccountID;
		}
		set
		{
			if ((this._ChartOfAccountID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountID = value;
				this.SendPropertyChanged("ChartOfAccountID");
				this.OnChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDebt", DbType="Bit NOT NULL")]
	public bool IsDebt
	{
		get
		{
			return this._IsDebt;
		}
		set
		{
			if ((this._IsDebt != value))
			{
				this.OnIsDebtChanging(value);
				this.SendPropertyChanging();
				this._IsDebt = value;
				this.SendPropertyChanged("IsDebt");
				this.OnIsDebtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
	public decimal Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BalanceCarriedForward", Storage="_ChartOfAccount", ThisKey="ChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.BalanceCarriedForwards.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.BalanceCarriedForwards.Add(this);
					this._ChartOfAccountID = value.ID;
				}
				else
				{
					this._ChartOfAccountID = default(int);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_BalanceCarriedForward", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.BalanceCarriedForwards.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.BalanceCarriedForwards.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Banks")]
public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private string _Address;
	
	private string _Phone;
	
	private EntitySet<BrokerABCreditCardsSetup> _BrokerABCreditCardsSetups;
	
	private EntitySet<ClientsBank> _ClientsBanks;
	
	private EntitySet<Employee> _Employees;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
	
	public Bank()
	{
		this._BrokerABCreditCardsSetups = new EntitySet<BrokerABCreditCardsSetup>(new Action<BrokerABCreditCardsSetup>(this.attach_BrokerABCreditCardsSetups), new Action<BrokerABCreditCardsSetup>(this.detach_BrokerABCreditCardsSetups));
		this._ClientsBanks = new EntitySet<ClientsBank>(new Action<ClientsBank>(this.attach_ClientsBanks), new Action<ClientsBank>(this.detach_ClientsBanks));
		this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BrokerABCreditCardsSetup", Storage="_BrokerABCreditCardsSetups", ThisKey="ID", OtherKey="BankID")]
	public EntitySet<BrokerABCreditCardsSetup> BrokerABCreditCardsSetups
	{
		get
		{
			return this._BrokerABCreditCardsSetups;
		}
		set
		{
			this._BrokerABCreditCardsSetups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_ClientsBank", Storage="_ClientsBanks", ThisKey="ID", OtherKey="BankID")]
	public EntitySet<ClientsBank> ClientsBanks
	{
		get
		{
			return this._ClientsBanks;
		}
		set
		{
			this._ClientsBanks.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Employee", Storage="_Employees", ThisKey="ID", OtherKey="BankID")]
	public EntitySet<Employee> Employees
	{
		get
		{
			return this._Employees;
		}
		set
		{
			this._Employees.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_BrokerABCreditCardsSetups(BrokerABCreditCardsSetup entity)
	{
		this.SendPropertyChanging();
		entity.Bank = this;
	}
	
	private void detach_BrokerABCreditCardsSetups(BrokerABCreditCardsSetup entity)
	{
		this.SendPropertyChanging();
		entity.Bank = null;
	}
	
	private void attach_ClientsBanks(ClientsBank entity)
	{
		this.SendPropertyChanging();
		entity.Bank = this;
	}
	
	private void detach_ClientsBanks(ClientsBank entity)
	{
		this.SendPropertyChanging();
		entity.Bank = null;
	}
	
	private void attach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Bank = this;
	}
	
	private void detach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Bank = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Branches")]
public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private int _MunicipalityID;
	
	private string _Code;
	
	private EntitySet<Employee> _Employees;
	
	private EntityRef<Municipality> _Municipality;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMunicipalityIDChanging(int value);
    partial void OnMunicipalityIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
	
	public Branch()
	{
		this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
		this._Municipality = default(EntityRef<Municipality>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MunicipalityID", DbType="Int NOT NULL")]
	public int MunicipalityID
	{
		get
		{
			return this._MunicipalityID;
		}
		set
		{
			if ((this._MunicipalityID != value))
			{
				if (this._Municipality.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMunicipalityIDChanging(value);
				this.SendPropertyChanging();
				this._MunicipalityID = value;
				this.SendPropertyChanged("MunicipalityID");
				this.OnMunicipalityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Employee", Storage="_Employees", ThisKey="ID", OtherKey="BranchID")]
	public EntitySet<Employee> Employees
	{
		get
		{
			return this._Employees;
		}
		set
		{
			this._Employees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipality_Branch", Storage="_Municipality", ThisKey="MunicipalityID", OtherKey="ID", IsForeignKey=true)]
	public Municipality Municipality
	{
		get
		{
			return this._Municipality.Entity;
		}
		set
		{
			Municipality previousValue = this._Municipality.Entity;
			if (((previousValue != value) 
						|| (this._Municipality.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Municipality.Entity = null;
					previousValue.Branches.Remove(this);
				}
				this._Municipality.Entity = value;
				if ((value != null))
				{
					value.Branches.Add(this);
					this._MunicipalityID = value.ID;
				}
				else
				{
					this._MunicipalityID = default(int);
				}
				this.SendPropertyChanged("Municipality");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Branch = this;
	}
	
	private void detach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Branch = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrokerABAccountFacturesSetups")]
public partial class BrokerABAccountFacturesSetup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _InsuranceSubTypeCode;
	
	private string _InsuranceSubTypeName;
	
	private string _InsuranceSubTypeShortName;
	
	private int _ChartOfAccountID;
	
	private bool _IsDebt;
	
	private bool _IsChartForAccountForTotal;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInsuranceSubTypeCodeChanging(string value);
    partial void OnInsuranceSubTypeCodeChanged();
    partial void OnInsuranceSubTypeNameChanging(string value);
    partial void OnInsuranceSubTypeNameChanged();
    partial void OnInsuranceSubTypeShortNameChanging(string value);
    partial void OnInsuranceSubTypeShortNameChanged();
    partial void OnChartOfAccountIDChanging(int value);
    partial void OnChartOfAccountIDChanged();
    partial void OnIsDebtChanging(bool value);
    partial void OnIsDebtChanged();
    partial void OnIsChartForAccountForTotalChanging(bool value);
    partial void OnIsChartForAccountForTotalChanged();
    #endregion
	
	public BrokerABAccountFacturesSetup()
	{
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeCode
	{
		get
		{
			return this._InsuranceSubTypeCode;
		}
		set
		{
			if ((this._InsuranceSubTypeCode != value))
			{
				this.OnInsuranceSubTypeCodeChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeCode = value;
				this.SendPropertyChanged("InsuranceSubTypeCode");
				this.OnInsuranceSubTypeCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeName", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeName
	{
		get
		{
			return this._InsuranceSubTypeName;
		}
		set
		{
			if ((this._InsuranceSubTypeName != value))
			{
				this.OnInsuranceSubTypeNameChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeName = value;
				this.SendPropertyChanged("InsuranceSubTypeName");
				this.OnInsuranceSubTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeShortName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeShortName
	{
		get
		{
			return this._InsuranceSubTypeShortName;
		}
		set
		{
			if ((this._InsuranceSubTypeShortName != value))
			{
				this.OnInsuranceSubTypeShortNameChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeShortName = value;
				this.SendPropertyChanged("InsuranceSubTypeShortName");
				this.OnInsuranceSubTypeShortNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountID", DbType="Int NOT NULL")]
	public int ChartOfAccountID
	{
		get
		{
			return this._ChartOfAccountID;
		}
		set
		{
			if ((this._ChartOfAccountID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountID = value;
				this.SendPropertyChanged("ChartOfAccountID");
				this.OnChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDebt", DbType="Bit NOT NULL")]
	public bool IsDebt
	{
		get
		{
			return this._IsDebt;
		}
		set
		{
			if ((this._IsDebt != value))
			{
				this.OnIsDebtChanging(value);
				this.SendPropertyChanging();
				this._IsDebt = value;
				this.SendPropertyChanged("IsDebt");
				this.OnIsDebtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsChartForAccountForTotal", DbType="Bit NOT NULL")]
	public bool IsChartForAccountForTotal
	{
		get
		{
			return this._IsChartForAccountForTotal;
		}
		set
		{
			if ((this._IsChartForAccountForTotal != value))
			{
				this.OnIsChartForAccountForTotalChanging(value);
				this.SendPropertyChanging();
				this._IsChartForAccountForTotal = value;
				this.SendPropertyChanged("IsChartForAccountForTotal");
				this.OnIsChartForAccountForTotalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BrokerABAccountFacturesSetup", Storage="_ChartOfAccount", ThisKey="ChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.BrokerABAccountFacturesSetups.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.BrokerABAccountFacturesSetups.Add(this);
					this._ChartOfAccountID = value.ID;
				}
				else
				{
					this._ChartOfAccountID = default(int);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrokerABCashSetups")]
public partial class BrokerABCashSetup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _InsuranceSubTypeCode;
	
	private string _InsuranceSubTypeName;
	
	private string _InsuranceSubTypeShortName;
	
	private int _ChartOfAccountID;
	
	private bool _IsDebt;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInsuranceSubTypeCodeChanging(string value);
    partial void OnInsuranceSubTypeCodeChanged();
    partial void OnInsuranceSubTypeNameChanging(string value);
    partial void OnInsuranceSubTypeNameChanged();
    partial void OnInsuranceSubTypeShortNameChanging(string value);
    partial void OnInsuranceSubTypeShortNameChanged();
    partial void OnChartOfAccountIDChanging(int value);
    partial void OnChartOfAccountIDChanged();
    partial void OnIsDebtChanging(bool value);
    partial void OnIsDebtChanged();
    #endregion
	
	public BrokerABCashSetup()
	{
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeCode
	{
		get
		{
			return this._InsuranceSubTypeCode;
		}
		set
		{
			if ((this._InsuranceSubTypeCode != value))
			{
				this.OnInsuranceSubTypeCodeChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeCode = value;
				this.SendPropertyChanged("InsuranceSubTypeCode");
				this.OnInsuranceSubTypeCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeName", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeName
	{
		get
		{
			return this._InsuranceSubTypeName;
		}
		set
		{
			if ((this._InsuranceSubTypeName != value))
			{
				this.OnInsuranceSubTypeNameChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeName = value;
				this.SendPropertyChanged("InsuranceSubTypeName");
				this.OnInsuranceSubTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeShortName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeShortName
	{
		get
		{
			return this._InsuranceSubTypeShortName;
		}
		set
		{
			if ((this._InsuranceSubTypeShortName != value))
			{
				this.OnInsuranceSubTypeShortNameChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeShortName = value;
				this.SendPropertyChanged("InsuranceSubTypeShortName");
				this.OnInsuranceSubTypeShortNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountID", DbType="Int NOT NULL")]
	public int ChartOfAccountID
	{
		get
		{
			return this._ChartOfAccountID;
		}
		set
		{
			if ((this._ChartOfAccountID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountID = value;
				this.SendPropertyChanged("ChartOfAccountID");
				this.OnChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDebt", DbType="Bit NOT NULL")]
	public bool IsDebt
	{
		get
		{
			return this._IsDebt;
		}
		set
		{
			if ((this._IsDebt != value))
			{
				this.OnIsDebtChanging(value);
				this.SendPropertyChanging();
				this._IsDebt = value;
				this.SendPropertyChanged("IsDebt");
				this.OnIsDebtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BrokerABCashSetup", Storage="_ChartOfAccount", ThisKey="ChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.BrokerABCashSetups.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.BrokerABCashSetups.Add(this);
					this._ChartOfAccountID = value.ID;
				}
				else
				{
					this._ChartOfAccountID = default(int);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrokerABCreditCardsSetups")]
public partial class BrokerABCreditCardsSetup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _InsuranceSubTypeCode;
	
	private string _InsuranceSubTypeName;
	
	private string _InsuranceSubTypeShortName;
	
	private int _ChartOfAccountID;
	
	private int _BankID;
	
	private bool _IsDebt;
	
	private EntityRef<Bank> _Bank;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInsuranceSubTypeCodeChanging(string value);
    partial void OnInsuranceSubTypeCodeChanged();
    partial void OnInsuranceSubTypeNameChanging(string value);
    partial void OnInsuranceSubTypeNameChanged();
    partial void OnInsuranceSubTypeShortNameChanging(string value);
    partial void OnInsuranceSubTypeShortNameChanged();
    partial void OnChartOfAccountIDChanging(int value);
    partial void OnChartOfAccountIDChanged();
    partial void OnBankIDChanging(int value);
    partial void OnBankIDChanged();
    partial void OnIsDebtChanging(bool value);
    partial void OnIsDebtChanged();
    #endregion
	
	public BrokerABCreditCardsSetup()
	{
		this._Bank = default(EntityRef<Bank>);
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeCode
	{
		get
		{
			return this._InsuranceSubTypeCode;
		}
		set
		{
			if ((this._InsuranceSubTypeCode != value))
			{
				this.OnInsuranceSubTypeCodeChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeCode = value;
				this.SendPropertyChanged("InsuranceSubTypeCode");
				this.OnInsuranceSubTypeCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeName", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeName
	{
		get
		{
			return this._InsuranceSubTypeName;
		}
		set
		{
			if ((this._InsuranceSubTypeName != value))
			{
				this.OnInsuranceSubTypeNameChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeName = value;
				this.SendPropertyChanged("InsuranceSubTypeName");
				this.OnInsuranceSubTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeShortName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeShortName
	{
		get
		{
			return this._InsuranceSubTypeShortName;
		}
		set
		{
			if ((this._InsuranceSubTypeShortName != value))
			{
				this.OnInsuranceSubTypeShortNameChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeShortName = value;
				this.SendPropertyChanged("InsuranceSubTypeShortName");
				this.OnInsuranceSubTypeShortNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountID", DbType="Int NOT NULL")]
	public int ChartOfAccountID
	{
		get
		{
			return this._ChartOfAccountID;
		}
		set
		{
			if ((this._ChartOfAccountID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountID = value;
				this.SendPropertyChanged("ChartOfAccountID");
				this.OnChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankID", DbType="Int NOT NULL")]
	public int BankID
	{
		get
		{
			return this._BankID;
		}
		set
		{
			if ((this._BankID != value))
			{
				if (this._Bank.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBankIDChanging(value);
				this.SendPropertyChanging();
				this._BankID = value;
				this.SendPropertyChanged("BankID");
				this.OnBankIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDebt", DbType="Bit NOT NULL")]
	public bool IsDebt
	{
		get
		{
			return this._IsDebt;
		}
		set
		{
			if ((this._IsDebt != value))
			{
				this.OnIsDebtChanging(value);
				this.SendPropertyChanging();
				this._IsDebt = value;
				this.SendPropertyChanged("IsDebt");
				this.OnIsDebtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BrokerABCreditCardsSetup", Storage="_Bank", ThisKey="BankID", OtherKey="ID", IsForeignKey=true)]
	public Bank Bank
	{
		get
		{
			return this._Bank.Entity;
		}
		set
		{
			Bank previousValue = this._Bank.Entity;
			if (((previousValue != value) 
						|| (this._Bank.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Bank.Entity = null;
					previousValue.BrokerABCreditCardsSetups.Remove(this);
				}
				this._Bank.Entity = value;
				if ((value != null))
				{
					value.BrokerABCreditCardsSetups.Add(this);
					this._BankID = value.ID;
				}
				else
				{
					this._BankID = default(int);
				}
				this.SendPropertyChanged("Bank");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BrokerABCreditCardsSetup", Storage="_ChartOfAccount", ThisKey="ChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.BrokerABCreditCardsSetups.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.BrokerABCreditCardsSetups.Add(this);
					this._ChartOfAccountID = value.ID;
				}
				else
				{
					this._ChartOfAccountID = default(int);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrokerABIncomeFacturesForExpencesSetups")]
public partial class BrokerABIncomeFacturesForExpencesSetup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ChartOfAccountID;
	
	private bool _IsTaxAccounting;
	
	private decimal _TaxPercentage;
	
	private bool _IsChartForAccountForTotal;
	
	private bool _IsDebt;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChartOfAccountIDChanging(int value);
    partial void OnChartOfAccountIDChanged();
    partial void OnIsTaxAccountingChanging(bool value);
    partial void OnIsTaxAccountingChanged();
    partial void OnTaxPercentageChanging(decimal value);
    partial void OnTaxPercentageChanged();
    partial void OnIsChartForAccountForTotalChanging(bool value);
    partial void OnIsChartForAccountForTotalChanged();
    partial void OnIsDebtChanging(bool value);
    partial void OnIsDebtChanged();
    #endregion
	
	public BrokerABIncomeFacturesForExpencesSetup()
	{
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountID", DbType="Int NOT NULL")]
	public int ChartOfAccountID
	{
		get
		{
			return this._ChartOfAccountID;
		}
		set
		{
			if ((this._ChartOfAccountID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountID = value;
				this.SendPropertyChanged("ChartOfAccountID");
				this.OnChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTaxAccounting", DbType="Bit NOT NULL")]
	public bool IsTaxAccounting
	{
		get
		{
			return this._IsTaxAccounting;
		}
		set
		{
			if ((this._IsTaxAccounting != value))
			{
				this.OnIsTaxAccountingChanging(value);
				this.SendPropertyChanging();
				this._IsTaxAccounting = value;
				this.SendPropertyChanged("IsTaxAccounting");
				this.OnIsTaxAccountingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxPercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxPercentage
	{
		get
		{
			return this._TaxPercentage;
		}
		set
		{
			if ((this._TaxPercentage != value))
			{
				this.OnTaxPercentageChanging(value);
				this.SendPropertyChanging();
				this._TaxPercentage = value;
				this.SendPropertyChanged("TaxPercentage");
				this.OnTaxPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsChartForAccountForTotal", DbType="Bit NOT NULL")]
	public bool IsChartForAccountForTotal
	{
		get
		{
			return this._IsChartForAccountForTotal;
		}
		set
		{
			if ((this._IsChartForAccountForTotal != value))
			{
				this.OnIsChartForAccountForTotalChanging(value);
				this.SendPropertyChanging();
				this._IsChartForAccountForTotal = value;
				this.SendPropertyChanged("IsChartForAccountForTotal");
				this.OnIsChartForAccountForTotalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDebt", DbType="Bit NOT NULL")]
	public bool IsDebt
	{
		get
		{
			return this._IsDebt;
		}
		set
		{
			if ((this._IsDebt != value))
			{
				this.OnIsDebtChanging(value);
				this.SendPropertyChanging();
				this._IsDebt = value;
				this.SendPropertyChanged("IsDebt");
				this.OnIsDebtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BrokerABIncomeFacturesForExpencesSetup", Storage="_ChartOfAccount", ThisKey="ChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.BrokerABIncomeFacturesForExpencesSetups.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.BrokerABIncomeFacturesForExpencesSetups.Add(this);
					this._ChartOfAccountID = value.ID;
				}
				else
				{
					this._ChartOfAccountID = default(int);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrokerABIncomeFacturesSetups")]
public partial class BrokerABIncomeFacturesSetup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _InsuranceSubTypeCode;
	
	private string _InsuranceSubTypeName;
	
	private string _InsuranceSubTypeShortName;
	
	private int _ChartOfAccountID;
	
	private bool _IsDebt;
	
	private bool _IsChartForAccountForTotal;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInsuranceSubTypeCodeChanging(string value);
    partial void OnInsuranceSubTypeCodeChanged();
    partial void OnInsuranceSubTypeNameChanging(string value);
    partial void OnInsuranceSubTypeNameChanged();
    partial void OnInsuranceSubTypeShortNameChanging(string value);
    partial void OnInsuranceSubTypeShortNameChanged();
    partial void OnChartOfAccountIDChanging(int value);
    partial void OnChartOfAccountIDChanged();
    partial void OnIsDebtChanging(bool value);
    partial void OnIsDebtChanged();
    partial void OnIsChartForAccountForTotalChanging(bool value);
    partial void OnIsChartForAccountForTotalChanged();
    #endregion
	
	public BrokerABIncomeFacturesSetup()
	{
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeCode
	{
		get
		{
			return this._InsuranceSubTypeCode;
		}
		set
		{
			if ((this._InsuranceSubTypeCode != value))
			{
				this.OnInsuranceSubTypeCodeChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeCode = value;
				this.SendPropertyChanged("InsuranceSubTypeCode");
				this.OnInsuranceSubTypeCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeName", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeName
	{
		get
		{
			return this._InsuranceSubTypeName;
		}
		set
		{
			if ((this._InsuranceSubTypeName != value))
			{
				this.OnInsuranceSubTypeNameChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeName = value;
				this.SendPropertyChanged("InsuranceSubTypeName");
				this.OnInsuranceSubTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceSubTypeShortName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string InsuranceSubTypeShortName
	{
		get
		{
			return this._InsuranceSubTypeShortName;
		}
		set
		{
			if ((this._InsuranceSubTypeShortName != value))
			{
				this.OnInsuranceSubTypeShortNameChanging(value);
				this.SendPropertyChanging();
				this._InsuranceSubTypeShortName = value;
				this.SendPropertyChanged("InsuranceSubTypeShortName");
				this.OnInsuranceSubTypeShortNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountID", DbType="Int NOT NULL")]
	public int ChartOfAccountID
	{
		get
		{
			return this._ChartOfAccountID;
		}
		set
		{
			if ((this._ChartOfAccountID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountID = value;
				this.SendPropertyChanged("ChartOfAccountID");
				this.OnChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDebt", DbType="Bit NOT NULL")]
	public bool IsDebt
	{
		get
		{
			return this._IsDebt;
		}
		set
		{
			if ((this._IsDebt != value))
			{
				this.OnIsDebtChanging(value);
				this.SendPropertyChanging();
				this._IsDebt = value;
				this.SendPropertyChanged("IsDebt");
				this.OnIsDebtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsChartForAccountForTotal", DbType="Bit NOT NULL")]
	public bool IsChartForAccountForTotal
	{
		get
		{
			return this._IsChartForAccountForTotal;
		}
		set
		{
			if ((this._IsChartForAccountForTotal != value))
			{
				this.OnIsChartForAccountForTotalChanging(value);
				this.SendPropertyChanging();
				this._IsChartForAccountForTotal = value;
				this.SendPropertyChanged("IsChartForAccountForTotal");
				this.OnIsChartForAccountForTotalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BrokerABIncomeFacturesSetup", Storage="_ChartOfAccount", ThisKey="ChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.BrokerABIncomeFacturesSetups.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.BrokerABIncomeFacturesSetups.Add(this);
					this._ChartOfAccountID = value.ID;
				}
				else
				{
					this._ChartOfAccountID = default(int);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CapitalAssetsCardAmortizations")]
public partial class CapitalAssetsCardAmortization : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _CapitalAssetsCardID;
	
	private System.DateTime _AmortizationDate;
	
	private decimal _OriginalCost;
	
	private decimal _WrittenOffValue;
	
	private decimal _PresentValue;
	
	private decimal _AmortizationValue;
	
	private System.Nullable<int> _CompanyAccountID;
	
	private EntityRef<CapitalAssetsCard> _CapitalAssetsCard;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCapitalAssetsCardIDChanging(int value);
    partial void OnCapitalAssetsCardIDChanged();
    partial void OnAmortizationDateChanging(System.DateTime value);
    partial void OnAmortizationDateChanged();
    partial void OnOriginalCostChanging(decimal value);
    partial void OnOriginalCostChanged();
    partial void OnWrittenOffValueChanging(decimal value);
    partial void OnWrittenOffValueChanged();
    partial void OnPresentValueChanging(decimal value);
    partial void OnPresentValueChanged();
    partial void OnAmortizationValueChanging(decimal value);
    partial void OnAmortizationValueChanged();
    partial void OnCompanyAccountIDChanging(System.Nullable<int> value);
    partial void OnCompanyAccountIDChanged();
    #endregion
	
	public CapitalAssetsCardAmortization()
	{
		this._CapitalAssetsCard = default(EntityRef<CapitalAssetsCard>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapitalAssetsCardID", DbType="Int NOT NULL")]
	public int CapitalAssetsCardID
	{
		get
		{
			return this._CapitalAssetsCardID;
		}
		set
		{
			if ((this._CapitalAssetsCardID != value))
			{
				if (this._CapitalAssetsCard.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCapitalAssetsCardIDChanging(value);
				this.SendPropertyChanging();
				this._CapitalAssetsCardID = value;
				this.SendPropertyChanged("CapitalAssetsCardID");
				this.OnCapitalAssetsCardIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationDate", DbType="DateTime NOT NULL")]
	public System.DateTime AmortizationDate
	{
		get
		{
			return this._AmortizationDate;
		}
		set
		{
			if ((this._AmortizationDate != value))
			{
				this.OnAmortizationDateChanging(value);
				this.SendPropertyChanging();
				this._AmortizationDate = value;
				this.SendPropertyChanged("AmortizationDate");
				this.OnAmortizationDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal OriginalCost
	{
		get
		{
			return this._OriginalCost;
		}
		set
		{
			if ((this._OriginalCost != value))
			{
				this.OnOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._OriginalCost = value;
				this.SendPropertyChanged("OriginalCost");
				this.OnOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WrittenOffValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal WrittenOffValue
	{
		get
		{
			return this._WrittenOffValue;
		}
		set
		{
			if ((this._WrittenOffValue != value))
			{
				this.OnWrittenOffValueChanging(value);
				this.SendPropertyChanging();
				this._WrittenOffValue = value;
				this.SendPropertyChanged("WrittenOffValue");
				this.OnWrittenOffValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresentValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal PresentValue
	{
		get
		{
			return this._PresentValue;
		}
		set
		{
			if ((this._PresentValue != value))
			{
				this.OnPresentValueChanging(value);
				this.SendPropertyChanging();
				this._PresentValue = value;
				this.SendPropertyChanged("PresentValue");
				this.OnPresentValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal AmortizationValue
	{
		get
		{
			return this._AmortizationValue;
		}
		set
		{
			if ((this._AmortizationValue != value))
			{
				this.OnAmortizationValueChanging(value);
				this.SendPropertyChanging();
				this._AmortizationValue = value;
				this.SendPropertyChanged("AmortizationValue");
				this.OnAmortizationValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAccountID", DbType="Int")]
	public System.Nullable<int> CompanyAccountID
	{
		get
		{
			return this._CompanyAccountID;
		}
		set
		{
			if ((this._CompanyAccountID != value))
			{
				this.OnCompanyAccountIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyAccountID = value;
				this.SendPropertyChanged("CompanyAccountID");
				this.OnCompanyAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalAssetsCard_CapitalAssetsCardAmortization", Storage="_CapitalAssetsCard", ThisKey="CapitalAssetsCardID", OtherKey="ID", IsForeignKey=true)]
	public CapitalAssetsCard CapitalAssetsCard
	{
		get
		{
			return this._CapitalAssetsCard.Entity;
		}
		set
		{
			CapitalAssetsCard previousValue = this._CapitalAssetsCard.Entity;
			if (((previousValue != value) 
						|| (this._CapitalAssetsCard.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CapitalAssetsCard.Entity = null;
					previousValue.CapitalAssetsCardAmortizations.Remove(this);
				}
				this._CapitalAssetsCard.Entity = value;
				if ((value != null))
				{
					value.CapitalAssetsCardAmortizations.Add(this);
					this._CapitalAssetsCardID = value.ID;
				}
				else
				{
					this._CapitalAssetsCardID = default(int);
				}
				this.SendPropertyChanged("CapitalAssetsCard");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CapitalAssetsCardRevaluations")]
public partial class CapitalAssetsCardRevaluation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _CapitalAssetsCardID;
	
	private decimal _OldOriginalCost;
	
	private decimal _OldWrittenOffValue;
	
	private decimal _RevaluationFactor;
	
	private decimal _RevaluationOriginalCost;
	
	private decimal _RevaluationWrittenOffValue;
	
	private decimal _NewOriginalCost;
	
	private decimal _NewWrittenOffValue;
	
	private System.DateTime _RevaluationDate;
	
	private System.Nullable<int> _CompanyAccountID;
	
	private EntityRef<CapitalAssetsCard> _CapitalAssetsCard;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCapitalAssetsCardIDChanging(int value);
    partial void OnCapitalAssetsCardIDChanged();
    partial void OnOldOriginalCostChanging(decimal value);
    partial void OnOldOriginalCostChanged();
    partial void OnOldWrittenOffValueChanging(decimal value);
    partial void OnOldWrittenOffValueChanged();
    partial void OnRevaluationFactorChanging(decimal value);
    partial void OnRevaluationFactorChanged();
    partial void OnRevaluationOriginalCostChanging(decimal value);
    partial void OnRevaluationOriginalCostChanged();
    partial void OnRevaluationWrittenOffValueChanging(decimal value);
    partial void OnRevaluationWrittenOffValueChanged();
    partial void OnNewOriginalCostChanging(decimal value);
    partial void OnNewOriginalCostChanged();
    partial void OnNewWrittenOffValueChanging(decimal value);
    partial void OnNewWrittenOffValueChanged();
    partial void OnRevaluationDateChanging(System.DateTime value);
    partial void OnRevaluationDateChanged();
    partial void OnCompanyAccountIDChanging(System.Nullable<int> value);
    partial void OnCompanyAccountIDChanged();
    #endregion
	
	public CapitalAssetsCardRevaluation()
	{
		this._CapitalAssetsCard = default(EntityRef<CapitalAssetsCard>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapitalAssetsCardID", DbType="Int NOT NULL")]
	public int CapitalAssetsCardID
	{
		get
		{
			return this._CapitalAssetsCardID;
		}
		set
		{
			if ((this._CapitalAssetsCardID != value))
			{
				if (this._CapitalAssetsCard.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCapitalAssetsCardIDChanging(value);
				this.SendPropertyChanging();
				this._CapitalAssetsCardID = value;
				this.SendPropertyChanged("CapitalAssetsCardID");
				this.OnCapitalAssetsCardIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldOriginalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal OldOriginalCost
	{
		get
		{
			return this._OldOriginalCost;
		}
		set
		{
			if ((this._OldOriginalCost != value))
			{
				this.OnOldOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._OldOriginalCost = value;
				this.SendPropertyChanged("OldOriginalCost");
				this.OnOldOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldWrittenOffValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal OldWrittenOffValue
	{
		get
		{
			return this._OldWrittenOffValue;
		}
		set
		{
			if ((this._OldWrittenOffValue != value))
			{
				this.OnOldWrittenOffValueChanging(value);
				this.SendPropertyChanging();
				this._OldWrittenOffValue = value;
				this.SendPropertyChanged("OldWrittenOffValue");
				this.OnOldWrittenOffValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevaluationFactor", DbType="Decimal(18,2) NOT NULL")]
	public decimal RevaluationFactor
	{
		get
		{
			return this._RevaluationFactor;
		}
		set
		{
			if ((this._RevaluationFactor != value))
			{
				this.OnRevaluationFactorChanging(value);
				this.SendPropertyChanging();
				this._RevaluationFactor = value;
				this.SendPropertyChanged("RevaluationFactor");
				this.OnRevaluationFactorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevaluationOriginalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal RevaluationOriginalCost
	{
		get
		{
			return this._RevaluationOriginalCost;
		}
		set
		{
			if ((this._RevaluationOriginalCost != value))
			{
				this.OnRevaluationOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._RevaluationOriginalCost = value;
				this.SendPropertyChanged("RevaluationOriginalCost");
				this.OnRevaluationOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevaluationWrittenOffValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal RevaluationWrittenOffValue
	{
		get
		{
			return this._RevaluationWrittenOffValue;
		}
		set
		{
			if ((this._RevaluationWrittenOffValue != value))
			{
				this.OnRevaluationWrittenOffValueChanging(value);
				this.SendPropertyChanging();
				this._RevaluationWrittenOffValue = value;
				this.SendPropertyChanged("RevaluationWrittenOffValue");
				this.OnRevaluationWrittenOffValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewOriginalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal NewOriginalCost
	{
		get
		{
			return this._NewOriginalCost;
		}
		set
		{
			if ((this._NewOriginalCost != value))
			{
				this.OnNewOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._NewOriginalCost = value;
				this.SendPropertyChanged("NewOriginalCost");
				this.OnNewOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewWrittenOffValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal NewWrittenOffValue
	{
		get
		{
			return this._NewWrittenOffValue;
		}
		set
		{
			if ((this._NewWrittenOffValue != value))
			{
				this.OnNewWrittenOffValueChanging(value);
				this.SendPropertyChanging();
				this._NewWrittenOffValue = value;
				this.SendPropertyChanged("NewWrittenOffValue");
				this.OnNewWrittenOffValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevaluationDate", DbType="DateTime NOT NULL")]
	public System.DateTime RevaluationDate
	{
		get
		{
			return this._RevaluationDate;
		}
		set
		{
			if ((this._RevaluationDate != value))
			{
				this.OnRevaluationDateChanging(value);
				this.SendPropertyChanging();
				this._RevaluationDate = value;
				this.SendPropertyChanged("RevaluationDate");
				this.OnRevaluationDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAccountID", DbType="Int")]
	public System.Nullable<int> CompanyAccountID
	{
		get
		{
			return this._CompanyAccountID;
		}
		set
		{
			if ((this._CompanyAccountID != value))
			{
				this.OnCompanyAccountIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyAccountID = value;
				this.SendPropertyChanged("CompanyAccountID");
				this.OnCompanyAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalAssetsCard_CapitalAssetsCardRevaluation", Storage="_CapitalAssetsCard", ThisKey="CapitalAssetsCardID", OtherKey="ID", IsForeignKey=true)]
	public CapitalAssetsCard CapitalAssetsCard
	{
		get
		{
			return this._CapitalAssetsCard.Entity;
		}
		set
		{
			CapitalAssetsCard previousValue = this._CapitalAssetsCard.Entity;
			if (((previousValue != value) 
						|| (this._CapitalAssetsCard.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CapitalAssetsCard.Entity = null;
					previousValue.CapitalAssetsCardRevaluations.Remove(this);
				}
				this._CapitalAssetsCard.Entity = value;
				if ((value != null))
				{
					value.CapitalAssetsCardRevaluations.Add(this);
					this._CapitalAssetsCardID = value.ID;
				}
				else
				{
					this._CapitalAssetsCardID = default(int);
				}
				this.SendPropertyChanged("CapitalAssetsCard");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CapitalAssetsCards")]
public partial class CapitalAssetsCard : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Number;
	
	private string _Name;
	
	private string _InventoryNumber;
	
	private int _AmortizationGroupID;
	
	private decimal _Factor;
	
	private System.DateTime _OrderDate;
	
	private System.Nullable<System.DateTime> _ApplicationDate;
	
	private System.Nullable<System.DateTime> _DebitDate;
	
	private decimal _Quantity;
	
	private int _WorkUnitID;
	
	private int _IndebtPersonID;
	
	private int _ClientID;
	
	private string _FactureNumber;
	
	private decimal _FactureValue;
	
	private decimal _DDVPercentage;
	
	private bool _IsForDDV;
	
	private int _LocationID;
	
	private string _AccountCode;
	
	private System.Nullable<System.DateTime> _LastAmortizationDate;
	
	private decimal _OriginalCost;
	
	private decimal _WrittenOffValue;
	
	private decimal _PresentValue;
	
	private decimal _AmortizationValue;
	
	private System.DateTime _InsertDate;
	
	private System.Nullable<int> _CompanyAccountID;
	
	private EntitySet<CapitalAssetsCardAmortization> _CapitalAssetsCardAmortizations;
	
	private EntitySet<CapitalAssetsCardRevaluation> _CapitalAssetsCardRevaluations;
	
	private EntitySet<TemporaryCapitalAssetsCard> _TemporaryCapitalAssetsCards;
	
	private EntityRef<AmortizationGroup> _AmortizationGroup;
	
	private EntityRef<WorkUnit> _WorkUnit;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<CompanyAccount> _CompanyAccount;
	
	private EntityRef<IndebtPerson> _IndebtPerson;
	
	private EntityRef<Location> _Location;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInventoryNumberChanging(string value);
    partial void OnInventoryNumberChanged();
    partial void OnAmortizationGroupIDChanging(int value);
    partial void OnAmortizationGroupIDChanged();
    partial void OnFactorChanging(decimal value);
    partial void OnFactorChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnApplicationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApplicationDateChanged();
    partial void OnDebitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDebitDateChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnWorkUnitIDChanging(int value);
    partial void OnWorkUnitIDChanged();
    partial void OnIndebtPersonIDChanging(int value);
    partial void OnIndebtPersonIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnFactureNumberChanging(string value);
    partial void OnFactureNumberChanged();
    partial void OnFactureValueChanging(decimal value);
    partial void OnFactureValueChanged();
    partial void OnDDVPercentageChanging(decimal value);
    partial void OnDDVPercentageChanged();
    partial void OnIsForDDVChanging(bool value);
    partial void OnIsForDDVChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnAccountCodeChanging(string value);
    partial void OnAccountCodeChanged();
    partial void OnLastAmortizationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastAmortizationDateChanged();
    partial void OnOriginalCostChanging(decimal value);
    partial void OnOriginalCostChanged();
    partial void OnWrittenOffValueChanging(decimal value);
    partial void OnWrittenOffValueChanged();
    partial void OnPresentValueChanging(decimal value);
    partial void OnPresentValueChanged();
    partial void OnAmortizationValueChanging(decimal value);
    partial void OnAmortizationValueChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnCompanyAccountIDChanging(System.Nullable<int> value);
    partial void OnCompanyAccountIDChanged();
    #endregion
	
	public CapitalAssetsCard()
	{
		this._CapitalAssetsCardAmortizations = new EntitySet<CapitalAssetsCardAmortization>(new Action<CapitalAssetsCardAmortization>(this.attach_CapitalAssetsCardAmortizations), new Action<CapitalAssetsCardAmortization>(this.detach_CapitalAssetsCardAmortizations));
		this._CapitalAssetsCardRevaluations = new EntitySet<CapitalAssetsCardRevaluation>(new Action<CapitalAssetsCardRevaluation>(this.attach_CapitalAssetsCardRevaluations), new Action<CapitalAssetsCardRevaluation>(this.detach_CapitalAssetsCardRevaluations));
		this._TemporaryCapitalAssetsCards = new EntitySet<TemporaryCapitalAssetsCard>(new Action<TemporaryCapitalAssetsCard>(this.attach_TemporaryCapitalAssetsCards), new Action<TemporaryCapitalAssetsCard>(this.detach_TemporaryCapitalAssetsCards));
		this._AmortizationGroup = default(EntityRef<AmortizationGroup>);
		this._WorkUnit = default(EntityRef<WorkUnit>);
		this._Client = default(EntityRef<Client>);
		this._CompanyAccount = default(EntityRef<CompanyAccount>);
		this._IndebtPerson = default(EntityRef<IndebtPerson>);
		this._Location = default(EntityRef<Location>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
	public int Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryNumber", DbType="NVarChar(30)")]
	public string InventoryNumber
	{
		get
		{
			return this._InventoryNumber;
		}
		set
		{
			if ((this._InventoryNumber != value))
			{
				this.OnInventoryNumberChanging(value);
				this.SendPropertyChanging();
				this._InventoryNumber = value;
				this.SendPropertyChanged("InventoryNumber");
				this.OnInventoryNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationGroupID", DbType="Int NOT NULL")]
	public int AmortizationGroupID
	{
		get
		{
			return this._AmortizationGroupID;
		}
		set
		{
			if ((this._AmortizationGroupID != value))
			{
				if (this._AmortizationGroup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAmortizationGroupIDChanging(value);
				this.SendPropertyChanging();
				this._AmortizationGroupID = value;
				this.SendPropertyChanged("AmortizationGroupID");
				this.OnAmortizationGroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Factor", DbType="Decimal(18,2) NOT NULL")]
	public decimal Factor
	{
		get
		{
			return this._Factor;
		}
		set
		{
			if ((this._Factor != value))
			{
				this.OnFactorChanging(value);
				this.SendPropertyChanging();
				this._Factor = value;
				this.SendPropertyChanged("Factor");
				this.OnFactorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
	public System.DateTime OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ApplicationDate
	{
		get
		{
			return this._ApplicationDate;
		}
		set
		{
			if ((this._ApplicationDate != value))
			{
				this.OnApplicationDateChanging(value);
				this.SendPropertyChanging();
				this._ApplicationDate = value;
				this.SendPropertyChanged("ApplicationDate");
				this.OnApplicationDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebitDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> DebitDate
	{
		get
		{
			return this._DebitDate;
		}
		set
		{
			if ((this._DebitDate != value))
			{
				this.OnDebitDateChanging(value);
				this.SendPropertyChanging();
				this._DebitDate = value;
				this.SendPropertyChanged("DebitDate");
				this.OnDebitDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkUnitID", DbType="Int NOT NULL")]
	public int WorkUnitID
	{
		get
		{
			return this._WorkUnitID;
		}
		set
		{
			if ((this._WorkUnitID != value))
			{
				if (this._WorkUnit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWorkUnitIDChanging(value);
				this.SendPropertyChanging();
				this._WorkUnitID = value;
				this.SendPropertyChanged("WorkUnitID");
				this.OnWorkUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndebtPersonID", DbType="Int NOT NULL")]
	public int IndebtPersonID
	{
		get
		{
			return this._IndebtPersonID;
		}
		set
		{
			if ((this._IndebtPersonID != value))
			{
				if (this._IndebtPerson.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIndebtPersonIDChanging(value);
				this.SendPropertyChanging();
				this._IndebtPersonID = value;
				this.SendPropertyChanged("IndebtPersonID");
				this.OnIndebtPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
	public int ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FactureNumber
	{
		get
		{
			return this._FactureNumber;
		}
		set
		{
			if ((this._FactureNumber != value))
			{
				this.OnFactureNumberChanging(value);
				this.SendPropertyChanging();
				this._FactureNumber = value;
				this.SendPropertyChanged("FactureNumber");
				this.OnFactureNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal FactureValue
	{
		get
		{
			return this._FactureValue;
		}
		set
		{
			if ((this._FactureValue != value))
			{
				this.OnFactureValueChanging(value);
				this.SendPropertyChanging();
				this._FactureValue = value;
				this.SendPropertyChanged("FactureValue");
				this.OnFactureValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDVPercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal DDVPercentage
	{
		get
		{
			return this._DDVPercentage;
		}
		set
		{
			if ((this._DDVPercentage != value))
			{
				this.OnDDVPercentageChanging(value);
				this.SendPropertyChanging();
				this._DDVPercentage = value;
				this.SendPropertyChanged("DDVPercentage");
				this.OnDDVPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForDDV", DbType="Bit NOT NULL")]
	public bool IsForDDV
	{
		get
		{
			return this._IsForDDV;
		}
		set
		{
			if ((this._IsForDDV != value))
			{
				this.OnIsForDDVChanging(value);
				this.SendPropertyChanging();
				this._IsForDDV = value;
				this.SendPropertyChanged("IsForDDV");
				this.OnIsForDDVChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
	public int LocationID
	{
		get
		{
			return this._LocationID;
		}
		set
		{
			if ((this._LocationID != value))
			{
				if (this._Location.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLocationIDChanging(value);
				this.SendPropertyChanging();
				this._LocationID = value;
				this.SendPropertyChanged("LocationID");
				this.OnLocationIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string AccountCode
	{
		get
		{
			return this._AccountCode;
		}
		set
		{
			if ((this._AccountCode != value))
			{
				this.OnAccountCodeChanging(value);
				this.SendPropertyChanging();
				this._AccountCode = value;
				this.SendPropertyChanged("AccountCode");
				this.OnAccountCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastAmortizationDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastAmortizationDate
	{
		get
		{
			return this._LastAmortizationDate;
		}
		set
		{
			if ((this._LastAmortizationDate != value))
			{
				this.OnLastAmortizationDateChanging(value);
				this.SendPropertyChanging();
				this._LastAmortizationDate = value;
				this.SendPropertyChanged("LastAmortizationDate");
				this.OnLastAmortizationDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal OriginalCost
	{
		get
		{
			return this._OriginalCost;
		}
		set
		{
			if ((this._OriginalCost != value))
			{
				this.OnOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._OriginalCost = value;
				this.SendPropertyChanged("OriginalCost");
				this.OnOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WrittenOffValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal WrittenOffValue
	{
		get
		{
			return this._WrittenOffValue;
		}
		set
		{
			if ((this._WrittenOffValue != value))
			{
				this.OnWrittenOffValueChanging(value);
				this.SendPropertyChanging();
				this._WrittenOffValue = value;
				this.SendPropertyChanged("WrittenOffValue");
				this.OnWrittenOffValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresentValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal PresentValue
	{
		get
		{
			return this._PresentValue;
		}
		set
		{
			if ((this._PresentValue != value))
			{
				this.OnPresentValueChanging(value);
				this.SendPropertyChanging();
				this._PresentValue = value;
				this.SendPropertyChanged("PresentValue");
				this.OnPresentValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal AmortizationValue
	{
		get
		{
			return this._AmortizationValue;
		}
		set
		{
			if ((this._AmortizationValue != value))
			{
				this.OnAmortizationValueChanging(value);
				this.SendPropertyChanging();
				this._AmortizationValue = value;
				this.SendPropertyChanged("AmortizationValue");
				this.OnAmortizationValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL")]
	public System.DateTime InsertDate
	{
		get
		{
			return this._InsertDate;
		}
		set
		{
			if ((this._InsertDate != value))
			{
				this.OnInsertDateChanging(value);
				this.SendPropertyChanging();
				this._InsertDate = value;
				this.SendPropertyChanged("InsertDate");
				this.OnInsertDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAccountID", DbType="Int")]
	public System.Nullable<int> CompanyAccountID
	{
		get
		{
			return this._CompanyAccountID;
		}
		set
		{
			if ((this._CompanyAccountID != value))
			{
				if (this._CompanyAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyAccountIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyAccountID = value;
				this.SendPropertyChanged("CompanyAccountID");
				this.OnCompanyAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalAssetsCard_CapitalAssetsCardAmortization", Storage="_CapitalAssetsCardAmortizations", ThisKey="ID", OtherKey="CapitalAssetsCardID")]
	public EntitySet<CapitalAssetsCardAmortization> CapitalAssetsCardAmortizations
	{
		get
		{
			return this._CapitalAssetsCardAmortizations;
		}
		set
		{
			this._CapitalAssetsCardAmortizations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalAssetsCard_CapitalAssetsCardRevaluation", Storage="_CapitalAssetsCardRevaluations", ThisKey="ID", OtherKey="CapitalAssetsCardID")]
	public EntitySet<CapitalAssetsCardRevaluation> CapitalAssetsCardRevaluations
	{
		get
		{
			return this._CapitalAssetsCardRevaluations;
		}
		set
		{
			this._CapitalAssetsCardRevaluations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalAssetsCard_TemporaryCapitalAssetsCard", Storage="_TemporaryCapitalAssetsCards", ThisKey="ID", OtherKey="CapitalAssetsCardID")]
	public EntitySet<TemporaryCapitalAssetsCard> TemporaryCapitalAssetsCards
	{
		get
		{
			return this._TemporaryCapitalAssetsCards;
		}
		set
		{
			this._TemporaryCapitalAssetsCards.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AmortizationGroup_CapitalAssetsCard", Storage="_AmortizationGroup", ThisKey="AmortizationGroupID", OtherKey="ID", IsForeignKey=true)]
	public AmortizationGroup AmortizationGroup
	{
		get
		{
			return this._AmortizationGroup.Entity;
		}
		set
		{
			AmortizationGroup previousValue = this._AmortizationGroup.Entity;
			if (((previousValue != value) 
						|| (this._AmortizationGroup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._AmortizationGroup.Entity = null;
					previousValue.CapitalAssetsCards.Remove(this);
				}
				this._AmortizationGroup.Entity = value;
				if ((value != null))
				{
					value.CapitalAssetsCards.Add(this);
					this._AmortizationGroupID = value.ID;
				}
				else
				{
					this._AmortizationGroupID = default(int);
				}
				this.SendPropertyChanged("AmortizationGroup");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_CapitalAssetsCard", Storage="_WorkUnit", ThisKey="WorkUnitID", OtherKey="ID", IsForeignKey=true)]
	public WorkUnit WorkUnit
	{
		get
		{
			return this._WorkUnit.Entity;
		}
		set
		{
			WorkUnit previousValue = this._WorkUnit.Entity;
			if (((previousValue != value) 
						|| (this._WorkUnit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkUnit.Entity = null;
					previousValue.CapitalAssetsCards.Remove(this);
				}
				this._WorkUnit.Entity = value;
				if ((value != null))
				{
					value.CapitalAssetsCards.Add(this);
					this._WorkUnitID = value.ID;
				}
				else
				{
					this._WorkUnitID = default(int);
				}
				this.SendPropertyChanged("WorkUnit");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CapitalAssetsCard", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.CapitalAssetsCards.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.CapitalAssetsCards.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(int);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyAccount_CapitalAssetsCard", Storage="_CompanyAccount", ThisKey="CompanyAccountID", OtherKey="ID", IsForeignKey=true)]
	public CompanyAccount CompanyAccount
	{
		get
		{
			return this._CompanyAccount.Entity;
		}
		set
		{
			CompanyAccount previousValue = this._CompanyAccount.Entity;
			if (((previousValue != value) 
						|| (this._CompanyAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CompanyAccount.Entity = null;
					previousValue.CapitalAssetsCards.Remove(this);
				}
				this._CompanyAccount.Entity = value;
				if ((value != null))
				{
					value.CapitalAssetsCards.Add(this);
					this._CompanyAccountID = value.ID;
				}
				else
				{
					this._CompanyAccountID = default(Nullable<int>);
				}
				this.SendPropertyChanged("CompanyAccount");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndebtPerson_CapitalAssetsCard", Storage="_IndebtPerson", ThisKey="IndebtPersonID", OtherKey="ID", IsForeignKey=true)]
	public IndebtPerson IndebtPerson
	{
		get
		{
			return this._IndebtPerson.Entity;
		}
		set
		{
			IndebtPerson previousValue = this._IndebtPerson.Entity;
			if (((previousValue != value) 
						|| (this._IndebtPerson.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._IndebtPerson.Entity = null;
					previousValue.CapitalAssetsCards.Remove(this);
				}
				this._IndebtPerson.Entity = value;
				if ((value != null))
				{
					value.CapitalAssetsCards.Add(this);
					this._IndebtPersonID = value.ID;
				}
				else
				{
					this._IndebtPersonID = default(int);
				}
				this.SendPropertyChanged("IndebtPerson");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_CapitalAssetsCard", Storage="_Location", ThisKey="LocationID", OtherKey="ID", IsForeignKey=true)]
	public Location Location
	{
		get
		{
			return this._Location.Entity;
		}
		set
		{
			Location previousValue = this._Location.Entity;
			if (((previousValue != value) 
						|| (this._Location.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Location.Entity = null;
					previousValue.CapitalAssetsCards.Remove(this);
				}
				this._Location.Entity = value;
				if ((value != null))
				{
					value.CapitalAssetsCards.Add(this);
					this._LocationID = value.ID;
				}
				else
				{
					this._LocationID = default(int);
				}
				this.SendPropertyChanged("Location");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CapitalAssetsCardAmortizations(CapitalAssetsCardAmortization entity)
	{
		this.SendPropertyChanging();
		entity.CapitalAssetsCard = this;
	}
	
	private void detach_CapitalAssetsCardAmortizations(CapitalAssetsCardAmortization entity)
	{
		this.SendPropertyChanging();
		entity.CapitalAssetsCard = null;
	}
	
	private void attach_CapitalAssetsCardRevaluations(CapitalAssetsCardRevaluation entity)
	{
		this.SendPropertyChanging();
		entity.CapitalAssetsCard = this;
	}
	
	private void detach_CapitalAssetsCardRevaluations(CapitalAssetsCardRevaluation entity)
	{
		this.SendPropertyChanging();
		entity.CapitalAssetsCard = null;
	}
	
	private void attach_TemporaryCapitalAssetsCards(TemporaryCapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.CapitalAssetsCard = this;
	}
	
	private void detach_TemporaryCapitalAssetsCards(TemporaryCapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.CapitalAssetsCard = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashDeskEntryDescriptions")]
public partial class CashDeskEntryDescription : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Description;
	
	private string _DebtAccount;
	
	private string _DebitAccount;
	
	private bool _RequiresClientInput;
	
	private bool _RequiresPersonInput;
	
	private int _CashDeskEntryTypeID;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<CashDeskLogbookItem> _CashDeskLogbookItems;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDebtAccountChanging(string value);
    partial void OnDebtAccountChanged();
    partial void OnDebitAccountChanging(string value);
    partial void OnDebitAccountChanged();
    partial void OnRequiresClientInputChanging(bool value);
    partial void OnRequiresClientInputChanged();
    partial void OnRequiresPersonInputChanging(bool value);
    partial void OnRequiresPersonInputChanged();
    partial void OnCashDeskEntryTypeIDChanging(int value);
    partial void OnCashDeskEntryTypeIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public CashDeskEntryDescription()
	{
		this._CashDeskLogbookItems = new EntitySet<CashDeskLogbookItem>(new Action<CashDeskLogbookItem>(this.attach_CashDeskLogbookItems), new Action<CashDeskLogbookItem>(this.detach_CashDeskLogbookItems));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebtAccount", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string DebtAccount
	{
		get
		{
			return this._DebtAccount;
		}
		set
		{
			if ((this._DebtAccount != value))
			{
				this.OnDebtAccountChanging(value);
				this.SendPropertyChanging();
				this._DebtAccount = value;
				this.SendPropertyChanged("DebtAccount");
				this.OnDebtAccountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebitAccount", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string DebitAccount
	{
		get
		{
			return this._DebitAccount;
		}
		set
		{
			if ((this._DebitAccount != value))
			{
				this.OnDebitAccountChanging(value);
				this.SendPropertyChanging();
				this._DebitAccount = value;
				this.SendPropertyChanged("DebitAccount");
				this.OnDebitAccountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiresClientInput", DbType="Bit NOT NULL")]
	public bool RequiresClientInput
	{
		get
		{
			return this._RequiresClientInput;
		}
		set
		{
			if ((this._RequiresClientInput != value))
			{
				this.OnRequiresClientInputChanging(value);
				this.SendPropertyChanging();
				this._RequiresClientInput = value;
				this.SendPropertyChanged("RequiresClientInput");
				this.OnRequiresClientInputChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiresPersonInput", DbType="Bit NOT NULL")]
	public bool RequiresPersonInput
	{
		get
		{
			return this._RequiresPersonInput;
		}
		set
		{
			if ((this._RequiresPersonInput != value))
			{
				this.OnRequiresPersonInputChanging(value);
				this.SendPropertyChanging();
				this._RequiresPersonInput = value;
				this.SendPropertyChanged("RequiresPersonInput");
				this.OnRequiresPersonInputChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDeskEntryTypeID", DbType="Int NOT NULL")]
	public int CashDeskEntryTypeID
	{
		get
		{
			return this._CashDeskEntryTypeID;
		}
		set
		{
			if ((this._CashDeskEntryTypeID != value))
			{
				this.OnCashDeskEntryTypeIDChanging(value);
				this.SendPropertyChanging();
				this._CashDeskEntryTypeID = value;
				this.SendPropertyChanged("CashDeskEntryTypeID");
				this.OnCashDeskEntryTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDeskEntryDescription_CashDeskLogbookItem", Storage="_CashDeskLogbookItems", ThisKey="ID", OtherKey="CashDeskEntryDescriptionID")]
	public EntitySet<CashDeskLogbookItem> CashDeskLogbookItems
	{
		get
		{
			return this._CashDeskLogbookItems;
		}
		set
		{
			this._CashDeskLogbookItems.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.CashDeskEntryDescription = this;
	}
	
	private void detach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.CashDeskEntryDescription = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashDeskEntryTypes")]
public partial class CashDeskEntryType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private EntitySet<CashDeskLogbookItem> _CashDeskLogbookItems;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public CashDeskEntryType()
	{
		this._CashDeskLogbookItems = new EntitySet<CashDeskLogbookItem>(new Action<CashDeskLogbookItem>(this.attach_CashDeskLogbookItems), new Action<CashDeskLogbookItem>(this.detach_CashDeskLogbookItems));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDeskEntryType_CashDeskLogbookItem", Storage="_CashDeskLogbookItems", ThisKey="ID", OtherKey="CashDeskEntryTypeID")]
	public EntitySet<CashDeskLogbookItem> CashDeskLogbookItems
	{
		get
		{
			return this._CashDeskLogbookItems;
		}
		set
		{
			this._CashDeskLogbookItems.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.CashDeskEntryType = this;
	}
	
	private void detach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.CashDeskEntryType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashDeskLogbookItems")]
public partial class CashDeskLogbookItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _CashDeskLogbookID;
	
	private int _OrdinalNumber;
	
	private int _CashboxNumber;
	
	private int _CashDeskEntryDescriptionID;
	
	private System.Nullable<int> _ClientID;
	
	private System.Nullable<int> _CashDeskPersonID;
	
	private string _DocumentNumber;
	
	private System.Nullable<int> _CurrencyID;
	
	private System.Nullable<decimal> _CourseValue;
	
	private System.Nullable<decimal> _CurrencyValue;
	
	private decimal _Value;
	
	private string _Description;
	
	private decimal _DebtValue;
	
	private decimal _DebitValue;
	
	private int _CashDeskEntryTypeID;
	
	private System.Nullable<int> _CompanyID;
	
	private EntityRef<CashDeskEntryDescription> _CashDeskEntryDescription;
	
	private EntityRef<CashDeskEntryType> _CashDeskEntryType;
	
	private EntityRef<CashDeskLogbook> _CashDeskLogbook;
	
	private EntityRef<CashDeskPerson> _CashDeskPerson;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Currency> _Currency;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCashDeskLogbookIDChanging(int value);
    partial void OnCashDeskLogbookIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnCashboxNumberChanging(int value);
    partial void OnCashboxNumberChanged();
    partial void OnCashDeskEntryDescriptionIDChanging(int value);
    partial void OnCashDeskEntryDescriptionIDChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    partial void OnCashDeskPersonIDChanging(System.Nullable<int> value);
    partial void OnCashDeskPersonIDChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnCurrencyIDChanging(System.Nullable<int> value);
    partial void OnCurrencyIDChanged();
    partial void OnCourseValueChanging(System.Nullable<decimal> value);
    partial void OnCourseValueChanged();
    partial void OnCurrencyValueChanging(System.Nullable<decimal> value);
    partial void OnCurrencyValueChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDebtValueChanging(decimal value);
    partial void OnDebtValueChanged();
    partial void OnDebitValueChanging(decimal value);
    partial void OnDebitValueChanged();
    partial void OnCashDeskEntryTypeIDChanging(int value);
    partial void OnCashDeskEntryTypeIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public CashDeskLogbookItem()
	{
		this._CashDeskEntryDescription = default(EntityRef<CashDeskEntryDescription>);
		this._CashDeskEntryType = default(EntityRef<CashDeskEntryType>);
		this._CashDeskLogbook = default(EntityRef<CashDeskLogbook>);
		this._CashDeskPerson = default(EntityRef<CashDeskPerson>);
		this._Client = default(EntityRef<Client>);
		this._Company = default(EntityRef<Company>);
		this._Currency = default(EntityRef<Currency>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDeskLogbookID", DbType="Int NOT NULL")]
	public int CashDeskLogbookID
	{
		get
		{
			return this._CashDeskLogbookID;
		}
		set
		{
			if ((this._CashDeskLogbookID != value))
			{
				if (this._CashDeskLogbook.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCashDeskLogbookIDChanging(value);
				this.SendPropertyChanging();
				this._CashDeskLogbookID = value;
				this.SendPropertyChanged("CashDeskLogbookID");
				this.OnCashDeskLogbookIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashboxNumber", DbType="Int NOT NULL")]
	public int CashboxNumber
	{
		get
		{
			return this._CashboxNumber;
		}
		set
		{
			if ((this._CashboxNumber != value))
			{
				this.OnCashboxNumberChanging(value);
				this.SendPropertyChanging();
				this._CashboxNumber = value;
				this.SendPropertyChanged("CashboxNumber");
				this.OnCashboxNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDeskEntryDescriptionID", DbType="Int NOT NULL")]
	public int CashDeskEntryDescriptionID
	{
		get
		{
			return this._CashDeskEntryDescriptionID;
		}
		set
		{
			if ((this._CashDeskEntryDescriptionID != value))
			{
				if (this._CashDeskEntryDescription.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCashDeskEntryDescriptionIDChanging(value);
				this.SendPropertyChanging();
				this._CashDeskEntryDescriptionID = value;
				this.SendPropertyChanged("CashDeskEntryDescriptionID");
				this.OnCashDeskEntryDescriptionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
	public System.Nullable<int> ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDeskPersonID", DbType="Int")]
	public System.Nullable<int> CashDeskPersonID
	{
		get
		{
			return this._CashDeskPersonID;
		}
		set
		{
			if ((this._CashDeskPersonID != value))
			{
				if (this._CashDeskPerson.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCashDeskPersonIDChanging(value);
				this.SendPropertyChanging();
				this._CashDeskPersonID = value;
				this.SendPropertyChanged("CashDeskPersonID");
				this.OnCashDeskPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="NVarChar(50)")]
	public string DocumentNumber
	{
		get
		{
			return this._DocumentNumber;
		}
		set
		{
			if ((this._DocumentNumber != value))
			{
				this.OnDocumentNumberChanging(value);
				this.SendPropertyChanging();
				this._DocumentNumber = value;
				this.SendPropertyChanged("DocumentNumber");
				this.OnDocumentNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int")]
	public System.Nullable<int> CurrencyID
	{
		get
		{
			return this._CurrencyID;
		}
		set
		{
			if ((this._CurrencyID != value))
			{
				if (this._Currency.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCurrencyIDChanging(value);
				this.SendPropertyChanging();
				this._CurrencyID = value;
				this.SendPropertyChanged("CurrencyID");
				this.OnCurrencyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseValue", DbType="Decimal(18,4)")]
	public System.Nullable<decimal> CourseValue
	{
		get
		{
			return this._CourseValue;
		}
		set
		{
			if ((this._CourseValue != value))
			{
				this.OnCourseValueChanging(value);
				this.SendPropertyChanging();
				this._CourseValue = value;
				this.SendPropertyChanged("CourseValue");
				this.OnCourseValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyValue", DbType="Decimal(18,2)")]
	public System.Nullable<decimal> CurrencyValue
	{
		get
		{
			return this._CurrencyValue;
		}
		set
		{
			if ((this._CurrencyValue != value))
			{
				this.OnCurrencyValueChanging(value);
				this.SendPropertyChanging();
				this._CurrencyValue = value;
				this.SendPropertyChanged("CurrencyValue");
				this.OnCurrencyValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
	public decimal Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebtValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal DebtValue
	{
		get
		{
			return this._DebtValue;
		}
		set
		{
			if ((this._DebtValue != value))
			{
				this.OnDebtValueChanging(value);
				this.SendPropertyChanging();
				this._DebtValue = value;
				this.SendPropertyChanged("DebtValue");
				this.OnDebtValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebitValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal DebitValue
	{
		get
		{
			return this._DebitValue;
		}
		set
		{
			if ((this._DebitValue != value))
			{
				this.OnDebitValueChanging(value);
				this.SendPropertyChanging();
				this._DebitValue = value;
				this.SendPropertyChanged("DebitValue");
				this.OnDebitValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDeskEntryTypeID", DbType="Int NOT NULL")]
	public int CashDeskEntryTypeID
	{
		get
		{
			return this._CashDeskEntryTypeID;
		}
		set
		{
			if ((this._CashDeskEntryTypeID != value))
			{
				if (this._CashDeskEntryType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCashDeskEntryTypeIDChanging(value);
				this.SendPropertyChanging();
				this._CashDeskEntryTypeID = value;
				this.SendPropertyChanged("CashDeskEntryTypeID");
				this.OnCashDeskEntryTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDeskEntryDescription_CashDeskLogbookItem", Storage="_CashDeskEntryDescription", ThisKey="CashDeskEntryDescriptionID", OtherKey="ID", IsForeignKey=true)]
	public CashDeskEntryDescription CashDeskEntryDescription
	{
		get
		{
			return this._CashDeskEntryDescription.Entity;
		}
		set
		{
			CashDeskEntryDescription previousValue = this._CashDeskEntryDescription.Entity;
			if (((previousValue != value) 
						|| (this._CashDeskEntryDescription.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CashDeskEntryDescription.Entity = null;
					previousValue.CashDeskLogbookItems.Remove(this);
				}
				this._CashDeskEntryDescription.Entity = value;
				if ((value != null))
				{
					value.CashDeskLogbookItems.Add(this);
					this._CashDeskEntryDescriptionID = value.ID;
				}
				else
				{
					this._CashDeskEntryDescriptionID = default(int);
				}
				this.SendPropertyChanged("CashDeskEntryDescription");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDeskEntryType_CashDeskLogbookItem", Storage="_CashDeskEntryType", ThisKey="CashDeskEntryTypeID", OtherKey="ID", IsForeignKey=true)]
	public CashDeskEntryType CashDeskEntryType
	{
		get
		{
			return this._CashDeskEntryType.Entity;
		}
		set
		{
			CashDeskEntryType previousValue = this._CashDeskEntryType.Entity;
			if (((previousValue != value) 
						|| (this._CashDeskEntryType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CashDeskEntryType.Entity = null;
					previousValue.CashDeskLogbookItems.Remove(this);
				}
				this._CashDeskEntryType.Entity = value;
				if ((value != null))
				{
					value.CashDeskLogbookItems.Add(this);
					this._CashDeskEntryTypeID = value.ID;
				}
				else
				{
					this._CashDeskEntryTypeID = default(int);
				}
				this.SendPropertyChanged("CashDeskEntryType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDeskLogbook_CashDeskLogbookItem", Storage="_CashDeskLogbook", ThisKey="CashDeskLogbookID", OtherKey="ID", IsForeignKey=true)]
	public CashDeskLogbook CashDeskLogbook
	{
		get
		{
			return this._CashDeskLogbook.Entity;
		}
		set
		{
			CashDeskLogbook previousValue = this._CashDeskLogbook.Entity;
			if (((previousValue != value) 
						|| (this._CashDeskLogbook.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CashDeskLogbook.Entity = null;
					previousValue.CashDeskLogbookItems.Remove(this);
				}
				this._CashDeskLogbook.Entity = value;
				if ((value != null))
				{
					value.CashDeskLogbookItems.Add(this);
					this._CashDeskLogbookID = value.ID;
				}
				else
				{
					this._CashDeskLogbookID = default(int);
				}
				this.SendPropertyChanged("CashDeskLogbook");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDeskPerson_CashDeskLogbookItem", Storage="_CashDeskPerson", ThisKey="CashDeskPersonID", OtherKey="ID", IsForeignKey=true)]
	public CashDeskPerson CashDeskPerson
	{
		get
		{
			return this._CashDeskPerson.Entity;
		}
		set
		{
			CashDeskPerson previousValue = this._CashDeskPerson.Entity;
			if (((previousValue != value) 
						|| (this._CashDeskPerson.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CashDeskPerson.Entity = null;
					previousValue.CashDeskLogbookItems.Remove(this);
				}
				this._CashDeskPerson.Entity = value;
				if ((value != null))
				{
					value.CashDeskLogbookItems.Add(this);
					this._CashDeskPersonID = value.ID;
				}
				else
				{
					this._CashDeskPersonID = default(Nullable<int>);
				}
				this.SendPropertyChanged("CashDeskPerson");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CashDeskLogbookItem", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.CashDeskLogbookItems.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.CashDeskLogbookItems.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CashDeskLogbookItem", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.CashDeskLogbookItems.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.CashDeskLogbookItems.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_CashDeskLogbookItem", Storage="_Currency", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
	public Currency Currency
	{
		get
		{
			return this._Currency.Entity;
		}
		set
		{
			Currency previousValue = this._Currency.Entity;
			if (((previousValue != value) 
						|| (this._Currency.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Currency.Entity = null;
					previousValue.CashDeskLogbookItems.Remove(this);
				}
				this._Currency.Entity = value;
				if ((value != null))
				{
					value.CashDeskLogbookItems.Add(this);
					this._CurrencyID = value.ID;
				}
				else
				{
					this._CurrencyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Currency");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashDeskLogbooks")]
public partial class CashDeskLogbook : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Number;
	
	private System.DateTime _Date;
	
	private int _CashDeskTypeID;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<CashDeskLogbookItem> _CashDeskLogbookItems;
	
	private EntityRef<CashDeskType> _CashDeskType;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCashDeskTypeIDChanging(int value);
    partial void OnCashDeskTypeIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public CashDeskLogbook()
	{
		this._CashDeskLogbookItems = new EntitySet<CashDeskLogbookItem>(new Action<CashDeskLogbookItem>(this.attach_CashDeskLogbookItems), new Action<CashDeskLogbookItem>(this.detach_CashDeskLogbookItems));
		this._CashDeskType = default(EntityRef<CashDeskType>);
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDeskTypeID", DbType="Int NOT NULL")]
	public int CashDeskTypeID
	{
		get
		{
			return this._CashDeskTypeID;
		}
		set
		{
			if ((this._CashDeskTypeID != value))
			{
				if (this._CashDeskType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCashDeskTypeIDChanging(value);
				this.SendPropertyChanging();
				this._CashDeskTypeID = value;
				this.SendPropertyChanged("CashDeskTypeID");
				this.OnCashDeskTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDeskLogbook_CashDeskLogbookItem", Storage="_CashDeskLogbookItems", ThisKey="ID", OtherKey="CashDeskLogbookID")]
	public EntitySet<CashDeskLogbookItem> CashDeskLogbookItems
	{
		get
		{
			return this._CashDeskLogbookItems;
		}
		set
		{
			this._CashDeskLogbookItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDeskType_CashDeskLogbook", Storage="_CashDeskType", ThisKey="CashDeskTypeID", OtherKey="ID", IsForeignKey=true)]
	public CashDeskType CashDeskType
	{
		get
		{
			return this._CashDeskType.Entity;
		}
		set
		{
			CashDeskType previousValue = this._CashDeskType.Entity;
			if (((previousValue != value) 
						|| (this._CashDeskType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CashDeskType.Entity = null;
					previousValue.CashDeskLogbooks.Remove(this);
				}
				this._CashDeskType.Entity = value;
				if ((value != null))
				{
					value.CashDeskLogbooks.Add(this);
					this._CashDeskTypeID = value.ID;
				}
				else
				{
					this._CashDeskTypeID = default(int);
				}
				this.SendPropertyChanged("CashDeskType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CashDeskLogbook", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.CashDeskLogbooks.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.CashDeskLogbooks.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.CashDeskLogbook = this;
	}
	
	private void detach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.CashDeskLogbook = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashDeskPersons")]
public partial class CashDeskPerson : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _PersonID;
	
	private string _Code;
	
	private bool _IsActive;
	
	private EntitySet<CashDeskLogbookItem> _CashDeskLogbookItems;
	
	private EntityRef<Person> _Person;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
	
	public CashDeskPerson()
	{
		this._CashDeskLogbookItems = new EntitySet<CashDeskLogbookItem>(new Action<CashDeskLogbookItem>(this.attach_CashDeskLogbookItems), new Action<CashDeskLogbookItem>(this.detach_CashDeskLogbookItems));
		this._Person = default(EntityRef<Person>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
	public int PersonID
	{
		get
		{
			return this._PersonID;
		}
		set
		{
			if ((this._PersonID != value))
			{
				if (this._Person.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPersonIDChanging(value);
				this.SendPropertyChanging();
				this._PersonID = value;
				this.SendPropertyChanged("PersonID");
				this.OnPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDeskPerson_CashDeskLogbookItem", Storage="_CashDeskLogbookItems", ThisKey="ID", OtherKey="CashDeskPersonID")]
	public EntitySet<CashDeskLogbookItem> CashDeskLogbookItems
	{
		get
		{
			return this._CashDeskLogbookItems;
		}
		set
		{
			this._CashDeskLogbookItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_CashDeskPerson", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
	public Person Person
	{
		get
		{
			return this._Person.Entity;
		}
		set
		{
			Person previousValue = this._Person.Entity;
			if (((previousValue != value) 
						|| (this._Person.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Person.Entity = null;
					previousValue.CashDeskPersons.Remove(this);
				}
				this._Person.Entity = value;
				if ((value != null))
				{
					value.CashDeskPersons.Add(this);
					this._PersonID = value.ID;
				}
				else
				{
					this._PersonID = default(int);
				}
				this.SendPropertyChanged("Person");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.CashDeskPerson = this;
	}
	
	private void detach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.CashDeskPerson = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashDeskTypes")]
public partial class CashDeskType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<CashDeskLogbook> _CashDeskLogbooks;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public CashDeskType()
	{
		this._CashDeskLogbooks = new EntitySet<CashDeskLogbook>(new Action<CashDeskLogbook>(this.attach_CashDeskLogbooks), new Action<CashDeskLogbook>(this.detach_CashDeskLogbooks));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDeskType_CashDeskLogbook", Storage="_CashDeskLogbooks", ThisKey="ID", OtherKey="CashDeskTypeID")]
	public EntitySet<CashDeskLogbook> CashDeskLogbooks
	{
		get
		{
			return this._CashDeskLogbooks;
		}
		set
		{
			this._CashDeskLogbooks.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CashDeskType", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.CashDeskTypes.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.CashDeskTypes.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CashDeskLogbooks(CashDeskLogbook entity)
	{
		this.SendPropertyChanging();
		entity.CashDeskType = this;
	}
	
	private void detach_CashDeskLogbooks(CashDeskLogbook entity)
	{
		this.SendPropertyChanging();
		entity.CashDeskType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashPaymentItems")]
public partial class CashPaymentItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _CashPaymentID;
	
	private decimal _Value;
	
	private int _PaymentTypeID;
	
	private EntityRef<CashPayment> _CashPayment;
	
	private EntityRef<PaymentType> _PaymentType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCashPaymentIDChanging(int value);
    partial void OnCashPaymentIDChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnPaymentTypeIDChanging(int value);
    partial void OnPaymentTypeIDChanged();
    #endregion
	
	public CashPaymentItem()
	{
		this._CashPayment = default(EntityRef<CashPayment>);
		this._PaymentType = default(EntityRef<PaymentType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashPaymentID", DbType="Int NOT NULL")]
	public int CashPaymentID
	{
		get
		{
			return this._CashPaymentID;
		}
		set
		{
			if ((this._CashPaymentID != value))
			{
				if (this._CashPayment.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCashPaymentIDChanging(value);
				this.SendPropertyChanging();
				this._CashPaymentID = value;
				this.SendPropertyChanged("CashPaymentID");
				this.OnCashPaymentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
	public decimal Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTypeID", DbType="Int NOT NULL")]
	public int PaymentTypeID
	{
		get
		{
			return this._PaymentTypeID;
		}
		set
		{
			if ((this._PaymentTypeID != value))
			{
				if (this._PaymentType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPaymentTypeIDChanging(value);
				this.SendPropertyChanging();
				this._PaymentTypeID = value;
				this.SendPropertyChanged("PaymentTypeID");
				this.OnPaymentTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashPayment_CashPaymentItem", Storage="_CashPayment", ThisKey="CashPaymentID", OtherKey="ID", IsForeignKey=true)]
	public CashPayment CashPayment
	{
		get
		{
			return this._CashPayment.Entity;
		}
		set
		{
			CashPayment previousValue = this._CashPayment.Entity;
			if (((previousValue != value) 
						|| (this._CashPayment.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CashPayment.Entity = null;
					previousValue.CashPaymentItems.Remove(this);
				}
				this._CashPayment.Entity = value;
				if ((value != null))
				{
					value.CashPaymentItems.Add(this);
					this._CashPaymentID = value.ID;
				}
				else
				{
					this._CashPaymentID = default(int);
				}
				this.SendPropertyChanged("CashPayment");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_CashPaymentItem", Storage="_PaymentType", ThisKey="PaymentTypeID", OtherKey="ID", IsForeignKey=true)]
	public PaymentType PaymentType
	{
		get
		{
			return this._PaymentType.Entity;
		}
		set
		{
			PaymentType previousValue = this._PaymentType.Entity;
			if (((previousValue != value) 
						|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PaymentType.Entity = null;
					previousValue.CashPaymentItems.Remove(this);
				}
				this._PaymentType.Entity = value;
				if ((value != null))
				{
					value.CashPaymentItems.Add(this);
					this._PaymentTypeID = value.ID;
				}
				else
				{
					this._PaymentTypeID = default(int);
				}
				this.SendPropertyChanged("PaymentType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashPayments")]
public partial class CashPayment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _PolicyNumber;
	
	private string _SerialNumber;
	
	private System.DateTime _Date;
	
	private bool _IsBooked;
	
	private EntitySet<CashPaymentItem> _CashPaymentItems;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPolicyNumberChanging(string value);
    partial void OnPolicyNumberChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsBookedChanging(bool value);
    partial void OnIsBookedChanged();
    #endregion
	
	public CashPayment()
	{
		this._CashPaymentItems = new EntitySet<CashPaymentItem>(new Action<CashPaymentItem>(this.attach_CashPaymentItems), new Action<CashPaymentItem>(this.detach_CashPaymentItems));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyNumber", DbType="NVarChar(50)")]
	public string PolicyNumber
	{
		get
		{
			return this._PolicyNumber;
		}
		set
		{
			if ((this._PolicyNumber != value))
			{
				this.OnPolicyNumberChanging(value);
				this.SendPropertyChanging();
				this._PolicyNumber = value;
				this.SendPropertyChanged("PolicyNumber");
				this.OnPolicyNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string SerialNumber
	{
		get
		{
			return this._SerialNumber;
		}
		set
		{
			if ((this._SerialNumber != value))
			{
				this.OnSerialNumberChanging(value);
				this.SendPropertyChanging();
				this._SerialNumber = value;
				this.SendPropertyChanged("SerialNumber");
				this.OnSerialNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBooked", DbType="Bit NOT NULL")]
	public bool IsBooked
	{
		get
		{
			return this._IsBooked;
		}
		set
		{
			if ((this._IsBooked != value))
			{
				this.OnIsBookedChanging(value);
				this.SendPropertyChanging();
				this._IsBooked = value;
				this.SendPropertyChanged("IsBooked");
				this.OnIsBookedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashPayment_CashPaymentItem", Storage="_CashPaymentItems", ThisKey="ID", OtherKey="CashPaymentID")]
	public EntitySet<CashPaymentItem> CashPaymentItems
	{
		get
		{
			return this._CashPaymentItems;
		}
		set
		{
			this._CashPaymentItems.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CashPaymentItems(CashPaymentItem entity)
	{
		this.SendPropertyChanging();
		entity.CashPayment = this;
	}
	
	private void detach_CashPaymentItems(CashPaymentItem entity)
	{
		this.SendPropertyChanging();
		entity.CashPayment = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChartOfAccounts")]
public partial class ChartOfAccount : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Description;
	
	private bool _MustHaveClient;
	
	private bool _IsForTaxEntry;
	
	private bool _IsActive;
	
	private bool _MustHaveLocation;
	
	private System.Nullable<bool> _IsPosition;
	
	private System.Nullable<bool> _HasPosition;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<BalanceCarriedForward> _BalanceCarriedForwards;
	
	private EntitySet<BrokerABAccountFacturesSetup> _BrokerABAccountFacturesSetups;
	
	private EntitySet<BrokerABCashSetup> _BrokerABCashSetups;
	
	private EntitySet<BrokerABCreditCardsSetup> _BrokerABCreditCardsSetups;
	
	private EntitySet<BrokerABIncomeFacturesForExpencesSetup> _BrokerABIncomeFacturesForExpencesSetups;
	
	private EntitySet<BrokerABIncomeFacturesSetup> _BrokerABIncomeFacturesSetups;
	
	private EntitySet<ChartOfAccountsDocumentType> _ChartOfAccountsDocumentTypes;
	
	private EntitySet<CostType> _CostTypes;
	
	private EntitySet<DDVtypesChartOfAccount> _DDVtypesChartOfAccounts;
	
	private EntitySet<EntryControlsChartOfAccount> _EntryControlsChartOfAccounts;
	
	private EntitySet<OrderItem> _OrderItems;
	
	private EntitySet<OrderItem> _OrderItems1;
	
	private EntitySet<PaymentForm> _PaymentForms;
	
	private EntitySet<PaymentForm> _PaymentForms1;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMustHaveClientChanging(bool value);
    partial void OnMustHaveClientChanged();
    partial void OnIsForTaxEntryChanging(bool value);
    partial void OnIsForTaxEntryChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnMustHaveLocationChanging(bool value);
    partial void OnMustHaveLocationChanged();
    partial void OnIsPositionChanging(System.Nullable<bool> value);
    partial void OnIsPositionChanged();
    partial void OnHasPositionChanging(System.Nullable<bool> value);
    partial void OnHasPositionChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public ChartOfAccount()
	{
		this._BalanceCarriedForwards = new EntitySet<BalanceCarriedForward>(new Action<BalanceCarriedForward>(this.attach_BalanceCarriedForwards), new Action<BalanceCarriedForward>(this.detach_BalanceCarriedForwards));
		this._BrokerABAccountFacturesSetups = new EntitySet<BrokerABAccountFacturesSetup>(new Action<BrokerABAccountFacturesSetup>(this.attach_BrokerABAccountFacturesSetups), new Action<BrokerABAccountFacturesSetup>(this.detach_BrokerABAccountFacturesSetups));
		this._BrokerABCashSetups = new EntitySet<BrokerABCashSetup>(new Action<BrokerABCashSetup>(this.attach_BrokerABCashSetups), new Action<BrokerABCashSetup>(this.detach_BrokerABCashSetups));
		this._BrokerABCreditCardsSetups = new EntitySet<BrokerABCreditCardsSetup>(new Action<BrokerABCreditCardsSetup>(this.attach_BrokerABCreditCardsSetups), new Action<BrokerABCreditCardsSetup>(this.detach_BrokerABCreditCardsSetups));
		this._BrokerABIncomeFacturesForExpencesSetups = new EntitySet<BrokerABIncomeFacturesForExpencesSetup>(new Action<BrokerABIncomeFacturesForExpencesSetup>(this.attach_BrokerABIncomeFacturesForExpencesSetups), new Action<BrokerABIncomeFacturesForExpencesSetup>(this.detach_BrokerABIncomeFacturesForExpencesSetups));
		this._BrokerABIncomeFacturesSetups = new EntitySet<BrokerABIncomeFacturesSetup>(new Action<BrokerABIncomeFacturesSetup>(this.attach_BrokerABIncomeFacturesSetups), new Action<BrokerABIncomeFacturesSetup>(this.detach_BrokerABIncomeFacturesSetups));
		this._ChartOfAccountsDocumentTypes = new EntitySet<ChartOfAccountsDocumentType>(new Action<ChartOfAccountsDocumentType>(this.attach_ChartOfAccountsDocumentTypes), new Action<ChartOfAccountsDocumentType>(this.detach_ChartOfAccountsDocumentTypes));
		this._CostTypes = new EntitySet<CostType>(new Action<CostType>(this.attach_CostTypes), new Action<CostType>(this.detach_CostTypes));
		this._DDVtypesChartOfAccounts = new EntitySet<DDVtypesChartOfAccount>(new Action<DDVtypesChartOfAccount>(this.attach_DDVtypesChartOfAccounts), new Action<DDVtypesChartOfAccount>(this.detach_DDVtypesChartOfAccounts));
		this._EntryControlsChartOfAccounts = new EntitySet<EntryControlsChartOfAccount>(new Action<EntryControlsChartOfAccount>(this.attach_EntryControlsChartOfAccounts), new Action<EntryControlsChartOfAccount>(this.detach_EntryControlsChartOfAccounts));
		this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
		this._OrderItems1 = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems1), new Action<OrderItem>(this.detach_OrderItems1));
		this._PaymentForms = new EntitySet<PaymentForm>(new Action<PaymentForm>(this.attach_PaymentForms), new Action<PaymentForm>(this.detach_PaymentForms));
		this._PaymentForms1 = new EntitySet<PaymentForm>(new Action<PaymentForm>(this.attach_PaymentForms1), new Action<PaymentForm>(this.detach_PaymentForms1));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MustHaveClient", DbType="Bit NOT NULL")]
	public bool MustHaveClient
	{
		get
		{
			return this._MustHaveClient;
		}
		set
		{
			if ((this._MustHaveClient != value))
			{
				this.OnMustHaveClientChanging(value);
				this.SendPropertyChanging();
				this._MustHaveClient = value;
				this.SendPropertyChanged("MustHaveClient");
				this.OnMustHaveClientChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForTaxEntry", DbType="Bit NOT NULL")]
	public bool IsForTaxEntry
	{
		get
		{
			return this._IsForTaxEntry;
		}
		set
		{
			if ((this._IsForTaxEntry != value))
			{
				this.OnIsForTaxEntryChanging(value);
				this.SendPropertyChanging();
				this._IsForTaxEntry = value;
				this.SendPropertyChanged("IsForTaxEntry");
				this.OnIsForTaxEntryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MustHaveLocation", DbType="Bit NOT NULL")]
	public bool MustHaveLocation
	{
		get
		{
			return this._MustHaveLocation;
		}
		set
		{
			if ((this._MustHaveLocation != value))
			{
				this.OnMustHaveLocationChanging(value);
				this.SendPropertyChanging();
				this._MustHaveLocation = value;
				this.SendPropertyChanged("MustHaveLocation");
				this.OnMustHaveLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPosition", DbType="Bit")]
	public System.Nullable<bool> IsPosition
	{
		get
		{
			return this._IsPosition;
		}
		set
		{
			if ((this._IsPosition != value))
			{
				this.OnIsPositionChanging(value);
				this.SendPropertyChanging();
				this._IsPosition = value;
				this.SendPropertyChanged("IsPosition");
				this.OnIsPositionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasPosition", DbType="Bit")]
	public System.Nullable<bool> HasPosition
	{
		get
		{
			return this._HasPosition;
		}
		set
		{
			if ((this._HasPosition != value))
			{
				this.OnHasPositionChanging(value);
				this.SendPropertyChanging();
				this._HasPosition = value;
				this.SendPropertyChanged("HasPosition");
				this.OnHasPositionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BalanceCarriedForward", Storage="_BalanceCarriedForwards", ThisKey="ID", OtherKey="ChartOfAccountID")]
	public EntitySet<BalanceCarriedForward> BalanceCarriedForwards
	{
		get
		{
			return this._BalanceCarriedForwards;
		}
		set
		{
			this._BalanceCarriedForwards.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BrokerABAccountFacturesSetup", Storage="_BrokerABAccountFacturesSetups", ThisKey="ID", OtherKey="ChartOfAccountID")]
	public EntitySet<BrokerABAccountFacturesSetup> BrokerABAccountFacturesSetups
	{
		get
		{
			return this._BrokerABAccountFacturesSetups;
		}
		set
		{
			this._BrokerABAccountFacturesSetups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BrokerABCashSetup", Storage="_BrokerABCashSetups", ThisKey="ID", OtherKey="ChartOfAccountID")]
	public EntitySet<BrokerABCashSetup> BrokerABCashSetups
	{
		get
		{
			return this._BrokerABCashSetups;
		}
		set
		{
			this._BrokerABCashSetups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BrokerABCreditCardsSetup", Storage="_BrokerABCreditCardsSetups", ThisKey="ID", OtherKey="ChartOfAccountID")]
	public EntitySet<BrokerABCreditCardsSetup> BrokerABCreditCardsSetups
	{
		get
		{
			return this._BrokerABCreditCardsSetups;
		}
		set
		{
			this._BrokerABCreditCardsSetups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BrokerABIncomeFacturesForExpencesSetup", Storage="_BrokerABIncomeFacturesForExpencesSetups", ThisKey="ID", OtherKey="ChartOfAccountID")]
	public EntitySet<BrokerABIncomeFacturesForExpencesSetup> BrokerABIncomeFacturesForExpencesSetups
	{
		get
		{
			return this._BrokerABIncomeFacturesForExpencesSetups;
		}
		set
		{
			this._BrokerABIncomeFacturesForExpencesSetups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_BrokerABIncomeFacturesSetup", Storage="_BrokerABIncomeFacturesSetups", ThisKey="ID", OtherKey="ChartOfAccountID")]
	public EntitySet<BrokerABIncomeFacturesSetup> BrokerABIncomeFacturesSetups
	{
		get
		{
			return this._BrokerABIncomeFacturesSetups;
		}
		set
		{
			this._BrokerABIncomeFacturesSetups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_ChartOfAccountsDocumentType", Storage="_ChartOfAccountsDocumentTypes", ThisKey="ID", OtherKey="ChartOfAccountsID")]
	public EntitySet<ChartOfAccountsDocumentType> ChartOfAccountsDocumentTypes
	{
		get
		{
			return this._ChartOfAccountsDocumentTypes;
		}
		set
		{
			this._ChartOfAccountsDocumentTypes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_CostType", Storage="_CostTypes", ThisKey="ID", OtherKey="ChartOfAccountID")]
	public EntitySet<CostType> CostTypes
	{
		get
		{
			return this._CostTypes;
		}
		set
		{
			this._CostTypes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_DDVtypesChartOfAccount", Storage="_DDVtypesChartOfAccounts", ThisKey="ID", OtherKey="ChartOfAccountID")]
	public EntitySet<DDVtypesChartOfAccount> DDVtypesChartOfAccounts
	{
		get
		{
			return this._DDVtypesChartOfAccounts;
		}
		set
		{
			this._DDVtypesChartOfAccounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_EntryControlsChartOfAccount", Storage="_EntryControlsChartOfAccounts", ThisKey="ID", OtherKey="ChartOfAccountID")]
	public EntitySet<EntryControlsChartOfAccount> EntryControlsChartOfAccounts
	{
		get
		{
			return this._EntryControlsChartOfAccounts;
		}
		set
		{
			this._EntryControlsChartOfAccounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_OrderItem", Storage="_OrderItems", ThisKey="ID", OtherKey="ChartOfAccountID")]
	public EntitySet<OrderItem> OrderItems
	{
		get
		{
			return this._OrderItems;
		}
		set
		{
			this._OrderItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_OrderItem1", Storage="_OrderItems1", ThisKey="ID", OtherKey="ChartOfAccountPositionID")]
	public EntitySet<OrderItem> OrderItems1
	{
		get
		{
			return this._OrderItems1;
		}
		set
		{
			this._OrderItems1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_PaymentForm", Storage="_PaymentForms", ThisKey="ID", OtherKey="OutFlowChartOfAccountID")]
	public EntitySet<PaymentForm> PaymentForms
	{
		get
		{
			return this._PaymentForms;
		}
		set
		{
			this._PaymentForms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_PaymentForm1", Storage="_PaymentForms1", ThisKey="ID", OtherKey="InflowChartOfAccountID")]
	public EntitySet<PaymentForm> PaymentForms1
	{
		get
		{
			return this._PaymentForms1;
		}
		set
		{
			this._PaymentForms1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ChartOfAccount", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.ChartOfAccounts.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.ChartOfAccounts.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_BalanceCarriedForwards(BalanceCarriedForward entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_BalanceCarriedForwards(BalanceCarriedForward entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_BrokerABAccountFacturesSetups(BrokerABAccountFacturesSetup entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_BrokerABAccountFacturesSetups(BrokerABAccountFacturesSetup entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_BrokerABCashSetups(BrokerABCashSetup entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_BrokerABCashSetups(BrokerABCashSetup entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_BrokerABCreditCardsSetups(BrokerABCreditCardsSetup entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_BrokerABCreditCardsSetups(BrokerABCreditCardsSetup entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_BrokerABIncomeFacturesForExpencesSetups(BrokerABIncomeFacturesForExpencesSetup entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_BrokerABIncomeFacturesForExpencesSetups(BrokerABIncomeFacturesForExpencesSetup entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_BrokerABIncomeFacturesSetups(BrokerABIncomeFacturesSetup entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_BrokerABIncomeFacturesSetups(BrokerABIncomeFacturesSetup entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_ChartOfAccountsDocumentTypes(ChartOfAccountsDocumentType entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_ChartOfAccountsDocumentTypes(ChartOfAccountsDocumentType entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_CostTypes(CostType entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_CostTypes(CostType entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_DDVtypesChartOfAccounts(DDVtypesChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_DDVtypesChartOfAccounts(DDVtypesChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_EntryControlsChartOfAccounts(EntryControlsChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_EntryControlsChartOfAccounts(EntryControlsChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_OrderItems1(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount1 = this;
	}
	
	private void detach_OrderItems1(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount1 = null;
	}
	
	private void attach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = this;
	}
	
	private void detach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount = null;
	}
	
	private void attach_PaymentForms1(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount1 = this;
	}
	
	private void detach_PaymentForms1(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.ChartOfAccount1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChartOfAccountsDocumentTypes")]
public partial class ChartOfAccountsDocumentType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ChartOfAccountsID;
	
	private int _DocumentTypeID;
	
	private bool _IsDefault;
	
	private bool _IsActive;
	
	private bool _IsDebt;
	
	private System.Nullable<int> _CompanyID;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<DocumentType> _DocumentType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChartOfAccountsIDChanging(int value);
    partial void OnChartOfAccountsIDChanged();
    partial void OnDocumentTypeIDChanging(int value);
    partial void OnDocumentTypeIDChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDebtChanging(bool value);
    partial void OnIsDebtChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public ChartOfAccountsDocumentType()
	{
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		this._Company = default(EntityRef<Company>);
		this._DocumentType = default(EntityRef<DocumentType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountsID", DbType="Int NOT NULL")]
	public int ChartOfAccountsID
	{
		get
		{
			return this._ChartOfAccountsID;
		}
		set
		{
			if ((this._ChartOfAccountsID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountsIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountsID = value;
				this.SendPropertyChanged("ChartOfAccountsID");
				this.OnChartOfAccountsIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeID", DbType="Int NOT NULL")]
	public int DocumentTypeID
	{
		get
		{
			return this._DocumentTypeID;
		}
		set
		{
			if ((this._DocumentTypeID != value))
			{
				if (this._DocumentType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocumentTypeIDChanging(value);
				this.SendPropertyChanging();
				this._DocumentTypeID = value;
				this.SendPropertyChanged("DocumentTypeID");
				this.OnDocumentTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefault", DbType="Bit NOT NULL")]
	public bool IsDefault
	{
		get
		{
			return this._IsDefault;
		}
		set
		{
			if ((this._IsDefault != value))
			{
				this.OnIsDefaultChanging(value);
				this.SendPropertyChanging();
				this._IsDefault = value;
				this.SendPropertyChanged("IsDefault");
				this.OnIsDefaultChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDebt", DbType="Bit NOT NULL")]
	public bool IsDebt
	{
		get
		{
			return this._IsDebt;
		}
		set
		{
			if ((this._IsDebt != value))
			{
				this.OnIsDebtChanging(value);
				this.SendPropertyChanging();
				this._IsDebt = value;
				this.SendPropertyChanged("IsDebt");
				this.OnIsDebtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_ChartOfAccountsDocumentType", Storage="_ChartOfAccount", ThisKey="ChartOfAccountsID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.ChartOfAccountsDocumentTypes.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.ChartOfAccountsDocumentTypes.Add(this);
					this._ChartOfAccountsID = value.ID;
				}
				else
				{
					this._ChartOfAccountsID = default(int);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ChartOfAccountsDocumentType", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.ChartOfAccountsDocumentTypes.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.ChartOfAccountsDocumentTypes.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_ChartOfAccountsDocumentType", Storage="_DocumentType", ThisKey="DocumentTypeID", OtherKey="ID", IsForeignKey=true)]
	public DocumentType DocumentType
	{
		get
		{
			return this._DocumentType.Entity;
		}
		set
		{
			DocumentType previousValue = this._DocumentType.Entity;
			if (((previousValue != value) 
						|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DocumentType.Entity = null;
					previousValue.ChartOfAccountsDocumentTypes.Remove(this);
				}
				this._DocumentType.Entity = value;
				if ((value != null))
				{
					value.ChartOfAccountsDocumentTypes.Add(this);
					this._DocumentTypeID = value.ID;
				}
				else
				{
					this._DocumentTypeID = default(int);
				}
				this.SendPropertyChanged("DocumentType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _EMBG;
	
	private string _Name;
	
	private bool _IsLaw;
	
	private string _Address;
	
	private string _PhoneNumber;
	
	private string _MobileNumber;
	
	private string _FaxNumber;
	
	private string _TaxNumber;
	
	private int _PlaceID;
	
	private System.Nullable<bool> _IsSeller;
	
	private System.Nullable<bool> _IsBuyer;
	
	private System.Nullable<int> _CompanyID;
	
	private string _IBAN;
	
	private EntitySet<AdvanceInvoice> _AdvanceInvoices;
	
	private EntitySet<CapitalAssetsCard> _CapitalAssetsCards;
	
	private EntitySet<CashDeskLogbookItem> _CashDeskLogbookItems;
	
	private EntitySet<ClientsBank> _ClientsBanks;
	
	private EntitySet<EntranceExpence> _EntranceExpences;
	
	private EntitySet<Entrance> _Entrances;
	
	private EntitySet<Facture> _Factures;
	
	private EntitySet<ItemOriginalCost> _ItemOriginalCosts;
	
	private EntitySet<OrderItem> _OrderItems;
	
	private EntitySet<OutgoingFacture> _OutgoingFactures;
	
	private EntitySet<PaymentForm> _PaymentForms;
	
	private EntitySet<PayOff> _PayOffs;
	
	private EntitySet<Returnee> _Returnees;
	
	private EntitySet<StoreWorkUnitEntrance> _StoreWorkUnitEntrances;
	
	private EntitySet<Withholding> _Withholdings;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Place> _Place;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnEMBGChanging(string value);
    partial void OnEMBGChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsLawChanging(bool value);
    partial void OnIsLawChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnMobileNumberChanging(string value);
    partial void OnMobileNumberChanged();
    partial void OnFaxNumberChanging(string value);
    partial void OnFaxNumberChanged();
    partial void OnTaxNumberChanging(string value);
    partial void OnTaxNumberChanged();
    partial void OnPlaceIDChanging(int value);
    partial void OnPlaceIDChanged();
    partial void OnIsSellerChanging(System.Nullable<bool> value);
    partial void OnIsSellerChanged();
    partial void OnIsBuyerChanging(System.Nullable<bool> value);
    partial void OnIsBuyerChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    partial void OnIBANChanging(string value);
    partial void OnIBANChanged();
    #endregion
	
	public Client()
	{
		this._AdvanceInvoices = new EntitySet<AdvanceInvoice>(new Action<AdvanceInvoice>(this.attach_AdvanceInvoices), new Action<AdvanceInvoice>(this.detach_AdvanceInvoices));
		this._CapitalAssetsCards = new EntitySet<CapitalAssetsCard>(new Action<CapitalAssetsCard>(this.attach_CapitalAssetsCards), new Action<CapitalAssetsCard>(this.detach_CapitalAssetsCards));
		this._CashDeskLogbookItems = new EntitySet<CashDeskLogbookItem>(new Action<CashDeskLogbookItem>(this.attach_CashDeskLogbookItems), new Action<CashDeskLogbookItem>(this.detach_CashDeskLogbookItems));
		this._ClientsBanks = new EntitySet<ClientsBank>(new Action<ClientsBank>(this.attach_ClientsBanks), new Action<ClientsBank>(this.detach_ClientsBanks));
		this._EntranceExpences = new EntitySet<EntranceExpence>(new Action<EntranceExpence>(this.attach_EntranceExpences), new Action<EntranceExpence>(this.detach_EntranceExpences));
		this._Entrances = new EntitySet<Entrance>(new Action<Entrance>(this.attach_Entrances), new Action<Entrance>(this.detach_Entrances));
		this._Factures = new EntitySet<Facture>(new Action<Facture>(this.attach_Factures), new Action<Facture>(this.detach_Factures));
		this._ItemOriginalCosts = new EntitySet<ItemOriginalCost>(new Action<ItemOriginalCost>(this.attach_ItemOriginalCosts), new Action<ItemOriginalCost>(this.detach_ItemOriginalCosts));
		this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
		this._OutgoingFactures = new EntitySet<OutgoingFacture>(new Action<OutgoingFacture>(this.attach_OutgoingFactures), new Action<OutgoingFacture>(this.detach_OutgoingFactures));
		this._PaymentForms = new EntitySet<PaymentForm>(new Action<PaymentForm>(this.attach_PaymentForms), new Action<PaymentForm>(this.detach_PaymentForms));
		this._PayOffs = new EntitySet<PayOff>(new Action<PayOff>(this.attach_PayOffs), new Action<PayOff>(this.detach_PayOffs));
		this._Returnees = new EntitySet<Returnee>(new Action<Returnee>(this.attach_Returnees), new Action<Returnee>(this.detach_Returnees));
		this._StoreWorkUnitEntrances = new EntitySet<StoreWorkUnitEntrance>(new Action<StoreWorkUnitEntrance>(this.attach_StoreWorkUnitEntrances), new Action<StoreWorkUnitEntrance>(this.detach_StoreWorkUnitEntrances));
		this._Withholdings = new EntitySet<Withholding>(new Action<Withholding>(this.attach_Withholdings), new Action<Withholding>(this.detach_Withholdings));
		this._Company = default(EntityRef<Company>);
		this._Place = default(EntityRef<Place>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMBG", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string EMBG
	{
		get
		{
			return this._EMBG;
		}
		set
		{
			if ((this._EMBG != value))
			{
				this.OnEMBGChanging(value);
				this.SendPropertyChanging();
				this._EMBG = value;
				this.SendPropertyChanged("EMBG");
				this.OnEMBGChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLaw", DbType="Bit NOT NULL")]
	public bool IsLaw
	{
		get
		{
			return this._IsLaw;
		}
		set
		{
			if ((this._IsLaw != value))
			{
				this.OnIsLawChanging(value);
				this.SendPropertyChanging();
				this._IsLaw = value;
				this.SendPropertyChanged("IsLaw");
				this.OnIsLawChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(20)")]
	public string PhoneNumber
	{
		get
		{
			return this._PhoneNumber;
		}
		set
		{
			if ((this._PhoneNumber != value))
			{
				this.OnPhoneNumberChanging(value);
				this.SendPropertyChanging();
				this._PhoneNumber = value;
				this.SendPropertyChanged("PhoneNumber");
				this.OnPhoneNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNumber", DbType="NVarChar(20)")]
	public string MobileNumber
	{
		get
		{
			return this._MobileNumber;
		}
		set
		{
			if ((this._MobileNumber != value))
			{
				this.OnMobileNumberChanging(value);
				this.SendPropertyChanging();
				this._MobileNumber = value;
				this.SendPropertyChanged("MobileNumber");
				this.OnMobileNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaxNumber", DbType="NVarChar(20)")]
	public string FaxNumber
	{
		get
		{
			return this._FaxNumber;
		}
		set
		{
			if ((this._FaxNumber != value))
			{
				this.OnFaxNumberChanging(value);
				this.SendPropertyChanging();
				this._FaxNumber = value;
				this.SendPropertyChanged("FaxNumber");
				this.OnFaxNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxNumber", DbType="NVarChar(15)")]
	public string TaxNumber
	{
		get
		{
			return this._TaxNumber;
		}
		set
		{
			if ((this._TaxNumber != value))
			{
				this.OnTaxNumberChanging(value);
				this.SendPropertyChanging();
				this._TaxNumber = value;
				this.SendPropertyChanged("TaxNumber");
				this.OnTaxNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceID", DbType="Int NOT NULL")]
	public int PlaceID
	{
		get
		{
			return this._PlaceID;
		}
		set
		{
			if ((this._PlaceID != value))
			{
				if (this._Place.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPlaceIDChanging(value);
				this.SendPropertyChanging();
				this._PlaceID = value;
				this.SendPropertyChanged("PlaceID");
				this.OnPlaceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSeller", DbType="Bit")]
	public System.Nullable<bool> IsSeller
	{
		get
		{
			return this._IsSeller;
		}
		set
		{
			if ((this._IsSeller != value))
			{
				this.OnIsSellerChanging(value);
				this.SendPropertyChanging();
				this._IsSeller = value;
				this.SendPropertyChanged("IsSeller");
				this.OnIsSellerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBuyer", DbType="Bit")]
	public System.Nullable<bool> IsBuyer
	{
		get
		{
			return this._IsBuyer;
		}
		set
		{
			if ((this._IsBuyer != value))
			{
				this.OnIsBuyerChanging(value);
				this.SendPropertyChanging();
				this._IsBuyer = value;
				this.SendPropertyChanged("IsBuyer");
				this.OnIsBuyerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IBAN", DbType="NVarChar(50)")]
	public string IBAN
	{
		get
		{
			return this._IBAN;
		}
		set
		{
			if ((this._IBAN != value))
			{
				this.OnIBANChanging(value);
				this.SendPropertyChanging();
				this._IBAN = value;
				this.SendPropertyChanged("IBAN");
				this.OnIBANChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AdvanceInvoice", Storage="_AdvanceInvoices", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<AdvanceInvoice> AdvanceInvoices
	{
		get
		{
			return this._AdvanceInvoices;
		}
		set
		{
			this._AdvanceInvoices.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CapitalAssetsCard", Storage="_CapitalAssetsCards", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<CapitalAssetsCard> CapitalAssetsCards
	{
		get
		{
			return this._CapitalAssetsCards;
		}
		set
		{
			this._CapitalAssetsCards.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CashDeskLogbookItem", Storage="_CashDeskLogbookItems", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<CashDeskLogbookItem> CashDeskLogbookItems
	{
		get
		{
			return this._CashDeskLogbookItems;
		}
		set
		{
			this._CashDeskLogbookItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientsBank", Storage="_ClientsBanks", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<ClientsBank> ClientsBanks
	{
		get
		{
			return this._ClientsBanks;
		}
		set
		{
			this._ClientsBanks.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_EntranceExpence", Storage="_EntranceExpences", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<EntranceExpence> EntranceExpences
	{
		get
		{
			return this._EntranceExpences;
		}
		set
		{
			this._EntranceExpences.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Entrance", Storage="_Entrances", ThisKey="ID", OtherKey="SupplierID")]
	public EntitySet<Entrance> Entrances
	{
		get
		{
			return this._Entrances;
		}
		set
		{
			this._Entrances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Facture", Storage="_Factures", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<Facture> Factures
	{
		get
		{
			return this._Factures;
		}
		set
		{
			this._Factures.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ItemOriginalCost", Storage="_ItemOriginalCosts", ThisKey="ID", OtherKey="SupplierID")]
	public EntitySet<ItemOriginalCost> ItemOriginalCosts
	{
		get
		{
			return this._ItemOriginalCosts;
		}
		set
		{
			this._ItemOriginalCosts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderItem", Storage="_OrderItems", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<OrderItem> OrderItems
	{
		get
		{
			return this._OrderItems;
		}
		set
		{
			this._OrderItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OutgoingFacture", Storage="_OutgoingFactures", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<OutgoingFacture> OutgoingFactures
	{
		get
		{
			return this._OutgoingFactures;
		}
		set
		{
			this._OutgoingFactures.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_PaymentForm", Storage="_PaymentForms", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<PaymentForm> PaymentForms
	{
		get
		{
			return this._PaymentForms;
		}
		set
		{
			this._PaymentForms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_PayOff", Storage="_PayOffs", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<PayOff> PayOffs
	{
		get
		{
			return this._PayOffs;
		}
		set
		{
			this._PayOffs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Returnee", Storage="_Returnees", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<Returnee> Returnees
	{
		get
		{
			return this._Returnees;
		}
		set
		{
			this._Returnees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_StoreWorkUnitEntrance", Storage="_StoreWorkUnitEntrances", ThisKey="ID", OtherKey="SupplierID")]
	public EntitySet<StoreWorkUnitEntrance> StoreWorkUnitEntrances
	{
		get
		{
			return this._StoreWorkUnitEntrances;
		}
		set
		{
			this._StoreWorkUnitEntrances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Withholding", Storage="_Withholdings", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<Withholding> Withholdings
	{
		get
		{
			return this._Withholdings;
		}
		set
		{
			this._Withholdings.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Client", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Clients.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Clients.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Client", Storage="_Place", ThisKey="PlaceID", OtherKey="ID", IsForeignKey=true)]
	public Place Place
	{
		get
		{
			return this._Place.Entity;
		}
		set
		{
			Place previousValue = this._Place.Entity;
			if (((previousValue != value) 
						|| (this._Place.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Place.Entity = null;
					previousValue.Clients.Remove(this);
				}
				this._Place.Entity = value;
				if ((value != null))
				{
					value.Clients.Add(this);
					this._PlaceID = value.ID;
				}
				else
				{
					this._PlaceID = default(int);
				}
				this.SendPropertyChanged("Place");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AdvanceInvoices(AdvanceInvoice entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_AdvanceInvoices(AdvanceInvoice entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_ClientsBanks(ClientsBank entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_ClientsBanks(ClientsBank entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_EntranceExpences(EntranceExpence entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_EntranceExpences(EntranceExpence entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_Entrances(Entrance entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_Entrances(Entrance entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_Factures(Facture entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_Factures(Facture entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_ItemOriginalCosts(ItemOriginalCost entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_ItemOriginalCosts(ItemOriginalCost entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_OutgoingFactures(OutgoingFacture entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_OutgoingFactures(OutgoingFacture entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_PayOffs(PayOff entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_PayOffs(PayOff entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_Returnees(Returnee entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_Returnees(Returnee entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_StoreWorkUnitEntrances(StoreWorkUnitEntrance entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_StoreWorkUnitEntrances(StoreWorkUnitEntrance entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_Withholdings(Withholding entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_Withholdings(Withholding entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientsBanks")]
public partial class ClientsBank : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ClientID;
	
	private int _BankID;
	
	private string _AccountNumber;
	
	private string _SWIFTCode;
	
	private EntityRef<Bank> _Bank;
	
	private EntityRef<Client> _Client;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnBankIDChanging(int value);
    partial void OnBankIDChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnSWIFTCodeChanging(string value);
    partial void OnSWIFTCodeChanged();
    #endregion
	
	public ClientsBank()
	{
		this._Bank = default(EntityRef<Bank>);
		this._Client = default(EntityRef<Client>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
	public int ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankID", DbType="Int NOT NULL")]
	public int BankID
	{
		get
		{
			return this._BankID;
		}
		set
		{
			if ((this._BankID != value))
			{
				if (this._Bank.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBankIDChanging(value);
				this.SendPropertyChanging();
				this._BankID = value;
				this.SendPropertyChanged("BankID");
				this.OnBankIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string AccountNumber
	{
		get
		{
			return this._AccountNumber;
		}
		set
		{
			if ((this._AccountNumber != value))
			{
				this.OnAccountNumberChanging(value);
				this.SendPropertyChanging();
				this._AccountNumber = value;
				this.SendPropertyChanged("AccountNumber");
				this.OnAccountNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SWIFTCode", DbType="NVarChar(50)")]
	public string SWIFTCode
	{
		get
		{
			return this._SWIFTCode;
		}
		set
		{
			if ((this._SWIFTCode != value))
			{
				this.OnSWIFTCodeChanging(value);
				this.SendPropertyChanging();
				this._SWIFTCode = value;
				this.SendPropertyChanged("SWIFTCode");
				this.OnSWIFTCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_ClientsBank", Storage="_Bank", ThisKey="BankID", OtherKey="ID", IsForeignKey=true)]
	public Bank Bank
	{
		get
		{
			return this._Bank.Entity;
		}
		set
		{
			Bank previousValue = this._Bank.Entity;
			if (((previousValue != value) 
						|| (this._Bank.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Bank.Entity = null;
					previousValue.ClientsBanks.Remove(this);
				}
				this._Bank.Entity = value;
				if ((value != null))
				{
					value.ClientsBanks.Add(this);
					this._BankID = value.ID;
				}
				else
				{
					this._BankID = default(int);
				}
				this.SendPropertyChanged("Bank");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientsBank", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.ClientsBanks.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.ClientsBanks.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(int);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private bool _IsActive;
	
	private string _Split;
	
	private string _RKB;
	
	private string _IBAN;
	
	private EntitySet<AbesceType> _AbesceTypes;
	
	private EntitySet<WorkUnit> _WorkUnits;
	
	private EntitySet<Absence> _Absences;
	
	private EntitySet<AmortizationGroup> _AmortizationGroups;
	
	private EntitySet<BalanceCarriedForward> _BalanceCarriedForwards;
	
	private EntitySet<CashDeskLogbookItem> _CashDeskLogbookItems;
	
	private EntitySet<CashDeskLogbook> _CashDeskLogbooks;
	
	private EntitySet<CashDeskType> _CashDeskTypes;
	
	private EntitySet<ChartOfAccount> _ChartOfAccounts;
	
	private EntitySet<ChartOfAccountsDocumentType> _ChartOfAccountsDocumentTypes;
	
	private EntitySet<Client> _Clients;
	
	private EntitySet<CompanyAccount> _CompanyAccounts;
	
	private EntitySet<Contribution> _Contributions;
	
	private EntitySet<DocumentType> _DocumentTypes;
	
	private EntitySet<Employee> _Employees;
	
	private EntitySet<EntryControl> _EntryControls;
	
	private EntitySet<EntryType> _EntryTypes;
	
	private EntitySet<Form> _Forms;
	
	private EntitySet<IndebtPerson> _IndebtPersons;
	
	private EntitySet<Location> _Locations;
	
	private EntitySet<MonthlyWithholding> _MonthlyWithholdings;
	
	private EntitySet<Order> _Orders;
	
	private EntitySet<PaymentForm> _PaymentForms;
	
	private EntitySet<Person> _Persons;
	
	private EntitySet<Program> _Programs;
	
	private EntitySet<RevaluationFactor> _RevaluationFactors;
	
	private EntitySet<Salary> _Salaries;
	
	private EntitySet<Sector> _Sectors;
	
	private EntitySet<Withholding> _Withholdings;
	
	private EntitySet<WorkPosition> _WorkPositions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnSplitChanging(string value);
    partial void OnSplitChanged();
    partial void OnRKBChanging(string value);
    partial void OnRKBChanged();
    partial void OnIBANChanging(string value);
    partial void OnIBANChanged();
    #endregion
	
	public Company()
	{
		this._AbesceTypes = new EntitySet<AbesceType>(new Action<AbesceType>(this.attach_AbesceTypes), new Action<AbesceType>(this.detach_AbesceTypes));
		this._WorkUnits = new EntitySet<WorkUnit>(new Action<WorkUnit>(this.attach_WorkUnits), new Action<WorkUnit>(this.detach_WorkUnits));
		this._Absences = new EntitySet<Absence>(new Action<Absence>(this.attach_Absences), new Action<Absence>(this.detach_Absences));
		this._AmortizationGroups = new EntitySet<AmortizationGroup>(new Action<AmortizationGroup>(this.attach_AmortizationGroups), new Action<AmortizationGroup>(this.detach_AmortizationGroups));
		this._BalanceCarriedForwards = new EntitySet<BalanceCarriedForward>(new Action<BalanceCarriedForward>(this.attach_BalanceCarriedForwards), new Action<BalanceCarriedForward>(this.detach_BalanceCarriedForwards));
		this._CashDeskLogbookItems = new EntitySet<CashDeskLogbookItem>(new Action<CashDeskLogbookItem>(this.attach_CashDeskLogbookItems), new Action<CashDeskLogbookItem>(this.detach_CashDeskLogbookItems));
		this._CashDeskLogbooks = new EntitySet<CashDeskLogbook>(new Action<CashDeskLogbook>(this.attach_CashDeskLogbooks), new Action<CashDeskLogbook>(this.detach_CashDeskLogbooks));
		this._CashDeskTypes = new EntitySet<CashDeskType>(new Action<CashDeskType>(this.attach_CashDeskTypes), new Action<CashDeskType>(this.detach_CashDeskTypes));
		this._ChartOfAccounts = new EntitySet<ChartOfAccount>(new Action<ChartOfAccount>(this.attach_ChartOfAccounts), new Action<ChartOfAccount>(this.detach_ChartOfAccounts));
		this._ChartOfAccountsDocumentTypes = new EntitySet<ChartOfAccountsDocumentType>(new Action<ChartOfAccountsDocumentType>(this.attach_ChartOfAccountsDocumentTypes), new Action<ChartOfAccountsDocumentType>(this.detach_ChartOfAccountsDocumentTypes));
		this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
		this._CompanyAccounts = new EntitySet<CompanyAccount>(new Action<CompanyAccount>(this.attach_CompanyAccounts), new Action<CompanyAccount>(this.detach_CompanyAccounts));
		this._Contributions = new EntitySet<Contribution>(new Action<Contribution>(this.attach_Contributions), new Action<Contribution>(this.detach_Contributions));
		this._DocumentTypes = new EntitySet<DocumentType>(new Action<DocumentType>(this.attach_DocumentTypes), new Action<DocumentType>(this.detach_DocumentTypes));
		this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
		this._EntryControls = new EntitySet<EntryControl>(new Action<EntryControl>(this.attach_EntryControls), new Action<EntryControl>(this.detach_EntryControls));
		this._EntryTypes = new EntitySet<EntryType>(new Action<EntryType>(this.attach_EntryTypes), new Action<EntryType>(this.detach_EntryTypes));
		this._Forms = new EntitySet<Form>(new Action<Form>(this.attach_Forms), new Action<Form>(this.detach_Forms));
		this._IndebtPersons = new EntitySet<IndebtPerson>(new Action<IndebtPerson>(this.attach_IndebtPersons), new Action<IndebtPerson>(this.detach_IndebtPersons));
		this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
		this._MonthlyWithholdings = new EntitySet<MonthlyWithholding>(new Action<MonthlyWithholding>(this.attach_MonthlyWithholdings), new Action<MonthlyWithholding>(this.detach_MonthlyWithholdings));
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._PaymentForms = new EntitySet<PaymentForm>(new Action<PaymentForm>(this.attach_PaymentForms), new Action<PaymentForm>(this.detach_PaymentForms));
		this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
		this._Programs = new EntitySet<Program>(new Action<Program>(this.attach_Programs), new Action<Program>(this.detach_Programs));
		this._RevaluationFactors = new EntitySet<RevaluationFactor>(new Action<RevaluationFactor>(this.attach_RevaluationFactors), new Action<RevaluationFactor>(this.detach_RevaluationFactors));
		this._Salaries = new EntitySet<Salary>(new Action<Salary>(this.attach_Salaries), new Action<Salary>(this.detach_Salaries));
		this._Sectors = new EntitySet<Sector>(new Action<Sector>(this.attach_Sectors), new Action<Sector>(this.detach_Sectors));
		this._Withholdings = new EntitySet<Withholding>(new Action<Withholding>(this.attach_Withholdings), new Action<Withholding>(this.detach_Withholdings));
		this._WorkPositions = new EntitySet<WorkPosition>(new Action<WorkPosition>(this.attach_WorkPositions), new Action<WorkPosition>(this.detach_WorkPositions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Split", DbType="NVarChar(50)")]
	public string Split
	{
		get
		{
			return this._Split;
		}
		set
		{
			if ((this._Split != value))
			{
				this.OnSplitChanging(value);
				this.SendPropertyChanging();
				this._Split = value;
				this.SendPropertyChanged("Split");
				this.OnSplitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RKB", DbType="NVarChar(50)")]
	public string RKB
	{
		get
		{
			return this._RKB;
		}
		set
		{
			if ((this._RKB != value))
			{
				this.OnRKBChanging(value);
				this.SendPropertyChanging();
				this._RKB = value;
				this.SendPropertyChanged("RKB");
				this.OnRKBChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IBAN", DbType="NVarChar(50)")]
	public string IBAN
	{
		get
		{
			return this._IBAN;
		}
		set
		{
			if ((this._IBAN != value))
			{
				this.OnIBANChanging(value);
				this.SendPropertyChanging();
				this._IBAN = value;
				this.SendPropertyChanged("IBAN");
				this.OnIBANChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_AbesceType", Storage="_AbesceTypes", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<AbesceType> AbesceTypes
	{
		get
		{
			return this._AbesceTypes;
		}
		set
		{
			this._AbesceTypes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_WorkUnit", Storage="_WorkUnits", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<WorkUnit> WorkUnits
	{
		get
		{
			return this._WorkUnits;
		}
		set
		{
			this._WorkUnits.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Absence", Storage="_Absences", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Absence> Absences
	{
		get
		{
			return this._Absences;
		}
		set
		{
			this._Absences.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_AmortizationGroup", Storage="_AmortizationGroups", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<AmortizationGroup> AmortizationGroups
	{
		get
		{
			return this._AmortizationGroups;
		}
		set
		{
			this._AmortizationGroups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_BalanceCarriedForward", Storage="_BalanceCarriedForwards", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<BalanceCarriedForward> BalanceCarriedForwards
	{
		get
		{
			return this._BalanceCarriedForwards;
		}
		set
		{
			this._BalanceCarriedForwards.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CashDeskLogbookItem", Storage="_CashDeskLogbookItems", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<CashDeskLogbookItem> CashDeskLogbookItems
	{
		get
		{
			return this._CashDeskLogbookItems;
		}
		set
		{
			this._CashDeskLogbookItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CashDeskLogbook", Storage="_CashDeskLogbooks", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<CashDeskLogbook> CashDeskLogbooks
	{
		get
		{
			return this._CashDeskLogbooks;
		}
		set
		{
			this._CashDeskLogbooks.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CashDeskType", Storage="_CashDeskTypes", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<CashDeskType> CashDeskTypes
	{
		get
		{
			return this._CashDeskTypes;
		}
		set
		{
			this._CashDeskTypes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ChartOfAccount", Storage="_ChartOfAccounts", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<ChartOfAccount> ChartOfAccounts
	{
		get
		{
			return this._ChartOfAccounts;
		}
		set
		{
			this._ChartOfAccounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ChartOfAccountsDocumentType", Storage="_ChartOfAccountsDocumentTypes", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<ChartOfAccountsDocumentType> ChartOfAccountsDocumentTypes
	{
		get
		{
			return this._ChartOfAccountsDocumentTypes;
		}
		set
		{
			this._ChartOfAccountsDocumentTypes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Client", Storage="_Clients", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Client> Clients
	{
		get
		{
			return this._Clients;
		}
		set
		{
			this._Clients.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyAccount", Storage="_CompanyAccounts", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<CompanyAccount> CompanyAccounts
	{
		get
		{
			return this._CompanyAccounts;
		}
		set
		{
			this._CompanyAccounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Contribution", Storage="_Contributions", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Contribution> Contributions
	{
		get
		{
			return this._Contributions;
		}
		set
		{
			this._Contributions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_DocumentType", Storage="_DocumentTypes", ThisKey="ID", OtherKey="CompanyId")]
	public EntitySet<DocumentType> DocumentTypes
	{
		get
		{
			return this._DocumentTypes;
		}
		set
		{
			this._DocumentTypes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Employee", Storage="_Employees", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Employee> Employees
	{
		get
		{
			return this._Employees;
		}
		set
		{
			this._Employees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_EntryControl", Storage="_EntryControls", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<EntryControl> EntryControls
	{
		get
		{
			return this._EntryControls;
		}
		set
		{
			this._EntryControls.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_EntryType", Storage="_EntryTypes", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<EntryType> EntryTypes
	{
		get
		{
			return this._EntryTypes;
		}
		set
		{
			this._EntryTypes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Form", Storage="_Forms", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Form> Forms
	{
		get
		{
			return this._Forms;
		}
		set
		{
			this._Forms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_IndebtPerson", Storage="_IndebtPersons", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<IndebtPerson> IndebtPersons
	{
		get
		{
			return this._IndebtPersons;
		}
		set
		{
			this._IndebtPersons.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Location", Storage="_Locations", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Location> Locations
	{
		get
		{
			return this._Locations;
		}
		set
		{
			this._Locations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_MonthlyWithholding", Storage="_MonthlyWithholdings", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<MonthlyWithholding> MonthlyWithholdings
	{
		get
		{
			return this._MonthlyWithholdings;
		}
		set
		{
			this._MonthlyWithholdings.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Order", Storage="_Orders", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_PaymentForm", Storage="_PaymentForms", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<PaymentForm> PaymentForms
	{
		get
		{
			return this._PaymentForms;
		}
		set
		{
			this._PaymentForms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Person", Storage="_Persons", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Person> Persons
	{
		get
		{
			return this._Persons;
		}
		set
		{
			this._Persons.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Program", Storage="_Programs", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Program> Programs
	{
		get
		{
			return this._Programs;
		}
		set
		{
			this._Programs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_RevaluationFactor", Storage="_RevaluationFactors", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<RevaluationFactor> RevaluationFactors
	{
		get
		{
			return this._RevaluationFactors;
		}
		set
		{
			this._RevaluationFactors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Salary", Storage="_Salaries", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Salary> Salaries
	{
		get
		{
			return this._Salaries;
		}
		set
		{
			this._Salaries.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Sector", Storage="_Sectors", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Sector> Sectors
	{
		get
		{
			return this._Sectors;
		}
		set
		{
			this._Sectors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Withholding", Storage="_Withholdings", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<Withholding> Withholdings
	{
		get
		{
			return this._Withholdings;
		}
		set
		{
			this._Withholdings.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_WorkPosition", Storage="_WorkPositions", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<WorkPosition> WorkPositions
	{
		get
		{
			return this._WorkPositions;
		}
		set
		{
			this._WorkPositions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AbesceTypes(AbesceType entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_AbesceTypes(AbesceType entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_WorkUnits(WorkUnit entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_WorkUnits(WorkUnit entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Absences(Absence entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Absences(Absence entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_AmortizationGroups(AmortizationGroup entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_AmortizationGroups(AmortizationGroup entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_BalanceCarriedForwards(BalanceCarriedForward entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_BalanceCarriedForwards(BalanceCarriedForward entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_CashDeskLogbooks(CashDeskLogbook entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_CashDeskLogbooks(CashDeskLogbook entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_CashDeskTypes(CashDeskType entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_CashDeskTypes(CashDeskType entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_ChartOfAccounts(ChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_ChartOfAccounts(ChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_ChartOfAccountsDocumentTypes(ChartOfAccountsDocumentType entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_ChartOfAccountsDocumentTypes(ChartOfAccountsDocumentType entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_CompanyAccounts(CompanyAccount entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_CompanyAccounts(CompanyAccount entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Contributions(Contribution entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Contributions(Contribution entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_DocumentTypes(DocumentType entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_DocumentTypes(DocumentType entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_EntryControls(EntryControl entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_EntryControls(EntryControl entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_EntryTypes(EntryType entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_EntryTypes(EntryType entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Forms(Form entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Forms(Form entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_IndebtPersons(IndebtPerson entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_IndebtPersons(IndebtPerson entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Locations(Location entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Locations(Location entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_MonthlyWithholdings(MonthlyWithholding entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_MonthlyWithholdings(MonthlyWithholding entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Persons(Person entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Persons(Person entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Programs(Program entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Programs(Program entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_RevaluationFactors(RevaluationFactor entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_RevaluationFactors(RevaluationFactor entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Salaries(Salary entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Salaries(Salary entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Sectors(Sector entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Sectors(Sector entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Withholdings(Withholding entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Withholdings(Withholding entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_WorkPositions(WorkPosition entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_WorkPositions(WorkPosition entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyAccounts")]
public partial class CompanyAccount : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private string _Description;
	
	private string _BankAccount;
	
	private bool _IsActive;
	
	private int _CompanyID;
	
	private EntitySet<CapitalAssetsCard> _CapitalAssetsCards;
	
	private EntitySet<CompanyAccountsUser> _CompanyAccountsUsers;
	
	private EntitySet<Order> _Orders;
	
	private EntitySet<PaymentForm> _PaymentForms;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBankAccountChanging(string value);
    partial void OnBankAccountChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public CompanyAccount()
	{
		this._CapitalAssetsCards = new EntitySet<CapitalAssetsCard>(new Action<CapitalAssetsCard>(this.attach_CapitalAssetsCards), new Action<CapitalAssetsCard>(this.detach_CapitalAssetsCards));
		this._CompanyAccountsUsers = new EntitySet<CompanyAccountsUser>(new Action<CompanyAccountsUser>(this.attach_CompanyAccountsUsers), new Action<CompanyAccountsUser>(this.detach_CompanyAccountsUsers));
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._PaymentForms = new EntitySet<PaymentForm>(new Action<PaymentForm>(this.attach_PaymentForms), new Action<PaymentForm>(this.detach_PaymentForms));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankAccount", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string BankAccount
	{
		get
		{
			return this._BankAccount;
		}
		set
		{
			if ((this._BankAccount != value))
			{
				this.OnBankAccountChanging(value);
				this.SendPropertyChanging();
				this._BankAccount = value;
				this.SendPropertyChanged("BankAccount");
				this.OnBankAccountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyAccount_CapitalAssetsCard", Storage="_CapitalAssetsCards", ThisKey="ID", OtherKey="CompanyAccountID")]
	public EntitySet<CapitalAssetsCard> CapitalAssetsCards
	{
		get
		{
			return this._CapitalAssetsCards;
		}
		set
		{
			this._CapitalAssetsCards.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyAccount_CompanyAccountsUser", Storage="_CompanyAccountsUsers", ThisKey="ID", OtherKey="CompanyAccountID")]
	public EntitySet<CompanyAccountsUser> CompanyAccountsUsers
	{
		get
		{
			return this._CompanyAccountsUsers;
		}
		set
		{
			this._CompanyAccountsUsers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyAccount_Order", Storage="_Orders", ThisKey="ID", OtherKey="CompanyAccountID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyAccount_PaymentForm", Storage="_PaymentForms", ThisKey="ID", OtherKey="CompanyAccountID")]
	public EntitySet<PaymentForm> PaymentForms
	{
		get
		{
			return this._PaymentForms;
		}
		set
		{
			this._PaymentForms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyAccount", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.CompanyAccounts.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.CompanyAccounts.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.CompanyAccount = this;
	}
	
	private void detach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.CompanyAccount = null;
	}
	
	private void attach_CompanyAccountsUsers(CompanyAccountsUser entity)
	{
		this.SendPropertyChanging();
		entity.CompanyAccount = this;
	}
	
	private void detach_CompanyAccountsUsers(CompanyAccountsUser entity)
	{
		this.SendPropertyChanging();
		entity.CompanyAccount = null;
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.CompanyAccount = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.CompanyAccount = null;
	}
	
	private void attach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.CompanyAccount = this;
	}
	
	private void detach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.CompanyAccount = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyAccountsUsers")]
public partial class CompanyAccountsUser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _CompanyAccountID;
	
	private int _UserID;
	
	private bool _IsActive;
	
	private EntityRef<CompanyAccount> _CompanyAccount;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyAccountIDChanging(int value);
    partial void OnCompanyAccountIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
	
	public CompanyAccountsUser()
	{
		this._CompanyAccount = default(EntityRef<CompanyAccount>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAccountID", DbType="Int NOT NULL")]
	public int CompanyAccountID
	{
		get
		{
			return this._CompanyAccountID;
		}
		set
		{
			if ((this._CompanyAccountID != value))
			{
				if (this._CompanyAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyAccountIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyAccountID = value;
				this.SendPropertyChanged("CompanyAccountID");
				this.OnCompanyAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyAccount_CompanyAccountsUser", Storage="_CompanyAccount", ThisKey="CompanyAccountID", OtherKey="ID", IsForeignKey=true)]
	public CompanyAccount CompanyAccount
	{
		get
		{
			return this._CompanyAccount.Entity;
		}
		set
		{
			CompanyAccount previousValue = this._CompanyAccount.Entity;
			if (((previousValue != value) 
						|| (this._CompanyAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CompanyAccount.Entity = null;
					previousValue.CompanyAccountsUsers.Remove(this);
				}
				this._CompanyAccount.Entity = value;
				if ((value != null))
				{
					value.CompanyAccountsUsers.Add(this);
					this._CompanyAccountID = value.ID;
				}
				else
				{
					this._CompanyAccountID = default(int);
				}
				this.SendPropertyChanged("CompanyAccount");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompanyAccountsUser", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.CompanyAccountsUsers.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.CompanyAccountsUsers.Add(this);
					this._UserID = value.ID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contributions")]
public partial class Contribution : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Month;
	
	private int _Year;
	
	private decimal _Pension;
	
	private decimal _Healt;
	
	private decimal _Additional;
	
	private decimal _PersonalTax;
	
	private decimal _Employ;
	
	private System.Nullable<int> _CompanyID;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnPensionChanging(decimal value);
    partial void OnPensionChanged();
    partial void OnHealtChanging(decimal value);
    partial void OnHealtChanged();
    partial void OnAdditionalChanging(decimal value);
    partial void OnAdditionalChanged();
    partial void OnPersonalTaxChanging(decimal value);
    partial void OnPersonalTaxChanged();
    partial void OnEmployChanging(decimal value);
    partial void OnEmployChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Contribution()
	{
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int NOT NULL")]
	public int Month
	{
		get
		{
			return this._Month;
		}
		set
		{
			if ((this._Month != value))
			{
				this.OnMonthChanging(value);
				this.SendPropertyChanging();
				this._Month = value;
				this.SendPropertyChanged("Month");
				this.OnMonthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
	public int Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this.OnYearChanging(value);
				this.SendPropertyChanging();
				this._Year = value;
				this.SendPropertyChanged("Year");
				this.OnYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pension", DbType="Decimal(18,2) NOT NULL")]
	public decimal Pension
	{
		get
		{
			return this._Pension;
		}
		set
		{
			if ((this._Pension != value))
			{
				this.OnPensionChanging(value);
				this.SendPropertyChanging();
				this._Pension = value;
				this.SendPropertyChanged("Pension");
				this.OnPensionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Healt", DbType="Decimal(18,2) NOT NULL")]
	public decimal Healt
	{
		get
		{
			return this._Healt;
		}
		set
		{
			if ((this._Healt != value))
			{
				this.OnHealtChanging(value);
				this.SendPropertyChanging();
				this._Healt = value;
				this.SendPropertyChanged("Healt");
				this.OnHealtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Additional", DbType="Decimal(18,2) NOT NULL")]
	public decimal Additional
	{
		get
		{
			return this._Additional;
		}
		set
		{
			if ((this._Additional != value))
			{
				this.OnAdditionalChanging(value);
				this.SendPropertyChanging();
				this._Additional = value;
				this.SendPropertyChanged("Additional");
				this.OnAdditionalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalTax", DbType="Decimal(18,2) NOT NULL")]
	public decimal PersonalTax
	{
		get
		{
			return this._PersonalTax;
		}
		set
		{
			if ((this._PersonalTax != value))
			{
				this.OnPersonalTaxChanging(value);
				this.SendPropertyChanging();
				this._PersonalTax = value;
				this.SendPropertyChanged("PersonalTax");
				this.OnPersonalTaxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employ", DbType="Decimal(18,2) NOT NULL")]
	public decimal Employ
	{
		get
		{
			return this._Employ;
		}
		set
		{
			if ((this._Employ != value))
			{
				this.OnEmployChanging(value);
				this.SendPropertyChanging();
				this._Employ = value;
				this.SendPropertyChanged("Employ");
				this.OnEmployChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Contribution", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Contributions.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Contributions.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostClasses")]
public partial class CostClass : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private EntitySet<EntranceSubExpence> _EntranceSubExpences;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public CostClass()
	{
		this._EntranceSubExpences = new EntitySet<EntranceSubExpence>(new Action<EntranceSubExpence>(this.attach_EntranceSubExpences), new Action<EntranceSubExpence>(this.detach_EntranceSubExpences));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostClass_EntranceSubExpence", Storage="_EntranceSubExpences", ThisKey="ID", OtherKey="CostClassID")]
	public EntitySet<EntranceSubExpence> EntranceSubExpences
	{
		get
		{
			return this._EntranceSubExpences;
		}
		set
		{
			this._EntranceSubExpences.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EntranceSubExpences(EntranceSubExpence entity)
	{
		this.SendPropertyChanging();
		entity.CostClass = this;
	}
	
	private void detach_EntranceSubExpences(EntranceSubExpence entity)
	{
		this.SendPropertyChanging();
		entity.CostClass = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostSubTypes")]
public partial class CostSubType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _CostTypeID;
	
	private string _Name;
	
	private EntityRef<CostType> _CostType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCostTypeIDChanging(int value);
    partial void OnCostTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public CostSubType()
	{
		this._CostType = default(EntityRef<CostType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostTypeID", DbType="Int NOT NULL")]
	public int CostTypeID
	{
		get
		{
			return this._CostTypeID;
		}
		set
		{
			if ((this._CostTypeID != value))
			{
				if (this._CostType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCostTypeIDChanging(value);
				this.SendPropertyChanging();
				this._CostTypeID = value;
				this.SendPropertyChanged("CostTypeID");
				this.OnCostTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostType_CostSubType", Storage="_CostType", ThisKey="CostTypeID", OtherKey="ID", IsForeignKey=true)]
	public CostType CostType
	{
		get
		{
			return this._CostType.Entity;
		}
		set
		{
			CostType previousValue = this._CostType.Entity;
			if (((previousValue != value) 
						|| (this._CostType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CostType.Entity = null;
					previousValue.CostSubTypes.Remove(this);
				}
				this._CostType.Entity = value;
				if ((value != null))
				{
					value.CostSubTypes.Add(this);
					this._CostTypeID = value.ID;
				}
				else
				{
					this._CostTypeID = default(int);
				}
				this.SendPropertyChanged("CostType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostTypes")]
public partial class CostType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private int _ChartOfAccountID;
	
	private EntitySet<CostSubType> _CostSubTypes;
	
	private EntitySet<EntranceExpence> _EntranceExpences;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnChartOfAccountIDChanging(int value);
    partial void OnChartOfAccountIDChanged();
    #endregion
	
	public CostType()
	{
		this._CostSubTypes = new EntitySet<CostSubType>(new Action<CostSubType>(this.attach_CostSubTypes), new Action<CostSubType>(this.detach_CostSubTypes));
		this._EntranceExpences = new EntitySet<EntranceExpence>(new Action<EntranceExpence>(this.attach_EntranceExpences), new Action<EntranceExpence>(this.detach_EntranceExpences));
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountID", DbType="Int NOT NULL")]
	public int ChartOfAccountID
	{
		get
		{
			return this._ChartOfAccountID;
		}
		set
		{
			if ((this._ChartOfAccountID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountID = value;
				this.SendPropertyChanged("ChartOfAccountID");
				this.OnChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostType_CostSubType", Storage="_CostSubTypes", ThisKey="ID", OtherKey="CostTypeID")]
	public EntitySet<CostSubType> CostSubTypes
	{
		get
		{
			return this._CostSubTypes;
		}
		set
		{
			this._CostSubTypes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostType_EntranceExpence", Storage="_EntranceExpences", ThisKey="ID", OtherKey="CostTypeID")]
	public EntitySet<EntranceExpence> EntranceExpences
	{
		get
		{
			return this._EntranceExpences;
		}
		set
		{
			this._EntranceExpences.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_CostType", Storage="_ChartOfAccount", ThisKey="ChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.CostTypes.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.CostTypes.Add(this);
					this._ChartOfAccountID = value.ID;
				}
				else
				{
					this._ChartOfAccountID = default(int);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CostSubTypes(CostSubType entity)
	{
		this.SendPropertyChanging();
		entity.CostType = this;
	}
	
	private void detach_CostSubTypes(CostSubType entity)
	{
		this.SendPropertyChanging();
		entity.CostType = null;
	}
	
	private void attach_EntranceExpences(EntranceExpence entity)
	{
		this.SendPropertyChanging();
		entity.CostType = this;
	}
	
	private void detach_EntranceExpences(EntranceExpence entity)
	{
		this.SendPropertyChanging();
		entity.CostType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Currencies")]
public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Sign;
	
	private string _Name;
	
	private decimal _CurrentValue;
	
	private EntitySet<AdvanceInvoice> _AdvanceInvoices;
	
	private EntitySet<CashDeskLogbookItem> _CashDeskLogbookItems;
	
	private EntitySet<Entrance> _Entrances;
	
	private EntitySet<EntranceSubExpence> _EntranceSubExpences;
	
	private EntitySet<OrderItem> _OrderItems;
	
	private EntitySet<PayOff> _PayOffs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnSignChanging(string value);
    partial void OnSignChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCurrentValueChanging(decimal value);
    partial void OnCurrentValueChanged();
    #endregion
	
	public Currency()
	{
		this._AdvanceInvoices = new EntitySet<AdvanceInvoice>(new Action<AdvanceInvoice>(this.attach_AdvanceInvoices), new Action<AdvanceInvoice>(this.detach_AdvanceInvoices));
		this._CashDeskLogbookItems = new EntitySet<CashDeskLogbookItem>(new Action<CashDeskLogbookItem>(this.attach_CashDeskLogbookItems), new Action<CashDeskLogbookItem>(this.detach_CashDeskLogbookItems));
		this._Entrances = new EntitySet<Entrance>(new Action<Entrance>(this.attach_Entrances), new Action<Entrance>(this.detach_Entrances));
		this._EntranceSubExpences = new EntitySet<EntranceSubExpence>(new Action<EntranceSubExpence>(this.attach_EntranceSubExpences), new Action<EntranceSubExpence>(this.detach_EntranceSubExpences));
		this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
		this._PayOffs = new EntitySet<PayOff>(new Action<PayOff>(this.attach_PayOffs), new Action<PayOff>(this.detach_PayOffs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sign", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Sign
	{
		get
		{
			return this._Sign;
		}
		set
		{
			if ((this._Sign != value))
			{
				this.OnSignChanging(value);
				this.SendPropertyChanging();
				this._Sign = value;
				this.SendPropertyChanged("Sign");
				this.OnSignChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentValue", DbType="Decimal(18,4) NOT NULL")]
	public decimal CurrentValue
	{
		get
		{
			return this._CurrentValue;
		}
		set
		{
			if ((this._CurrentValue != value))
			{
				this.OnCurrentValueChanging(value);
				this.SendPropertyChanging();
				this._CurrentValue = value;
				this.SendPropertyChanged("CurrentValue");
				this.OnCurrentValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_AdvanceInvoice", Storage="_AdvanceInvoices", ThisKey="ID", OtherKey="CurrencyID")]
	public EntitySet<AdvanceInvoice> AdvanceInvoices
	{
		get
		{
			return this._AdvanceInvoices;
		}
		set
		{
			this._AdvanceInvoices.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_CashDeskLogbookItem", Storage="_CashDeskLogbookItems", ThisKey="ID", OtherKey="CurrencyID")]
	public EntitySet<CashDeskLogbookItem> CashDeskLogbookItems
	{
		get
		{
			return this._CashDeskLogbookItems;
		}
		set
		{
			this._CashDeskLogbookItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Entrance", Storage="_Entrances", ThisKey="ID", OtherKey="CurrencyID")]
	public EntitySet<Entrance> Entrances
	{
		get
		{
			return this._Entrances;
		}
		set
		{
			this._Entrances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_EntranceSubExpence", Storage="_EntranceSubExpences", ThisKey="ID", OtherKey="CurrencyID")]
	public EntitySet<EntranceSubExpence> EntranceSubExpences
	{
		get
		{
			return this._EntranceSubExpences;
		}
		set
		{
			this._EntranceSubExpences.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_OrderItem", Storage="_OrderItems", ThisKey="ID", OtherKey="CurrencyID")]
	public EntitySet<OrderItem> OrderItems
	{
		get
		{
			return this._OrderItems;
		}
		set
		{
			this._OrderItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_PayOff", Storage="_PayOffs", ThisKey="ID", OtherKey="CurrencyID")]
	public EntitySet<PayOff> PayOffs
	{
		get
		{
			return this._PayOffs;
		}
		set
		{
			this._PayOffs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AdvanceInvoices(AdvanceInvoice entity)
	{
		this.SendPropertyChanging();
		entity.Currency = this;
	}
	
	private void detach_AdvanceInvoices(AdvanceInvoice entity)
	{
		this.SendPropertyChanging();
		entity.Currency = null;
	}
	
	private void attach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.Currency = this;
	}
	
	private void detach_CashDeskLogbookItems(CashDeskLogbookItem entity)
	{
		this.SendPropertyChanging();
		entity.Currency = null;
	}
	
	private void attach_Entrances(Entrance entity)
	{
		this.SendPropertyChanging();
		entity.Currency = this;
	}
	
	private void detach_Entrances(Entrance entity)
	{
		this.SendPropertyChanging();
		entity.Currency = null;
	}
	
	private void attach_EntranceSubExpences(EntranceSubExpence entity)
	{
		this.SendPropertyChanging();
		entity.Currency = this;
	}
	
	private void detach_EntranceSubExpences(EntranceSubExpence entity)
	{
		this.SendPropertyChanging();
		entity.Currency = null;
	}
	
	private void attach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.Currency = this;
	}
	
	private void detach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.Currency = null;
	}
	
	private void attach_PayOffs(PayOff entity)
	{
		this.SendPropertyChanging();
		entity.Currency = this;
	}
	
	private void detach_PayOffs(PayOff entity)
	{
		this.SendPropertyChanging();
		entity.Currency = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DDVTypes")]
public partial class DDVType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Code;
	
	private bool _IsActive;
	
	private decimal _Percentage;
	
	private EntitySet<AdvanceInvoiceItem> _AdvanceInvoiceItems;
	
	private EntitySet<DDVtypesChartOfAccount> _DDVtypesChartOfAccounts;
	
	private EntitySet<FactureSpecification> _FactureSpecifications;
	
	private EntitySet<ItemCostForRestaurant> _ItemCostForRestaurants;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnPercentageChanging(decimal value);
    partial void OnPercentageChanged();
    #endregion
	
	public DDVType()
	{
		this._AdvanceInvoiceItems = new EntitySet<AdvanceInvoiceItem>(new Action<AdvanceInvoiceItem>(this.attach_AdvanceInvoiceItems), new Action<AdvanceInvoiceItem>(this.detach_AdvanceInvoiceItems));
		this._DDVtypesChartOfAccounts = new EntitySet<DDVtypesChartOfAccount>(new Action<DDVtypesChartOfAccount>(this.attach_DDVtypesChartOfAccounts), new Action<DDVtypesChartOfAccount>(this.detach_DDVtypesChartOfAccounts));
		this._FactureSpecifications = new EntitySet<FactureSpecification>(new Action<FactureSpecification>(this.attach_FactureSpecifications), new Action<FactureSpecification>(this.detach_FactureSpecifications));
		this._ItemCostForRestaurants = new EntitySet<ItemCostForRestaurant>(new Action<ItemCostForRestaurant>(this.attach_ItemCostForRestaurants), new Action<ItemCostForRestaurant>(this.detach_ItemCostForRestaurants));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Percentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal Percentage
	{
		get
		{
			return this._Percentage;
		}
		set
		{
			if ((this._Percentage != value))
			{
				this.OnPercentageChanging(value);
				this.SendPropertyChanging();
				this._Percentage = value;
				this.SendPropertyChanged("Percentage");
				this.OnPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DDVType_AdvanceInvoiceItem", Storage="_AdvanceInvoiceItems", ThisKey="ID", OtherKey="DDVTypeID")]
	public EntitySet<AdvanceInvoiceItem> AdvanceInvoiceItems
	{
		get
		{
			return this._AdvanceInvoiceItems;
		}
		set
		{
			this._AdvanceInvoiceItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DDVType_DDVtypesChartOfAccount", Storage="_DDVtypesChartOfAccounts", ThisKey="ID", OtherKey="DDVTypeID")]
	public EntitySet<DDVtypesChartOfAccount> DDVtypesChartOfAccounts
	{
		get
		{
			return this._DDVtypesChartOfAccounts;
		}
		set
		{
			this._DDVtypesChartOfAccounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DDVType_FactureSpecification", Storage="_FactureSpecifications", ThisKey="ID", OtherKey="DDVTypeID")]
	public EntitySet<FactureSpecification> FactureSpecifications
	{
		get
		{
			return this._FactureSpecifications;
		}
		set
		{
			this._FactureSpecifications.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DDVType_ItemCostForRestaurant", Storage="_ItemCostForRestaurants", ThisKey="ID", OtherKey="DDVTypeID")]
	public EntitySet<ItemCostForRestaurant> ItemCostForRestaurants
	{
		get
		{
			return this._ItemCostForRestaurants;
		}
		set
		{
			this._ItemCostForRestaurants.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AdvanceInvoiceItems(AdvanceInvoiceItem entity)
	{
		this.SendPropertyChanging();
		entity.DDVType = this;
	}
	
	private void detach_AdvanceInvoiceItems(AdvanceInvoiceItem entity)
	{
		this.SendPropertyChanging();
		entity.DDVType = null;
	}
	
	private void attach_DDVtypesChartOfAccounts(DDVtypesChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.DDVType = this;
	}
	
	private void detach_DDVtypesChartOfAccounts(DDVtypesChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.DDVType = null;
	}
	
	private void attach_FactureSpecifications(FactureSpecification entity)
	{
		this.SendPropertyChanging();
		entity.DDVType = this;
	}
	
	private void detach_FactureSpecifications(FactureSpecification entity)
	{
		this.SendPropertyChanging();
		entity.DDVType = null;
	}
	
	private void attach_ItemCostForRestaurants(ItemCostForRestaurant entity)
	{
		this.SendPropertyChanging();
		entity.DDVType = this;
	}
	
	private void detach_ItemCostForRestaurants(ItemCostForRestaurant entity)
	{
		this.SendPropertyChanging();
		entity.DDVType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DDVtypesChartOfAccounts")]
public partial class DDVtypesChartOfAccount : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _AlgorithmID;
	
	private System.Nullable<int> _DDVTypeID;
	
	private System.Nullable<int> _PaymentTypeID;
	
	private int _ChartOfAccountID;
	
	private bool _IsActive;
	
	private bool _IsDebt;
	
	private EntityRef<Algorithm> _Algorithm;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
	private EntityRef<DDVType> _DDVType;
	
	private EntityRef<PaymentType> _PaymentType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAlgorithmIDChanging(int value);
    partial void OnAlgorithmIDChanged();
    partial void OnDDVTypeIDChanging(System.Nullable<int> value);
    partial void OnDDVTypeIDChanged();
    partial void OnPaymentTypeIDChanging(System.Nullable<int> value);
    partial void OnPaymentTypeIDChanged();
    partial void OnChartOfAccountIDChanging(int value);
    partial void OnChartOfAccountIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDebtChanging(bool value);
    partial void OnIsDebtChanged();
    #endregion
	
	public DDVtypesChartOfAccount()
	{
		this._Algorithm = default(EntityRef<Algorithm>);
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		this._DDVType = default(EntityRef<DDVType>);
		this._PaymentType = default(EntityRef<PaymentType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlgorithmID", DbType="Int NOT NULL")]
	public int AlgorithmID
	{
		get
		{
			return this._AlgorithmID;
		}
		set
		{
			if ((this._AlgorithmID != value))
			{
				if (this._Algorithm.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAlgorithmIDChanging(value);
				this.SendPropertyChanging();
				this._AlgorithmID = value;
				this.SendPropertyChanged("AlgorithmID");
				this.OnAlgorithmIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDVTypeID", DbType="Int")]
	public System.Nullable<int> DDVTypeID
	{
		get
		{
			return this._DDVTypeID;
		}
		set
		{
			if ((this._DDVTypeID != value))
			{
				if (this._DDVType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDDVTypeIDChanging(value);
				this.SendPropertyChanging();
				this._DDVTypeID = value;
				this.SendPropertyChanged("DDVTypeID");
				this.OnDDVTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTypeID", DbType="Int")]
	public System.Nullable<int> PaymentTypeID
	{
		get
		{
			return this._PaymentTypeID;
		}
		set
		{
			if ((this._PaymentTypeID != value))
			{
				if (this._PaymentType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPaymentTypeIDChanging(value);
				this.SendPropertyChanging();
				this._PaymentTypeID = value;
				this.SendPropertyChanged("PaymentTypeID");
				this.OnPaymentTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountID", DbType="Int NOT NULL")]
	public int ChartOfAccountID
	{
		get
		{
			return this._ChartOfAccountID;
		}
		set
		{
			if ((this._ChartOfAccountID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountID = value;
				this.SendPropertyChanged("ChartOfAccountID");
				this.OnChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDebt", DbType="Bit NOT NULL")]
	public bool IsDebt
	{
		get
		{
			return this._IsDebt;
		}
		set
		{
			if ((this._IsDebt != value))
			{
				this.OnIsDebtChanging(value);
				this.SendPropertyChanging();
				this._IsDebt = value;
				this.SendPropertyChanged("IsDebt");
				this.OnIsDebtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_DDVtypesChartOfAccount", Storage="_Algorithm", ThisKey="AlgorithmID", OtherKey="ID", IsForeignKey=true)]
	public Algorithm Algorithm
	{
		get
		{
			return this._Algorithm.Entity;
		}
		set
		{
			Algorithm previousValue = this._Algorithm.Entity;
			if (((previousValue != value) 
						|| (this._Algorithm.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Algorithm.Entity = null;
					previousValue.DDVtypesChartOfAccounts.Remove(this);
				}
				this._Algorithm.Entity = value;
				if ((value != null))
				{
					value.DDVtypesChartOfAccounts.Add(this);
					this._AlgorithmID = value.ID;
				}
				else
				{
					this._AlgorithmID = default(int);
				}
				this.SendPropertyChanged("Algorithm");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_DDVtypesChartOfAccount", Storage="_ChartOfAccount", ThisKey="ChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.DDVtypesChartOfAccounts.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.DDVtypesChartOfAccounts.Add(this);
					this._ChartOfAccountID = value.ID;
				}
				else
				{
					this._ChartOfAccountID = default(int);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DDVType_DDVtypesChartOfAccount", Storage="_DDVType", ThisKey="DDVTypeID", OtherKey="ID", IsForeignKey=true)]
	public DDVType DDVType
	{
		get
		{
			return this._DDVType.Entity;
		}
		set
		{
			DDVType previousValue = this._DDVType.Entity;
			if (((previousValue != value) 
						|| (this._DDVType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DDVType.Entity = null;
					previousValue.DDVtypesChartOfAccounts.Remove(this);
				}
				this._DDVType.Entity = value;
				if ((value != null))
				{
					value.DDVtypesChartOfAccounts.Add(this);
					this._DDVTypeID = value.ID;
				}
				else
				{
					this._DDVTypeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("DDVType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_DDVtypesChartOfAccount", Storage="_PaymentType", ThisKey="PaymentTypeID", OtherKey="ID", IsForeignKey=true)]
	public PaymentType PaymentType
	{
		get
		{
			return this._PaymentType.Entity;
		}
		set
		{
			PaymentType previousValue = this._PaymentType.Entity;
			if (((previousValue != value) 
						|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PaymentType.Entity = null;
					previousValue.DDVtypesChartOfAccounts.Remove(this);
				}
				this._PaymentType.Entity = value;
				if ((value != null))
				{
					value.DDVtypesChartOfAccounts.Add(this);
					this._PaymentTypeID = value.ID;
				}
				else
				{
					this._PaymentTypeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("PaymentType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentTypes")]
public partial class DocumentType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private bool _IsActive;
	
	private System.Nullable<int> _CompanyId;
	
	private EntitySet<Algorithm> _Algorithms;
	
	private EntitySet<ChartOfAccountsDocumentType> _ChartOfAccountsDocumentTypes;
	
	private EntitySet<Facture> _Factures;
	
	private EntitySet<OrderItem> _OrderItems;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCompanyIdChanging(System.Nullable<int> value);
    partial void OnCompanyIdChanged();
    #endregion
	
	public DocumentType()
	{
		this._Algorithms = new EntitySet<Algorithm>(new Action<Algorithm>(this.attach_Algorithms), new Action<Algorithm>(this.detach_Algorithms));
		this._ChartOfAccountsDocumentTypes = new EntitySet<ChartOfAccountsDocumentType>(new Action<ChartOfAccountsDocumentType>(this.attach_ChartOfAccountsDocumentTypes), new Action<ChartOfAccountsDocumentType>(this.detach_ChartOfAccountsDocumentTypes));
		this._Factures = new EntitySet<Facture>(new Action<Facture>(this.attach_Factures), new Action<Facture>(this.detach_Factures));
		this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int")]
	public System.Nullable<int> CompanyId
	{
		get
		{
			return this._CompanyId;
		}
		set
		{
			if ((this._CompanyId != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIdChanging(value);
				this.SendPropertyChanging();
				this._CompanyId = value;
				this.SendPropertyChanged("CompanyId");
				this.OnCompanyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_Algorithm", Storage="_Algorithms", ThisKey="ID", OtherKey="DocumentTypeID")]
	public EntitySet<Algorithm> Algorithms
	{
		get
		{
			return this._Algorithms;
		}
		set
		{
			this._Algorithms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_ChartOfAccountsDocumentType", Storage="_ChartOfAccountsDocumentTypes", ThisKey="ID", OtherKey="DocumentTypeID")]
	public EntitySet<ChartOfAccountsDocumentType> ChartOfAccountsDocumentTypes
	{
		get
		{
			return this._ChartOfAccountsDocumentTypes;
		}
		set
		{
			this._ChartOfAccountsDocumentTypes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_Facture", Storage="_Factures", ThisKey="ID", OtherKey="DocumentTypeID")]
	public EntitySet<Facture> Factures
	{
		get
		{
			return this._Factures;
		}
		set
		{
			this._Factures.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_OrderItem", Storage="_OrderItems", ThisKey="ID", OtherKey="DocumentTypeID")]
	public EntitySet<OrderItem> OrderItems
	{
		get
		{
			return this._OrderItems;
		}
		set
		{
			this._OrderItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_DocumentType", Storage="_Company", ThisKey="CompanyId", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.DocumentTypes.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.DocumentTypes.Add(this);
					this._CompanyId = value.ID;
				}
				else
				{
					this._CompanyId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Algorithms(Algorithm entity)
	{
		this.SendPropertyChanging();
		entity.DocumentType = this;
	}
	
	private void detach_Algorithms(Algorithm entity)
	{
		this.SendPropertyChanging();
		entity.DocumentType = null;
	}
	
	private void attach_ChartOfAccountsDocumentTypes(ChartOfAccountsDocumentType entity)
	{
		this.SendPropertyChanging();
		entity.DocumentType = this;
	}
	
	private void detach_ChartOfAccountsDocumentTypes(ChartOfAccountsDocumentType entity)
	{
		this.SendPropertyChanging();
		entity.DocumentType = null;
	}
	
	private void attach_Factures(Facture entity)
	{
		this.SendPropertyChanging();
		entity.DocumentType = this;
	}
	
	private void detach_Factures(Facture entity)
	{
		this.SendPropertyChanging();
		entity.DocumentType = null;
	}
	
	private void attach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.DocumentType = this;
	}
	
	private void detach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.DocumentType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _LastName;
	
	private string _FirstName;
	
	private int _SectorID;
	
	private System.DateTime _EmploymentDate;
	
	private System.Nullable<System.DateTime> _RideAwayDate;
	
	private int _InternshipYears;
	
	private int _InternshipMonths;
	
	private int _InternshipDays;
	
	private int _WorkPositionID;
	
	private string _EMBG;
	
	private string _Address;
	
	private int _MunicipalityID;
	
	private string _HealthInsuranceCardNumber;
	
	private string _TransactionAccountNumber;
	
	private string _HealthInsuranceFundCode;
	
	private bool _IsPieceRateEmployee;
	
	private bool _IsInvalidPerson;
	
	private int _BranchID;
	
	private int _NationalityID;
	
	private int _ReligionID;
	
	private int _PersonID;
	
	private System.Nullable<int> _BankID;
	
	private System.Nullable<int> _CompanyID;
	
	private System.Nullable<decimal> _Fond;
	
	private EntitySet<Absence> _Absences;
	
	private EntitySet<Allowance> _Allowances;
	
	private EntitySet<HistorySalary> _HistorySalaries;
	
	private EntitySet<Salary> _Salaries;
	
	private EntitySet<Withholding> _Withholdings;
	
	private EntityRef<Branch> _Branch;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Bank> _Bank;
	
	private EntityRef<Municipality> _Municipality;
	
	private EntityRef<Nationality> _Nationality;
	
	private EntityRef<Person> _Person;
	
	private EntityRef<Religion> _Religion;
	
	private EntityRef<Sector> _Sector;
	
	private EntityRef<WorkPosition> _WorkPosition;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSectorIDChanging(int value);
    partial void OnSectorIDChanged();
    partial void OnEmploymentDateChanging(System.DateTime value);
    partial void OnEmploymentDateChanged();
    partial void OnRideAwayDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRideAwayDateChanged();
    partial void OnInternshipYearsChanging(int value);
    partial void OnInternshipYearsChanged();
    partial void OnInternshipMonthsChanging(int value);
    partial void OnInternshipMonthsChanged();
    partial void OnInternshipDaysChanging(int value);
    partial void OnInternshipDaysChanged();
    partial void OnWorkPositionIDChanging(int value);
    partial void OnWorkPositionIDChanged();
    partial void OnEMBGChanging(string value);
    partial void OnEMBGChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnMunicipalityIDChanging(int value);
    partial void OnMunicipalityIDChanged();
    partial void OnHealthInsuranceCardNumberChanging(string value);
    partial void OnHealthInsuranceCardNumberChanged();
    partial void OnTransactionAccountNumberChanging(string value);
    partial void OnTransactionAccountNumberChanged();
    partial void OnHealthInsuranceFundCodeChanging(string value);
    partial void OnHealthInsuranceFundCodeChanged();
    partial void OnIsPieceRateEmployeeChanging(bool value);
    partial void OnIsPieceRateEmployeeChanged();
    partial void OnIsInvalidPersonChanging(bool value);
    partial void OnIsInvalidPersonChanged();
    partial void OnBranchIDChanging(int value);
    partial void OnBranchIDChanged();
    partial void OnNationalityIDChanging(int value);
    partial void OnNationalityIDChanged();
    partial void OnReligionIDChanging(int value);
    partial void OnReligionIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnBankIDChanging(System.Nullable<int> value);
    partial void OnBankIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    partial void OnFondChanging(System.Nullable<decimal> value);
    partial void OnFondChanged();
    #endregion
	
	public Employee()
	{
		this._Absences = new EntitySet<Absence>(new Action<Absence>(this.attach_Absences), new Action<Absence>(this.detach_Absences));
		this._Allowances = new EntitySet<Allowance>(new Action<Allowance>(this.attach_Allowances), new Action<Allowance>(this.detach_Allowances));
		this._HistorySalaries = new EntitySet<HistorySalary>(new Action<HistorySalary>(this.attach_HistorySalaries), new Action<HistorySalary>(this.detach_HistorySalaries));
		this._Salaries = new EntitySet<Salary>(new Action<Salary>(this.attach_Salaries), new Action<Salary>(this.detach_Salaries));
		this._Withholdings = new EntitySet<Withholding>(new Action<Withholding>(this.attach_Withholdings), new Action<Withholding>(this.detach_Withholdings));
		this._Branch = default(EntityRef<Branch>);
		this._Company = default(EntityRef<Company>);
		this._Bank = default(EntityRef<Bank>);
		this._Municipality = default(EntityRef<Municipality>);
		this._Nationality = default(EntityRef<Nationality>);
		this._Person = default(EntityRef<Person>);
		this._Religion = default(EntityRef<Religion>);
		this._Sector = default(EntityRef<Sector>);
		this._WorkPosition = default(EntityRef<WorkPosition>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectorID", DbType="Int NOT NULL")]
	public int SectorID
	{
		get
		{
			return this._SectorID;
		}
		set
		{
			if ((this._SectorID != value))
			{
				if (this._Sector.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSectorIDChanging(value);
				this.SendPropertyChanging();
				this._SectorID = value;
				this.SendPropertyChanged("SectorID");
				this.OnSectorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmploymentDate", DbType="DateTime NOT NULL")]
	public System.DateTime EmploymentDate
	{
		get
		{
			return this._EmploymentDate;
		}
		set
		{
			if ((this._EmploymentDate != value))
			{
				this.OnEmploymentDateChanging(value);
				this.SendPropertyChanging();
				this._EmploymentDate = value;
				this.SendPropertyChanged("EmploymentDate");
				this.OnEmploymentDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RideAwayDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> RideAwayDate
	{
		get
		{
			return this._RideAwayDate;
		}
		set
		{
			if ((this._RideAwayDate != value))
			{
				this.OnRideAwayDateChanging(value);
				this.SendPropertyChanging();
				this._RideAwayDate = value;
				this.SendPropertyChanged("RideAwayDate");
				this.OnRideAwayDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternshipYears", DbType="Int NOT NULL")]
	public int InternshipYears
	{
		get
		{
			return this._InternshipYears;
		}
		set
		{
			if ((this._InternshipYears != value))
			{
				this.OnInternshipYearsChanging(value);
				this.SendPropertyChanging();
				this._InternshipYears = value;
				this.SendPropertyChanged("InternshipYears");
				this.OnInternshipYearsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternshipMonths", DbType="Int NOT NULL")]
	public int InternshipMonths
	{
		get
		{
			return this._InternshipMonths;
		}
		set
		{
			if ((this._InternshipMonths != value))
			{
				this.OnInternshipMonthsChanging(value);
				this.SendPropertyChanging();
				this._InternshipMonths = value;
				this.SendPropertyChanged("InternshipMonths");
				this.OnInternshipMonthsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternshipDays", DbType="Int NOT NULL")]
	public int InternshipDays
	{
		get
		{
			return this._InternshipDays;
		}
		set
		{
			if ((this._InternshipDays != value))
			{
				this.OnInternshipDaysChanging(value);
				this.SendPropertyChanging();
				this._InternshipDays = value;
				this.SendPropertyChanged("InternshipDays");
				this.OnInternshipDaysChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPositionID", DbType="Int NOT NULL")]
	public int WorkPositionID
	{
		get
		{
			return this._WorkPositionID;
		}
		set
		{
			if ((this._WorkPositionID != value))
			{
				if (this._WorkPosition.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWorkPositionIDChanging(value);
				this.SendPropertyChanging();
				this._WorkPositionID = value;
				this.SendPropertyChanged("WorkPositionID");
				this.OnWorkPositionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMBG", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string EMBG
	{
		get
		{
			return this._EMBG;
		}
		set
		{
			if ((this._EMBG != value))
			{
				this.OnEMBGChanging(value);
				this.SendPropertyChanging();
				this._EMBG = value;
				this.SendPropertyChanged("EMBG");
				this.OnEMBGChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MunicipalityID", DbType="Int NOT NULL")]
	public int MunicipalityID
	{
		get
		{
			return this._MunicipalityID;
		}
		set
		{
			if ((this._MunicipalityID != value))
			{
				if (this._Municipality.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMunicipalityIDChanging(value);
				this.SendPropertyChanging();
				this._MunicipalityID = value;
				this.SendPropertyChanged("MunicipalityID");
				this.OnMunicipalityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthInsuranceCardNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string HealthInsuranceCardNumber
	{
		get
		{
			return this._HealthInsuranceCardNumber;
		}
		set
		{
			if ((this._HealthInsuranceCardNumber != value))
			{
				this.OnHealthInsuranceCardNumberChanging(value);
				this.SendPropertyChanging();
				this._HealthInsuranceCardNumber = value;
				this.SendPropertyChanged("HealthInsuranceCardNumber");
				this.OnHealthInsuranceCardNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionAccountNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string TransactionAccountNumber
	{
		get
		{
			return this._TransactionAccountNumber;
		}
		set
		{
			if ((this._TransactionAccountNumber != value))
			{
				this.OnTransactionAccountNumberChanging(value);
				this.SendPropertyChanging();
				this._TransactionAccountNumber = value;
				this.SendPropertyChanged("TransactionAccountNumber");
				this.OnTransactionAccountNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthInsuranceFundCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string HealthInsuranceFundCode
	{
		get
		{
			return this._HealthInsuranceFundCode;
		}
		set
		{
			if ((this._HealthInsuranceFundCode != value))
			{
				this.OnHealthInsuranceFundCodeChanging(value);
				this.SendPropertyChanging();
				this._HealthInsuranceFundCode = value;
				this.SendPropertyChanged("HealthInsuranceFundCode");
				this.OnHealthInsuranceFundCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPieceRateEmployee", DbType="Bit NOT NULL")]
	public bool IsPieceRateEmployee
	{
		get
		{
			return this._IsPieceRateEmployee;
		}
		set
		{
			if ((this._IsPieceRateEmployee != value))
			{
				this.OnIsPieceRateEmployeeChanging(value);
				this.SendPropertyChanging();
				this._IsPieceRateEmployee = value;
				this.SendPropertyChanged("IsPieceRateEmployee");
				this.OnIsPieceRateEmployeeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInvalidPerson", DbType="Bit NOT NULL")]
	public bool IsInvalidPerson
	{
		get
		{
			return this._IsInvalidPerson;
		}
		set
		{
			if ((this._IsInvalidPerson != value))
			{
				this.OnIsInvalidPersonChanging(value);
				this.SendPropertyChanging();
				this._IsInvalidPerson = value;
				this.SendPropertyChanged("IsInvalidPerson");
				this.OnIsInvalidPersonChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchID", DbType="Int NOT NULL")]
	public int BranchID
	{
		get
		{
			return this._BranchID;
		}
		set
		{
			if ((this._BranchID != value))
			{
				if (this._Branch.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBranchIDChanging(value);
				this.SendPropertyChanging();
				this._BranchID = value;
				this.SendPropertyChanged("BranchID");
				this.OnBranchIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalityID", DbType="Int NOT NULL")]
	public int NationalityID
	{
		get
		{
			return this._NationalityID;
		}
		set
		{
			if ((this._NationalityID != value))
			{
				if (this._Nationality.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnNationalityIDChanging(value);
				this.SendPropertyChanging();
				this._NationalityID = value;
				this.SendPropertyChanged("NationalityID");
				this.OnNationalityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReligionID", DbType="Int NOT NULL")]
	public int ReligionID
	{
		get
		{
			return this._ReligionID;
		}
		set
		{
			if ((this._ReligionID != value))
			{
				if (this._Religion.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReligionIDChanging(value);
				this.SendPropertyChanging();
				this._ReligionID = value;
				this.SendPropertyChanged("ReligionID");
				this.OnReligionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
	public int PersonID
	{
		get
		{
			return this._PersonID;
		}
		set
		{
			if ((this._PersonID != value))
			{
				if (this._Person.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPersonIDChanging(value);
				this.SendPropertyChanging();
				this._PersonID = value;
				this.SendPropertyChanged("PersonID");
				this.OnPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankID", DbType="Int")]
	public System.Nullable<int> BankID
	{
		get
		{
			return this._BankID;
		}
		set
		{
			if ((this._BankID != value))
			{
				if (this._Bank.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBankIDChanging(value);
				this.SendPropertyChanging();
				this._BankID = value;
				this.SendPropertyChanged("BankID");
				this.OnBankIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fond", DbType="Decimal(18,4)")]
	public System.Nullable<decimal> Fond
	{
		get
		{
			return this._Fond;
		}
		set
		{
			if ((this._Fond != value))
			{
				this.OnFondChanging(value);
				this.SendPropertyChanging();
				this._Fond = value;
				this.SendPropertyChanged("Fond");
				this.OnFondChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Absence", Storage="_Absences", ThisKey="ID", OtherKey="EmployeeID")]
	public EntitySet<Absence> Absences
	{
		get
		{
			return this._Absences;
		}
		set
		{
			this._Absences.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Allowance", Storage="_Allowances", ThisKey="ID", OtherKey="EmployeeID")]
	public EntitySet<Allowance> Allowances
	{
		get
		{
			return this._Allowances;
		}
		set
		{
			this._Allowances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_HistorySalary", Storage="_HistorySalaries", ThisKey="ID", OtherKey="EmployeeID")]
	public EntitySet<HistorySalary> HistorySalaries
	{
		get
		{
			return this._HistorySalaries;
		}
		set
		{
			this._HistorySalaries.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Salary", Storage="_Salaries", ThisKey="ID", OtherKey="EmployeeID")]
	public EntitySet<Salary> Salaries
	{
		get
		{
			return this._Salaries;
		}
		set
		{
			this._Salaries.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Withholding", Storage="_Withholdings", ThisKey="ID", OtherKey="EmployeeID")]
	public EntitySet<Withholding> Withholdings
	{
		get
		{
			return this._Withholdings;
		}
		set
		{
			this._Withholdings.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Employee", Storage="_Branch", ThisKey="BranchID", OtherKey="ID", IsForeignKey=true)]
	public Branch Branch
	{
		get
		{
			return this._Branch.Entity;
		}
		set
		{
			Branch previousValue = this._Branch.Entity;
			if (((previousValue != value) 
						|| (this._Branch.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Branch.Entity = null;
					previousValue.Employees.Remove(this);
				}
				this._Branch.Entity = value;
				if ((value != null))
				{
					value.Employees.Add(this);
					this._BranchID = value.ID;
				}
				else
				{
					this._BranchID = default(int);
				}
				this.SendPropertyChanged("Branch");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Employee", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Employees.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Employees.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Employee", Storage="_Bank", ThisKey="BankID", OtherKey="ID", IsForeignKey=true)]
	public Bank Bank
	{
		get
		{
			return this._Bank.Entity;
		}
		set
		{
			Bank previousValue = this._Bank.Entity;
			if (((previousValue != value) 
						|| (this._Bank.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Bank.Entity = null;
					previousValue.Employees.Remove(this);
				}
				this._Bank.Entity = value;
				if ((value != null))
				{
					value.Employees.Add(this);
					this._BankID = value.ID;
				}
				else
				{
					this._BankID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Bank");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipality_Employee", Storage="_Municipality", ThisKey="MunicipalityID", OtherKey="ID", IsForeignKey=true)]
	public Municipality Municipality
	{
		get
		{
			return this._Municipality.Entity;
		}
		set
		{
			Municipality previousValue = this._Municipality.Entity;
			if (((previousValue != value) 
						|| (this._Municipality.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Municipality.Entity = null;
					previousValue.Employees.Remove(this);
				}
				this._Municipality.Entity = value;
				if ((value != null))
				{
					value.Employees.Add(this);
					this._MunicipalityID = value.ID;
				}
				else
				{
					this._MunicipalityID = default(int);
				}
				this.SendPropertyChanged("Municipality");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nationality_Employee", Storage="_Nationality", ThisKey="NationalityID", OtherKey="ID", IsForeignKey=true)]
	public Nationality Nationality
	{
		get
		{
			return this._Nationality.Entity;
		}
		set
		{
			Nationality previousValue = this._Nationality.Entity;
			if (((previousValue != value) 
						|| (this._Nationality.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Nationality.Entity = null;
					previousValue.Employees.Remove(this);
				}
				this._Nationality.Entity = value;
				if ((value != null))
				{
					value.Employees.Add(this);
					this._NationalityID = value.ID;
				}
				else
				{
					this._NationalityID = default(int);
				}
				this.SendPropertyChanged("Nationality");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Employee", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
	public Person Person
	{
		get
		{
			return this._Person.Entity;
		}
		set
		{
			Person previousValue = this._Person.Entity;
			if (((previousValue != value) 
						|| (this._Person.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Person.Entity = null;
					previousValue.Employees.Remove(this);
				}
				this._Person.Entity = value;
				if ((value != null))
				{
					value.Employees.Add(this);
					this._PersonID = value.ID;
				}
				else
				{
					this._PersonID = default(int);
				}
				this.SendPropertyChanged("Person");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Religion_Employee", Storage="_Religion", ThisKey="ReligionID", OtherKey="ID", IsForeignKey=true)]
	public Religion Religion
	{
		get
		{
			return this._Religion.Entity;
		}
		set
		{
			Religion previousValue = this._Religion.Entity;
			if (((previousValue != value) 
						|| (this._Religion.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Religion.Entity = null;
					previousValue.Employees.Remove(this);
				}
				this._Religion.Entity = value;
				if ((value != null))
				{
					value.Employees.Add(this);
					this._ReligionID = value.ID;
				}
				else
				{
					this._ReligionID = default(int);
				}
				this.SendPropertyChanged("Religion");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_Employee", Storage="_Sector", ThisKey="SectorID", OtherKey="ID", IsForeignKey=true)]
	public Sector Sector
	{
		get
		{
			return this._Sector.Entity;
		}
		set
		{
			Sector previousValue = this._Sector.Entity;
			if (((previousValue != value) 
						|| (this._Sector.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Sector.Entity = null;
					previousValue.Employees.Remove(this);
				}
				this._Sector.Entity = value;
				if ((value != null))
				{
					value.Employees.Add(this);
					this._SectorID = value.ID;
				}
				else
				{
					this._SectorID = default(int);
				}
				this.SendPropertyChanged("Sector");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkPosition_Employee", Storage="_WorkPosition", ThisKey="WorkPositionID", OtherKey="ID", IsForeignKey=true)]
	public WorkPosition WorkPosition
	{
		get
		{
			return this._WorkPosition.Entity;
		}
		set
		{
			WorkPosition previousValue = this._WorkPosition.Entity;
			if (((previousValue != value) 
						|| (this._WorkPosition.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkPosition.Entity = null;
					previousValue.Employees.Remove(this);
				}
				this._WorkPosition.Entity = value;
				if ((value != null))
				{
					value.Employees.Add(this);
					this._WorkPositionID = value.ID;
				}
				else
				{
					this._WorkPositionID = default(int);
				}
				this.SendPropertyChanged("WorkPosition");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Absences(Absence entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Absences(Absence entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_Allowances(Allowance entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Allowances(Allowance entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_HistorySalaries(HistorySalary entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_HistorySalaries(HistorySalary entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_Salaries(Salary entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Salaries(Salary entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_Withholdings(Withholding entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Withholdings(Withholding entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntranceExpences")]
public partial class EntranceExpence : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OrdinalNumber;
	
	private int _ClientID;
	
	private string _FactureNumber;
	
	private System.DateTime _FactureDate;
	
	private System.DateTime _CurrencyDate;
	
	private int _EntranceID;
	
	private int _CostTypeID;
	
	private bool _IsForCustoms;
	
	private bool _IsFromInputFacture;
	
	private EntitySet<EntranceSubExpence> _EntranceSubExpences;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<CostType> _CostType;
	
	private EntityRef<Entrance> _Entrance;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnFactureNumberChanging(string value);
    partial void OnFactureNumberChanged();
    partial void OnFactureDateChanging(System.DateTime value);
    partial void OnFactureDateChanged();
    partial void OnCurrencyDateChanging(System.DateTime value);
    partial void OnCurrencyDateChanged();
    partial void OnEntranceIDChanging(int value);
    partial void OnEntranceIDChanged();
    partial void OnCostTypeIDChanging(int value);
    partial void OnCostTypeIDChanged();
    partial void OnIsForCustomsChanging(bool value);
    partial void OnIsForCustomsChanged();
    partial void OnIsFromInputFactureChanging(bool value);
    partial void OnIsFromInputFactureChanged();
    #endregion
	
	public EntranceExpence()
	{
		this._EntranceSubExpences = new EntitySet<EntranceSubExpence>(new Action<EntranceSubExpence>(this.attach_EntranceSubExpences), new Action<EntranceSubExpence>(this.detach_EntranceSubExpences));
		this._Client = default(EntityRef<Client>);
		this._CostType = default(EntityRef<CostType>);
		this._Entrance = default(EntityRef<Entrance>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
	public int ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FactureNumber
	{
		get
		{
			return this._FactureNumber;
		}
		set
		{
			if ((this._FactureNumber != value))
			{
				this.OnFactureNumberChanging(value);
				this.SendPropertyChanging();
				this._FactureNumber = value;
				this.SendPropertyChanged("FactureNumber");
				this.OnFactureNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureDate", DbType="DateTime NOT NULL")]
	public System.DateTime FactureDate
	{
		get
		{
			return this._FactureDate;
		}
		set
		{
			if ((this._FactureDate != value))
			{
				this.OnFactureDateChanging(value);
				this.SendPropertyChanging();
				this._FactureDate = value;
				this.SendPropertyChanged("FactureDate");
				this.OnFactureDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyDate", DbType="DateTime NOT NULL")]
	public System.DateTime CurrencyDate
	{
		get
		{
			return this._CurrencyDate;
		}
		set
		{
			if ((this._CurrencyDate != value))
			{
				this.OnCurrencyDateChanging(value);
				this.SendPropertyChanging();
				this._CurrencyDate = value;
				this.SendPropertyChanged("CurrencyDate");
				this.OnCurrencyDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntranceID", DbType="Int NOT NULL")]
	public int EntranceID
	{
		get
		{
			return this._EntranceID;
		}
		set
		{
			if ((this._EntranceID != value))
			{
				if (this._Entrance.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEntranceIDChanging(value);
				this.SendPropertyChanging();
				this._EntranceID = value;
				this.SendPropertyChanged("EntranceID");
				this.OnEntranceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostTypeID", DbType="Int NOT NULL")]
	public int CostTypeID
	{
		get
		{
			return this._CostTypeID;
		}
		set
		{
			if ((this._CostTypeID != value))
			{
				if (this._CostType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCostTypeIDChanging(value);
				this.SendPropertyChanging();
				this._CostTypeID = value;
				this.SendPropertyChanged("CostTypeID");
				this.OnCostTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForCustoms", DbType="Bit NOT NULL")]
	public bool IsForCustoms
	{
		get
		{
			return this._IsForCustoms;
		}
		set
		{
			if ((this._IsForCustoms != value))
			{
				this.OnIsForCustomsChanging(value);
				this.SendPropertyChanging();
				this._IsForCustoms = value;
				this.SendPropertyChanged("IsForCustoms");
				this.OnIsForCustomsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFromInputFacture", DbType="Bit NOT NULL")]
	public bool IsFromInputFacture
	{
		get
		{
			return this._IsFromInputFacture;
		}
		set
		{
			if ((this._IsFromInputFacture != value))
			{
				this.OnIsFromInputFactureChanging(value);
				this.SendPropertyChanging();
				this._IsFromInputFacture = value;
				this.SendPropertyChanged("IsFromInputFacture");
				this.OnIsFromInputFactureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntranceExpence_EntranceSubExpence", Storage="_EntranceSubExpences", ThisKey="ID", OtherKey="EntranceExpenceID")]
	public EntitySet<EntranceSubExpence> EntranceSubExpences
	{
		get
		{
			return this._EntranceSubExpences;
		}
		set
		{
			this._EntranceSubExpences.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_EntranceExpence", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.EntranceExpences.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.EntranceExpences.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(int);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostType_EntranceExpence", Storage="_CostType", ThisKey="CostTypeID", OtherKey="ID", IsForeignKey=true)]
	public CostType CostType
	{
		get
		{
			return this._CostType.Entity;
		}
		set
		{
			CostType previousValue = this._CostType.Entity;
			if (((previousValue != value) 
						|| (this._CostType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CostType.Entity = null;
					previousValue.EntranceExpences.Remove(this);
				}
				this._CostType.Entity = value;
				if ((value != null))
				{
					value.EntranceExpences.Add(this);
					this._CostTypeID = value.ID;
				}
				else
				{
					this._CostTypeID = default(int);
				}
				this.SendPropertyChanged("CostType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entrance_EntranceExpence", Storage="_Entrance", ThisKey="EntranceID", OtherKey="ID", IsForeignKey=true)]
	public Entrance Entrance
	{
		get
		{
			return this._Entrance.Entity;
		}
		set
		{
			Entrance previousValue = this._Entrance.Entity;
			if (((previousValue != value) 
						|| (this._Entrance.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Entrance.Entity = null;
					previousValue.EntranceExpences.Remove(this);
				}
				this._Entrance.Entity = value;
				if ((value != null))
				{
					value.EntranceExpences.Add(this);
					this._EntranceID = value.ID;
				}
				else
				{
					this._EntranceID = default(int);
				}
				this.SendPropertyChanged("Entrance");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EntranceSubExpences(EntranceSubExpence entity)
	{
		this.SendPropertyChanging();
		entity.EntranceExpence = this;
	}
	
	private void detach_EntranceSubExpences(EntranceSubExpence entity)
	{
		this.SendPropertyChanging();
		entity.EntranceExpence = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntranceFactures")]
public partial class EntranceFacture : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _EntranceID;
	
	private int _MaterialFactureID;
	
	private EntityRef<Entrance> _Entrance;
	
	private EntityRef<MaterialFacture> _MaterialFacture;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEntranceIDChanging(int value);
    partial void OnEntranceIDChanged();
    partial void OnMaterialFactureIDChanging(int value);
    partial void OnMaterialFactureIDChanged();
    #endregion
	
	public EntranceFacture()
	{
		this._Entrance = default(EntityRef<Entrance>);
		this._MaterialFacture = default(EntityRef<MaterialFacture>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntranceID", DbType="Int NOT NULL")]
	public int EntranceID
	{
		get
		{
			return this._EntranceID;
		}
		set
		{
			if ((this._EntranceID != value))
			{
				if (this._Entrance.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEntranceIDChanging(value);
				this.SendPropertyChanging();
				this._EntranceID = value;
				this.SendPropertyChanged("EntranceID");
				this.OnEntranceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialFactureID", DbType="Int NOT NULL")]
	public int MaterialFactureID
	{
		get
		{
			return this._MaterialFactureID;
		}
		set
		{
			if ((this._MaterialFactureID != value))
			{
				if (this._MaterialFacture.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMaterialFactureIDChanging(value);
				this.SendPropertyChanging();
				this._MaterialFactureID = value;
				this.SendPropertyChanged("MaterialFactureID");
				this.OnMaterialFactureIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entrance_EntranceFacture", Storage="_Entrance", ThisKey="EntranceID", OtherKey="ID", IsForeignKey=true)]
	public Entrance Entrance
	{
		get
		{
			return this._Entrance.Entity;
		}
		set
		{
			Entrance previousValue = this._Entrance.Entity;
			if (((previousValue != value) 
						|| (this._Entrance.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Entrance.Entity = null;
					previousValue.EntranceFactures.Remove(this);
				}
				this._Entrance.Entity = value;
				if ((value != null))
				{
					value.EntranceFactures.Add(this);
					this._EntranceID = value.ID;
				}
				else
				{
					this._EntranceID = default(int);
				}
				this.SendPropertyChanged("Entrance");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialFacture_EntranceFacture", Storage="_MaterialFacture", ThisKey="MaterialFactureID", OtherKey="ID", IsForeignKey=true)]
	public MaterialFacture MaterialFacture
	{
		get
		{
			return this._MaterialFacture.Entity;
		}
		set
		{
			MaterialFacture previousValue = this._MaterialFacture.Entity;
			if (((previousValue != value) 
						|| (this._MaterialFacture.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaterialFacture.Entity = null;
					previousValue.EntranceFactures.Remove(this);
				}
				this._MaterialFacture.Entity = value;
				if ((value != null))
				{
					value.EntranceFactures.Add(this);
					this._MaterialFactureID = value.ID;
				}
				else
				{
					this._MaterialFactureID = default(int);
				}
				this.SendPropertyChanged("MaterialFacture");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntranceItems")]
public partial class EntranceItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OrdinalNumber;
	
	private int _EntranceID;
	
	private int _ItemID;
	
	private System.DateTime _Date;
	
	private decimal _OriginalCost;
	
	private decimal _Quantity;
	
	private bool _IsOwn;
	
	private decimal _FactureValueInCurrency;
	
	private decimal _FactureValue;
	
	private decimal _CustomPercentage;
	
	private decimal _TaxPercentage;
	
	private decimal _MarginPercentage;
	
	private decimal _RebatePercentage;
	
	private decimal _OriginalCostWithMarginRebate;
	
	private string _OrderInManufacture;
	
	private bool _IsFromPreviousYear;
	
	private decimal _CustomValue;
	
	private decimal _TaxValue;
	
	private System.Nullable<int> _MaterialFacturesID;
	
	private EntityRef<Entrance> _Entrance;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<MaterialFacture> _MaterialFacture;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnEntranceIDChanging(int value);
    partial void OnEntranceIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnOriginalCostChanging(decimal value);
    partial void OnOriginalCostChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnIsOwnChanging(bool value);
    partial void OnIsOwnChanged();
    partial void OnFactureValueInCurrencyChanging(decimal value);
    partial void OnFactureValueInCurrencyChanged();
    partial void OnFactureValueChanging(decimal value);
    partial void OnFactureValueChanged();
    partial void OnCustomPercentageChanging(decimal value);
    partial void OnCustomPercentageChanged();
    partial void OnTaxPercentageChanging(decimal value);
    partial void OnTaxPercentageChanged();
    partial void OnMarginPercentageChanging(decimal value);
    partial void OnMarginPercentageChanged();
    partial void OnRebatePercentageChanging(decimal value);
    partial void OnRebatePercentageChanged();
    partial void OnOriginalCostWithMarginRebateChanging(decimal value);
    partial void OnOriginalCostWithMarginRebateChanged();
    partial void OnOrderInManufactureChanging(string value);
    partial void OnOrderInManufactureChanged();
    partial void OnIsFromPreviousYearChanging(bool value);
    partial void OnIsFromPreviousYearChanged();
    partial void OnCustomValueChanging(decimal value);
    partial void OnCustomValueChanged();
    partial void OnTaxValueChanging(decimal value);
    partial void OnTaxValueChanged();
    partial void OnMaterialFacturesIDChanging(System.Nullable<int> value);
    partial void OnMaterialFacturesIDChanged();
    #endregion
	
	public EntranceItem()
	{
		this._Entrance = default(EntityRef<Entrance>);
		this._Item = default(EntityRef<Item>);
		this._MaterialFacture = default(EntityRef<MaterialFacture>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntranceID", DbType="Int NOT NULL")]
	public int EntranceID
	{
		get
		{
			return this._EntranceID;
		}
		set
		{
			if ((this._EntranceID != value))
			{
				if (this._Entrance.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEntranceIDChanging(value);
				this.SendPropertyChanging();
				this._EntranceID = value;
				this.SendPropertyChanged("EntranceID");
				this.OnEntranceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal OriginalCost
	{
		get
		{
			return this._OriginalCost;
		}
		set
		{
			if ((this._OriginalCost != value))
			{
				this.OnOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._OriginalCost = value;
				this.SendPropertyChanged("OriginalCost");
				this.OnOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOwn", DbType="Bit NOT NULL")]
	public bool IsOwn
	{
		get
		{
			return this._IsOwn;
		}
		set
		{
			if ((this._IsOwn != value))
			{
				this.OnIsOwnChanging(value);
				this.SendPropertyChanging();
				this._IsOwn = value;
				this.SendPropertyChanged("IsOwn");
				this.OnIsOwnChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureValueInCurrency", DbType="Decimal(18,2) NOT NULL")]
	public decimal FactureValueInCurrency
	{
		get
		{
			return this._FactureValueInCurrency;
		}
		set
		{
			if ((this._FactureValueInCurrency != value))
			{
				this.OnFactureValueInCurrencyChanging(value);
				this.SendPropertyChanging();
				this._FactureValueInCurrency = value;
				this.SendPropertyChanged("FactureValueInCurrency");
				this.OnFactureValueInCurrencyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal FactureValue
	{
		get
		{
			return this._FactureValue;
		}
		set
		{
			if ((this._FactureValue != value))
			{
				this.OnFactureValueChanging(value);
				this.SendPropertyChanging();
				this._FactureValue = value;
				this.SendPropertyChanged("FactureValue");
				this.OnFactureValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomPercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal CustomPercentage
	{
		get
		{
			return this._CustomPercentage;
		}
		set
		{
			if ((this._CustomPercentage != value))
			{
				this.OnCustomPercentageChanging(value);
				this.SendPropertyChanging();
				this._CustomPercentage = value;
				this.SendPropertyChanged("CustomPercentage");
				this.OnCustomPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxPercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxPercentage
	{
		get
		{
			return this._TaxPercentage;
		}
		set
		{
			if ((this._TaxPercentage != value))
			{
				this.OnTaxPercentageChanging(value);
				this.SendPropertyChanging();
				this._TaxPercentage = value;
				this.SendPropertyChanged("TaxPercentage");
				this.OnTaxPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginPercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal MarginPercentage
	{
		get
		{
			return this._MarginPercentage;
		}
		set
		{
			if ((this._MarginPercentage != value))
			{
				this.OnMarginPercentageChanging(value);
				this.SendPropertyChanging();
				this._MarginPercentage = value;
				this.SendPropertyChanged("MarginPercentage");
				this.OnMarginPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RebatePercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal RebatePercentage
	{
		get
		{
			return this._RebatePercentage;
		}
		set
		{
			if ((this._RebatePercentage != value))
			{
				this.OnRebatePercentageChanging(value);
				this.SendPropertyChanging();
				this._RebatePercentage = value;
				this.SendPropertyChanged("RebatePercentage");
				this.OnRebatePercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalCostWithMarginRebate", DbType="Decimal(18,2) NOT NULL")]
	public decimal OriginalCostWithMarginRebate
	{
		get
		{
			return this._OriginalCostWithMarginRebate;
		}
		set
		{
			if ((this._OriginalCostWithMarginRebate != value))
			{
				this.OnOriginalCostWithMarginRebateChanging(value);
				this.SendPropertyChanging();
				this._OriginalCostWithMarginRebate = value;
				this.SendPropertyChanged("OriginalCostWithMarginRebate");
				this.OnOriginalCostWithMarginRebateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderInManufacture", DbType="NVarChar(50)")]
	public string OrderInManufacture
	{
		get
		{
			return this._OrderInManufacture;
		}
		set
		{
			if ((this._OrderInManufacture != value))
			{
				this.OnOrderInManufactureChanging(value);
				this.SendPropertyChanging();
				this._OrderInManufacture = value;
				this.SendPropertyChanged("OrderInManufacture");
				this.OnOrderInManufactureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFromPreviousYear", DbType="Bit NOT NULL")]
	public bool IsFromPreviousYear
	{
		get
		{
			return this._IsFromPreviousYear;
		}
		set
		{
			if ((this._IsFromPreviousYear != value))
			{
				this.OnIsFromPreviousYearChanging(value);
				this.SendPropertyChanging();
				this._IsFromPreviousYear = value;
				this.SendPropertyChanged("IsFromPreviousYear");
				this.OnIsFromPreviousYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal CustomValue
	{
		get
		{
			return this._CustomValue;
		}
		set
		{
			if ((this._CustomValue != value))
			{
				this.OnCustomValueChanging(value);
				this.SendPropertyChanging();
				this._CustomValue = value;
				this.SendPropertyChanged("CustomValue");
				this.OnCustomValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxValue
	{
		get
		{
			return this._TaxValue;
		}
		set
		{
			if ((this._TaxValue != value))
			{
				this.OnTaxValueChanging(value);
				this.SendPropertyChanging();
				this._TaxValue = value;
				this.SendPropertyChanged("TaxValue");
				this.OnTaxValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialFacturesID", DbType="Int")]
	public System.Nullable<int> MaterialFacturesID
	{
		get
		{
			return this._MaterialFacturesID;
		}
		set
		{
			if ((this._MaterialFacturesID != value))
			{
				if (this._MaterialFacture.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMaterialFacturesIDChanging(value);
				this.SendPropertyChanging();
				this._MaterialFacturesID = value;
				this.SendPropertyChanged("MaterialFacturesID");
				this.OnMaterialFacturesIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entrance_EntranceItem", Storage="_Entrance", ThisKey="EntranceID", OtherKey="ID", IsForeignKey=true)]
	public Entrance Entrance
	{
		get
		{
			return this._Entrance.Entity;
		}
		set
		{
			Entrance previousValue = this._Entrance.Entity;
			if (((previousValue != value) 
						|| (this._Entrance.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Entrance.Entity = null;
					previousValue.EntranceItems.Remove(this);
				}
				this._Entrance.Entity = value;
				if ((value != null))
				{
					value.EntranceItems.Add(this);
					this._EntranceID = value.ID;
				}
				else
				{
					this._EntranceID = default(int);
				}
				this.SendPropertyChanged("Entrance");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_EntranceItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.EntranceItems.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.EntranceItems.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialFacture_EntranceItem", Storage="_MaterialFacture", ThisKey="MaterialFacturesID", OtherKey="ID", IsForeignKey=true)]
	public MaterialFacture MaterialFacture
	{
		get
		{
			return this._MaterialFacture.Entity;
		}
		set
		{
			MaterialFacture previousValue = this._MaterialFacture.Entity;
			if (((previousValue != value) 
						|| (this._MaterialFacture.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaterialFacture.Entity = null;
					previousValue.EntranceItems.Remove(this);
				}
				this._MaterialFacture.Entity = value;
				if ((value != null))
				{
					value.EntranceItems.Add(this);
					this._MaterialFacturesID = value.ID;
				}
				else
				{
					this._MaterialFacturesID = default(Nullable<int>);
				}
				this.SendPropertyChanged("MaterialFacture");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Entrances")]
public partial class Entrance : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _EntranceNumber;
	
	private System.DateTime _EntranceDate;
	
	private System.Nullable<int> _SupplierID;
	
	private string _OrderNumberByManufacture;
	
	private string _Description;
	
	private decimal _TransportExpences;
	
	private decimal _ClausesExpences;
	
	private decimal _UndependedExpences;
	
	private decimal _OtherExpences;
	
	private int _CurrencyID;
	
	private System.Nullable<decimal> _ExchangeRate;
	
	private decimal _TotalSum;
	
	private System.Nullable<System.DateTime> _ExchangeDate;
	
	private string _EvidenceNumber;
	
	private int _EntranceTypeID;
	
	private string _InputDocument;
	
	private decimal _CourseValue;
	
	private decimal _FactureValue;
	
	private decimal _ExpencesFromCustom;
	
	private decimal _ExpencesFromTax;
	
	private EntitySet<EntranceExpence> _EntranceExpences;
	
	private EntitySet<EntranceFacture> _EntranceFactures;
	
	private EntitySet<EntranceItem> _EntranceItems;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Currency> _Currency;
	
	private EntityRef<MaterialDocumentSubType> _MaterialDocumentSubType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEntranceNumberChanging(string value);
    partial void OnEntranceNumberChanged();
    partial void OnEntranceDateChanging(System.DateTime value);
    partial void OnEntranceDateChanged();
    partial void OnSupplierIDChanging(System.Nullable<int> value);
    partial void OnSupplierIDChanged();
    partial void OnOrderNumberByManufactureChanging(string value);
    partial void OnOrderNumberByManufactureChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTransportExpencesChanging(decimal value);
    partial void OnTransportExpencesChanged();
    partial void OnClausesExpencesChanging(decimal value);
    partial void OnClausesExpencesChanged();
    partial void OnUndependedExpencesChanging(decimal value);
    partial void OnUndependedExpencesChanged();
    partial void OnOtherExpencesChanging(decimal value);
    partial void OnOtherExpencesChanged();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnExchangeRateChanging(System.Nullable<decimal> value);
    partial void OnExchangeRateChanged();
    partial void OnTotalSumChanging(decimal value);
    partial void OnTotalSumChanged();
    partial void OnExchangeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExchangeDateChanged();
    partial void OnEvidenceNumberChanging(string value);
    partial void OnEvidenceNumberChanged();
    partial void OnEntranceTypeIDChanging(int value);
    partial void OnEntranceTypeIDChanged();
    partial void OnInputDocumentChanging(string value);
    partial void OnInputDocumentChanged();
    partial void OnCourseValueChanging(decimal value);
    partial void OnCourseValueChanged();
    partial void OnFactureValueChanging(decimal value);
    partial void OnFactureValueChanged();
    partial void OnExpencesFromCustomChanging(decimal value);
    partial void OnExpencesFromCustomChanged();
    partial void OnExpencesFromTaxChanging(decimal value);
    partial void OnExpencesFromTaxChanged();
    #endregion
	
	public Entrance()
	{
		this._EntranceExpences = new EntitySet<EntranceExpence>(new Action<EntranceExpence>(this.attach_EntranceExpences), new Action<EntranceExpence>(this.detach_EntranceExpences));
		this._EntranceFactures = new EntitySet<EntranceFacture>(new Action<EntranceFacture>(this.attach_EntranceFactures), new Action<EntranceFacture>(this.detach_EntranceFactures));
		this._EntranceItems = new EntitySet<EntranceItem>(new Action<EntranceItem>(this.attach_EntranceItems), new Action<EntranceItem>(this.detach_EntranceItems));
		this._Client = default(EntityRef<Client>);
		this._Currency = default(EntityRef<Currency>);
		this._MaterialDocumentSubType = default(EntityRef<MaterialDocumentSubType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntranceNumber", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string EntranceNumber
	{
		get
		{
			return this._EntranceNumber;
		}
		set
		{
			if ((this._EntranceNumber != value))
			{
				this.OnEntranceNumberChanging(value);
				this.SendPropertyChanging();
				this._EntranceNumber = value;
				this.SendPropertyChanged("EntranceNumber");
				this.OnEntranceNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntranceDate", DbType="DateTime NOT NULL")]
	public System.DateTime EntranceDate
	{
		get
		{
			return this._EntranceDate;
		}
		set
		{
			if ((this._EntranceDate != value))
			{
				this.OnEntranceDateChanging(value);
				this.SendPropertyChanging();
				this._EntranceDate = value;
				this.SendPropertyChanged("EntranceDate");
				this.OnEntranceDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int")]
	public System.Nullable<int> SupplierID
	{
		get
		{
			return this._SupplierID;
		}
		set
		{
			if ((this._SupplierID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSupplierIDChanging(value);
				this.SendPropertyChanging();
				this._SupplierID = value;
				this.SendPropertyChanged("SupplierID");
				this.OnSupplierIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumberByManufacture", DbType="NVarChar(20)")]
	public string OrderNumberByManufacture
	{
		get
		{
			return this._OrderNumberByManufacture;
		}
		set
		{
			if ((this._OrderNumberByManufacture != value))
			{
				this.OnOrderNumberByManufactureChanging(value);
				this.SendPropertyChanging();
				this._OrderNumberByManufacture = value;
				this.SendPropertyChanged("OrderNumberByManufacture");
				this.OnOrderNumberByManufactureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransportExpences", DbType="Decimal(18,2) NOT NULL")]
	public decimal TransportExpences
	{
		get
		{
			return this._TransportExpences;
		}
		set
		{
			if ((this._TransportExpences != value))
			{
				this.OnTransportExpencesChanging(value);
				this.SendPropertyChanging();
				this._TransportExpences = value;
				this.SendPropertyChanged("TransportExpences");
				this.OnTransportExpencesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClausesExpences", DbType="Decimal(18,2) NOT NULL")]
	public decimal ClausesExpences
	{
		get
		{
			return this._ClausesExpences;
		}
		set
		{
			if ((this._ClausesExpences != value))
			{
				this.OnClausesExpencesChanging(value);
				this.SendPropertyChanging();
				this._ClausesExpences = value;
				this.SendPropertyChanged("ClausesExpences");
				this.OnClausesExpencesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndependedExpences", DbType="Decimal(18,2) NOT NULL")]
	public decimal UndependedExpences
	{
		get
		{
			return this._UndependedExpences;
		}
		set
		{
			if ((this._UndependedExpences != value))
			{
				this.OnUndependedExpencesChanging(value);
				this.SendPropertyChanging();
				this._UndependedExpences = value;
				this.SendPropertyChanged("UndependedExpences");
				this.OnUndependedExpencesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherExpences", DbType="Decimal(18,2) NOT NULL")]
	public decimal OtherExpences
	{
		get
		{
			return this._OtherExpences;
		}
		set
		{
			if ((this._OtherExpences != value))
			{
				this.OnOtherExpencesChanging(value);
				this.SendPropertyChanging();
				this._OtherExpences = value;
				this.SendPropertyChanged("OtherExpences");
				this.OnOtherExpencesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int NOT NULL")]
	public int CurrencyID
	{
		get
		{
			return this._CurrencyID;
		}
		set
		{
			if ((this._CurrencyID != value))
			{
				if (this._Currency.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCurrencyIDChanging(value);
				this.SendPropertyChanging();
				this._CurrencyID = value;
				this.SendPropertyChanged("CurrencyID");
				this.OnCurrencyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExchangeRate", DbType="Decimal(18,4)")]
	public System.Nullable<decimal> ExchangeRate
	{
		get
		{
			return this._ExchangeRate;
		}
		set
		{
			if ((this._ExchangeRate != value))
			{
				this.OnExchangeRateChanging(value);
				this.SendPropertyChanging();
				this._ExchangeRate = value;
				this.SendPropertyChanged("ExchangeRate");
				this.OnExchangeRateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalSum", DbType="Decimal(18,2) NOT NULL")]
	public decimal TotalSum
	{
		get
		{
			return this._TotalSum;
		}
		set
		{
			if ((this._TotalSum != value))
			{
				this.OnTotalSumChanging(value);
				this.SendPropertyChanging();
				this._TotalSum = value;
				this.SendPropertyChanged("TotalSum");
				this.OnTotalSumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExchangeDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ExchangeDate
	{
		get
		{
			return this._ExchangeDate;
		}
		set
		{
			if ((this._ExchangeDate != value))
			{
				this.OnExchangeDateChanging(value);
				this.SendPropertyChanging();
				this._ExchangeDate = value;
				this.SendPropertyChanged("ExchangeDate");
				this.OnExchangeDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvidenceNumber", DbType="NVarChar(50)")]
	public string EvidenceNumber
	{
		get
		{
			return this._EvidenceNumber;
		}
		set
		{
			if ((this._EvidenceNumber != value))
			{
				this.OnEvidenceNumberChanging(value);
				this.SendPropertyChanging();
				this._EvidenceNumber = value;
				this.SendPropertyChanged("EvidenceNumber");
				this.OnEvidenceNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntranceTypeID", DbType="Int NOT NULL")]
	public int EntranceTypeID
	{
		get
		{
			return this._EntranceTypeID;
		}
		set
		{
			if ((this._EntranceTypeID != value))
			{
				if (this._MaterialDocumentSubType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEntranceTypeIDChanging(value);
				this.SendPropertyChanging();
				this._EntranceTypeID = value;
				this.SendPropertyChanged("EntranceTypeID");
				this.OnEntranceTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputDocument", DbType="NVarChar(50)")]
	public string InputDocument
	{
		get
		{
			return this._InputDocument;
		}
		set
		{
			if ((this._InputDocument != value))
			{
				this.OnInputDocumentChanging(value);
				this.SendPropertyChanging();
				this._InputDocument = value;
				this.SendPropertyChanged("InputDocument");
				this.OnInputDocumentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseValue", DbType="Decimal(18,4) NOT NULL")]
	public decimal CourseValue
	{
		get
		{
			return this._CourseValue;
		}
		set
		{
			if ((this._CourseValue != value))
			{
				this.OnCourseValueChanging(value);
				this.SendPropertyChanging();
				this._CourseValue = value;
				this.SendPropertyChanged("CourseValue");
				this.OnCourseValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal FactureValue
	{
		get
		{
			return this._FactureValue;
		}
		set
		{
			if ((this._FactureValue != value))
			{
				this.OnFactureValueChanging(value);
				this.SendPropertyChanging();
				this._FactureValue = value;
				this.SendPropertyChanged("FactureValue");
				this.OnFactureValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpencesFromCustom", DbType="Decimal(18,2) NOT NULL")]
	public decimal ExpencesFromCustom
	{
		get
		{
			return this._ExpencesFromCustom;
		}
		set
		{
			if ((this._ExpencesFromCustom != value))
			{
				this.OnExpencesFromCustomChanging(value);
				this.SendPropertyChanging();
				this._ExpencesFromCustom = value;
				this.SendPropertyChanged("ExpencesFromCustom");
				this.OnExpencesFromCustomChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpencesFromTax", DbType="Decimal(18,2) NOT NULL")]
	public decimal ExpencesFromTax
	{
		get
		{
			return this._ExpencesFromTax;
		}
		set
		{
			if ((this._ExpencesFromTax != value))
			{
				this.OnExpencesFromTaxChanging(value);
				this.SendPropertyChanging();
				this._ExpencesFromTax = value;
				this.SendPropertyChanged("ExpencesFromTax");
				this.OnExpencesFromTaxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entrance_EntranceExpence", Storage="_EntranceExpences", ThisKey="ID", OtherKey="EntranceID")]
	public EntitySet<EntranceExpence> EntranceExpences
	{
		get
		{
			return this._EntranceExpences;
		}
		set
		{
			this._EntranceExpences.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entrance_EntranceFacture", Storage="_EntranceFactures", ThisKey="ID", OtherKey="EntranceID")]
	public EntitySet<EntranceFacture> EntranceFactures
	{
		get
		{
			return this._EntranceFactures;
		}
		set
		{
			this._EntranceFactures.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entrance_EntranceItem", Storage="_EntranceItems", ThisKey="ID", OtherKey="EntranceID")]
	public EntitySet<EntranceItem> EntranceItems
	{
		get
		{
			return this._EntranceItems;
		}
		set
		{
			this._EntranceItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Entrance", Storage="_Client", ThisKey="SupplierID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.Entrances.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.Entrances.Add(this);
					this._SupplierID = value.ID;
				}
				else
				{
					this._SupplierID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Entrance", Storage="_Currency", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
	public Currency Currency
	{
		get
		{
			return this._Currency.Entity;
		}
		set
		{
			Currency previousValue = this._Currency.Entity;
			if (((previousValue != value) 
						|| (this._Currency.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Currency.Entity = null;
					previousValue.Entrances.Remove(this);
				}
				this._Currency.Entity = value;
				if ((value != null))
				{
					value.Entrances.Add(this);
					this._CurrencyID = value.ID;
				}
				else
				{
					this._CurrencyID = default(int);
				}
				this.SendPropertyChanged("Currency");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_Entrance", Storage="_MaterialDocumentSubType", ThisKey="EntranceTypeID", OtherKey="ID", IsForeignKey=true)]
	public MaterialDocumentSubType MaterialDocumentSubType
	{
		get
		{
			return this._MaterialDocumentSubType.Entity;
		}
		set
		{
			MaterialDocumentSubType previousValue = this._MaterialDocumentSubType.Entity;
			if (((previousValue != value) 
						|| (this._MaterialDocumentSubType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaterialDocumentSubType.Entity = null;
					previousValue.Entrances.Remove(this);
				}
				this._MaterialDocumentSubType.Entity = value;
				if ((value != null))
				{
					value.Entrances.Add(this);
					this._EntranceTypeID = value.ID;
				}
				else
				{
					this._EntranceTypeID = default(int);
				}
				this.SendPropertyChanged("MaterialDocumentSubType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EntranceExpences(EntranceExpence entity)
	{
		this.SendPropertyChanging();
		entity.Entrance = this;
	}
	
	private void detach_EntranceExpences(EntranceExpence entity)
	{
		this.SendPropertyChanging();
		entity.Entrance = null;
	}
	
	private void attach_EntranceFactures(EntranceFacture entity)
	{
		this.SendPropertyChanging();
		entity.Entrance = this;
	}
	
	private void detach_EntranceFactures(EntranceFacture entity)
	{
		this.SendPropertyChanging();
		entity.Entrance = null;
	}
	
	private void attach_EntranceItems(EntranceItem entity)
	{
		this.SendPropertyChanging();
		entity.Entrance = this;
	}
	
	private void detach_EntranceItems(EntranceItem entity)
	{
		this.SendPropertyChanging();
		entity.Entrance = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntranceSubExpences")]
public partial class EntranceSubExpence : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OrdinalNumber;
	
	private int _EntranceExpenceID;
	
	private int _CostClassID;
	
	private decimal _Cost;
	
	private decimal _TaxPercent;
	
	private int _CurrencyID;
	
	private decimal _CourseValue;
	
	private decimal _CostInCurrency;
	
	private EntityRef<CostClass> _CostClass;
	
	private EntityRef<Currency> _Currency;
	
	private EntityRef<EntranceExpence> _EntranceExpence;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnEntranceExpenceIDChanging(int value);
    partial void OnEntranceExpenceIDChanged();
    partial void OnCostClassIDChanging(int value);
    partial void OnCostClassIDChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnTaxPercentChanging(decimal value);
    partial void OnTaxPercentChanged();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnCourseValueChanging(decimal value);
    partial void OnCourseValueChanged();
    partial void OnCostInCurrencyChanging(decimal value);
    partial void OnCostInCurrencyChanged();
    #endregion
	
	public EntranceSubExpence()
	{
		this._CostClass = default(EntityRef<CostClass>);
		this._Currency = default(EntityRef<Currency>);
		this._EntranceExpence = default(EntityRef<EntranceExpence>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntranceExpenceID", DbType="Int NOT NULL")]
	public int EntranceExpenceID
	{
		get
		{
			return this._EntranceExpenceID;
		}
		set
		{
			if ((this._EntranceExpenceID != value))
			{
				if (this._EntranceExpence.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEntranceExpenceIDChanging(value);
				this.SendPropertyChanging();
				this._EntranceExpenceID = value;
				this.SendPropertyChanged("EntranceExpenceID");
				this.OnEntranceExpenceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostClassID", DbType="Int NOT NULL")]
	public int CostClassID
	{
		get
		{
			return this._CostClassID;
		}
		set
		{
			if ((this._CostClassID != value))
			{
				if (this._CostClass.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCostClassIDChanging(value);
				this.SendPropertyChanging();
				this._CostClassID = value;
				this.SendPropertyChanged("CostClassID");
				this.OnCostClassIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(18,2) NOT NULL")]
	public decimal Cost
	{
		get
		{
			return this._Cost;
		}
		set
		{
			if ((this._Cost != value))
			{
				this.OnCostChanging(value);
				this.SendPropertyChanging();
				this._Cost = value;
				this.SendPropertyChanged("Cost");
				this.OnCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxPercent", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxPercent
	{
		get
		{
			return this._TaxPercent;
		}
		set
		{
			if ((this._TaxPercent != value))
			{
				this.OnTaxPercentChanging(value);
				this.SendPropertyChanging();
				this._TaxPercent = value;
				this.SendPropertyChanged("TaxPercent");
				this.OnTaxPercentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int NOT NULL")]
	public int CurrencyID
	{
		get
		{
			return this._CurrencyID;
		}
		set
		{
			if ((this._CurrencyID != value))
			{
				if (this._Currency.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCurrencyIDChanging(value);
				this.SendPropertyChanging();
				this._CurrencyID = value;
				this.SendPropertyChanged("CurrencyID");
				this.OnCurrencyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseValue", DbType="Decimal(18,4) NOT NULL")]
	public decimal CourseValue
	{
		get
		{
			return this._CourseValue;
		}
		set
		{
			if ((this._CourseValue != value))
			{
				this.OnCourseValueChanging(value);
				this.SendPropertyChanging();
				this._CourseValue = value;
				this.SendPropertyChanged("CourseValue");
				this.OnCourseValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostInCurrency", DbType="Decimal(18,2) NOT NULL")]
	public decimal CostInCurrency
	{
		get
		{
			return this._CostInCurrency;
		}
		set
		{
			if ((this._CostInCurrency != value))
			{
				this.OnCostInCurrencyChanging(value);
				this.SendPropertyChanging();
				this._CostInCurrency = value;
				this.SendPropertyChanged("CostInCurrency");
				this.OnCostInCurrencyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostClass_EntranceSubExpence", Storage="_CostClass", ThisKey="CostClassID", OtherKey="ID", IsForeignKey=true)]
	public CostClass CostClass
	{
		get
		{
			return this._CostClass.Entity;
		}
		set
		{
			CostClass previousValue = this._CostClass.Entity;
			if (((previousValue != value) 
						|| (this._CostClass.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CostClass.Entity = null;
					previousValue.EntranceSubExpences.Remove(this);
				}
				this._CostClass.Entity = value;
				if ((value != null))
				{
					value.EntranceSubExpences.Add(this);
					this._CostClassID = value.ID;
				}
				else
				{
					this._CostClassID = default(int);
				}
				this.SendPropertyChanged("CostClass");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_EntranceSubExpence", Storage="_Currency", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
	public Currency Currency
	{
		get
		{
			return this._Currency.Entity;
		}
		set
		{
			Currency previousValue = this._Currency.Entity;
			if (((previousValue != value) 
						|| (this._Currency.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Currency.Entity = null;
					previousValue.EntranceSubExpences.Remove(this);
				}
				this._Currency.Entity = value;
				if ((value != null))
				{
					value.EntranceSubExpences.Add(this);
					this._CurrencyID = value.ID;
				}
				else
				{
					this._CurrencyID = default(int);
				}
				this.SendPropertyChanged("Currency");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntranceExpence_EntranceSubExpence", Storage="_EntranceExpence", ThisKey="EntranceExpenceID", OtherKey="ID", IsForeignKey=true)]
	public EntranceExpence EntranceExpence
	{
		get
		{
			return this._EntranceExpence.Entity;
		}
		set
		{
			EntranceExpence previousValue = this._EntranceExpence.Entity;
			if (((previousValue != value) 
						|| (this._EntranceExpence.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EntranceExpence.Entity = null;
					previousValue.EntranceSubExpences.Remove(this);
				}
				this._EntranceExpence.Entity = value;
				if ((value != null))
				{
					value.EntranceSubExpences.Add(this);
					this._EntranceExpenceID = value.ID;
				}
				else
				{
					this._EntranceExpenceID = default(int);
				}
				this.SendPropertyChanged("EntranceExpence");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntryControls")]
public partial class EntryControl : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _EntryTypeID;
	
	private string _IDName;
	
	private string _Name;
	
	private string _LabelText;
	
	private bool _IsRequred;
	
	private int _VariableTypeID;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<EntryControlsChartOfAccount> _EntryControlsChartOfAccounts;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<EntryType> _EntryType;
	
	private EntityRef<VariableType> _VariableType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEntryTypeIDChanging(int value);
    partial void OnEntryTypeIDChanged();
    partial void OnIDNameChanging(string value);
    partial void OnIDNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLabelTextChanging(string value);
    partial void OnLabelTextChanged();
    partial void OnIsRequredChanging(bool value);
    partial void OnIsRequredChanged();
    partial void OnVariableTypeIDChanging(int value);
    partial void OnVariableTypeIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public EntryControl()
	{
		this._EntryControlsChartOfAccounts = new EntitySet<EntryControlsChartOfAccount>(new Action<EntryControlsChartOfAccount>(this.attach_EntryControlsChartOfAccounts), new Action<EntryControlsChartOfAccount>(this.detach_EntryControlsChartOfAccounts));
		this._Company = default(EntityRef<Company>);
		this._EntryType = default(EntityRef<EntryType>);
		this._VariableType = default(EntityRef<VariableType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryTypeID", DbType="Int NOT NULL")]
	public int EntryTypeID
	{
		get
		{
			return this._EntryTypeID;
		}
		set
		{
			if ((this._EntryTypeID != value))
			{
				if (this._EntryType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEntryTypeIDChanging(value);
				this.SendPropertyChanging();
				this._EntryTypeID = value;
				this.SendPropertyChanged("EntryTypeID");
				this.OnEntryTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string IDName
	{
		get
		{
			return this._IDName;
		}
		set
		{
			if ((this._IDName != value))
			{
				this.OnIDNameChanging(value);
				this.SendPropertyChanging();
				this._IDName = value;
				this.SendPropertyChanged("IDName");
				this.OnIDNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelText", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string LabelText
	{
		get
		{
			return this._LabelText;
		}
		set
		{
			if ((this._LabelText != value))
			{
				this.OnLabelTextChanging(value);
				this.SendPropertyChanging();
				this._LabelText = value;
				this.SendPropertyChanged("LabelText");
				this.OnLabelTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRequred", DbType="Bit NOT NULL")]
	public bool IsRequred
	{
		get
		{
			return this._IsRequred;
		}
		set
		{
			if ((this._IsRequred != value))
			{
				this.OnIsRequredChanging(value);
				this.SendPropertyChanging();
				this._IsRequred = value;
				this.SendPropertyChanged("IsRequred");
				this.OnIsRequredChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariableTypeID", DbType="Int NOT NULL")]
	public int VariableTypeID
	{
		get
		{
			return this._VariableTypeID;
		}
		set
		{
			if ((this._VariableTypeID != value))
			{
				if (this._VariableType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnVariableTypeIDChanging(value);
				this.SendPropertyChanging();
				this._VariableTypeID = value;
				this.SendPropertyChanged("VariableTypeID");
				this.OnVariableTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntryControl_EntryControlsChartOfAccount", Storage="_EntryControlsChartOfAccounts", ThisKey="ID", OtherKey="EntryControlID")]
	public EntitySet<EntryControlsChartOfAccount> EntryControlsChartOfAccounts
	{
		get
		{
			return this._EntryControlsChartOfAccounts;
		}
		set
		{
			this._EntryControlsChartOfAccounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_EntryControl", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.EntryControls.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.EntryControls.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntryType_EntryControl", Storage="_EntryType", ThisKey="EntryTypeID", OtherKey="ID", IsForeignKey=true)]
	public EntryType EntryType
	{
		get
		{
			return this._EntryType.Entity;
		}
		set
		{
			EntryType previousValue = this._EntryType.Entity;
			if (((previousValue != value) 
						|| (this._EntryType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EntryType.Entity = null;
					previousValue.EntryControls.Remove(this);
				}
				this._EntryType.Entity = value;
				if ((value != null))
				{
					value.EntryControls.Add(this);
					this._EntryTypeID = value.ID;
				}
				else
				{
					this._EntryTypeID = default(int);
				}
				this.SendPropertyChanged("EntryType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VariableType_EntryControl", Storage="_VariableType", ThisKey="VariableTypeID", OtherKey="ID", IsForeignKey=true)]
	public VariableType VariableType
	{
		get
		{
			return this._VariableType.Entity;
		}
		set
		{
			VariableType previousValue = this._VariableType.Entity;
			if (((previousValue != value) 
						|| (this._VariableType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._VariableType.Entity = null;
					previousValue.EntryControls.Remove(this);
				}
				this._VariableType.Entity = value;
				if ((value != null))
				{
					value.EntryControls.Add(this);
					this._VariableTypeID = value.ID;
				}
				else
				{
					this._VariableTypeID = default(int);
				}
				this.SendPropertyChanged("VariableType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EntryControlsChartOfAccounts(EntryControlsChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.EntryControl = this;
	}
	
	private void detach_EntryControlsChartOfAccounts(EntryControlsChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.EntryControl = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntryControlsChartOfAccounts")]
public partial class EntryControlsChartOfAccount : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EntryControlID;
	
	private int _ChartOfAccountID;
	
	private bool _IsDept;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
	private EntityRef<EntryControl> _EntryControl;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntryControlIDChanging(int value);
    partial void OnEntryControlIDChanged();
    partial void OnChartOfAccountIDChanging(int value);
    partial void OnChartOfAccountIDChanged();
    partial void OnIsDeptChanging(bool value);
    partial void OnIsDeptChanged();
    #endregion
	
	public EntryControlsChartOfAccount()
	{
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		this._EntryControl = default(EntityRef<EntryControl>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryControlID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int EntryControlID
	{
		get
		{
			return this._EntryControlID;
		}
		set
		{
			if ((this._EntryControlID != value))
			{
				if (this._EntryControl.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEntryControlIDChanging(value);
				this.SendPropertyChanging();
				this._EntryControlID = value;
				this.SendPropertyChanged("EntryControlID");
				this.OnEntryControlIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ChartOfAccountID
	{
		get
		{
			return this._ChartOfAccountID;
		}
		set
		{
			if ((this._ChartOfAccountID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountID = value;
				this.SendPropertyChanged("ChartOfAccountID");
				this.OnChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDept", DbType="Bit NOT NULL")]
	public bool IsDept
	{
		get
		{
			return this._IsDept;
		}
		set
		{
			if ((this._IsDept != value))
			{
				this.OnIsDeptChanging(value);
				this.SendPropertyChanging();
				this._IsDept = value;
				this.SendPropertyChanged("IsDept");
				this.OnIsDeptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_EntryControlsChartOfAccount", Storage="_ChartOfAccount", ThisKey="ChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.EntryControlsChartOfAccounts.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.EntryControlsChartOfAccounts.Add(this);
					this._ChartOfAccountID = value.ID;
				}
				else
				{
					this._ChartOfAccountID = default(int);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntryControl_EntryControlsChartOfAccount", Storage="_EntryControl", ThisKey="EntryControlID", OtherKey="ID", IsForeignKey=true)]
	public EntryControl EntryControl
	{
		get
		{
			return this._EntryControl.Entity;
		}
		set
		{
			EntryControl previousValue = this._EntryControl.Entity;
			if (((previousValue != value) 
						|| (this._EntryControl.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EntryControl.Entity = null;
					previousValue.EntryControlsChartOfAccounts.Remove(this);
				}
				this._EntryControl.Entity = value;
				if ((value != null))
				{
					value.EntryControlsChartOfAccounts.Add(this);
					this._EntryControlID = value.ID;
				}
				else
				{
					this._EntryControlID = default(int);
				}
				this.SendPropertyChanged("EntryControl");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntryTypes")]
public partial class EntryType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<EntryControl> _EntryControls;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public EntryType()
	{
		this._EntryControls = new EntitySet<EntryControl>(new Action<EntryControl>(this.attach_EntryControls), new Action<EntryControl>(this.detach_EntryControls));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntryType_EntryControl", Storage="_EntryControls", ThisKey="ID", OtherKey="EntryTypeID")]
	public EntitySet<EntryControl> EntryControls
	{
		get
		{
			return this._EntryControls;
		}
		set
		{
			this._EntryControls.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_EntryType", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.EntryTypes.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.EntryTypes.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EntryControls(EntryControl entity)
	{
		this.SendPropertyChanging();
		entity.EntryType = this;
	}
	
	private void detach_EntryControls(EntryControl entity)
	{
		this.SendPropertyChanging();
		entity.EntryType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FacturePolicyNumbers")]
public partial class FacturePolicyNumber : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _FactureID;
	
	private string _PolicyNumber;
	
	private EntityRef<Facture> _Facture;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFactureIDChanging(int value);
    partial void OnFactureIDChanged();
    partial void OnPolicyNumberChanging(string value);
    partial void OnPolicyNumberChanged();
    #endregion
	
	public FacturePolicyNumber()
	{
		this._Facture = default(EntityRef<Facture>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureID", DbType="Int NOT NULL")]
	public int FactureID
	{
		get
		{
			return this._FactureID;
		}
		set
		{
			if ((this._FactureID != value))
			{
				if (this._Facture.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFactureIDChanging(value);
				this.SendPropertyChanging();
				this._FactureID = value;
				this.SendPropertyChanged("FactureID");
				this.OnFactureIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string PolicyNumber
	{
		get
		{
			return this._PolicyNumber;
		}
		set
		{
			if ((this._PolicyNumber != value))
			{
				this.OnPolicyNumberChanging(value);
				this.SendPropertyChanging();
				this._PolicyNumber = value;
				this.SendPropertyChanged("PolicyNumber");
				this.OnPolicyNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facture_FacturePolicyNumber", Storage="_Facture", ThisKey="FactureID", OtherKey="ID", IsForeignKey=true)]
	public Facture Facture
	{
		get
		{
			return this._Facture.Entity;
		}
		set
		{
			Facture previousValue = this._Facture.Entity;
			if (((previousValue != value) 
						|| (this._Facture.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Facture.Entity = null;
					previousValue.FacturePolicyNumbers.Remove(this);
				}
				this._Facture.Entity = value;
				if ((value != null))
				{
					value.FacturePolicyNumbers.Add(this);
					this._FactureID = value.ID;
				}
				else
				{
					this._FactureID = default(int);
				}
				this.SendPropertyChanged("Facture");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Factures")]
public partial class Facture : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _FactureNumber;
	
	private decimal _TotalCost;
	
	private System.DateTime _DateOfCreation;
	
	private int _ClientID;
	
	private int _DocumentTypeID;
	
	private bool _IsInput;
	
	private bool _IsBooked;
	
	private EntitySet<FacturePolicyNumber> _FacturePolicyNumbers;
	
	private EntitySet<FactureSpecification> _FactureSpecifications;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<DocumentType> _DocumentType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFactureNumberChanging(string value);
    partial void OnFactureNumberChanged();
    partial void OnTotalCostChanging(decimal value);
    partial void OnTotalCostChanged();
    partial void OnDateOfCreationChanging(System.DateTime value);
    partial void OnDateOfCreationChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnDocumentTypeIDChanging(int value);
    partial void OnDocumentTypeIDChanged();
    partial void OnIsInputChanging(bool value);
    partial void OnIsInputChanged();
    partial void OnIsBookedChanging(bool value);
    partial void OnIsBookedChanged();
    #endregion
	
	public Facture()
	{
		this._FacturePolicyNumbers = new EntitySet<FacturePolicyNumber>(new Action<FacturePolicyNumber>(this.attach_FacturePolicyNumbers), new Action<FacturePolicyNumber>(this.detach_FacturePolicyNumbers));
		this._FactureSpecifications = new EntitySet<FactureSpecification>(new Action<FactureSpecification>(this.attach_FactureSpecifications), new Action<FactureSpecification>(this.detach_FactureSpecifications));
		this._Client = default(EntityRef<Client>);
		this._DocumentType = default(EntityRef<DocumentType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureNumber", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
	public string FactureNumber
	{
		get
		{
			return this._FactureNumber;
		}
		set
		{
			if ((this._FactureNumber != value))
			{
				this.OnFactureNumberChanging(value);
				this.SendPropertyChanging();
				this._FactureNumber = value;
				this.SendPropertyChanged("FactureNumber");
				this.OnFactureNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal TotalCost
	{
		get
		{
			return this._TotalCost;
		}
		set
		{
			if ((this._TotalCost != value))
			{
				this.OnTotalCostChanging(value);
				this.SendPropertyChanging();
				this._TotalCost = value;
				this.SendPropertyChanged("TotalCost");
				this.OnTotalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreation", DbType="DateTime NOT NULL")]
	public System.DateTime DateOfCreation
	{
		get
		{
			return this._DateOfCreation;
		}
		set
		{
			if ((this._DateOfCreation != value))
			{
				this.OnDateOfCreationChanging(value);
				this.SendPropertyChanging();
				this._DateOfCreation = value;
				this.SendPropertyChanged("DateOfCreation");
				this.OnDateOfCreationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
	public int ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeID", DbType="Int NOT NULL")]
	public int DocumentTypeID
	{
		get
		{
			return this._DocumentTypeID;
		}
		set
		{
			if ((this._DocumentTypeID != value))
			{
				if (this._DocumentType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocumentTypeIDChanging(value);
				this.SendPropertyChanging();
				this._DocumentTypeID = value;
				this.SendPropertyChanged("DocumentTypeID");
				this.OnDocumentTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInput", DbType="Bit NOT NULL")]
	public bool IsInput
	{
		get
		{
			return this._IsInput;
		}
		set
		{
			if ((this._IsInput != value))
			{
				this.OnIsInputChanging(value);
				this.SendPropertyChanging();
				this._IsInput = value;
				this.SendPropertyChanged("IsInput");
				this.OnIsInputChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBooked", DbType="Bit NOT NULL")]
	public bool IsBooked
	{
		get
		{
			return this._IsBooked;
		}
		set
		{
			if ((this._IsBooked != value))
			{
				this.OnIsBookedChanging(value);
				this.SendPropertyChanging();
				this._IsBooked = value;
				this.SendPropertyChanged("IsBooked");
				this.OnIsBookedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facture_FacturePolicyNumber", Storage="_FacturePolicyNumbers", ThisKey="ID", OtherKey="FactureID")]
	public EntitySet<FacturePolicyNumber> FacturePolicyNumbers
	{
		get
		{
			return this._FacturePolicyNumbers;
		}
		set
		{
			this._FacturePolicyNumbers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facture_FactureSpecification", Storage="_FactureSpecifications", ThisKey="ID", OtherKey="FactureID")]
	public EntitySet<FactureSpecification> FactureSpecifications
	{
		get
		{
			return this._FactureSpecifications;
		}
		set
		{
			this._FactureSpecifications.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Facture", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.Factures.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.Factures.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(int);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_Facture", Storage="_DocumentType", ThisKey="DocumentTypeID", OtherKey="ID", IsForeignKey=true)]
	public DocumentType DocumentType
	{
		get
		{
			return this._DocumentType.Entity;
		}
		set
		{
			DocumentType previousValue = this._DocumentType.Entity;
			if (((previousValue != value) 
						|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DocumentType.Entity = null;
					previousValue.Factures.Remove(this);
				}
				this._DocumentType.Entity = value;
				if ((value != null))
				{
					value.Factures.Add(this);
					this._DocumentTypeID = value.ID;
				}
				else
				{
					this._DocumentTypeID = default(int);
				}
				this.SendPropertyChanged("DocumentType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FacturePolicyNumbers(FacturePolicyNumber entity)
	{
		this.SendPropertyChanging();
		entity.Facture = this;
	}
	
	private void detach_FacturePolicyNumbers(FacturePolicyNumber entity)
	{
		this.SendPropertyChanging();
		entity.Facture = null;
	}
	
	private void attach_FactureSpecifications(FactureSpecification entity)
	{
		this.SendPropertyChanging();
		entity.Facture = this;
	}
	
	private void detach_FactureSpecifications(FactureSpecification entity)
	{
		this.SendPropertyChanging();
		entity.Facture = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactureSpecifications")]
public partial class FactureSpecification : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _FactureID;
	
	private int _DDVTypeID;
	
	private decimal _DDVValue;
	
	private decimal _TotalValue;
	
	private EntityRef<DDVType> _DDVType;
	
	private EntityRef<Facture> _Facture;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFactureIDChanging(int value);
    partial void OnFactureIDChanged();
    partial void OnDDVTypeIDChanging(int value);
    partial void OnDDVTypeIDChanged();
    partial void OnDDVValueChanging(decimal value);
    partial void OnDDVValueChanged();
    partial void OnTotalValueChanging(decimal value);
    partial void OnTotalValueChanged();
    #endregion
	
	public FactureSpecification()
	{
		this._DDVType = default(EntityRef<DDVType>);
		this._Facture = default(EntityRef<Facture>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureID", DbType="Int NOT NULL")]
	public int FactureID
	{
		get
		{
			return this._FactureID;
		}
		set
		{
			if ((this._FactureID != value))
			{
				if (this._Facture.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFactureIDChanging(value);
				this.SendPropertyChanging();
				this._FactureID = value;
				this.SendPropertyChanged("FactureID");
				this.OnFactureIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDVTypeID", DbType="Int NOT NULL")]
	public int DDVTypeID
	{
		get
		{
			return this._DDVTypeID;
		}
		set
		{
			if ((this._DDVTypeID != value))
			{
				if (this._DDVType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDDVTypeIDChanging(value);
				this.SendPropertyChanging();
				this._DDVTypeID = value;
				this.SendPropertyChanged("DDVTypeID");
				this.OnDDVTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDVValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal DDVValue
	{
		get
		{
			return this._DDVValue;
		}
		set
		{
			if ((this._DDVValue != value))
			{
				this.OnDDVValueChanging(value);
				this.SendPropertyChanging();
				this._DDVValue = value;
				this.SendPropertyChanged("DDVValue");
				this.OnDDVValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal TotalValue
	{
		get
		{
			return this._TotalValue;
		}
		set
		{
			if ((this._TotalValue != value))
			{
				this.OnTotalValueChanging(value);
				this.SendPropertyChanging();
				this._TotalValue = value;
				this.SendPropertyChanged("TotalValue");
				this.OnTotalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DDVType_FactureSpecification", Storage="_DDVType", ThisKey="DDVTypeID", OtherKey="ID", IsForeignKey=true)]
	public DDVType DDVType
	{
		get
		{
			return this._DDVType.Entity;
		}
		set
		{
			DDVType previousValue = this._DDVType.Entity;
			if (((previousValue != value) 
						|| (this._DDVType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DDVType.Entity = null;
					previousValue.FactureSpecifications.Remove(this);
				}
				this._DDVType.Entity = value;
				if ((value != null))
				{
					value.FactureSpecifications.Add(this);
					this._DDVTypeID = value.ID;
				}
				else
				{
					this._DDVTypeID = default(int);
				}
				this.SendPropertyChanged("DDVType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facture_FactureSpecification", Storage="_Facture", ThisKey="FactureID", OtherKey="ID", IsForeignKey=true)]
	public Facture Facture
	{
		get
		{
			return this._Facture.Entity;
		}
		set
		{
			Facture previousValue = this._Facture.Entity;
			if (((previousValue != value) 
						|| (this._Facture.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Facture.Entity = null;
					previousValue.FactureSpecifications.Remove(this);
				}
				this._Facture.Entity = value;
				if ((value != null))
				{
					value.FactureSpecifications.Add(this);
					this._FactureID = value.ID;
				}
				else
				{
					this._FactureID = default(int);
				}
				this.SendPropertyChanged("Facture");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forms")]
public partial class Form : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Description;
	
	private int _CompanyID;
	
	private EntitySet<PaymentForm> _PaymentForms;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Form()
	{
		this._PaymentForms = new EntitySet<PaymentForm>(new Action<PaymentForm>(this.attach_PaymentForms), new Action<PaymentForm>(this.detach_PaymentForms));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_PaymentForm", Storage="_PaymentForms", ThisKey="ID", OtherKey="FormID")]
	public EntitySet<PaymentForm> PaymentForms
	{
		get
		{
			return this._PaymentForms;
		}
		set
		{
			this._PaymentForms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Form", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Forms.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Forms.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Form = this;
	}
	
	private void detach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Form = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoryCashDeskLogBookItems")]
public partial class HistoryCashDeskLogBookItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _CashDeskLogbookItemID;
	
	private int _CashDeskLogbookID;
	
	private int _OrdinalNumber;
	
	private int _CashBoxNumber;
	
	private int _CashDeskEntryDescriptionID;
	
	private System.Nullable<int> _ClientID;
	
	private System.Nullable<int> _CashDeskPersonID;
	
	private string _DocumentNumber;
	
	private System.Nullable<int> _CurrencyID;
	
	private System.Nullable<decimal> _CourseValue;
	
	private System.Nullable<decimal> _CurrencyValue;
	
	private decimal _Value;
	
	private string _Description;
	
	private decimal _DebtValue;
	
	private decimal _DebitValue;
	
	private int _CashDeskEntryTypeID;
	
	private int _UserID;
	
	private string _Change;
	
	private System.DateTime _DateOfChange;
	
	private System.Nullable<int> _CompanyID;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCashDeskLogbookItemIDChanging(int value);
    partial void OnCashDeskLogbookItemIDChanged();
    partial void OnCashDeskLogbookIDChanging(int value);
    partial void OnCashDeskLogbookIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnCashBoxNumberChanging(int value);
    partial void OnCashBoxNumberChanged();
    partial void OnCashDeskEntryDescriptionIDChanging(int value);
    partial void OnCashDeskEntryDescriptionIDChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    partial void OnCashDeskPersonIDChanging(System.Nullable<int> value);
    partial void OnCashDeskPersonIDChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnCurrencyIDChanging(System.Nullable<int> value);
    partial void OnCurrencyIDChanged();
    partial void OnCourseValueChanging(System.Nullable<decimal> value);
    partial void OnCourseValueChanged();
    partial void OnCurrencyValueChanging(System.Nullable<decimal> value);
    partial void OnCurrencyValueChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDebtValueChanging(decimal value);
    partial void OnDebtValueChanged();
    partial void OnDebitValueChanging(decimal value);
    partial void OnDebitValueChanged();
    partial void OnCashDeskEntryTypeIDChanging(int value);
    partial void OnCashDeskEntryTypeIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnChangeChanging(string value);
    partial void OnChangeChanged();
    partial void OnDateOfChangeChanging(System.DateTime value);
    partial void OnDateOfChangeChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public HistoryCashDeskLogBookItem()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDeskLogbookItemID", DbType="Int NOT NULL")]
	public int CashDeskLogbookItemID
	{
		get
		{
			return this._CashDeskLogbookItemID;
		}
		set
		{
			if ((this._CashDeskLogbookItemID != value))
			{
				this.OnCashDeskLogbookItemIDChanging(value);
				this.SendPropertyChanging();
				this._CashDeskLogbookItemID = value;
				this.SendPropertyChanged("CashDeskLogbookItemID");
				this.OnCashDeskLogbookItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDeskLogbookID", DbType="Int NOT NULL")]
	public int CashDeskLogbookID
	{
		get
		{
			return this._CashDeskLogbookID;
		}
		set
		{
			if ((this._CashDeskLogbookID != value))
			{
				this.OnCashDeskLogbookIDChanging(value);
				this.SendPropertyChanging();
				this._CashDeskLogbookID = value;
				this.SendPropertyChanged("CashDeskLogbookID");
				this.OnCashDeskLogbookIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashBoxNumber", DbType="Int NOT NULL")]
	public int CashBoxNumber
	{
		get
		{
			return this._CashBoxNumber;
		}
		set
		{
			if ((this._CashBoxNumber != value))
			{
				this.OnCashBoxNumberChanging(value);
				this.SendPropertyChanging();
				this._CashBoxNumber = value;
				this.SendPropertyChanged("CashBoxNumber");
				this.OnCashBoxNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDeskEntryDescriptionID", DbType="Int NOT NULL")]
	public int CashDeskEntryDescriptionID
	{
		get
		{
			return this._CashDeskEntryDescriptionID;
		}
		set
		{
			if ((this._CashDeskEntryDescriptionID != value))
			{
				this.OnCashDeskEntryDescriptionIDChanging(value);
				this.SendPropertyChanging();
				this._CashDeskEntryDescriptionID = value;
				this.SendPropertyChanged("CashDeskEntryDescriptionID");
				this.OnCashDeskEntryDescriptionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
	public System.Nullable<int> ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDeskPersonID", DbType="Int")]
	public System.Nullable<int> CashDeskPersonID
	{
		get
		{
			return this._CashDeskPersonID;
		}
		set
		{
			if ((this._CashDeskPersonID != value))
			{
				this.OnCashDeskPersonIDChanging(value);
				this.SendPropertyChanging();
				this._CashDeskPersonID = value;
				this.SendPropertyChanged("CashDeskPersonID");
				this.OnCashDeskPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="NVarChar(50)")]
	public string DocumentNumber
	{
		get
		{
			return this._DocumentNumber;
		}
		set
		{
			if ((this._DocumentNumber != value))
			{
				this.OnDocumentNumberChanging(value);
				this.SendPropertyChanging();
				this._DocumentNumber = value;
				this.SendPropertyChanged("DocumentNumber");
				this.OnDocumentNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int")]
	public System.Nullable<int> CurrencyID
	{
		get
		{
			return this._CurrencyID;
		}
		set
		{
			if ((this._CurrencyID != value))
			{
				this.OnCurrencyIDChanging(value);
				this.SendPropertyChanging();
				this._CurrencyID = value;
				this.SendPropertyChanged("CurrencyID");
				this.OnCurrencyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseValue", DbType="Decimal(18,4)")]
	public System.Nullable<decimal> CourseValue
	{
		get
		{
			return this._CourseValue;
		}
		set
		{
			if ((this._CourseValue != value))
			{
				this.OnCourseValueChanging(value);
				this.SendPropertyChanging();
				this._CourseValue = value;
				this.SendPropertyChanged("CourseValue");
				this.OnCourseValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyValue", DbType="Decimal(18,2)")]
	public System.Nullable<decimal> CurrencyValue
	{
		get
		{
			return this._CurrencyValue;
		}
		set
		{
			if ((this._CurrencyValue != value))
			{
				this.OnCurrencyValueChanging(value);
				this.SendPropertyChanging();
				this._CurrencyValue = value;
				this.SendPropertyChanged("CurrencyValue");
				this.OnCurrencyValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
	public decimal Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebtValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal DebtValue
	{
		get
		{
			return this._DebtValue;
		}
		set
		{
			if ((this._DebtValue != value))
			{
				this.OnDebtValueChanging(value);
				this.SendPropertyChanging();
				this._DebtValue = value;
				this.SendPropertyChanged("DebtValue");
				this.OnDebtValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebitValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal DebitValue
	{
		get
		{
			return this._DebitValue;
		}
		set
		{
			if ((this._DebitValue != value))
			{
				this.OnDebitValueChanging(value);
				this.SendPropertyChanging();
				this._DebitValue = value;
				this.SendPropertyChanged("DebitValue");
				this.OnDebitValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDeskEntryTypeID", DbType="Int NOT NULL")]
	public int CashDeskEntryTypeID
	{
		get
		{
			return this._CashDeskEntryTypeID;
		}
		set
		{
			if ((this._CashDeskEntryTypeID != value))
			{
				this.OnCashDeskEntryTypeIDChanging(value);
				this.SendPropertyChanging();
				this._CashDeskEntryTypeID = value;
				this.SendPropertyChanged("CashDeskEntryTypeID");
				this.OnCashDeskEntryTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Change", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Change
	{
		get
		{
			return this._Change;
		}
		set
		{
			if ((this._Change != value))
			{
				this.OnChangeChanging(value);
				this.SendPropertyChanging();
				this._Change = value;
				this.SendPropertyChanged("Change");
				this.OnChangeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfChange", DbType="DateTime NOT NULL")]
	public System.DateTime DateOfChange
	{
		get
		{
			return this._DateOfChange;
		}
		set
		{
			if ((this._DateOfChange != value))
			{
				this.OnDateOfChangeChanging(value);
				this.SendPropertyChanging();
				this._DateOfChange = value;
				this.SendPropertyChanged("DateOfChange");
				this.OnDateOfChangeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoryItemOriginalCosts")]
public partial class HistoryItemOriginalCost : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ItemOriginalCostID;
	
	private decimal _Quantity;
	
	private decimal _OriginalCost;
	
	private decimal _SellValue;
	
	private bool _IsInput;
	
	private System.DateTime _Date;
	
	private int _MaterialDocumentTypeID;
	
	private string _DocumentNumber;
	
	private string _ClientName;
	
	private EntityRef<HistoryItemOriginalCost> _HistoryItemOriginalCost2;
	
	private EntityRef<HistoryItemOriginalCost> _HistoryItemOriginalCost1;
	
	private EntityRef<ItemOriginalCost> _ItemOriginalCost;
	
	private EntityRef<MaterialDocumentType> _MaterialDocumentType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemOriginalCostIDChanging(int value);
    partial void OnItemOriginalCostIDChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnOriginalCostChanging(decimal value);
    partial void OnOriginalCostChanged();
    partial void OnSellValueChanging(decimal value);
    partial void OnSellValueChanged();
    partial void OnIsInputChanging(bool value);
    partial void OnIsInputChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnMaterialDocumentTypeIDChanging(int value);
    partial void OnMaterialDocumentTypeIDChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    #endregion
	
	public HistoryItemOriginalCost()
	{
		this._HistoryItemOriginalCost2 = default(EntityRef<HistoryItemOriginalCost>);
		this._HistoryItemOriginalCost1 = default(EntityRef<HistoryItemOriginalCost>);
		this._ItemOriginalCost = default(EntityRef<ItemOriginalCost>);
		this._MaterialDocumentType = default(EntityRef<MaterialDocumentType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				if (this._HistoryItemOriginalCost1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemOriginalCostID", DbType="Int NOT NULL")]
	public int ItemOriginalCostID
	{
		get
		{
			return this._ItemOriginalCostID;
		}
		set
		{
			if ((this._ItemOriginalCostID != value))
			{
				if (this._ItemOriginalCost.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemOriginalCostIDChanging(value);
				this.SendPropertyChanging();
				this._ItemOriginalCostID = value;
				this.SendPropertyChanged("ItemOriginalCostID");
				this.OnItemOriginalCostIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalCost", DbType="Decimal(18,4) NOT NULL")]
	public decimal OriginalCost
	{
		get
		{
			return this._OriginalCost;
		}
		set
		{
			if ((this._OriginalCost != value))
			{
				this.OnOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._OriginalCost = value;
				this.SendPropertyChanged("OriginalCost");
				this.OnOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellValue", DbType="Decimal(18,4) NOT NULL")]
	public decimal SellValue
	{
		get
		{
			return this._SellValue;
		}
		set
		{
			if ((this._SellValue != value))
			{
				this.OnSellValueChanging(value);
				this.SendPropertyChanging();
				this._SellValue = value;
				this.SendPropertyChanged("SellValue");
				this.OnSellValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInput", DbType="Bit NOT NULL")]
	public bool IsInput
	{
		get
		{
			return this._IsInput;
		}
		set
		{
			if ((this._IsInput != value))
			{
				this.OnIsInputChanging(value);
				this.SendPropertyChanging();
				this._IsInput = value;
				this.SendPropertyChanged("IsInput");
				this.OnIsInputChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialDocumentTypeID", DbType="Int NOT NULL")]
	public int MaterialDocumentTypeID
	{
		get
		{
			return this._MaterialDocumentTypeID;
		}
		set
		{
			if ((this._MaterialDocumentTypeID != value))
			{
				if (this._MaterialDocumentType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMaterialDocumentTypeIDChanging(value);
				this.SendPropertyChanging();
				this._MaterialDocumentTypeID = value;
				this.SendPropertyChanged("MaterialDocumentTypeID");
				this.OnMaterialDocumentTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string DocumentNumber
	{
		get
		{
			return this._DocumentNumber;
		}
		set
		{
			if ((this._DocumentNumber != value))
			{
				this.OnDocumentNumberChanging(value);
				this.SendPropertyChanging();
				this._DocumentNumber = value;
				this.SendPropertyChanged("DocumentNumber");
				this.OnDocumentNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string ClientName
	{
		get
		{
			return this._ClientName;
		}
		set
		{
			if ((this._ClientName != value))
			{
				this.OnClientNameChanging(value);
				this.SendPropertyChanging();
				this._ClientName = value;
				this.SendPropertyChanged("ClientName");
				this.OnClientNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HistoryItemOriginalCost_HistoryItemOriginalCost", Storage="_HistoryItemOriginalCost2", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
	public HistoryItemOriginalCost HistoryItemOriginalCost2
	{
		get
		{
			return this._HistoryItemOriginalCost2.Entity;
		}
		set
		{
			HistoryItemOriginalCost previousValue = this._HistoryItemOriginalCost2.Entity;
			if (((previousValue != value) 
						|| (this._HistoryItemOriginalCost2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._HistoryItemOriginalCost2.Entity = null;
					previousValue.HistoryItemOriginalCost1 = null;
				}
				this._HistoryItemOriginalCost2.Entity = value;
				if ((value != null))
				{
					value.HistoryItemOriginalCost1 = this;
				}
				this.SendPropertyChanged("HistoryItemOriginalCost2");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HistoryItemOriginalCost_HistoryItemOriginalCost", Storage="_HistoryItemOriginalCost1", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
	public HistoryItemOriginalCost HistoryItemOriginalCost1
	{
		get
		{
			return this._HistoryItemOriginalCost1.Entity;
		}
		set
		{
			HistoryItemOriginalCost previousValue = this._HistoryItemOriginalCost1.Entity;
			if (((previousValue != value) 
						|| (this._HistoryItemOriginalCost1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._HistoryItemOriginalCost1.Entity = null;
					previousValue.HistoryItemOriginalCost2 = null;
				}
				this._HistoryItemOriginalCost1.Entity = value;
				if ((value != null))
				{
					value.HistoryItemOriginalCost2 = this;
					this._ID = value.ID;
				}
				else
				{
					this._ID = default(int);
				}
				this.SendPropertyChanged("HistoryItemOriginalCost1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemOriginalCost_HistoryItemOriginalCost", Storage="_ItemOriginalCost", ThisKey="ItemOriginalCostID", OtherKey="ID", IsForeignKey=true)]
	public ItemOriginalCost ItemOriginalCost
	{
		get
		{
			return this._ItemOriginalCost.Entity;
		}
		set
		{
			ItemOriginalCost previousValue = this._ItemOriginalCost.Entity;
			if (((previousValue != value) 
						|| (this._ItemOriginalCost.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ItemOriginalCost.Entity = null;
					previousValue.HistoryItemOriginalCosts.Remove(this);
				}
				this._ItemOriginalCost.Entity = value;
				if ((value != null))
				{
					value.HistoryItemOriginalCosts.Add(this);
					this._ItemOriginalCostID = value.ID;
				}
				else
				{
					this._ItemOriginalCostID = default(int);
				}
				this.SendPropertyChanged("ItemOriginalCost");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentType_HistoryItemOriginalCost", Storage="_MaterialDocumentType", ThisKey="MaterialDocumentTypeID", OtherKey="ID", IsForeignKey=true)]
	public MaterialDocumentType MaterialDocumentType
	{
		get
		{
			return this._MaterialDocumentType.Entity;
		}
		set
		{
			MaterialDocumentType previousValue = this._MaterialDocumentType.Entity;
			if (((previousValue != value) 
						|| (this._MaterialDocumentType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaterialDocumentType.Entity = null;
					previousValue.HistoryItemOriginalCosts.Remove(this);
				}
				this._MaterialDocumentType.Entity = value;
				if ((value != null))
				{
					value.HistoryItemOriginalCosts.Add(this);
					this._MaterialDocumentTypeID = value.ID;
				}
				else
				{
					this._MaterialDocumentTypeID = default(int);
				}
				this.SendPropertyChanged("MaterialDocumentType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistorySalaries")]
public partial class HistorySalary : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _SalaryID;
	
	private System.DateTime _DateOfChange;
	
	private int _Month;
	
	private int _Year;
	
	private int _EmployeeID;
	
	private int _NetProduceHours;
	
	private decimal _NetProduceValue;
	
	private int _NetNormHours;
	
	private decimal _NetNormValue;
	
	private int _IllnessHours;
	
	private decimal _IllnessValue;
	
	private int _IllnessSocialHours;
	
	private decimal _IllnesSocialValue;
	
	private int _VacationHours;
	
	private decimal _VacationValue;
	
	private int _StateHolidayHours;
	
	private decimal _StateHolidayValue;
	
	private decimal _BaseCostValue;
	
	private int _SectorID;
	
	private decimal _AllowanceValue;
	
	private decimal _GrossAmmount;
	
	private decimal _PersonalTax;
	
	private decimal _PensionValue;
	
	private decimal _PensionValueAdditionalValue;
	
	private decimal _HealthValue;
	
	private decimal _HealthValueAdditionalValue;
	
	private decimal _AdditionalValue;
	
	private decimal _AdditionalValueAdditionalValue;
	
	private decimal _EmployValue;
	
	private decimal _EmployValueAdditionalValue;
	
	private decimal _TaxRealeseValue;
	
	private int _NonpaidHours;
	
	private int _PrivateAbsenceHours;
	
	private decimal _PrivateAbsenceValue;
	
	private int _IntershipTypeID;
	
	private bool _IsCorrection;
	
	private System.Nullable<bool> _IsLock;
	
	private System.Nullable<System.DateTime> _DateOfPayment;
	
	private System.Nullable<int> _CompanyID;
	
	private EntityRef<Employee> _Employee;
	
	private EntityRef<Sector> _Sector;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSalaryIDChanging(int value);
    partial void OnSalaryIDChanged();
    partial void OnDateOfChangeChanging(System.DateTime value);
    partial void OnDateOfChangeChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnNetProduceHoursChanging(int value);
    partial void OnNetProduceHoursChanged();
    partial void OnNetProduceValueChanging(decimal value);
    partial void OnNetProduceValueChanged();
    partial void OnNetNormHoursChanging(int value);
    partial void OnNetNormHoursChanged();
    partial void OnNetNormValueChanging(decimal value);
    partial void OnNetNormValueChanged();
    partial void OnIllnessHoursChanging(int value);
    partial void OnIllnessHoursChanged();
    partial void OnIllnessValueChanging(decimal value);
    partial void OnIllnessValueChanged();
    partial void OnIllnessSocialHoursChanging(int value);
    partial void OnIllnessSocialHoursChanged();
    partial void OnIllnesSocialValueChanging(decimal value);
    partial void OnIllnesSocialValueChanged();
    partial void OnVacationHoursChanging(int value);
    partial void OnVacationHoursChanged();
    partial void OnVacationValueChanging(decimal value);
    partial void OnVacationValueChanged();
    partial void OnStateHolidayHoursChanging(int value);
    partial void OnStateHolidayHoursChanged();
    partial void OnStateHolidayValueChanging(decimal value);
    partial void OnStateHolidayValueChanged();
    partial void OnBaseCostValueChanging(decimal value);
    partial void OnBaseCostValueChanged();
    partial void OnSectorIDChanging(int value);
    partial void OnSectorIDChanged();
    partial void OnAllowanceValueChanging(decimal value);
    partial void OnAllowanceValueChanged();
    partial void OnGrossAmmountChanging(decimal value);
    partial void OnGrossAmmountChanged();
    partial void OnPersonalTaxChanging(decimal value);
    partial void OnPersonalTaxChanged();
    partial void OnPensionValueChanging(decimal value);
    partial void OnPensionValueChanged();
    partial void OnPensionValueAdditionalValueChanging(decimal value);
    partial void OnPensionValueAdditionalValueChanged();
    partial void OnHealthValueChanging(decimal value);
    partial void OnHealthValueChanged();
    partial void OnHealthValueAdditionalValueChanging(decimal value);
    partial void OnHealthValueAdditionalValueChanged();
    partial void OnAdditionalValueChanging(decimal value);
    partial void OnAdditionalValueChanged();
    partial void OnAdditionalValueAdditionalValueChanging(decimal value);
    partial void OnAdditionalValueAdditionalValueChanged();
    partial void OnEmployValueChanging(decimal value);
    partial void OnEmployValueChanged();
    partial void OnEmployValueAdditionalValueChanging(decimal value);
    partial void OnEmployValueAdditionalValueChanged();
    partial void OnTaxRealeseValueChanging(decimal value);
    partial void OnTaxRealeseValueChanged();
    partial void OnNonpaidHoursChanging(int value);
    partial void OnNonpaidHoursChanged();
    partial void OnPrivateAbsenceHoursChanging(int value);
    partial void OnPrivateAbsenceHoursChanged();
    partial void OnPrivateAbsenceValueChanging(decimal value);
    partial void OnPrivateAbsenceValueChanged();
    partial void OnIntershipTypeIDChanging(int value);
    partial void OnIntershipTypeIDChanged();
    partial void OnIsCorrectionChanging(bool value);
    partial void OnIsCorrectionChanged();
    partial void OnIsLockChanging(System.Nullable<bool> value);
    partial void OnIsLockChanged();
    partial void OnDateOfPaymentChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfPaymentChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public HistorySalary()
	{
		this._Employee = default(EntityRef<Employee>);
		this._Sector = default(EntityRef<Sector>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryID", DbType="Int NOT NULL")]
	public int SalaryID
	{
		get
		{
			return this._SalaryID;
		}
		set
		{
			if ((this._SalaryID != value))
			{
				this.OnSalaryIDChanging(value);
				this.SendPropertyChanging();
				this._SalaryID = value;
				this.SendPropertyChanged("SalaryID");
				this.OnSalaryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfChange", DbType="DateTime NOT NULL")]
	public System.DateTime DateOfChange
	{
		get
		{
			return this._DateOfChange;
		}
		set
		{
			if ((this._DateOfChange != value))
			{
				this.OnDateOfChangeChanging(value);
				this.SendPropertyChanging();
				this._DateOfChange = value;
				this.SendPropertyChanged("DateOfChange");
				this.OnDateOfChangeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int NOT NULL")]
	public int Month
	{
		get
		{
			return this._Month;
		}
		set
		{
			if ((this._Month != value))
			{
				this.OnMonthChanging(value);
				this.SendPropertyChanging();
				this._Month = value;
				this.SendPropertyChanged("Month");
				this.OnMonthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
	public int Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this.OnYearChanging(value);
				this.SendPropertyChanging();
				this._Year = value;
				this.SendPropertyChanged("Year");
				this.OnYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
	public int EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetProduceHours", DbType="Int NOT NULL")]
	public int NetProduceHours
	{
		get
		{
			return this._NetProduceHours;
		}
		set
		{
			if ((this._NetProduceHours != value))
			{
				this.OnNetProduceHoursChanging(value);
				this.SendPropertyChanging();
				this._NetProduceHours = value;
				this.SendPropertyChanged("NetProduceHours");
				this.OnNetProduceHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetProduceValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal NetProduceValue
	{
		get
		{
			return this._NetProduceValue;
		}
		set
		{
			if ((this._NetProduceValue != value))
			{
				this.OnNetProduceValueChanging(value);
				this.SendPropertyChanging();
				this._NetProduceValue = value;
				this.SendPropertyChanged("NetProduceValue");
				this.OnNetProduceValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetNormHours", DbType="Int NOT NULL")]
	public int NetNormHours
	{
		get
		{
			return this._NetNormHours;
		}
		set
		{
			if ((this._NetNormHours != value))
			{
				this.OnNetNormHoursChanging(value);
				this.SendPropertyChanging();
				this._NetNormHours = value;
				this.SendPropertyChanged("NetNormHours");
				this.OnNetNormHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetNormValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal NetNormValue
	{
		get
		{
			return this._NetNormValue;
		}
		set
		{
			if ((this._NetNormValue != value))
			{
				this.OnNetNormValueChanging(value);
				this.SendPropertyChanging();
				this._NetNormValue = value;
				this.SendPropertyChanged("NetNormValue");
				this.OnNetNormValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IllnessHours", DbType="Int NOT NULL")]
	public int IllnessHours
	{
		get
		{
			return this._IllnessHours;
		}
		set
		{
			if ((this._IllnessHours != value))
			{
				this.OnIllnessHoursChanging(value);
				this.SendPropertyChanging();
				this._IllnessHours = value;
				this.SendPropertyChanged("IllnessHours");
				this.OnIllnessHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IllnessValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal IllnessValue
	{
		get
		{
			return this._IllnessValue;
		}
		set
		{
			if ((this._IllnessValue != value))
			{
				this.OnIllnessValueChanging(value);
				this.SendPropertyChanging();
				this._IllnessValue = value;
				this.SendPropertyChanged("IllnessValue");
				this.OnIllnessValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IllnessSocialHours", DbType="Int NOT NULL")]
	public int IllnessSocialHours
	{
		get
		{
			return this._IllnessSocialHours;
		}
		set
		{
			if ((this._IllnessSocialHours != value))
			{
				this.OnIllnessSocialHoursChanging(value);
				this.SendPropertyChanging();
				this._IllnessSocialHours = value;
				this.SendPropertyChanged("IllnessSocialHours");
				this.OnIllnessSocialHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IllnesSocialValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal IllnesSocialValue
	{
		get
		{
			return this._IllnesSocialValue;
		}
		set
		{
			if ((this._IllnesSocialValue != value))
			{
				this.OnIllnesSocialValueChanging(value);
				this.SendPropertyChanging();
				this._IllnesSocialValue = value;
				this.SendPropertyChanged("IllnesSocialValue");
				this.OnIllnesSocialValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VacationHours", DbType="Int NOT NULL")]
	public int VacationHours
	{
		get
		{
			return this._VacationHours;
		}
		set
		{
			if ((this._VacationHours != value))
			{
				this.OnVacationHoursChanging(value);
				this.SendPropertyChanging();
				this._VacationHours = value;
				this.SendPropertyChanged("VacationHours");
				this.OnVacationHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VacationValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal VacationValue
	{
		get
		{
			return this._VacationValue;
		}
		set
		{
			if ((this._VacationValue != value))
			{
				this.OnVacationValueChanging(value);
				this.SendPropertyChanging();
				this._VacationValue = value;
				this.SendPropertyChanged("VacationValue");
				this.OnVacationValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateHolidayHours", DbType="Int NOT NULL")]
	public int StateHolidayHours
	{
		get
		{
			return this._StateHolidayHours;
		}
		set
		{
			if ((this._StateHolidayHours != value))
			{
				this.OnStateHolidayHoursChanging(value);
				this.SendPropertyChanging();
				this._StateHolidayHours = value;
				this.SendPropertyChanged("StateHolidayHours");
				this.OnStateHolidayHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateHolidayValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal StateHolidayValue
	{
		get
		{
			return this._StateHolidayValue;
		}
		set
		{
			if ((this._StateHolidayValue != value))
			{
				this.OnStateHolidayValueChanging(value);
				this.SendPropertyChanging();
				this._StateHolidayValue = value;
				this.SendPropertyChanged("StateHolidayValue");
				this.OnStateHolidayValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseCostValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal BaseCostValue
	{
		get
		{
			return this._BaseCostValue;
		}
		set
		{
			if ((this._BaseCostValue != value))
			{
				this.OnBaseCostValueChanging(value);
				this.SendPropertyChanging();
				this._BaseCostValue = value;
				this.SendPropertyChanged("BaseCostValue");
				this.OnBaseCostValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectorID", DbType="Int NOT NULL")]
	public int SectorID
	{
		get
		{
			return this._SectorID;
		}
		set
		{
			if ((this._SectorID != value))
			{
				if (this._Sector.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSectorIDChanging(value);
				this.SendPropertyChanging();
				this._SectorID = value;
				this.SendPropertyChanged("SectorID");
				this.OnSectorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowanceValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal AllowanceValue
	{
		get
		{
			return this._AllowanceValue;
		}
		set
		{
			if ((this._AllowanceValue != value))
			{
				this.OnAllowanceValueChanging(value);
				this.SendPropertyChanging();
				this._AllowanceValue = value;
				this.SendPropertyChanged("AllowanceValue");
				this.OnAllowanceValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrossAmmount", DbType="Decimal(18,2) NOT NULL")]
	public decimal GrossAmmount
	{
		get
		{
			return this._GrossAmmount;
		}
		set
		{
			if ((this._GrossAmmount != value))
			{
				this.OnGrossAmmountChanging(value);
				this.SendPropertyChanging();
				this._GrossAmmount = value;
				this.SendPropertyChanged("GrossAmmount");
				this.OnGrossAmmountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalTax", DbType="Decimal(18,2) NOT NULL")]
	public decimal PersonalTax
	{
		get
		{
			return this._PersonalTax;
		}
		set
		{
			if ((this._PersonalTax != value))
			{
				this.OnPersonalTaxChanging(value);
				this.SendPropertyChanging();
				this._PersonalTax = value;
				this.SendPropertyChanged("PersonalTax");
				this.OnPersonalTaxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PensionValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal PensionValue
	{
		get
		{
			return this._PensionValue;
		}
		set
		{
			if ((this._PensionValue != value))
			{
				this.OnPensionValueChanging(value);
				this.SendPropertyChanging();
				this._PensionValue = value;
				this.SendPropertyChanged("PensionValue");
				this.OnPensionValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PensionValueAdditionalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal PensionValueAdditionalValue
	{
		get
		{
			return this._PensionValueAdditionalValue;
		}
		set
		{
			if ((this._PensionValueAdditionalValue != value))
			{
				this.OnPensionValueAdditionalValueChanging(value);
				this.SendPropertyChanging();
				this._PensionValueAdditionalValue = value;
				this.SendPropertyChanged("PensionValueAdditionalValue");
				this.OnPensionValueAdditionalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal HealthValue
	{
		get
		{
			return this._HealthValue;
		}
		set
		{
			if ((this._HealthValue != value))
			{
				this.OnHealthValueChanging(value);
				this.SendPropertyChanging();
				this._HealthValue = value;
				this.SendPropertyChanged("HealthValue");
				this.OnHealthValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthValueAdditionalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal HealthValueAdditionalValue
	{
		get
		{
			return this._HealthValueAdditionalValue;
		}
		set
		{
			if ((this._HealthValueAdditionalValue != value))
			{
				this.OnHealthValueAdditionalValueChanging(value);
				this.SendPropertyChanging();
				this._HealthValueAdditionalValue = value;
				this.SendPropertyChanged("HealthValueAdditionalValue");
				this.OnHealthValueAdditionalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal AdditionalValue
	{
		get
		{
			return this._AdditionalValue;
		}
		set
		{
			if ((this._AdditionalValue != value))
			{
				this.OnAdditionalValueChanging(value);
				this.SendPropertyChanging();
				this._AdditionalValue = value;
				this.SendPropertyChanged("AdditionalValue");
				this.OnAdditionalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalValueAdditionalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal AdditionalValueAdditionalValue
	{
		get
		{
			return this._AdditionalValueAdditionalValue;
		}
		set
		{
			if ((this._AdditionalValueAdditionalValue != value))
			{
				this.OnAdditionalValueAdditionalValueChanging(value);
				this.SendPropertyChanging();
				this._AdditionalValueAdditionalValue = value;
				this.SendPropertyChanged("AdditionalValueAdditionalValue");
				this.OnAdditionalValueAdditionalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal EmployValue
	{
		get
		{
			return this._EmployValue;
		}
		set
		{
			if ((this._EmployValue != value))
			{
				this.OnEmployValueChanging(value);
				this.SendPropertyChanging();
				this._EmployValue = value;
				this.SendPropertyChanged("EmployValue");
				this.OnEmployValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployValueAdditionalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal EmployValueAdditionalValue
	{
		get
		{
			return this._EmployValueAdditionalValue;
		}
		set
		{
			if ((this._EmployValueAdditionalValue != value))
			{
				this.OnEmployValueAdditionalValueChanging(value);
				this.SendPropertyChanging();
				this._EmployValueAdditionalValue = value;
				this.SendPropertyChanged("EmployValueAdditionalValue");
				this.OnEmployValueAdditionalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxRealeseValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxRealeseValue
	{
		get
		{
			return this._TaxRealeseValue;
		}
		set
		{
			if ((this._TaxRealeseValue != value))
			{
				this.OnTaxRealeseValueChanging(value);
				this.SendPropertyChanging();
				this._TaxRealeseValue = value;
				this.SendPropertyChanged("TaxRealeseValue");
				this.OnTaxRealeseValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NonpaidHours", DbType="Int NOT NULL")]
	public int NonpaidHours
	{
		get
		{
			return this._NonpaidHours;
		}
		set
		{
			if ((this._NonpaidHours != value))
			{
				this.OnNonpaidHoursChanging(value);
				this.SendPropertyChanging();
				this._NonpaidHours = value;
				this.SendPropertyChanged("NonpaidHours");
				this.OnNonpaidHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateAbsenceHours", DbType="Int NOT NULL")]
	public int PrivateAbsenceHours
	{
		get
		{
			return this._PrivateAbsenceHours;
		}
		set
		{
			if ((this._PrivateAbsenceHours != value))
			{
				this.OnPrivateAbsenceHoursChanging(value);
				this.SendPropertyChanging();
				this._PrivateAbsenceHours = value;
				this.SendPropertyChanged("PrivateAbsenceHours");
				this.OnPrivateAbsenceHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateAbsenceValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal PrivateAbsenceValue
	{
		get
		{
			return this._PrivateAbsenceValue;
		}
		set
		{
			if ((this._PrivateAbsenceValue != value))
			{
				this.OnPrivateAbsenceValueChanging(value);
				this.SendPropertyChanging();
				this._PrivateAbsenceValue = value;
				this.SendPropertyChanged("PrivateAbsenceValue");
				this.OnPrivateAbsenceValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntershipTypeID", DbType="Int NOT NULL")]
	public int IntershipTypeID
	{
		get
		{
			return this._IntershipTypeID;
		}
		set
		{
			if ((this._IntershipTypeID != value))
			{
				this.OnIntershipTypeIDChanging(value);
				this.SendPropertyChanging();
				this._IntershipTypeID = value;
				this.SendPropertyChanged("IntershipTypeID");
				this.OnIntershipTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorrection", DbType="Bit NOT NULL")]
	public bool IsCorrection
	{
		get
		{
			return this._IsCorrection;
		}
		set
		{
			if ((this._IsCorrection != value))
			{
				this.OnIsCorrectionChanging(value);
				this.SendPropertyChanging();
				this._IsCorrection = value;
				this.SendPropertyChanged("IsCorrection");
				this.OnIsCorrectionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLock", DbType="Bit")]
	public System.Nullable<bool> IsLock
	{
		get
		{
			return this._IsLock;
		}
		set
		{
			if ((this._IsLock != value))
			{
				this.OnIsLockChanging(value);
				this.SendPropertyChanging();
				this._IsLock = value;
				this.SendPropertyChanged("IsLock");
				this.OnIsLockChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfPayment", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfPayment
	{
		get
		{
			return this._DateOfPayment;
		}
		set
		{
			if ((this._DateOfPayment != value))
			{
				this.OnDateOfPaymentChanging(value);
				this.SendPropertyChanging();
				this._DateOfPayment = value;
				this.SendPropertyChanged("DateOfPayment");
				this.OnDateOfPaymentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_HistorySalary", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.HistorySalaries.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.HistorySalaries.Add(this);
					this._EmployeeID = value.ID;
				}
				else
				{
					this._EmployeeID = default(int);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_HistorySalary", Storage="_Sector", ThisKey="SectorID", OtherKey="ID", IsForeignKey=true)]
	public Sector Sector
	{
		get
		{
			return this._Sector.Entity;
		}
		set
		{
			Sector previousValue = this._Sector.Entity;
			if (((previousValue != value) 
						|| (this._Sector.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Sector.Entity = null;
					previousValue.HistorySalaries.Remove(this);
				}
				this._Sector.Entity = value;
				if ((value != null))
				{
					value.HistorySalaries.Add(this);
					this._SectorID = value.ID;
				}
				else
				{
					this._SectorID = default(int);
				}
				this.SendPropertyChanged("Sector");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndebtPersons")]
public partial class IndebtPerson : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _PersonID;
	
	private string _Code;
	
	private bool _IsActive;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<CapitalAssetsCard> _CapitalAssetsCards;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Person> _Person;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public IndebtPerson()
	{
		this._CapitalAssetsCards = new EntitySet<CapitalAssetsCard>(new Action<CapitalAssetsCard>(this.attach_CapitalAssetsCards), new Action<CapitalAssetsCard>(this.detach_CapitalAssetsCards));
		this._Company = default(EntityRef<Company>);
		this._Person = default(EntityRef<Person>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
	public int PersonID
	{
		get
		{
			return this._PersonID;
		}
		set
		{
			if ((this._PersonID != value))
			{
				if (this._Person.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPersonIDChanging(value);
				this.SendPropertyChanging();
				this._PersonID = value;
				this.SendPropertyChanged("PersonID");
				this.OnPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndebtPerson_CapitalAssetsCard", Storage="_CapitalAssetsCards", ThisKey="ID", OtherKey="IndebtPersonID")]
	public EntitySet<CapitalAssetsCard> CapitalAssetsCards
	{
		get
		{
			return this._CapitalAssetsCards;
		}
		set
		{
			this._CapitalAssetsCards.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_IndebtPerson", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.IndebtPersons.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.IndebtPersons.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_IndebtPerson", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
	public Person Person
	{
		get
		{
			return this._Person.Entity;
		}
		set
		{
			Person previousValue = this._Person.Entity;
			if (((previousValue != value) 
						|| (this._Person.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Person.Entity = null;
					previousValue.IndebtPersons.Remove(this);
				}
				this._Person.Entity = value;
				if ((value != null))
				{
					value.IndebtPersons.Add(this);
					this._PersonID = value.ID;
				}
				else
				{
					this._PersonID = default(int);
				}
				this.SendPropertyChanged("Person");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.IndebtPerson = this;
	}
	
	private void detach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.IndebtPerson = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IntershipTypes")]
public partial class IntershipType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private string _Description;
	
	private string _MPINCode;
	
	private EntitySet<Salary> _Salaries;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMPINCodeChanging(string value);
    partial void OnMPINCodeChanged();
    #endregion
	
	public IntershipType()
	{
		this._Salaries = new EntitySet<Salary>(new Action<Salary>(this.attach_Salaries), new Action<Salary>(this.detach_Salaries));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MPINCode", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string MPINCode
	{
		get
		{
			return this._MPINCode;
		}
		set
		{
			if ((this._MPINCode != value))
			{
				this.OnMPINCodeChanging(value);
				this.SendPropertyChanging();
				this._MPINCode = value;
				this.SendPropertyChanged("MPINCode");
				this.OnMPINCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IntershipType_Salary", Storage="_Salaries", ThisKey="ID", OtherKey="IntershipTypeID")]
	public EntitySet<Salary> Salaries
	{
		get
		{
			return this._Salaries;
		}
		set
		{
			this._Salaries.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Salaries(Salary entity)
	{
		this.SendPropertyChanging();
		entity.IntershipType = this;
	}
	
	private void detach_Salaries(Salary entity)
	{
		this.SendPropertyChanging();
		entity.IntershipType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemCostForRestaurant")]
public partial class ItemCostForRestaurant : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ItemID;
	
	private decimal _SellPrice;
	
	private System.Nullable<decimal> _PriceForPersonal;
	
	private int _DDVTypeID;
	
	private System.Nullable<decimal> _TaxValue;
	
	private decimal _SellPriceWithout;
	
	private EntityRef<ItemCostForRestaurant> _ItemCostForRestaurant2;
	
	private EntityRef<DDVType> _DDVType;
	
	private EntityRef<ItemCostForRestaurant> _ItemCostForRestaurant1;
	
	private EntityRef<Item> _Item;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnSellPriceChanging(decimal value);
    partial void OnSellPriceChanged();
    partial void OnPriceForPersonalChanging(System.Nullable<decimal> value);
    partial void OnPriceForPersonalChanged();
    partial void OnDDVTypeIDChanging(int value);
    partial void OnDDVTypeIDChanged();
    partial void OnTaxValueChanging(System.Nullable<decimal> value);
    partial void OnTaxValueChanged();
    partial void OnSellPriceWithoutChanging(decimal value);
    partial void OnSellPriceWithoutChanged();
    #endregion
	
	public ItemCostForRestaurant()
	{
		this._ItemCostForRestaurant2 = default(EntityRef<ItemCostForRestaurant>);
		this._DDVType = default(EntityRef<DDVType>);
		this._ItemCostForRestaurant1 = default(EntityRef<ItemCostForRestaurant>);
		this._Item = default(EntityRef<Item>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				if (this._ItemCostForRestaurant1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellPrice", DbType="Decimal(18,2) NOT NULL")]
	public decimal SellPrice
	{
		get
		{
			return this._SellPrice;
		}
		set
		{
			if ((this._SellPrice != value))
			{
				this.OnSellPriceChanging(value);
				this.SendPropertyChanging();
				this._SellPrice = value;
				this.SendPropertyChanged("SellPrice");
				this.OnSellPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceForPersonal", DbType="Decimal(18,2)")]
	public System.Nullable<decimal> PriceForPersonal
	{
		get
		{
			return this._PriceForPersonal;
		}
		set
		{
			if ((this._PriceForPersonal != value))
			{
				this.OnPriceForPersonalChanging(value);
				this.SendPropertyChanging();
				this._PriceForPersonal = value;
				this.SendPropertyChanged("PriceForPersonal");
				this.OnPriceForPersonalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDVTypeID", DbType="Int NOT NULL")]
	public int DDVTypeID
	{
		get
		{
			return this._DDVTypeID;
		}
		set
		{
			if ((this._DDVTypeID != value))
			{
				if (this._DDVType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDDVTypeIDChanging(value);
				this.SendPropertyChanging();
				this._DDVTypeID = value;
				this.SendPropertyChanged("DDVTypeID");
				this.OnDDVTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxValue", DbType="Decimal(18,2)")]
	public System.Nullable<decimal> TaxValue
	{
		get
		{
			return this._TaxValue;
		}
		set
		{
			if ((this._TaxValue != value))
			{
				this.OnTaxValueChanging(value);
				this.SendPropertyChanging();
				this._TaxValue = value;
				this.SendPropertyChanged("TaxValue");
				this.OnTaxValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellPriceWithout", DbType="Decimal(18,2) NOT NULL")]
	public decimal SellPriceWithout
	{
		get
		{
			return this._SellPriceWithout;
		}
		set
		{
			if ((this._SellPriceWithout != value))
			{
				this.OnSellPriceWithoutChanging(value);
				this.SendPropertyChanging();
				this._SellPriceWithout = value;
				this.SendPropertyChanged("SellPriceWithout");
				this.OnSellPriceWithoutChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCostForRestaurant_ItemCostForRestaurant", Storage="_ItemCostForRestaurant2", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
	public ItemCostForRestaurant ItemCostForRestaurant2
	{
		get
		{
			return this._ItemCostForRestaurant2.Entity;
		}
		set
		{
			ItemCostForRestaurant previousValue = this._ItemCostForRestaurant2.Entity;
			if (((previousValue != value) 
						|| (this._ItemCostForRestaurant2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ItemCostForRestaurant2.Entity = null;
					previousValue.ItemCostForRestaurant1 = null;
				}
				this._ItemCostForRestaurant2.Entity = value;
				if ((value != null))
				{
					value.ItemCostForRestaurant1 = this;
				}
				this.SendPropertyChanged("ItemCostForRestaurant2");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DDVType_ItemCostForRestaurant", Storage="_DDVType", ThisKey="DDVTypeID", OtherKey="ID", IsForeignKey=true)]
	public DDVType DDVType
	{
		get
		{
			return this._DDVType.Entity;
		}
		set
		{
			DDVType previousValue = this._DDVType.Entity;
			if (((previousValue != value) 
						|| (this._DDVType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DDVType.Entity = null;
					previousValue.ItemCostForRestaurants.Remove(this);
				}
				this._DDVType.Entity = value;
				if ((value != null))
				{
					value.ItemCostForRestaurants.Add(this);
					this._DDVTypeID = value.ID;
				}
				else
				{
					this._DDVTypeID = default(int);
				}
				this.SendPropertyChanged("DDVType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCostForRestaurant_ItemCostForRestaurant", Storage="_ItemCostForRestaurant1", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
	public ItemCostForRestaurant ItemCostForRestaurant1
	{
		get
		{
			return this._ItemCostForRestaurant1.Entity;
		}
		set
		{
			ItemCostForRestaurant previousValue = this._ItemCostForRestaurant1.Entity;
			if (((previousValue != value) 
						|| (this._ItemCostForRestaurant1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ItemCostForRestaurant1.Entity = null;
					previousValue.ItemCostForRestaurant2 = null;
				}
				this._ItemCostForRestaurant1.Entity = value;
				if ((value != null))
				{
					value.ItemCostForRestaurant2 = this;
					this._ID = value.ID;
				}
				else
				{
					this._ID = default(int);
				}
				this.SendPropertyChanged("ItemCostForRestaurant1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemCostForRestaurant", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.ItemCostForRestaurants.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.ItemCostForRestaurants.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemGroups")]
public partial class ItemGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private string _Description;
	
	private EntitySet<ItemSubGroup> _ItemSubGroups;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public ItemGroup()
	{
		this._ItemSubGroups = new EntitySet<ItemSubGroup>(new Action<ItemSubGroup>(this.attach_ItemSubGroups), new Action<ItemSubGroup>(this.detach_ItemSubGroups));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemGroup_ItemSubGroup", Storage="_ItemSubGroups", ThisKey="ID", OtherKey="ItemGroupID")]
	public EntitySet<ItemSubGroup> ItemSubGroups
	{
		get
		{
			return this._ItemSubGroups;
		}
		set
		{
			this._ItemSubGroups.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ItemSubGroups(ItemSubGroup entity)
	{
		this.SendPropertyChanging();
		entity.ItemGroup = this;
	}
	
	private void detach_ItemSubGroups(ItemSubGroup entity)
	{
		this.SendPropertyChanging();
		entity.ItemGroup = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemOriginalCosts")]
public partial class ItemOriginalCost : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ItemID;
	
	private decimal _OriginalCost;
	
	private decimal _SellValue;
	
	private System.DateTime _Date;
	
	private bool _IsInput;
	
	private decimal _Quantity;
	
	private int _MaterialDocumentTypeID;
	
	private int _DocumentID;
	
	private int _DocumentItemID;
	
	private System.Nullable<int> _SupplierID;
	
	private EntitySet<HistoryItemOriginalCost> _HistoryItemOriginalCosts;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<MaterialDocumentType> _MaterialDocumentType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnOriginalCostChanging(decimal value);
    partial void OnOriginalCostChanged();
    partial void OnSellValueChanging(decimal value);
    partial void OnSellValueChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsInputChanging(bool value);
    partial void OnIsInputChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnMaterialDocumentTypeIDChanging(int value);
    partial void OnMaterialDocumentTypeIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnDocumentItemIDChanging(int value);
    partial void OnDocumentItemIDChanged();
    partial void OnSupplierIDChanging(System.Nullable<int> value);
    partial void OnSupplierIDChanged();
    #endregion
	
	public ItemOriginalCost()
	{
		this._HistoryItemOriginalCosts = new EntitySet<HistoryItemOriginalCost>(new Action<HistoryItemOriginalCost>(this.attach_HistoryItemOriginalCosts), new Action<HistoryItemOriginalCost>(this.detach_HistoryItemOriginalCosts));
		this._Client = default(EntityRef<Client>);
		this._Item = default(EntityRef<Item>);
		this._MaterialDocumentType = default(EntityRef<MaterialDocumentType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalCost", DbType="Decimal(18,4) NOT NULL")]
	public decimal OriginalCost
	{
		get
		{
			return this._OriginalCost;
		}
		set
		{
			if ((this._OriginalCost != value))
			{
				this.OnOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._OriginalCost = value;
				this.SendPropertyChanged("OriginalCost");
				this.OnOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellValue", DbType="Decimal(18,4) NOT NULL")]
	public decimal SellValue
	{
		get
		{
			return this._SellValue;
		}
		set
		{
			if ((this._SellValue != value))
			{
				this.OnSellValueChanging(value);
				this.SendPropertyChanging();
				this._SellValue = value;
				this.SendPropertyChanged("SellValue");
				this.OnSellValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInput", DbType="Bit NOT NULL")]
	public bool IsInput
	{
		get
		{
			return this._IsInput;
		}
		set
		{
			if ((this._IsInput != value))
			{
				this.OnIsInputChanging(value);
				this.SendPropertyChanging();
				this._IsInput = value;
				this.SendPropertyChanged("IsInput");
				this.OnIsInputChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialDocumentTypeID", DbType="Int NOT NULL")]
	public int MaterialDocumentTypeID
	{
		get
		{
			return this._MaterialDocumentTypeID;
		}
		set
		{
			if ((this._MaterialDocumentTypeID != value))
			{
				if (this._MaterialDocumentType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMaterialDocumentTypeIDChanging(value);
				this.SendPropertyChanging();
				this._MaterialDocumentTypeID = value;
				this.SendPropertyChanged("MaterialDocumentTypeID");
				this.OnMaterialDocumentTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
	public int DocumentID
	{
		get
		{
			return this._DocumentID;
		}
		set
		{
			if ((this._DocumentID != value))
			{
				this.OnDocumentIDChanging(value);
				this.SendPropertyChanging();
				this._DocumentID = value;
				this.SendPropertyChanged("DocumentID");
				this.OnDocumentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentItemID", DbType="Int NOT NULL")]
	public int DocumentItemID
	{
		get
		{
			return this._DocumentItemID;
		}
		set
		{
			if ((this._DocumentItemID != value))
			{
				this.OnDocumentItemIDChanging(value);
				this.SendPropertyChanging();
				this._DocumentItemID = value;
				this.SendPropertyChanged("DocumentItemID");
				this.OnDocumentItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int")]
	public System.Nullable<int> SupplierID
	{
		get
		{
			return this._SupplierID;
		}
		set
		{
			if ((this._SupplierID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSupplierIDChanging(value);
				this.SendPropertyChanging();
				this._SupplierID = value;
				this.SendPropertyChanged("SupplierID");
				this.OnSupplierIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemOriginalCost_HistoryItemOriginalCost", Storage="_HistoryItemOriginalCosts", ThisKey="ID", OtherKey="ItemOriginalCostID")]
	public EntitySet<HistoryItemOriginalCost> HistoryItemOriginalCosts
	{
		get
		{
			return this._HistoryItemOriginalCosts;
		}
		set
		{
			this._HistoryItemOriginalCosts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ItemOriginalCost", Storage="_Client", ThisKey="SupplierID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.ItemOriginalCosts.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.ItemOriginalCosts.Add(this);
					this._SupplierID = value.ID;
				}
				else
				{
					this._SupplierID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemOriginalCost", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.ItemOriginalCosts.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.ItemOriginalCosts.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentType_ItemOriginalCost", Storage="_MaterialDocumentType", ThisKey="MaterialDocumentTypeID", OtherKey="ID", IsForeignKey=true)]
	public MaterialDocumentType MaterialDocumentType
	{
		get
		{
			return this._MaterialDocumentType.Entity;
		}
		set
		{
			MaterialDocumentType previousValue = this._MaterialDocumentType.Entity;
			if (((previousValue != value) 
						|| (this._MaterialDocumentType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaterialDocumentType.Entity = null;
					previousValue.ItemOriginalCosts.Remove(this);
				}
				this._MaterialDocumentType.Entity = value;
				if ((value != null))
				{
					value.ItemOriginalCosts.Add(this);
					this._MaterialDocumentTypeID = value.ID;
				}
				else
				{
					this._MaterialDocumentTypeID = default(int);
				}
				this.SendPropertyChanged("MaterialDocumentType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_HistoryItemOriginalCosts(HistoryItemOriginalCost entity)
	{
		this.SendPropertyChanging();
		entity.ItemOriginalCost = this;
	}
	
	private void detach_HistoryItemOriginalCosts(HistoryItemOriginalCost entity)
	{
		this.SendPropertyChanging();
		entity.ItemOriginalCost = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _SubCode;
	
	private string _Name;
	
	private string _Description;
	
	private int _UnitID;
	
	private string _Manufacturer;
	
	private System.Nullable<int> _NativityStateID;
	
	private System.Nullable<int> _ItemSubGroupID;
	
	private System.Nullable<bool> _IsNormative;
	
	private System.Nullable<bool> _IsServed;
	
	private EntitySet<AccountsItem> _AccountsItems;
	
	private EntitySet<AdvanceInvoiceItem> _AdvanceInvoiceItems;
	
	private EntitySet<EntranceItem> _EntranceItems;
	
	private EntitySet<ItemCostForRestaurant> _ItemCostForRestaurants;
	
	private EntitySet<ItemOriginalCost> _ItemOriginalCosts;
	
	private EntitySet<LevellingItem> _LevellingItems;
	
	private EntitySet<Normative> _Normatives;
	
	private EntitySet<NormativesItem> _NormativesItems;
	
	private EntitySet<OutgoingFactureItem> _OutgoingFactureItems;
	
	private EntitySet<PayOffItem> _PayOffItems;
	
	private EntitySet<PayOffStoreWorkUnit> _PayOffStoreWorkUnits;
	
	private EntitySet<ReturnyItem> _ReturnyItems;
	
	private EntitySet<StoreEntanceItem> _StoreEntanceItems;
	
	private EntitySet<StorePayOffItem> _StorePayOffItems;
	
	private EntitySet<StoreReturnyItem> _StoreReturnyItems;
	
	private EntityRef<ItemSubGroup> _ItemSubGroup;
	
	private EntityRef<State> _State;
	
	private EntityRef<Unit> _Unit;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnSubCodeChanging(string value);
    partial void OnSubCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnNativityStateIDChanging(System.Nullable<int> value);
    partial void OnNativityStateIDChanged();
    partial void OnItemSubGroupIDChanging(System.Nullable<int> value);
    partial void OnItemSubGroupIDChanged();
    partial void OnIsNormativeChanging(System.Nullable<bool> value);
    partial void OnIsNormativeChanged();
    partial void OnIsServedChanging(System.Nullable<bool> value);
    partial void OnIsServedChanged();
    #endregion
	
	public Item()
	{
		this._AccountsItems = new EntitySet<AccountsItem>(new Action<AccountsItem>(this.attach_AccountsItems), new Action<AccountsItem>(this.detach_AccountsItems));
		this._AdvanceInvoiceItems = new EntitySet<AdvanceInvoiceItem>(new Action<AdvanceInvoiceItem>(this.attach_AdvanceInvoiceItems), new Action<AdvanceInvoiceItem>(this.detach_AdvanceInvoiceItems));
		this._EntranceItems = new EntitySet<EntranceItem>(new Action<EntranceItem>(this.attach_EntranceItems), new Action<EntranceItem>(this.detach_EntranceItems));
		this._ItemCostForRestaurants = new EntitySet<ItemCostForRestaurant>(new Action<ItemCostForRestaurant>(this.attach_ItemCostForRestaurants), new Action<ItemCostForRestaurant>(this.detach_ItemCostForRestaurants));
		this._ItemOriginalCosts = new EntitySet<ItemOriginalCost>(new Action<ItemOriginalCost>(this.attach_ItemOriginalCosts), new Action<ItemOriginalCost>(this.detach_ItemOriginalCosts));
		this._LevellingItems = new EntitySet<LevellingItem>(new Action<LevellingItem>(this.attach_LevellingItems), new Action<LevellingItem>(this.detach_LevellingItems));
		this._Normatives = new EntitySet<Normative>(new Action<Normative>(this.attach_Normatives), new Action<Normative>(this.detach_Normatives));
		this._NormativesItems = new EntitySet<NormativesItem>(new Action<NormativesItem>(this.attach_NormativesItems), new Action<NormativesItem>(this.detach_NormativesItems));
		this._OutgoingFactureItems = new EntitySet<OutgoingFactureItem>(new Action<OutgoingFactureItem>(this.attach_OutgoingFactureItems), new Action<OutgoingFactureItem>(this.detach_OutgoingFactureItems));
		this._PayOffItems = new EntitySet<PayOffItem>(new Action<PayOffItem>(this.attach_PayOffItems), new Action<PayOffItem>(this.detach_PayOffItems));
		this._PayOffStoreWorkUnits = new EntitySet<PayOffStoreWorkUnit>(new Action<PayOffStoreWorkUnit>(this.attach_PayOffStoreWorkUnits), new Action<PayOffStoreWorkUnit>(this.detach_PayOffStoreWorkUnits));
		this._ReturnyItems = new EntitySet<ReturnyItem>(new Action<ReturnyItem>(this.attach_ReturnyItems), new Action<ReturnyItem>(this.detach_ReturnyItems));
		this._StoreEntanceItems = new EntitySet<StoreEntanceItem>(new Action<StoreEntanceItem>(this.attach_StoreEntanceItems), new Action<StoreEntanceItem>(this.detach_StoreEntanceItems));
		this._StorePayOffItems = new EntitySet<StorePayOffItem>(new Action<StorePayOffItem>(this.attach_StorePayOffItems), new Action<StorePayOffItem>(this.detach_StorePayOffItems));
		this._StoreReturnyItems = new EntitySet<StoreReturnyItem>(new Action<StoreReturnyItem>(this.attach_StoreReturnyItems), new Action<StoreReturnyItem>(this.detach_StoreReturnyItems));
		this._ItemSubGroup = default(EntityRef<ItemSubGroup>);
		this._State = default(EntityRef<State>);
		this._Unit = default(EntityRef<Unit>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCode", DbType="NVarChar(50)")]
	public string SubCode
	{
		get
		{
			return this._SubCode;
		}
		set
		{
			if ((this._SubCode != value))
			{
				this.OnSubCodeChanging(value);
				this.SendPropertyChanging();
				this._SubCode = value;
				this.SendPropertyChanged("SubCode");
				this.OnSubCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL")]
	public int UnitID
	{
		get
		{
			return this._UnitID;
		}
		set
		{
			if ((this._UnitID != value))
			{
				if (this._Unit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUnitIDChanging(value);
				this.SendPropertyChanging();
				this._UnitID = value;
				this.SendPropertyChanged("UnitID");
				this.OnUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="NVarChar(155)")]
	public string Manufacturer
	{
		get
		{
			return this._Manufacturer;
		}
		set
		{
			if ((this._Manufacturer != value))
			{
				this.OnManufacturerChanging(value);
				this.SendPropertyChanging();
				this._Manufacturer = value;
				this.SendPropertyChanged("Manufacturer");
				this.OnManufacturerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NativityStateID", DbType="Int")]
	public System.Nullable<int> NativityStateID
	{
		get
		{
			return this._NativityStateID;
		}
		set
		{
			if ((this._NativityStateID != value))
			{
				if (this._State.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnNativityStateIDChanging(value);
				this.SendPropertyChanging();
				this._NativityStateID = value;
				this.SendPropertyChanged("NativityStateID");
				this.OnNativityStateIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSubGroupID", DbType="Int")]
	public System.Nullable<int> ItemSubGroupID
	{
		get
		{
			return this._ItemSubGroupID;
		}
		set
		{
			if ((this._ItemSubGroupID != value))
			{
				if (this._ItemSubGroup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemSubGroupIDChanging(value);
				this.SendPropertyChanging();
				this._ItemSubGroupID = value;
				this.SendPropertyChanged("ItemSubGroupID");
				this.OnItemSubGroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNormative", DbType="Bit")]
	public System.Nullable<bool> IsNormative
	{
		get
		{
			return this._IsNormative;
		}
		set
		{
			if ((this._IsNormative != value))
			{
				this.OnIsNormativeChanging(value);
				this.SendPropertyChanging();
				this._IsNormative = value;
				this.SendPropertyChanged("IsNormative");
				this.OnIsNormativeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsServed", DbType="Bit")]
	public System.Nullable<bool> IsServed
	{
		get
		{
			return this._IsServed;
		}
		set
		{
			if ((this._IsServed != value))
			{
				this.OnIsServedChanging(value);
				this.SendPropertyChanging();
				this._IsServed = value;
				this.SendPropertyChanged("IsServed");
				this.OnIsServedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_AccountsItem", Storage="_AccountsItems", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<AccountsItem> AccountsItems
	{
		get
		{
			return this._AccountsItems;
		}
		set
		{
			this._AccountsItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_AdvanceInvoiceItem", Storage="_AdvanceInvoiceItems", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<AdvanceInvoiceItem> AdvanceInvoiceItems
	{
		get
		{
			return this._AdvanceInvoiceItems;
		}
		set
		{
			this._AdvanceInvoiceItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_EntranceItem", Storage="_EntranceItems", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<EntranceItem> EntranceItems
	{
		get
		{
			return this._EntranceItems;
		}
		set
		{
			this._EntranceItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemCostForRestaurant", Storage="_ItemCostForRestaurants", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<ItemCostForRestaurant> ItemCostForRestaurants
	{
		get
		{
			return this._ItemCostForRestaurants;
		}
		set
		{
			this._ItemCostForRestaurants.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemOriginalCost", Storage="_ItemOriginalCosts", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<ItemOriginalCost> ItemOriginalCosts
	{
		get
		{
			return this._ItemOriginalCosts;
		}
		set
		{
			this._ItemOriginalCosts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_LevellingItem", Storage="_LevellingItems", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<LevellingItem> LevellingItems
	{
		get
		{
			return this._LevellingItems;
		}
		set
		{
			this._LevellingItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Normative", Storage="_Normatives", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<Normative> Normatives
	{
		get
		{
			return this._Normatives;
		}
		set
		{
			this._Normatives.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_NormativesItem", Storage="_NormativesItems", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<NormativesItem> NormativesItems
	{
		get
		{
			return this._NormativesItems;
		}
		set
		{
			this._NormativesItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_OutgoingFactureItem", Storage="_OutgoingFactureItems", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<OutgoingFactureItem> OutgoingFactureItems
	{
		get
		{
			return this._OutgoingFactureItems;
		}
		set
		{
			this._OutgoingFactureItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_PayOffItem", Storage="_PayOffItems", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<PayOffItem> PayOffItems
	{
		get
		{
			return this._PayOffItems;
		}
		set
		{
			this._PayOffItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_PayOffStoreWorkUnit", Storage="_PayOffStoreWorkUnits", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<PayOffStoreWorkUnit> PayOffStoreWorkUnits
	{
		get
		{
			return this._PayOffStoreWorkUnits;
		}
		set
		{
			this._PayOffStoreWorkUnits.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ReturnyItem", Storage="_ReturnyItems", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<ReturnyItem> ReturnyItems
	{
		get
		{
			return this._ReturnyItems;
		}
		set
		{
			this._ReturnyItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_StoreEntanceItem", Storage="_StoreEntanceItems", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<StoreEntanceItem> StoreEntanceItems
	{
		get
		{
			return this._StoreEntanceItems;
		}
		set
		{
			this._StoreEntanceItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_StorePayOffItem", Storage="_StorePayOffItems", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<StorePayOffItem> StorePayOffItems
	{
		get
		{
			return this._StorePayOffItems;
		}
		set
		{
			this._StorePayOffItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_StoreReturnyItem", Storage="_StoreReturnyItems", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<StoreReturnyItem> StoreReturnyItems
	{
		get
		{
			return this._StoreReturnyItems;
		}
		set
		{
			this._StoreReturnyItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemSubGroup_Item", Storage="_ItemSubGroup", ThisKey="ItemSubGroupID", OtherKey="ID", IsForeignKey=true)]
	public ItemSubGroup ItemSubGroup
	{
		get
		{
			return this._ItemSubGroup.Entity;
		}
		set
		{
			ItemSubGroup previousValue = this._ItemSubGroup.Entity;
			if (((previousValue != value) 
						|| (this._ItemSubGroup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ItemSubGroup.Entity = null;
					previousValue.Items.Remove(this);
				}
				this._ItemSubGroup.Entity = value;
				if ((value != null))
				{
					value.Items.Add(this);
					this._ItemSubGroupID = value.ID;
				}
				else
				{
					this._ItemSubGroupID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ItemSubGroup");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Item", Storage="_State", ThisKey="NativityStateID", OtherKey="ID", IsForeignKey=true)]
	public State State
	{
		get
		{
			return this._State.Entity;
		}
		set
		{
			State previousValue = this._State.Entity;
			if (((previousValue != value) 
						|| (this._State.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._State.Entity = null;
					previousValue.Items.Remove(this);
				}
				this._State.Entity = value;
				if ((value != null))
				{
					value.Items.Add(this);
					this._NativityStateID = value.ID;
				}
				else
				{
					this._NativityStateID = default(Nullable<int>);
				}
				this.SendPropertyChanged("State");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Item", Storage="_Unit", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true)]
	public Unit Unit
	{
		get
		{
			return this._Unit.Entity;
		}
		set
		{
			Unit previousValue = this._Unit.Entity;
			if (((previousValue != value) 
						|| (this._Unit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Unit.Entity = null;
					previousValue.Items.Remove(this);
				}
				this._Unit.Entity = value;
				if ((value != null))
				{
					value.Items.Add(this);
					this._UnitID = value.ID;
				}
				else
				{
					this._UnitID = default(int);
				}
				this.SendPropertyChanged("Unit");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AccountsItems(AccountsItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_AccountsItems(AccountsItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_AdvanceInvoiceItems(AdvanceInvoiceItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_AdvanceInvoiceItems(AdvanceInvoiceItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_EntranceItems(EntranceItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_EntranceItems(EntranceItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_ItemCostForRestaurants(ItemCostForRestaurant entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_ItemCostForRestaurants(ItemCostForRestaurant entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_ItemOriginalCosts(ItemOriginalCost entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_ItemOriginalCosts(ItemOriginalCost entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_LevellingItems(LevellingItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_LevellingItems(LevellingItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_Normatives(Normative entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_Normatives(Normative entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_NormativesItems(NormativesItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_NormativesItems(NormativesItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_OutgoingFactureItems(OutgoingFactureItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_OutgoingFactureItems(OutgoingFactureItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_PayOffItems(PayOffItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_PayOffItems(PayOffItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_PayOffStoreWorkUnits(PayOffStoreWorkUnit entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_PayOffStoreWorkUnits(PayOffStoreWorkUnit entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_ReturnyItems(ReturnyItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_ReturnyItems(ReturnyItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_StoreEntanceItems(StoreEntanceItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_StoreEntanceItems(StoreEntanceItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_StorePayOffItems(StorePayOffItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_StorePayOffItems(StorePayOffItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_StoreReturnyItems(StoreReturnyItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_StoreReturnyItems(StoreReturnyItem entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemSubGroups")]
public partial class ItemSubGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private string _Decription;
	
	private int _ItemGroupID;
	
	private EntitySet<Item> _Items;
	
	private EntitySet<Normative> _Normatives;
	
	private EntityRef<ItemGroup> _ItemGroup;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDecriptionChanging(string value);
    partial void OnDecriptionChanged();
    partial void OnItemGroupIDChanging(int value);
    partial void OnItemGroupIDChanged();
    #endregion
	
	public ItemSubGroup()
	{
		this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
		this._Normatives = new EntitySet<Normative>(new Action<Normative>(this.attach_Normatives), new Action<Normative>(this.detach_Normatives));
		this._ItemGroup = default(EntityRef<ItemGroup>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Decription", DbType="NVarChar(250)")]
	public string Decription
	{
		get
		{
			return this._Decription;
		}
		set
		{
			if ((this._Decription != value))
			{
				this.OnDecriptionChanging(value);
				this.SendPropertyChanging();
				this._Decription = value;
				this.SendPropertyChanged("Decription");
				this.OnDecriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemGroupID", DbType="Int NOT NULL")]
	public int ItemGroupID
	{
		get
		{
			return this._ItemGroupID;
		}
		set
		{
			if ((this._ItemGroupID != value))
			{
				if (this._ItemGroup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemGroupIDChanging(value);
				this.SendPropertyChanging();
				this._ItemGroupID = value;
				this.SendPropertyChanged("ItemGroupID");
				this.OnItemGroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemSubGroup_Item", Storage="_Items", ThisKey="ID", OtherKey="ItemSubGroupID")]
	public EntitySet<Item> Items
	{
		get
		{
			return this._Items;
		}
		set
		{
			this._Items.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemSubGroup_Normative", Storage="_Normatives", ThisKey="ID", OtherKey="ItemSubGroupID")]
	public EntitySet<Normative> Normatives
	{
		get
		{
			return this._Normatives;
		}
		set
		{
			this._Normatives.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemGroup_ItemSubGroup", Storage="_ItemGroup", ThisKey="ItemGroupID", OtherKey="ID", IsForeignKey=true)]
	public ItemGroup ItemGroup
	{
		get
		{
			return this._ItemGroup.Entity;
		}
		set
		{
			ItemGroup previousValue = this._ItemGroup.Entity;
			if (((previousValue != value) 
						|| (this._ItemGroup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ItemGroup.Entity = null;
					previousValue.ItemSubGroups.Remove(this);
				}
				this._ItemGroup.Entity = value;
				if ((value != null))
				{
					value.ItemSubGroups.Add(this);
					this._ItemGroupID = value.ID;
				}
				else
				{
					this._ItemGroupID = default(int);
				}
				this.SendPropertyChanged("ItemGroup");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.ItemSubGroup = this;
	}
	
	private void detach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.ItemSubGroup = null;
	}
	
	private void attach_Normatives(Normative entity)
	{
		this.SendPropertyChanging();
		entity.ItemSubGroup = this;
	}
	
	private void detach_Normatives(Normative entity)
	{
		this.SendPropertyChanging();
		entity.ItemSubGroup = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LevellingItems")]
public partial class LevellingItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _LevellingID;
	
	private int _OrdinalNumber;
	
	private int _ItemID;
	
	private decimal _Quantity;
	
	private decimal _OldValue;
	
	private decimal _NewValue;
	
	private bool _IsActive;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<Levelling> _Levelling;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLevellingIDChanging(int value);
    partial void OnLevellingIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnOldValueChanging(decimal value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(decimal value);
    partial void OnNewValueChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
	
	public LevellingItem()
	{
		this._Item = default(EntityRef<Item>);
		this._Levelling = default(EntityRef<Levelling>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevellingID", DbType="Int NOT NULL")]
	public int LevellingID
	{
		get
		{
			return this._LevellingID;
		}
		set
		{
			if ((this._LevellingID != value))
			{
				if (this._Levelling.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLevellingIDChanging(value);
				this.SendPropertyChanging();
				this._LevellingID = value;
				this.SendPropertyChanged("LevellingID");
				this.OnLevellingIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal OldValue
	{
		get
		{
			return this._OldValue;
		}
		set
		{
			if ((this._OldValue != value))
			{
				this.OnOldValueChanging(value);
				this.SendPropertyChanging();
				this._OldValue = value;
				this.SendPropertyChanged("OldValue");
				this.OnOldValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal NewValue
	{
		get
		{
			return this._NewValue;
		}
		set
		{
			if ((this._NewValue != value))
			{
				this.OnNewValueChanging(value);
				this.SendPropertyChanging();
				this._NewValue = value;
				this.SendPropertyChanged("NewValue");
				this.OnNewValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_LevellingItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.LevellingItems.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.LevellingItems.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Levelling_LevellingItem", Storage="_Levelling", ThisKey="LevellingID", OtherKey="ID", IsForeignKey=true)]
	public Levelling Levelling
	{
		get
		{
			return this._Levelling.Entity;
		}
		set
		{
			Levelling previousValue = this._Levelling.Entity;
			if (((previousValue != value) 
						|| (this._Levelling.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Levelling.Entity = null;
					previousValue.LevellingItems.Remove(this);
				}
				this._Levelling.Entity = value;
				if ((value != null))
				{
					value.LevellingItems.Add(this);
					this._LevellingID = value.ID;
				}
				else
				{
					this._LevellingID = default(int);
				}
				this.SendPropertyChanged("Levelling");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Levellings")]
public partial class Levelling : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _LevellingNumber;
	
	private System.DateTime _Date;
	
	private bool _IsActive;
	
	private EntitySet<LevellingItem> _LevellingItems;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLevellingNumberChanging(int value);
    partial void OnLevellingNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
	
	public Levelling()
	{
		this._LevellingItems = new EntitySet<LevellingItem>(new Action<LevellingItem>(this.attach_LevellingItems), new Action<LevellingItem>(this.detach_LevellingItems));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevellingNumber", DbType="Int NOT NULL")]
	public int LevellingNumber
	{
		get
		{
			return this._LevellingNumber;
		}
		set
		{
			if ((this._LevellingNumber != value))
			{
				this.OnLevellingNumberChanging(value);
				this.SendPropertyChanging();
				this._LevellingNumber = value;
				this.SendPropertyChanged("LevellingNumber");
				this.OnLevellingNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Levelling_LevellingItem", Storage="_LevellingItems", ThisKey="ID", OtherKey="LevellingID")]
	public EntitySet<LevellingItem> LevellingItems
	{
		get
		{
			return this._LevellingItems;
		}
		set
		{
			this._LevellingItems.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LevellingItems(LevellingItem entity)
	{
		this.SendPropertyChanging();
		entity.Levelling = this;
	}
	
	private void detach_LevellingItems(LevellingItem entity)
	{
		this.SendPropertyChanging();
		entity.Levelling = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locations")]
public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private bool _IsActive;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<CapitalAssetsCard> _CapitalAssetsCards;
	
	private EntitySet<OrderItem> _OrderItems;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Location()
	{
		this._CapitalAssetsCards = new EntitySet<CapitalAssetsCard>(new Action<CapitalAssetsCard>(this.attach_CapitalAssetsCards), new Action<CapitalAssetsCard>(this.detach_CapitalAssetsCards));
		this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_CapitalAssetsCard", Storage="_CapitalAssetsCards", ThisKey="ID", OtherKey="LocationID")]
	public EntitySet<CapitalAssetsCard> CapitalAssetsCards
	{
		get
		{
			return this._CapitalAssetsCards;
		}
		set
		{
			this._CapitalAssetsCards.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_OrderItem", Storage="_OrderItems", ThisKey="ID", OtherKey="LocationID")]
	public EntitySet<OrderItem> OrderItems
	{
		get
		{
			return this._OrderItems;
		}
		set
		{
			this._OrderItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Location", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Locations.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Locations.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.Location = this;
	}
	
	private void detach_CapitalAssetsCards(CapitalAssetsCard entity)
	{
		this.SendPropertyChanging();
		entity.Location = null;
	}
	
	private void attach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.Location = this;
	}
	
	private void detach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.Location = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialBalanceReport")]
public partial class MaterialBalanceReport
{
	
	private string _ItemCode;
	
	private string _ItemName;
	
	private string _UnitName;
	
	private decimal _OriginalCost;
	
	private decimal _InQuantity;
	
	private decimal _OutQuantity;
	
	private System.DateTime _Date;
	
	private int _WorkUnit;
	
	public MaterialBalanceReport()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ItemCode
	{
		get
		{
			return this._ItemCode;
		}
		set
		{
			if ((this._ItemCode != value))
			{
				this._ItemCode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ItemName
	{
		get
		{
			return this._ItemName;
		}
		set
		{
			if ((this._ItemName != value))
			{
				this._ItemName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string UnitName
	{
		get
		{
			return this._UnitName;
		}
		set
		{
			if ((this._UnitName != value))
			{
				this._UnitName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal OriginalCost
	{
		get
		{
			return this._OriginalCost;
		}
		set
		{
			if ((this._OriginalCost != value))
			{
				this._OriginalCost = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InQuantity", DbType="Decimal(18,4) NOT NULL")]
	public decimal InQuantity
	{
		get
		{
			return this._InQuantity;
		}
		set
		{
			if ((this._InQuantity != value))
			{
				this._InQuantity = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutQuantity", DbType="Decimal(18,4) NOT NULL")]
	public decimal OutQuantity
	{
		get
		{
			return this._OutQuantity;
		}
		set
		{
			if ((this._OutQuantity != value))
			{
				this._OutQuantity = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this._Date = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkUnit", DbType="Int NOT NULL")]
	public int WorkUnit
	{
		get
		{
			return this._WorkUnit;
		}
		set
		{
			if ((this._WorkUnit != value))
			{
				this._WorkUnit = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialDocumentSubTypes")]
public partial class MaterialDocumentSubType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _MaterialDocumentTypeID;
	
	private string _Code;
	
	private string _Name;
	
	private EntitySet<Entrance> _Entrances;
	
	private EntitySet<PayOff> _PayOffs;
	
	private EntitySet<Returnee> _Returnees;
	
	private EntitySet<StorePayOff> _StorePayOffs;
	
	private EntitySet<StoreReturnee> _StoreReturnees;
	
	private EntitySet<StoreWorkUnitEntrance> _StoreWorkUnitEntrances;
	
	private EntityRef<MaterialDocumentType> _MaterialDocumentType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMaterialDocumentTypeIDChanging(int value);
    partial void OnMaterialDocumentTypeIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public MaterialDocumentSubType()
	{
		this._Entrances = new EntitySet<Entrance>(new Action<Entrance>(this.attach_Entrances), new Action<Entrance>(this.detach_Entrances));
		this._PayOffs = new EntitySet<PayOff>(new Action<PayOff>(this.attach_PayOffs), new Action<PayOff>(this.detach_PayOffs));
		this._Returnees = new EntitySet<Returnee>(new Action<Returnee>(this.attach_Returnees), new Action<Returnee>(this.detach_Returnees));
		this._StorePayOffs = new EntitySet<StorePayOff>(new Action<StorePayOff>(this.attach_StorePayOffs), new Action<StorePayOff>(this.detach_StorePayOffs));
		this._StoreReturnees = new EntitySet<StoreReturnee>(new Action<StoreReturnee>(this.attach_StoreReturnees), new Action<StoreReturnee>(this.detach_StoreReturnees));
		this._StoreWorkUnitEntrances = new EntitySet<StoreWorkUnitEntrance>(new Action<StoreWorkUnitEntrance>(this.attach_StoreWorkUnitEntrances), new Action<StoreWorkUnitEntrance>(this.detach_StoreWorkUnitEntrances));
		this._MaterialDocumentType = default(EntityRef<MaterialDocumentType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialDocumentTypeID", DbType="Int NOT NULL")]
	public int MaterialDocumentTypeID
	{
		get
		{
			return this._MaterialDocumentTypeID;
		}
		set
		{
			if ((this._MaterialDocumentTypeID != value))
			{
				if (this._MaterialDocumentType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMaterialDocumentTypeIDChanging(value);
				this.SendPropertyChanging();
				this._MaterialDocumentTypeID = value;
				this.SendPropertyChanged("MaterialDocumentTypeID");
				this.OnMaterialDocumentTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_Entrance", Storage="_Entrances", ThisKey="ID", OtherKey="EntranceTypeID")]
	public EntitySet<Entrance> Entrances
	{
		get
		{
			return this._Entrances;
		}
		set
		{
			this._Entrances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_PayOff", Storage="_PayOffs", ThisKey="ID", OtherKey="TypeID")]
	public EntitySet<PayOff> PayOffs
	{
		get
		{
			return this._PayOffs;
		}
		set
		{
			this._PayOffs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_Returnee", Storage="_Returnees", ThisKey="ID", OtherKey="TypeID")]
	public EntitySet<Returnee> Returnees
	{
		get
		{
			return this._Returnees;
		}
		set
		{
			this._Returnees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_StorePayOff", Storage="_StorePayOffs", ThisKey="ID", OtherKey="TypeID")]
	public EntitySet<StorePayOff> StorePayOffs
	{
		get
		{
			return this._StorePayOffs;
		}
		set
		{
			this._StorePayOffs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_StoreReturnee", Storage="_StoreReturnees", ThisKey="ID", OtherKey="TypeID")]
	public EntitySet<StoreReturnee> StoreReturnees
	{
		get
		{
			return this._StoreReturnees;
		}
		set
		{
			this._StoreReturnees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_StoreWorkUnitEntrance", Storage="_StoreWorkUnitEntrances", ThisKey="ID", OtherKey="MaterialDocumentSubTypeID")]
	public EntitySet<StoreWorkUnitEntrance> StoreWorkUnitEntrances
	{
		get
		{
			return this._StoreWorkUnitEntrances;
		}
		set
		{
			this._StoreWorkUnitEntrances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentType_MaterialDocumentSubType", Storage="_MaterialDocumentType", ThisKey="MaterialDocumentTypeID", OtherKey="ID", IsForeignKey=true)]
	public MaterialDocumentType MaterialDocumentType
	{
		get
		{
			return this._MaterialDocumentType.Entity;
		}
		set
		{
			MaterialDocumentType previousValue = this._MaterialDocumentType.Entity;
			if (((previousValue != value) 
						|| (this._MaterialDocumentType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaterialDocumentType.Entity = null;
					previousValue.MaterialDocumentSubTypes.Remove(this);
				}
				this._MaterialDocumentType.Entity = value;
				if ((value != null))
				{
					value.MaterialDocumentSubTypes.Add(this);
					this._MaterialDocumentTypeID = value.ID;
				}
				else
				{
					this._MaterialDocumentTypeID = default(int);
				}
				this.SendPropertyChanged("MaterialDocumentType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Entrances(Entrance entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = this;
	}
	
	private void detach_Entrances(Entrance entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = null;
	}
	
	private void attach_PayOffs(PayOff entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = this;
	}
	
	private void detach_PayOffs(PayOff entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = null;
	}
	
	private void attach_Returnees(Returnee entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = this;
	}
	
	private void detach_Returnees(Returnee entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = null;
	}
	
	private void attach_StorePayOffs(StorePayOff entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = this;
	}
	
	private void detach_StorePayOffs(StorePayOff entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = null;
	}
	
	private void attach_StoreReturnees(StoreReturnee entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = this;
	}
	
	private void detach_StoreReturnees(StoreReturnee entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = null;
	}
	
	private void attach_StoreWorkUnitEntrances(StoreWorkUnitEntrance entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = this;
	}
	
	private void detach_StoreWorkUnitEntrances(StoreWorkUnitEntrance entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentSubType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialDocumentTypes")]
public partial class MaterialDocumentType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private EntitySet<HistoryItemOriginalCost> _HistoryItemOriginalCosts;
	
	private EntitySet<ItemOriginalCost> _ItemOriginalCosts;
	
	private EntitySet<MaterialDocumentSubType> _MaterialDocumentSubTypes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public MaterialDocumentType()
	{
		this._HistoryItemOriginalCosts = new EntitySet<HistoryItemOriginalCost>(new Action<HistoryItemOriginalCost>(this.attach_HistoryItemOriginalCosts), new Action<HistoryItemOriginalCost>(this.detach_HistoryItemOriginalCosts));
		this._ItemOriginalCosts = new EntitySet<ItemOriginalCost>(new Action<ItemOriginalCost>(this.attach_ItemOriginalCosts), new Action<ItemOriginalCost>(this.detach_ItemOriginalCosts));
		this._MaterialDocumentSubTypes = new EntitySet<MaterialDocumentSubType>(new Action<MaterialDocumentSubType>(this.attach_MaterialDocumentSubTypes), new Action<MaterialDocumentSubType>(this.detach_MaterialDocumentSubTypes));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentType_HistoryItemOriginalCost", Storage="_HistoryItemOriginalCosts", ThisKey="ID", OtherKey="MaterialDocumentTypeID")]
	public EntitySet<HistoryItemOriginalCost> HistoryItemOriginalCosts
	{
		get
		{
			return this._HistoryItemOriginalCosts;
		}
		set
		{
			this._HistoryItemOriginalCosts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentType_ItemOriginalCost", Storage="_ItemOriginalCosts", ThisKey="ID", OtherKey="MaterialDocumentTypeID")]
	public EntitySet<ItemOriginalCost> ItemOriginalCosts
	{
		get
		{
			return this._ItemOriginalCosts;
		}
		set
		{
			this._ItemOriginalCosts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentType_MaterialDocumentSubType", Storage="_MaterialDocumentSubTypes", ThisKey="ID", OtherKey="MaterialDocumentTypeID")]
	public EntitySet<MaterialDocumentSubType> MaterialDocumentSubTypes
	{
		get
		{
			return this._MaterialDocumentSubTypes;
		}
		set
		{
			this._MaterialDocumentSubTypes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_HistoryItemOriginalCosts(HistoryItemOriginalCost entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentType = this;
	}
	
	private void detach_HistoryItemOriginalCosts(HistoryItemOriginalCost entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentType = null;
	}
	
	private void attach_ItemOriginalCosts(ItemOriginalCost entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentType = this;
	}
	
	private void detach_ItemOriginalCosts(ItemOriginalCost entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentType = null;
	}
	
	private void attach_MaterialDocumentSubTypes(MaterialDocumentSubType entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentType = this;
	}
	
	private void detach_MaterialDocumentSubTypes(MaterialDocumentSubType entity)
	{
		this.SendPropertyChanging();
		entity.MaterialDocumentType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialFactures")]
public partial class MaterialFacture : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OrdinalNumber;
	
	private string _FactureNumber;
	
	private System.DateTime _FactureDate;
	
	private System.DateTime _CurrencyDate;
	
	private EntitySet<EntranceFacture> _EntranceFactures;
	
	private EntitySet<EntranceItem> _EntranceItems;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnFactureNumberChanging(string value);
    partial void OnFactureNumberChanged();
    partial void OnFactureDateChanging(System.DateTime value);
    partial void OnFactureDateChanged();
    partial void OnCurrencyDateChanging(System.DateTime value);
    partial void OnCurrencyDateChanged();
    #endregion
	
	public MaterialFacture()
	{
		this._EntranceFactures = new EntitySet<EntranceFacture>(new Action<EntranceFacture>(this.attach_EntranceFactures), new Action<EntranceFacture>(this.detach_EntranceFactures));
		this._EntranceItems = new EntitySet<EntranceItem>(new Action<EntranceItem>(this.attach_EntranceItems), new Action<EntranceItem>(this.detach_EntranceItems));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureNumber", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
	public string FactureNumber
	{
		get
		{
			return this._FactureNumber;
		}
		set
		{
			if ((this._FactureNumber != value))
			{
				this.OnFactureNumberChanging(value);
				this.SendPropertyChanging();
				this._FactureNumber = value;
				this.SendPropertyChanged("FactureNumber");
				this.OnFactureNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureDate", DbType="DateTime NOT NULL")]
	public System.DateTime FactureDate
	{
		get
		{
			return this._FactureDate;
		}
		set
		{
			if ((this._FactureDate != value))
			{
				this.OnFactureDateChanging(value);
				this.SendPropertyChanging();
				this._FactureDate = value;
				this.SendPropertyChanged("FactureDate");
				this.OnFactureDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyDate", DbType="DateTime NOT NULL")]
	public System.DateTime CurrencyDate
	{
		get
		{
			return this._CurrencyDate;
		}
		set
		{
			if ((this._CurrencyDate != value))
			{
				this.OnCurrencyDateChanging(value);
				this.SendPropertyChanging();
				this._CurrencyDate = value;
				this.SendPropertyChanged("CurrencyDate");
				this.OnCurrencyDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialFacture_EntranceFacture", Storage="_EntranceFactures", ThisKey="ID", OtherKey="MaterialFactureID")]
	public EntitySet<EntranceFacture> EntranceFactures
	{
		get
		{
			return this._EntranceFactures;
		}
		set
		{
			this._EntranceFactures.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialFacture_EntranceItem", Storage="_EntranceItems", ThisKey="ID", OtherKey="MaterialFacturesID")]
	public EntitySet<EntranceItem> EntranceItems
	{
		get
		{
			return this._EntranceItems;
		}
		set
		{
			this._EntranceItems.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EntranceFactures(EntranceFacture entity)
	{
		this.SendPropertyChanging();
		entity.MaterialFacture = this;
	}
	
	private void detach_EntranceFactures(EntranceFacture entity)
	{
		this.SendPropertyChanging();
		entity.MaterialFacture = null;
	}
	
	private void attach_EntranceItems(EntranceItem entity)
	{
		this.SendPropertyChanging();
		entity.MaterialFacture = this;
	}
	
	private void detach_EntranceItems(EntranceItem entity)
	{
		this.SendPropertyChanging();
		entity.MaterialFacture = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MonthlyDatas")]
public partial class MonthlyData : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _NumberOfHours;
	
	private int _Month;
	
	private int _Year;
	
	private decimal _AveragePayment;
	
	private decimal _TaxRelease;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberOfHoursChanging(int value);
    partial void OnNumberOfHoursChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnAveragePaymentChanging(decimal value);
    partial void OnAveragePaymentChanged();
    partial void OnTaxReleaseChanging(decimal value);
    partial void OnTaxReleaseChanged();
    #endregion
	
	public MonthlyData()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfHours", DbType="Int NOT NULL")]
	public int NumberOfHours
	{
		get
		{
			return this._NumberOfHours;
		}
		set
		{
			if ((this._NumberOfHours != value))
			{
				this.OnNumberOfHoursChanging(value);
				this.SendPropertyChanging();
				this._NumberOfHours = value;
				this.SendPropertyChanged("NumberOfHours");
				this.OnNumberOfHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int NOT NULL")]
	public int Month
	{
		get
		{
			return this._Month;
		}
		set
		{
			if ((this._Month != value))
			{
				this.OnMonthChanging(value);
				this.SendPropertyChanging();
				this._Month = value;
				this.SendPropertyChanged("Month");
				this.OnMonthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
	public int Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this.OnYearChanging(value);
				this.SendPropertyChanging();
				this._Year = value;
				this.SendPropertyChanged("Year");
				this.OnYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AveragePayment", DbType="Decimal(18,2) NOT NULL")]
	public decimal AveragePayment
	{
		get
		{
			return this._AveragePayment;
		}
		set
		{
			if ((this._AveragePayment != value))
			{
				this.OnAveragePaymentChanging(value);
				this.SendPropertyChanging();
				this._AveragePayment = value;
				this.SendPropertyChanged("AveragePayment");
				this.OnAveragePaymentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxRelease", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxRelease
	{
		get
		{
			return this._TaxRelease;
		}
		set
		{
			if ((this._TaxRelease != value))
			{
				this.OnTaxReleaseChanging(value);
				this.SendPropertyChanging();
				this._TaxRelease = value;
				this.SendPropertyChanged("TaxRelease");
				this.OnTaxReleaseChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MonthlyWithholdings")]
public partial class MonthlyWithholding : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _WithholdingID;
	
	private decimal _MonthlyCost;
	
	private int _Month;
	
	private int _Year;
	
	private System.Nullable<int> _CompanyID;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Withholding> _Withholding;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWithholdingIDChanging(int value);
    partial void OnWithholdingIDChanged();
    partial void OnMonthlyCostChanging(decimal value);
    partial void OnMonthlyCostChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public MonthlyWithholding()
	{
		this._Company = default(EntityRef<Company>);
		this._Withholding = default(EntityRef<Withholding>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WithholdingID", DbType="Int NOT NULL")]
	public int WithholdingID
	{
		get
		{
			return this._WithholdingID;
		}
		set
		{
			if ((this._WithholdingID != value))
			{
				if (this._Withholding.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWithholdingIDChanging(value);
				this.SendPropertyChanging();
				this._WithholdingID = value;
				this.SendPropertyChanged("WithholdingID");
				this.OnWithholdingIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthlyCost", DbType="Decimal(18,0) NOT NULL")]
	public decimal MonthlyCost
	{
		get
		{
			return this._MonthlyCost;
		}
		set
		{
			if ((this._MonthlyCost != value))
			{
				this.OnMonthlyCostChanging(value);
				this.SendPropertyChanging();
				this._MonthlyCost = value;
				this.SendPropertyChanged("MonthlyCost");
				this.OnMonthlyCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int NOT NULL")]
	public int Month
	{
		get
		{
			return this._Month;
		}
		set
		{
			if ((this._Month != value))
			{
				this.OnMonthChanging(value);
				this.SendPropertyChanging();
				this._Month = value;
				this.SendPropertyChanged("Month");
				this.OnMonthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
	public int Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this.OnYearChanging(value);
				this.SendPropertyChanging();
				this._Year = value;
				this.SendPropertyChanged("Year");
				this.OnYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_MonthlyWithholding", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.MonthlyWithholdings.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.MonthlyWithholdings.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Withholding_MonthlyWithholding", Storage="_Withholding", ThisKey="WithholdingID", OtherKey="ID", IsForeignKey=true)]
	public Withholding Withholding
	{
		get
		{
			return this._Withholding.Entity;
		}
		set
		{
			Withholding previousValue = this._Withholding.Entity;
			if (((previousValue != value) 
						|| (this._Withholding.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Withholding.Entity = null;
					previousValue.MonthlyWithholdings.Remove(this);
				}
				this._Withholding.Entity = value;
				if ((value != null))
				{
					value.MonthlyWithholdings.Add(this);
					this._WithholdingID = value.ID;
				}
				else
				{
					this._WithholdingID = default(int);
				}
				this.SendPropertyChanged("Withholding");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MPINCompanyInformations")]
public partial class MPINCompanyInformation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _TaxNumber;
	
	private string _EMB;
	
	private string _Name;
	
	private string _PhoneCode;
	
	private string _PhoneNumber;
	
	private string _FaxNumber;
	
	private string _Address;
	
	private string _AddressNumber;
	
	private string _Place;
	
	private string _Municipality;
	
	private string _PTTCode;
	
	private string _ContactPerson;
	
	private string _ContactPersonPhoneNumber;
	
	private string _ContactPersonEmail;
	
	private string _Code;
	
	private string _MunicipalityCode;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTaxNumberChanging(string value);
    partial void OnTaxNumberChanged();
    partial void OnEMBChanging(string value);
    partial void OnEMBChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneCodeChanging(string value);
    partial void OnPhoneCodeChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnFaxNumberChanging(string value);
    partial void OnFaxNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAddressNumberChanging(string value);
    partial void OnAddressNumberChanged();
    partial void OnPlaceChanging(string value);
    partial void OnPlaceChanged();
    partial void OnMunicipalityChanging(string value);
    partial void OnMunicipalityChanged();
    partial void OnPTTCodeChanging(string value);
    partial void OnPTTCodeChanged();
    partial void OnContactPersonChanging(string value);
    partial void OnContactPersonChanged();
    partial void OnContactPersonPhoneNumberChanging(string value);
    partial void OnContactPersonPhoneNumberChanged();
    partial void OnContactPersonEmailChanging(string value);
    partial void OnContactPersonEmailChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnMunicipalityCodeChanging(string value);
    partial void OnMunicipalityCodeChanged();
    #endregion
	
	public MPINCompanyInformation()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string TaxNumber
	{
		get
		{
			return this._TaxNumber;
		}
		set
		{
			if ((this._TaxNumber != value))
			{
				this.OnTaxNumberChanging(value);
				this.SendPropertyChanging();
				this._TaxNumber = value;
				this.SendPropertyChanged("TaxNumber");
				this.OnTaxNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMB", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string EMB
	{
		get
		{
			return this._EMB;
		}
		set
		{
			if ((this._EMB != value))
			{
				this.OnEMBChanging(value);
				this.SendPropertyChanging();
				this._EMB = value;
				this.SendPropertyChanged("EMB");
				this.OnEMBChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneCode", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string PhoneCode
	{
		get
		{
			return this._PhoneCode;
		}
		set
		{
			if ((this._PhoneCode != value))
			{
				this.OnPhoneCodeChanging(value);
				this.SendPropertyChanging();
				this._PhoneCode = value;
				this.SendPropertyChanged("PhoneCode");
				this.OnPhoneCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string PhoneNumber
	{
		get
		{
			return this._PhoneNumber;
		}
		set
		{
			if ((this._PhoneNumber != value))
			{
				this.OnPhoneNumberChanging(value);
				this.SendPropertyChanging();
				this._PhoneNumber = value;
				this.SendPropertyChanged("PhoneNumber");
				this.OnPhoneNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaxNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FaxNumber
	{
		get
		{
			return this._FaxNumber;
		}
		set
		{
			if ((this._FaxNumber != value))
			{
				this.OnFaxNumberChanging(value);
				this.SendPropertyChanging();
				this._FaxNumber = value;
				this.SendPropertyChanged("FaxNumber");
				this.OnFaxNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string AddressNumber
	{
		get
		{
			return this._AddressNumber;
		}
		set
		{
			if ((this._AddressNumber != value))
			{
				this.OnAddressNumberChanging(value);
				this.SendPropertyChanging();
				this._AddressNumber = value;
				this.SendPropertyChanged("AddressNumber");
				this.OnAddressNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Place
	{
		get
		{
			return this._Place;
		}
		set
		{
			if ((this._Place != value))
			{
				this.OnPlaceChanging(value);
				this.SendPropertyChanging();
				this._Place = value;
				this.SendPropertyChanged("Place");
				this.OnPlaceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Municipality", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Municipality
	{
		get
		{
			return this._Municipality;
		}
		set
		{
			if ((this._Municipality != value))
			{
				this.OnMunicipalityChanging(value);
				this.SendPropertyChanging();
				this._Municipality = value;
				this.SendPropertyChanged("Municipality");
				this.OnMunicipalityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTTCode", DbType="NVarChar(4) NOT NULL", CanBeNull=false)]
	public string PTTCode
	{
		get
		{
			return this._PTTCode;
		}
		set
		{
			if ((this._PTTCode != value))
			{
				this.OnPTTCodeChanging(value);
				this.SendPropertyChanging();
				this._PTTCode = value;
				this.SendPropertyChanged("PTTCode");
				this.OnPTTCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPerson", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string ContactPerson
	{
		get
		{
			return this._ContactPerson;
		}
		set
		{
			if ((this._ContactPerson != value))
			{
				this.OnContactPersonChanging(value);
				this.SendPropertyChanging();
				this._ContactPerson = value;
				this.SendPropertyChanged("ContactPerson");
				this.OnContactPersonChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPersonPhoneNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ContactPersonPhoneNumber
	{
		get
		{
			return this._ContactPersonPhoneNumber;
		}
		set
		{
			if ((this._ContactPersonPhoneNumber != value))
			{
				this.OnContactPersonPhoneNumberChanging(value);
				this.SendPropertyChanging();
				this._ContactPersonPhoneNumber = value;
				this.SendPropertyChanged("ContactPersonPhoneNumber");
				this.OnContactPersonPhoneNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPersonEmail", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string ContactPersonEmail
	{
		get
		{
			return this._ContactPersonEmail;
		}
		set
		{
			if ((this._ContactPersonEmail != value))
			{
				this.OnContactPersonEmailChanging(value);
				this.SendPropertyChanging();
				this._ContactPersonEmail = value;
				this.SendPropertyChanged("ContactPersonEmail");
				this.OnContactPersonEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MunicipalityCode", DbType="NVarChar(5)")]
	public string MunicipalityCode
	{
		get
		{
			return this._MunicipalityCode;
		}
		set
		{
			if ((this._MunicipalityCode != value))
			{
				this.OnMunicipalityCodeChanging(value);
				this.SendPropertyChanging();
				this._MunicipalityCode = value;
				this.SendPropertyChanged("MunicipalityCode");
				this.OnMunicipalityCodeChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Municipalities")]
public partial class Municipality : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Code;
	
	private string _MPINCode;
	
	private EntitySet<Branch> _Branches;
	
	private EntitySet<Employee> _Employees;
	
	private EntitySet<PaymentForm> _PaymentForms;
	
	private EntitySet<Place> _Places;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnMPINCodeChanging(string value);
    partial void OnMPINCodeChanged();
    #endregion
	
	public Municipality()
	{
		this._Branches = new EntitySet<Branch>(new Action<Branch>(this.attach_Branches), new Action<Branch>(this.detach_Branches));
		this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
		this._PaymentForms = new EntitySet<PaymentForm>(new Action<PaymentForm>(this.attach_PaymentForms), new Action<PaymentForm>(this.detach_PaymentForms));
		this._Places = new EntitySet<Place>(new Action<Place>(this.attach_Places), new Action<Place>(this.detach_Places));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MPINCode", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string MPINCode
	{
		get
		{
			return this._MPINCode;
		}
		set
		{
			if ((this._MPINCode != value))
			{
				this.OnMPINCodeChanging(value);
				this.SendPropertyChanging();
				this._MPINCode = value;
				this.SendPropertyChanged("MPINCode");
				this.OnMPINCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipality_Branch", Storage="_Branches", ThisKey="ID", OtherKey="MunicipalityID")]
	public EntitySet<Branch> Branches
	{
		get
		{
			return this._Branches;
		}
		set
		{
			this._Branches.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipality_Employee", Storage="_Employees", ThisKey="ID", OtherKey="MunicipalityID")]
	public EntitySet<Employee> Employees
	{
		get
		{
			return this._Employees;
		}
		set
		{
			this._Employees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipality_PaymentForm", Storage="_PaymentForms", ThisKey="ID", OtherKey="SubmitMunicipalityID")]
	public EntitySet<PaymentForm> PaymentForms
	{
		get
		{
			return this._PaymentForms;
		}
		set
		{
			this._PaymentForms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipality_Place", Storage="_Places", ThisKey="ID", OtherKey="MunicipalityID")]
	public EntitySet<Place> Places
	{
		get
		{
			return this._Places;
		}
		set
		{
			this._Places.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Branches(Branch entity)
	{
		this.SendPropertyChanging();
		entity.Municipality = this;
	}
	
	private void detach_Branches(Branch entity)
	{
		this.SendPropertyChanging();
		entity.Municipality = null;
	}
	
	private void attach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Municipality = this;
	}
	
	private void detach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Municipality = null;
	}
	
	private void attach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Municipality = this;
	}
	
	private void detach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Municipality = null;
	}
	
	private void attach_Places(Place entity)
	{
		this.SendPropertyChanging();
		entity.Municipality = this;
	}
	
	private void detach_Places(Place entity)
	{
		this.SendPropertyChanging();
		entity.Municipality = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nationalities")]
public partial class Nationality : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private EntitySet<Employee> _Employees;
	
	private EntitySet<StateHolidaysNationality> _StateHolidaysNationalities;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Nationality()
	{
		this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
		this._StateHolidaysNationalities = new EntitySet<StateHolidaysNationality>(new Action<StateHolidaysNationality>(this.attach_StateHolidaysNationalities), new Action<StateHolidaysNationality>(this.detach_StateHolidaysNationalities));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nationality_Employee", Storage="_Employees", ThisKey="ID", OtherKey="NationalityID")]
	public EntitySet<Employee> Employees
	{
		get
		{
			return this._Employees;
		}
		set
		{
			this._Employees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nationality_StateHolidaysNationality", Storage="_StateHolidaysNationalities", ThisKey="ID", OtherKey="NacionalityID")]
	public EntitySet<StateHolidaysNationality> StateHolidaysNationalities
	{
		get
		{
			return this._StateHolidaysNationalities;
		}
		set
		{
			this._StateHolidaysNationalities.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Nationality = this;
	}
	
	private void detach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Nationality = null;
	}
	
	private void attach_StateHolidaysNationalities(StateHolidaysNationality entity)
	{
		this.SendPropertyChanging();
		entity.Nationality = this;
	}
	
	private void detach_StateHolidaysNationalities(StateHolidaysNationality entity)
	{
		this.SendPropertyChanging();
		entity.Nationality = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Normatives")]
public partial class Normative : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private string _Description;
	
	private int _ItemID;
	
	private int _ItemSubGroupID;
	
	private EntitySet<NormativesItem> _NormativesItems;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<ItemSubGroup> _ItemSubGroup;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnItemSubGroupIDChanging(int value);
    partial void OnItemSubGroupIDChanged();
    #endregion
	
	public Normative()
	{
		this._NormativesItems = new EntitySet<NormativesItem>(new Action<NormativesItem>(this.attach_NormativesItems), new Action<NormativesItem>(this.detach_NormativesItems));
		this._Item = default(EntityRef<Item>);
		this._ItemSubGroup = default(EntityRef<ItemSubGroup>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSubGroupID", DbType="Int NOT NULL")]
	public int ItemSubGroupID
	{
		get
		{
			return this._ItemSubGroupID;
		}
		set
		{
			if ((this._ItemSubGroupID != value))
			{
				if (this._ItemSubGroup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemSubGroupIDChanging(value);
				this.SendPropertyChanging();
				this._ItemSubGroupID = value;
				this.SendPropertyChanged("ItemSubGroupID");
				this.OnItemSubGroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Normative_NormativesItem", Storage="_NormativesItems", ThisKey="ID", OtherKey="NormativeID")]
	public EntitySet<NormativesItem> NormativesItems
	{
		get
		{
			return this._NormativesItems;
		}
		set
		{
			this._NormativesItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Normative", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.Normatives.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.Normatives.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemSubGroup_Normative", Storage="_ItemSubGroup", ThisKey="ItemSubGroupID", OtherKey="ID", IsForeignKey=true)]
	public ItemSubGroup ItemSubGroup
	{
		get
		{
			return this._ItemSubGroup.Entity;
		}
		set
		{
			ItemSubGroup previousValue = this._ItemSubGroup.Entity;
			if (((previousValue != value) 
						|| (this._ItemSubGroup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ItemSubGroup.Entity = null;
					previousValue.Normatives.Remove(this);
				}
				this._ItemSubGroup.Entity = value;
				if ((value != null))
				{
					value.Normatives.Add(this);
					this._ItemSubGroupID = value.ID;
				}
				else
				{
					this._ItemSubGroupID = default(int);
				}
				this.SendPropertyChanged("ItemSubGroup");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_NormativesItems(NormativesItem entity)
	{
		this.SendPropertyChanging();
		entity.Normative = this;
	}
	
	private void detach_NormativesItems(NormativesItem entity)
	{
		this.SendPropertyChanging();
		entity.Normative = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NormativesItems")]
public partial class NormativesItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _NormativeID;
	
	private int _ItemID;
	
	private decimal _Quantity;
	
	private int _UnitID;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<Normative> _Normative;
	
	private EntityRef<Unit> _Unit;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNormativeIDChanging(int value);
    partial void OnNormativeIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    #endregion
	
	public NormativesItem()
	{
		this._Item = default(EntityRef<Item>);
		this._Normative = default(EntityRef<Normative>);
		this._Unit = default(EntityRef<Unit>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormativeID", DbType="Int NOT NULL")]
	public int NormativeID
	{
		get
		{
			return this._NormativeID;
		}
		set
		{
			if ((this._NormativeID != value))
			{
				if (this._Normative.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnNormativeIDChanging(value);
				this.SendPropertyChanging();
				this._NormativeID = value;
				this.SendPropertyChanged("NormativeID");
				this.OnNormativeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,4) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL")]
	public int UnitID
	{
		get
		{
			return this._UnitID;
		}
		set
		{
			if ((this._UnitID != value))
			{
				if (this._Unit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUnitIDChanging(value);
				this.SendPropertyChanging();
				this._UnitID = value;
				this.SendPropertyChanged("UnitID");
				this.OnUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_NormativesItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.NormativesItems.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.NormativesItems.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Normative_NormativesItem", Storage="_Normative", ThisKey="NormativeID", OtherKey="ID", IsForeignKey=true)]
	public Normative Normative
	{
		get
		{
			return this._Normative.Entity;
		}
		set
		{
			Normative previousValue = this._Normative.Entity;
			if (((previousValue != value) 
						|| (this._Normative.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Normative.Entity = null;
					previousValue.NormativesItems.Remove(this);
				}
				this._Normative.Entity = value;
				if ((value != null))
				{
					value.NormativesItems.Add(this);
					this._NormativeID = value.ID;
				}
				else
				{
					this._NormativeID = default(int);
				}
				this.SendPropertyChanged("Normative");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_NormativesItem", Storage="_Unit", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true)]
	public Unit Unit
	{
		get
		{
			return this._Unit.Entity;
		}
		set
		{
			Unit previousValue = this._Unit.Entity;
			if (((previousValue != value) 
						|| (this._Unit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Unit.Entity = null;
					previousValue.NormativesItems.Remove(this);
				}
				this._Unit.Entity = value;
				if ((value != null))
				{
					value.NormativesItems.Add(this);
					this._UnitID = value.ID;
				}
				else
				{
					this._UnitID = default(int);
				}
				this.SendPropertyChanged("Unit");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderItems")]
public partial class OrderItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OrdinalNumber;
	
	private int _OrderID;
	
	private string _Description;
	
	private System.Nullable<int> _DocumentTypeID;
	
	private string _DocumentNumber;
	
	private System.Nullable<System.DateTime> _DocumentDate;
	
	private string _BankslipNumber;
	
	private System.Nullable<int> _LocationID;
	
	private System.Nullable<int> _ClientID;
	
	private int _ChartOfAccountID;
	
	private bool _IsDebt;
	
	private decimal _Value;
	
	private System.Nullable<System.DateTime> _ValuteDate;
	
	private System.Nullable<int> _CurrencyID;
	
	private System.Nullable<decimal> _CurrencyValue;
	
	private System.Nullable<decimal> _CurrentValue;
	
	private System.Nullable<int> _ChartOfAccountPositionID;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount1;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Currency> _Currency;
	
	private EntityRef<DocumentType> _DocumentType;
	
	private EntityRef<Location> _Location;
	
	private EntityRef<Order> _Order;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDocumentTypeIDChanging(System.Nullable<int> value);
    partial void OnDocumentTypeIDChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnDocumentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocumentDateChanged();
    partial void OnBankslipNumberChanging(string value);
    partial void OnBankslipNumberChanged();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    partial void OnChartOfAccountIDChanging(int value);
    partial void OnChartOfAccountIDChanged();
    partial void OnIsDebtChanging(bool value);
    partial void OnIsDebtChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnValuteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValuteDateChanged();
    partial void OnCurrencyIDChanging(System.Nullable<int> value);
    partial void OnCurrencyIDChanged();
    partial void OnCurrencyValueChanging(System.Nullable<decimal> value);
    partial void OnCurrencyValueChanged();
    partial void OnCurrentValueChanging(System.Nullable<decimal> value);
    partial void OnCurrentValueChanged();
    partial void OnChartOfAccountPositionIDChanging(System.Nullable<int> value);
    partial void OnChartOfAccountPositionIDChanged();
    #endregion
	
	public OrderItem()
	{
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		this._ChartOfAccount1 = default(EntityRef<ChartOfAccount>);
		this._Client = default(EntityRef<Client>);
		this._Currency = default(EntityRef<Currency>);
		this._DocumentType = default(EntityRef<DocumentType>);
		this._Location = default(EntityRef<Location>);
		this._Order = default(EntityRef<Order>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
	public int OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				if (this._Order.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeID", DbType="Int")]
	public System.Nullable<int> DocumentTypeID
	{
		get
		{
			return this._DocumentTypeID;
		}
		set
		{
			if ((this._DocumentTypeID != value))
			{
				if (this._DocumentType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocumentTypeIDChanging(value);
				this.SendPropertyChanging();
				this._DocumentTypeID = value;
				this.SendPropertyChanged("DocumentTypeID");
				this.OnDocumentTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="NVarChar(30)")]
	public string DocumentNumber
	{
		get
		{
			return this._DocumentNumber;
		}
		set
		{
			if ((this._DocumentNumber != value))
			{
				this.OnDocumentNumberChanging(value);
				this.SendPropertyChanging();
				this._DocumentNumber = value;
				this.SendPropertyChanged("DocumentNumber");
				this.OnDocumentNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> DocumentDate
	{
		get
		{
			return this._DocumentDate;
		}
		set
		{
			if ((this._DocumentDate != value))
			{
				this.OnDocumentDateChanging(value);
				this.SendPropertyChanging();
				this._DocumentDate = value;
				this.SendPropertyChanged("DocumentDate");
				this.OnDocumentDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankslipNumber", DbType="NVarChar(50)")]
	public string BankslipNumber
	{
		get
		{
			return this._BankslipNumber;
		}
		set
		{
			if ((this._BankslipNumber != value))
			{
				this.OnBankslipNumberChanging(value);
				this.SendPropertyChanging();
				this._BankslipNumber = value;
				this.SendPropertyChanged("BankslipNumber");
				this.OnBankslipNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int")]
	public System.Nullable<int> LocationID
	{
		get
		{
			return this._LocationID;
		}
		set
		{
			if ((this._LocationID != value))
			{
				if (this._Location.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLocationIDChanging(value);
				this.SendPropertyChanging();
				this._LocationID = value;
				this.SendPropertyChanged("LocationID");
				this.OnLocationIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
	public System.Nullable<int> ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountID", DbType="Int NOT NULL")]
	public int ChartOfAccountID
	{
		get
		{
			return this._ChartOfAccountID;
		}
		set
		{
			if ((this._ChartOfAccountID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountID = value;
				this.SendPropertyChanged("ChartOfAccountID");
				this.OnChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDebt", DbType="Bit NOT NULL")]
	public bool IsDebt
	{
		get
		{
			return this._IsDebt;
		}
		set
		{
			if ((this._IsDebt != value))
			{
				this.OnIsDebtChanging(value);
				this.SendPropertyChanging();
				this._IsDebt = value;
				this.SendPropertyChanged("IsDebt");
				this.OnIsDebtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
	public decimal Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValuteDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ValuteDate
	{
		get
		{
			return this._ValuteDate;
		}
		set
		{
			if ((this._ValuteDate != value))
			{
				this.OnValuteDateChanging(value);
				this.SendPropertyChanging();
				this._ValuteDate = value;
				this.SendPropertyChanged("ValuteDate");
				this.OnValuteDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int")]
	public System.Nullable<int> CurrencyID
	{
		get
		{
			return this._CurrencyID;
		}
		set
		{
			if ((this._CurrencyID != value))
			{
				if (this._Currency.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCurrencyIDChanging(value);
				this.SendPropertyChanging();
				this._CurrencyID = value;
				this.SendPropertyChanged("CurrencyID");
				this.OnCurrencyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyValue", DbType="Decimal(18,4)")]
	public System.Nullable<decimal> CurrencyValue
	{
		get
		{
			return this._CurrencyValue;
		}
		set
		{
			if ((this._CurrencyValue != value))
			{
				this.OnCurrencyValueChanging(value);
				this.SendPropertyChanging();
				this._CurrencyValue = value;
				this.SendPropertyChanged("CurrencyValue");
				this.OnCurrencyValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentValue", DbType="Decimal(18,2)")]
	public System.Nullable<decimal> CurrentValue
	{
		get
		{
			return this._CurrentValue;
		}
		set
		{
			if ((this._CurrentValue != value))
			{
				this.OnCurrentValueChanging(value);
				this.SendPropertyChanging();
				this._CurrentValue = value;
				this.SendPropertyChanged("CurrentValue");
				this.OnCurrentValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChartOfAccountPositionID", DbType="Int")]
	public System.Nullable<int> ChartOfAccountPositionID
	{
		get
		{
			return this._ChartOfAccountPositionID;
		}
		set
		{
			if ((this._ChartOfAccountPositionID != value))
			{
				if (this._ChartOfAccount1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChartOfAccountPositionIDChanging(value);
				this.SendPropertyChanging();
				this._ChartOfAccountPositionID = value;
				this.SendPropertyChanged("ChartOfAccountPositionID");
				this.OnChartOfAccountPositionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_OrderItem", Storage="_ChartOfAccount", ThisKey="ChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.OrderItems.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.OrderItems.Add(this);
					this._ChartOfAccountID = value.ID;
				}
				else
				{
					this._ChartOfAccountID = default(int);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_OrderItem1", Storage="_ChartOfAccount1", ThisKey="ChartOfAccountPositionID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount1
	{
		get
		{
			return this._ChartOfAccount1.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount1.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount1.Entity = null;
					previousValue.OrderItems1.Remove(this);
				}
				this._ChartOfAccount1.Entity = value;
				if ((value != null))
				{
					value.OrderItems1.Add(this);
					this._ChartOfAccountPositionID = value.ID;
				}
				else
				{
					this._ChartOfAccountPositionID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ChartOfAccount1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderItem", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.OrderItems.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.OrderItems.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_OrderItem", Storage="_Currency", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
	public Currency Currency
	{
		get
		{
			return this._Currency.Entity;
		}
		set
		{
			Currency previousValue = this._Currency.Entity;
			if (((previousValue != value) 
						|| (this._Currency.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Currency.Entity = null;
					previousValue.OrderItems.Remove(this);
				}
				this._Currency.Entity = value;
				if ((value != null))
				{
					value.OrderItems.Add(this);
					this._CurrencyID = value.ID;
				}
				else
				{
					this._CurrencyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Currency");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_OrderItem", Storage="_DocumentType", ThisKey="DocumentTypeID", OtherKey="ID", IsForeignKey=true)]
	public DocumentType DocumentType
	{
		get
		{
			return this._DocumentType.Entity;
		}
		set
		{
			DocumentType previousValue = this._DocumentType.Entity;
			if (((previousValue != value) 
						|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DocumentType.Entity = null;
					previousValue.OrderItems.Remove(this);
				}
				this._DocumentType.Entity = value;
				if ((value != null))
				{
					value.OrderItems.Add(this);
					this._DocumentTypeID = value.ID;
				}
				else
				{
					this._DocumentTypeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("DocumentType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_OrderItem", Storage="_Location", ThisKey="LocationID", OtherKey="ID", IsForeignKey=true)]
	public Location Location
	{
		get
		{
			return this._Location.Entity;
		}
		set
		{
			Location previousValue = this._Location.Entity;
			if (((previousValue != value) 
						|| (this._Location.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Location.Entity = null;
					previousValue.OrderItems.Remove(this);
				}
				this._Location.Entity = value;
				if ((value != null))
				{
					value.OrderItems.Add(this);
					this._LocationID = value.ID;
				}
				else
				{
					this._LocationID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Location");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderItem", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
	public Order Order
	{
		get
		{
			return this._Order.Entity;
		}
		set
		{
			Order previousValue = this._Order.Entity;
			if (((previousValue != value) 
						|| (this._Order.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Order.Entity = null;
					previousValue.OrderItems.Remove(this);
				}
				this._Order.Entity = value;
				if ((value != null))
				{
					value.OrderItems.Add(this);
					this._OrderID = value.ID;
				}
				else
				{
					this._OrderID = default(int);
				}
				this.SendPropertyChanged("Order");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _OrderNumber;
	
	private System.DateTime _Date;
	
	private int _CompanyID;
	
	private int _CompanyAccountID;
	
	private System.Nullable<System.DateTime> _LockDate;
	
	private System.Nullable<int> _UserID;
	
	private System.Nullable<int> _ProgramID;
	
	private bool _CarriedForwards;
	
	private EntitySet<OrderItem> _OrderItems;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<CompanyAccount> _CompanyAccount;
	
	private EntityRef<Program> _Program;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrderNumberChanging(string value);
    partial void OnOrderNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnCompanyAccountIDChanging(int value);
    partial void OnCompanyAccountIDChanged();
    partial void OnLockDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockDateChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnProgramIDChanging(System.Nullable<int> value);
    partial void OnProgramIDChanged();
    partial void OnCarriedForwardsChanging(bool value);
    partial void OnCarriedForwardsChanged();
    #endregion
	
	public Order()
	{
		this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
		this._Company = default(EntityRef<Company>);
		this._CompanyAccount = default(EntityRef<CompanyAccount>);
		this._Program = default(EntityRef<Program>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string OrderNumber
	{
		get
		{
			return this._OrderNumber;
		}
		set
		{
			if ((this._OrderNumber != value))
			{
				this.OnOrderNumberChanging(value);
				this.SendPropertyChanging();
				this._OrderNumber = value;
				this.SendPropertyChanged("OrderNumber");
				this.OnOrderNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAccountID", DbType="Int NOT NULL")]
	public int CompanyAccountID
	{
		get
		{
			return this._CompanyAccountID;
		}
		set
		{
			if ((this._CompanyAccountID != value))
			{
				if (this._CompanyAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyAccountIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyAccountID = value;
				this.SendPropertyChanged("CompanyAccountID");
				this.OnCompanyAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> LockDate
	{
		get
		{
			return this._LockDate;
		}
		set
		{
			if ((this._LockDate != value))
			{
				this.OnLockDateChanging(value);
				this.SendPropertyChanging();
				this._LockDate = value;
				this.SendPropertyChanged("LockDate");
				this.OnLockDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
	public System.Nullable<int> UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramID", DbType="Int")]
	public System.Nullable<int> ProgramID
	{
		get
		{
			return this._ProgramID;
		}
		set
		{
			if ((this._ProgramID != value))
			{
				if (this._Program.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProgramIDChanging(value);
				this.SendPropertyChanging();
				this._ProgramID = value;
				this.SendPropertyChanged("ProgramID");
				this.OnProgramIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarriedForwards", DbType="Bit NOT NULL")]
	public bool CarriedForwards
	{
		get
		{
			return this._CarriedForwards;
		}
		set
		{
			if ((this._CarriedForwards != value))
			{
				this.OnCarriedForwardsChanging(value);
				this.SendPropertyChanging();
				this._CarriedForwards = value;
				this.SendPropertyChanged("CarriedForwards");
				this.OnCarriedForwardsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderItem", Storage="_OrderItems", ThisKey="ID", OtherKey="OrderID")]
	public EntitySet<OrderItem> OrderItems
	{
		get
		{
			return this._OrderItems;
		}
		set
		{
			this._OrderItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Order", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyAccount_Order", Storage="_CompanyAccount", ThisKey="CompanyAccountID", OtherKey="ID", IsForeignKey=true)]
	public CompanyAccount CompanyAccount
	{
		get
		{
			return this._CompanyAccount.Entity;
		}
		set
		{
			CompanyAccount previousValue = this._CompanyAccount.Entity;
			if (((previousValue != value) 
						|| (this._CompanyAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CompanyAccount.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._CompanyAccount.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._CompanyAccountID = value.ID;
				}
				else
				{
					this._CompanyAccountID = default(int);
				}
				this.SendPropertyChanged("CompanyAccount");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_Order", Storage="_Program", ThisKey="ProgramID", OtherKey="ID", IsForeignKey=true)]
	public Program Program
	{
		get
		{
			return this._Program.Entity;
		}
		set
		{
			Program previousValue = this._Program.Entity;
			if (((previousValue != value) 
						|| (this._Program.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Program.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._Program.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._ProgramID = value.ID;
				}
				else
				{
					this._ProgramID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Program");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.Order = this;
	}
	
	private void detach_OrderItems(OrderItem entity)
	{
		this.SendPropertyChanging();
		entity.Order = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutgoingFactureItems")]
public partial class OutgoingFactureItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OutgoingFactureID;
	
	private int _OrdinalNumber;
	
	private int _ItemID;
	
	private decimal _Quantity;
	
	private decimal _SellingPrice;
	
	private decimal _TaxPercentage;
	
	private decimal _CostWithoutTax;
	
	private decimal _TaxValue;
	
	private decimal _TotalValue;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<OutgoingFacture> _OutgoingFacture;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOutgoingFactureIDChanging(int value);
    partial void OnOutgoingFactureIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnSellingPriceChanging(decimal value);
    partial void OnSellingPriceChanged();
    partial void OnTaxPercentageChanging(decimal value);
    partial void OnTaxPercentageChanged();
    partial void OnCostWithoutTaxChanging(decimal value);
    partial void OnCostWithoutTaxChanged();
    partial void OnTaxValueChanging(decimal value);
    partial void OnTaxValueChanged();
    partial void OnTotalValueChanging(decimal value);
    partial void OnTotalValueChanged();
    #endregion
	
	public OutgoingFactureItem()
	{
		this._Item = default(EntityRef<Item>);
		this._OutgoingFacture = default(EntityRef<OutgoingFacture>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutgoingFactureID", DbType="Int NOT NULL")]
	public int OutgoingFactureID
	{
		get
		{
			return this._OutgoingFactureID;
		}
		set
		{
			if ((this._OutgoingFactureID != value))
			{
				if (this._OutgoingFacture.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOutgoingFactureIDChanging(value);
				this.SendPropertyChanging();
				this._OutgoingFactureID = value;
				this.SendPropertyChanged("OutgoingFactureID");
				this.OnOutgoingFactureIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingPrice", DbType="Decimal(18,2) NOT NULL")]
	public decimal SellingPrice
	{
		get
		{
			return this._SellingPrice;
		}
		set
		{
			if ((this._SellingPrice != value))
			{
				this.OnSellingPriceChanging(value);
				this.SendPropertyChanging();
				this._SellingPrice = value;
				this.SendPropertyChanged("SellingPrice");
				this.OnSellingPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxPercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxPercentage
	{
		get
		{
			return this._TaxPercentage;
		}
		set
		{
			if ((this._TaxPercentage != value))
			{
				this.OnTaxPercentageChanging(value);
				this.SendPropertyChanging();
				this._TaxPercentage = value;
				this.SendPropertyChanged("TaxPercentage");
				this.OnTaxPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostWithoutTax", DbType="Decimal(18,2) NOT NULL")]
	public decimal CostWithoutTax
	{
		get
		{
			return this._CostWithoutTax;
		}
		set
		{
			if ((this._CostWithoutTax != value))
			{
				this.OnCostWithoutTaxChanging(value);
				this.SendPropertyChanging();
				this._CostWithoutTax = value;
				this.SendPropertyChanged("CostWithoutTax");
				this.OnCostWithoutTaxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxValue
	{
		get
		{
			return this._TaxValue;
		}
		set
		{
			if ((this._TaxValue != value))
			{
				this.OnTaxValueChanging(value);
				this.SendPropertyChanging();
				this._TaxValue = value;
				this.SendPropertyChanged("TaxValue");
				this.OnTaxValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal TotalValue
	{
		get
		{
			return this._TotalValue;
		}
		set
		{
			if ((this._TotalValue != value))
			{
				this.OnTotalValueChanging(value);
				this.SendPropertyChanging();
				this._TotalValue = value;
				this.SendPropertyChanged("TotalValue");
				this.OnTotalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_OutgoingFactureItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.OutgoingFactureItems.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.OutgoingFactureItems.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutgoingFacture_OutgoingFactureItem", Storage="_OutgoingFacture", ThisKey="OutgoingFactureID", OtherKey="ID", IsForeignKey=true)]
	public OutgoingFacture OutgoingFacture
	{
		get
		{
			return this._OutgoingFacture.Entity;
		}
		set
		{
			OutgoingFacture previousValue = this._OutgoingFacture.Entity;
			if (((previousValue != value) 
						|| (this._OutgoingFacture.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._OutgoingFacture.Entity = null;
					previousValue.OutgoingFactureItems.Remove(this);
				}
				this._OutgoingFacture.Entity = value;
				if ((value != null))
				{
					value.OutgoingFactureItems.Add(this);
					this._OutgoingFactureID = value.ID;
				}
				else
				{
					this._OutgoingFactureID = default(int);
				}
				this.SendPropertyChanged("OutgoingFacture");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutgoingFactures")]
public partial class OutgoingFacture : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ClientID;
	
	private string _FactureNumber;
	
	private System.DateTime _CreationDate;
	
	private EntitySet<AdvanceInvoice> _AdvanceInvoices;
	
	private EntitySet<OutgoingFactureItem> _OutgoingFactureItems;
	
	private EntitySet<PayOff> _PayOffs;
	
	private EntityRef<Client> _Client;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnFactureNumberChanging(string value);
    partial void OnFactureNumberChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    #endregion
	
	public OutgoingFacture()
	{
		this._AdvanceInvoices = new EntitySet<AdvanceInvoice>(new Action<AdvanceInvoice>(this.attach_AdvanceInvoices), new Action<AdvanceInvoice>(this.detach_AdvanceInvoices));
		this._OutgoingFactureItems = new EntitySet<OutgoingFactureItem>(new Action<OutgoingFactureItem>(this.attach_OutgoingFactureItems), new Action<OutgoingFactureItem>(this.detach_OutgoingFactureItems));
		this._PayOffs = new EntitySet<PayOff>(new Action<PayOff>(this.attach_PayOffs), new Action<PayOff>(this.detach_PayOffs));
		this._Client = default(EntityRef<Client>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
	public int ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FactureNumber
	{
		get
		{
			return this._FactureNumber;
		}
		set
		{
			if ((this._FactureNumber != value))
			{
				this.OnFactureNumberChanging(value);
				this.SendPropertyChanging();
				this._FactureNumber = value;
				this.SendPropertyChanged("FactureNumber");
				this.OnFactureNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreationDate
	{
		get
		{
			return this._CreationDate;
		}
		set
		{
			if ((this._CreationDate != value))
			{
				this.OnCreationDateChanging(value);
				this.SendPropertyChanging();
				this._CreationDate = value;
				this.SendPropertyChanged("CreationDate");
				this.OnCreationDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutgoingFacture_AdvanceInvoice", Storage="_AdvanceInvoices", ThisKey="ID", OtherKey="OutgoingFactureID")]
	public EntitySet<AdvanceInvoice> AdvanceInvoices
	{
		get
		{
			return this._AdvanceInvoices;
		}
		set
		{
			this._AdvanceInvoices.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutgoingFacture_OutgoingFactureItem", Storage="_OutgoingFactureItems", ThisKey="ID", OtherKey="OutgoingFactureID")]
	public EntitySet<OutgoingFactureItem> OutgoingFactureItems
	{
		get
		{
			return this._OutgoingFactureItems;
		}
		set
		{
			this._OutgoingFactureItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutgoingFacture_PayOff", Storage="_PayOffs", ThisKey="ID", OtherKey="OutgoingFactureID")]
	public EntitySet<PayOff> PayOffs
	{
		get
		{
			return this._PayOffs;
		}
		set
		{
			this._PayOffs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OutgoingFacture", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.OutgoingFactures.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.OutgoingFactures.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(int);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AdvanceInvoices(AdvanceInvoice entity)
	{
		this.SendPropertyChanging();
		entity.OutgoingFacture = this;
	}
	
	private void detach_AdvanceInvoices(AdvanceInvoice entity)
	{
		this.SendPropertyChanging();
		entity.OutgoingFacture = null;
	}
	
	private void attach_OutgoingFactureItems(OutgoingFactureItem entity)
	{
		this.SendPropertyChanging();
		entity.OutgoingFacture = this;
	}
	
	private void detach_OutgoingFactureItems(OutgoingFactureItem entity)
	{
		this.SendPropertyChanging();
		entity.OutgoingFacture = null;
	}
	
	private void attach_PayOffs(PayOff entity)
	{
		this.SendPropertyChanging();
		entity.OutgoingFacture = this;
	}
	
	private void detach_PayOffs(PayOff entity)
	{
		this.SendPropertyChanging();
		entity.OutgoingFacture = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParameterBindableValues")]
public partial class ParameterBindableValue : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ParameterID;
	
	private string _Value;
	
	private EntityRef<Parameter> _Parameter;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParameterIDChanging(int value);
    partial void OnParameterIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
	
	public ParameterBindableValue()
	{
		this._Parameter = default(EntityRef<Parameter>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterID", DbType="Int NOT NULL")]
	public int ParameterID
	{
		get
		{
			return this._ParameterID;
		}
		set
		{
			if ((this._ParameterID != value))
			{
				if (this._Parameter.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParameterIDChanging(value);
				this.SendPropertyChanging();
				this._ParameterID = value;
				this.SendPropertyChanged("ParameterID");
				this.OnParameterIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_ParameterBindableValue", Storage="_Parameter", ThisKey="ParameterID", OtherKey="ID", IsForeignKey=true)]
	public Parameter Parameter
	{
		get
		{
			return this._Parameter.Entity;
		}
		set
		{
			Parameter previousValue = this._Parameter.Entity;
			if (((previousValue != value) 
						|| (this._Parameter.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Parameter.Entity = null;
					previousValue.ParameterBindableValues.Remove(this);
				}
				this._Parameter.Entity = value;
				if ((value != null))
				{
					value.ParameterBindableValues.Add(this);
					this._ParameterID = value.ID;
				}
				else
				{
					this._ParameterID = default(int);
				}
				this.SendPropertyChanged("Parameter");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parameters")]
public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private int _VariableTypeID;
	
	private string _Value;
	
	private bool _IsBindableObject;
	
	private System.Nullable<int> _ValueID;
	
	private EntitySet<ParameterBindableValue> _ParameterBindableValues;
	
	private EntityRef<VariableType> _VariableType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVariableTypeIDChanging(int value);
    partial void OnVariableTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnIsBindableObjectChanging(bool value);
    partial void OnIsBindableObjectChanged();
    partial void OnValueIDChanging(System.Nullable<int> value);
    partial void OnValueIDChanged();
    #endregion
	
	public Parameter()
	{
		this._ParameterBindableValues = new EntitySet<ParameterBindableValue>(new Action<ParameterBindableValue>(this.attach_ParameterBindableValues), new Action<ParameterBindableValue>(this.detach_ParameterBindableValues));
		this._VariableType = default(EntityRef<VariableType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariableTypeID", DbType="Int NOT NULL")]
	public int VariableTypeID
	{
		get
		{
			return this._VariableTypeID;
		}
		set
		{
			if ((this._VariableTypeID != value))
			{
				if (this._VariableType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnVariableTypeIDChanging(value);
				this.SendPropertyChanging();
				this._VariableTypeID = value;
				this.SendPropertyChanged("VariableTypeID");
				this.OnVariableTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBindableObject", DbType="Bit NOT NULL")]
	public bool IsBindableObject
	{
		get
		{
			return this._IsBindableObject;
		}
		set
		{
			if ((this._IsBindableObject != value))
			{
				this.OnIsBindableObjectChanging(value);
				this.SendPropertyChanging();
				this._IsBindableObject = value;
				this.SendPropertyChanged("IsBindableObject");
				this.OnIsBindableObjectChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueID", DbType="Int")]
	public System.Nullable<int> ValueID
	{
		get
		{
			return this._ValueID;
		}
		set
		{
			if ((this._ValueID != value))
			{
				this.OnValueIDChanging(value);
				this.SendPropertyChanging();
				this._ValueID = value;
				this.SendPropertyChanged("ValueID");
				this.OnValueIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_ParameterBindableValue", Storage="_ParameterBindableValues", ThisKey="ID", OtherKey="ParameterID")]
	public EntitySet<ParameterBindableValue> ParameterBindableValues
	{
		get
		{
			return this._ParameterBindableValues;
		}
		set
		{
			this._ParameterBindableValues.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VariableType_Parameter", Storage="_VariableType", ThisKey="VariableTypeID", OtherKey="ID", IsForeignKey=true)]
	public VariableType VariableType
	{
		get
		{
			return this._VariableType.Entity;
		}
		set
		{
			VariableType previousValue = this._VariableType.Entity;
			if (((previousValue != value) 
						|| (this._VariableType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._VariableType.Entity = null;
					previousValue.Parameters.Remove(this);
				}
				this._VariableType.Entity = value;
				if ((value != null))
				{
					value.Parameters.Add(this);
					this._VariableTypeID = value.ID;
				}
				else
				{
					this._VariableTypeID = default(int);
				}
				this.SendPropertyChanged("VariableType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ParameterBindableValues(ParameterBindableValue entity)
	{
		this.SendPropertyChanging();
		entity.Parameter = this;
	}
	
	private void detach_ParameterBindableValues(ParameterBindableValue entity)
	{
		this.SendPropertyChanging();
		entity.Parameter = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentForms")]
public partial class PaymentForm : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _FormID;
	
	private int _CompanyID;
	
	private System.Nullable<int> _OutFlowChartOfAccountID;
	
	private System.Nullable<int> _OutFlowProgramID;
	
	private string _Description;
	
	private System.DateTime _DateOfPayment;
	
	private int _ClientID;
	
	private int _Value;
	
	private System.Nullable<int> _ApprovalNumber;
	
	private System.DateTime _SubmitDate;
	
	private int _SubmitMunicipalityID;
	
	private string _SuspenseAccount;
	
	private System.Nullable<int> _InflowChartOfAccountID;
	
	private System.Nullable<int> _InflowProgramID;
	
	private int _CompanyAccountID;
	
	private bool _IsSalary;
	
	private EntityRef<CompanyAccount> _CompanyAccount;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount;
	
	private EntityRef<ChartOfAccount> _ChartOfAccount1;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Form> _Form;
	
	private EntityRef<Municipality> _Municipality;
	
	private EntityRef<Program> _Program;
	
	private EntityRef<Program> _Program1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFormIDChanging(int value);
    partial void OnFormIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnOutFlowChartOfAccountIDChanging(System.Nullable<int> value);
    partial void OnOutFlowChartOfAccountIDChanged();
    partial void OnOutFlowProgramIDChanging(System.Nullable<int> value);
    partial void OnOutFlowProgramIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateOfPaymentChanging(System.DateTime value);
    partial void OnDateOfPaymentChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnApprovalNumberChanging(System.Nullable<int> value);
    partial void OnApprovalNumberChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnSubmitMunicipalityIDChanging(int value);
    partial void OnSubmitMunicipalityIDChanged();
    partial void OnSuspenseAccountChanging(string value);
    partial void OnSuspenseAccountChanged();
    partial void OnInflowChartOfAccountIDChanging(System.Nullable<int> value);
    partial void OnInflowChartOfAccountIDChanged();
    partial void OnInflowProgramIDChanging(System.Nullable<int> value);
    partial void OnInflowProgramIDChanged();
    partial void OnCompanyAccountIDChanging(int value);
    partial void OnCompanyAccountIDChanged();
    partial void OnIsSalaryChanging(bool value);
    partial void OnIsSalaryChanged();
    #endregion
	
	public PaymentForm()
	{
		this._CompanyAccount = default(EntityRef<CompanyAccount>);
		this._ChartOfAccount = default(EntityRef<ChartOfAccount>);
		this._ChartOfAccount1 = default(EntityRef<ChartOfAccount>);
		this._Client = default(EntityRef<Client>);
		this._Company = default(EntityRef<Company>);
		this._Form = default(EntityRef<Form>);
		this._Municipality = default(EntityRef<Municipality>);
		this._Program = default(EntityRef<Program>);
		this._Program1 = default(EntityRef<Program>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormID", DbType="Int NOT NULL")]
	public int FormID
	{
		get
		{
			return this._FormID;
		}
		set
		{
			if ((this._FormID != value))
			{
				if (this._Form.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormIDChanging(value);
				this.SendPropertyChanging();
				this._FormID = value;
				this.SendPropertyChanged("FormID");
				this.OnFormIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutFlowChartOfAccountID", DbType="Int")]
	public System.Nullable<int> OutFlowChartOfAccountID
	{
		get
		{
			return this._OutFlowChartOfAccountID;
		}
		set
		{
			if ((this._OutFlowChartOfAccountID != value))
			{
				if (this._ChartOfAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOutFlowChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._OutFlowChartOfAccountID = value;
				this.SendPropertyChanged("OutFlowChartOfAccountID");
				this.OnOutFlowChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutFlowProgramID", DbType="Int")]
	public System.Nullable<int> OutFlowProgramID
	{
		get
		{
			return this._OutFlowProgramID;
		}
		set
		{
			if ((this._OutFlowProgramID != value))
			{
				if (this._Program.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOutFlowProgramIDChanging(value);
				this.SendPropertyChanging();
				this._OutFlowProgramID = value;
				this.SendPropertyChanged("OutFlowProgramID");
				this.OnOutFlowProgramIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfPayment", DbType="DateTime NOT NULL")]
	public System.DateTime DateOfPayment
	{
		get
		{
			return this._DateOfPayment;
		}
		set
		{
			if ((this._DateOfPayment != value))
			{
				this.OnDateOfPaymentChanging(value);
				this.SendPropertyChanging();
				this._DateOfPayment = value;
				this.SendPropertyChanged("DateOfPayment");
				this.OnDateOfPaymentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
	public int ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
	public int Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalNumber", DbType="Int")]
	public System.Nullable<int> ApprovalNumber
	{
		get
		{
			return this._ApprovalNumber;
		}
		set
		{
			if ((this._ApprovalNumber != value))
			{
				this.OnApprovalNumberChanging(value);
				this.SendPropertyChanging();
				this._ApprovalNumber = value;
				this.SendPropertyChanged("ApprovalNumber");
				this.OnApprovalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="DateTime NOT NULL")]
	public System.DateTime SubmitDate
	{
		get
		{
			return this._SubmitDate;
		}
		set
		{
			if ((this._SubmitDate != value))
			{
				this.OnSubmitDateChanging(value);
				this.SendPropertyChanging();
				this._SubmitDate = value;
				this.SendPropertyChanged("SubmitDate");
				this.OnSubmitDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitMunicipalityID", DbType="Int NOT NULL")]
	public int SubmitMunicipalityID
	{
		get
		{
			return this._SubmitMunicipalityID;
		}
		set
		{
			if ((this._SubmitMunicipalityID != value))
			{
				if (this._Municipality.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubmitMunicipalityIDChanging(value);
				this.SendPropertyChanging();
				this._SubmitMunicipalityID = value;
				this.SendPropertyChanged("SubmitMunicipalityID");
				this.OnSubmitMunicipalityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuspenseAccount", DbType="NVarChar(50)")]
	public string SuspenseAccount
	{
		get
		{
			return this._SuspenseAccount;
		}
		set
		{
			if ((this._SuspenseAccount != value))
			{
				this.OnSuspenseAccountChanging(value);
				this.SendPropertyChanging();
				this._SuspenseAccount = value;
				this.SendPropertyChanged("SuspenseAccount");
				this.OnSuspenseAccountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InflowChartOfAccountID", DbType="Int")]
	public System.Nullable<int> InflowChartOfAccountID
	{
		get
		{
			return this._InflowChartOfAccountID;
		}
		set
		{
			if ((this._InflowChartOfAccountID != value))
			{
				if (this._ChartOfAccount1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnInflowChartOfAccountIDChanging(value);
				this.SendPropertyChanging();
				this._InflowChartOfAccountID = value;
				this.SendPropertyChanged("InflowChartOfAccountID");
				this.OnInflowChartOfAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InflowProgramID", DbType="Int")]
	public System.Nullable<int> InflowProgramID
	{
		get
		{
			return this._InflowProgramID;
		}
		set
		{
			if ((this._InflowProgramID != value))
			{
				if (this._Program1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnInflowProgramIDChanging(value);
				this.SendPropertyChanging();
				this._InflowProgramID = value;
				this.SendPropertyChanged("InflowProgramID");
				this.OnInflowProgramIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAccountID", DbType="Int NOT NULL")]
	public int CompanyAccountID
	{
		get
		{
			return this._CompanyAccountID;
		}
		set
		{
			if ((this._CompanyAccountID != value))
			{
				if (this._CompanyAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyAccountIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyAccountID = value;
				this.SendPropertyChanged("CompanyAccountID");
				this.OnCompanyAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSalary", DbType="Bit NOT NULL")]
	public bool IsSalary
	{
		get
		{
			return this._IsSalary;
		}
		set
		{
			if ((this._IsSalary != value))
			{
				this.OnIsSalaryChanging(value);
				this.SendPropertyChanging();
				this._IsSalary = value;
				this.SendPropertyChanged("IsSalary");
				this.OnIsSalaryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyAccount_PaymentForm", Storage="_CompanyAccount", ThisKey="CompanyAccountID", OtherKey="ID", IsForeignKey=true)]
	public CompanyAccount CompanyAccount
	{
		get
		{
			return this._CompanyAccount.Entity;
		}
		set
		{
			CompanyAccount previousValue = this._CompanyAccount.Entity;
			if (((previousValue != value) 
						|| (this._CompanyAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CompanyAccount.Entity = null;
					previousValue.PaymentForms.Remove(this);
				}
				this._CompanyAccount.Entity = value;
				if ((value != null))
				{
					value.PaymentForms.Add(this);
					this._CompanyAccountID = value.ID;
				}
				else
				{
					this._CompanyAccountID = default(int);
				}
				this.SendPropertyChanged("CompanyAccount");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_PaymentForm", Storage="_ChartOfAccount", ThisKey="OutFlowChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount
	{
		get
		{
			return this._ChartOfAccount.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount.Entity = null;
					previousValue.PaymentForms.Remove(this);
				}
				this._ChartOfAccount.Entity = value;
				if ((value != null))
				{
					value.PaymentForms.Add(this);
					this._OutFlowChartOfAccountID = value.ID;
				}
				else
				{
					this._OutFlowChartOfAccountID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ChartOfAccount");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChartOfAccount_PaymentForm1", Storage="_ChartOfAccount1", ThisKey="InflowChartOfAccountID", OtherKey="ID", IsForeignKey=true)]
	public ChartOfAccount ChartOfAccount1
	{
		get
		{
			return this._ChartOfAccount1.Entity;
		}
		set
		{
			ChartOfAccount previousValue = this._ChartOfAccount1.Entity;
			if (((previousValue != value) 
						|| (this._ChartOfAccount1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ChartOfAccount1.Entity = null;
					previousValue.PaymentForms1.Remove(this);
				}
				this._ChartOfAccount1.Entity = value;
				if ((value != null))
				{
					value.PaymentForms1.Add(this);
					this._InflowChartOfAccountID = value.ID;
				}
				else
				{
					this._InflowChartOfAccountID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ChartOfAccount1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_PaymentForm", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.PaymentForms.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.PaymentForms.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(int);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_PaymentForm", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.PaymentForms.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.PaymentForms.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_PaymentForm", Storage="_Form", ThisKey="FormID", OtherKey="ID", IsForeignKey=true)]
	public Form Form
	{
		get
		{
			return this._Form.Entity;
		}
		set
		{
			Form previousValue = this._Form.Entity;
			if (((previousValue != value) 
						|| (this._Form.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Form.Entity = null;
					previousValue.PaymentForms.Remove(this);
				}
				this._Form.Entity = value;
				if ((value != null))
				{
					value.PaymentForms.Add(this);
					this._FormID = value.ID;
				}
				else
				{
					this._FormID = default(int);
				}
				this.SendPropertyChanged("Form");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipality_PaymentForm", Storage="_Municipality", ThisKey="SubmitMunicipalityID", OtherKey="ID", IsForeignKey=true)]
	public Municipality Municipality
	{
		get
		{
			return this._Municipality.Entity;
		}
		set
		{
			Municipality previousValue = this._Municipality.Entity;
			if (((previousValue != value) 
						|| (this._Municipality.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Municipality.Entity = null;
					previousValue.PaymentForms.Remove(this);
				}
				this._Municipality.Entity = value;
				if ((value != null))
				{
					value.PaymentForms.Add(this);
					this._SubmitMunicipalityID = value.ID;
				}
				else
				{
					this._SubmitMunicipalityID = default(int);
				}
				this.SendPropertyChanged("Municipality");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_PaymentForm", Storage="_Program", ThisKey="OutFlowProgramID", OtherKey="ID", IsForeignKey=true)]
	public Program Program
	{
		get
		{
			return this._Program.Entity;
		}
		set
		{
			Program previousValue = this._Program.Entity;
			if (((previousValue != value) 
						|| (this._Program.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Program.Entity = null;
					previousValue.PaymentForms.Remove(this);
				}
				this._Program.Entity = value;
				if ((value != null))
				{
					value.PaymentForms.Add(this);
					this._OutFlowProgramID = value.ID;
				}
				else
				{
					this._OutFlowProgramID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Program");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_PaymentForm1", Storage="_Program1", ThisKey="InflowProgramID", OtherKey="ID", IsForeignKey=true)]
	public Program Program1
	{
		get
		{
			return this._Program1.Entity;
		}
		set
		{
			Program previousValue = this._Program1.Entity;
			if (((previousValue != value) 
						|| (this._Program1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Program1.Entity = null;
					previousValue.PaymentForms1.Remove(this);
				}
				this._Program1.Entity = value;
				if ((value != null))
				{
					value.PaymentForms1.Add(this);
					this._InflowProgramID = value.ID;
				}
				else
				{
					this._InflowProgramID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Program1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentTypes")]
public partial class PaymentType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private string _Description;
	
	private EntitySet<CashPaymentItem> _CashPaymentItems;
	
	private EntitySet<DDVtypesChartOfAccount> _DDVtypesChartOfAccounts;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public PaymentType()
	{
		this._CashPaymentItems = new EntitySet<CashPaymentItem>(new Action<CashPaymentItem>(this.attach_CashPaymentItems), new Action<CashPaymentItem>(this.detach_CashPaymentItems));
		this._DDVtypesChartOfAccounts = new EntitySet<DDVtypesChartOfAccount>(new Action<DDVtypesChartOfAccount>(this.attach_DDVtypesChartOfAccounts), new Action<DDVtypesChartOfAccount>(this.detach_DDVtypesChartOfAccounts));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_CashPaymentItem", Storage="_CashPaymentItems", ThisKey="ID", OtherKey="PaymentTypeID")]
	public EntitySet<CashPaymentItem> CashPaymentItems
	{
		get
		{
			return this._CashPaymentItems;
		}
		set
		{
			this._CashPaymentItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_DDVtypesChartOfAccount", Storage="_DDVtypesChartOfAccounts", ThisKey="ID", OtherKey="PaymentTypeID")]
	public EntitySet<DDVtypesChartOfAccount> DDVtypesChartOfAccounts
	{
		get
		{
			return this._DDVtypesChartOfAccounts;
		}
		set
		{
			this._DDVtypesChartOfAccounts.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CashPaymentItems(CashPaymentItem entity)
	{
		this.SendPropertyChanging();
		entity.PaymentType = this;
	}
	
	private void detach_CashPaymentItems(CashPaymentItem entity)
	{
		this.SendPropertyChanging();
		entity.PaymentType = null;
	}
	
	private void attach_DDVtypesChartOfAccounts(DDVtypesChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.PaymentType = this;
	}
	
	private void detach_DDVtypesChartOfAccounts(DDVtypesChartOfAccount entity)
	{
		this.SendPropertyChanging();
		entity.PaymentType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayOffItems")]
public partial class PayOffItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _PayOffID;
	
	private int _OrdinalNumber;
	
	private int _ItemID;
	
	private decimal _Quantity;
	
	private decimal _OriginalCost;
	
	private decimal _SellingPrice;
	
	private decimal _MarginPercentage;
	
	private decimal _RebatePercentage;
	
	private decimal _TaxPercentage;
	
	private decimal _CostWithoutTax;
	
	private EntitySet<PayOffStoreWorkUnit> _PayOffStoreWorkUnits;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<PayOff> _PayOff;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPayOffIDChanging(int value);
    partial void OnPayOffIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnOriginalCostChanging(decimal value);
    partial void OnOriginalCostChanged();
    partial void OnSellingPriceChanging(decimal value);
    partial void OnSellingPriceChanged();
    partial void OnMarginPercentageChanging(decimal value);
    partial void OnMarginPercentageChanged();
    partial void OnRebatePercentageChanging(decimal value);
    partial void OnRebatePercentageChanged();
    partial void OnTaxPercentageChanging(decimal value);
    partial void OnTaxPercentageChanged();
    partial void OnCostWithoutTaxChanging(decimal value);
    partial void OnCostWithoutTaxChanged();
    #endregion
	
	public PayOffItem()
	{
		this._PayOffStoreWorkUnits = new EntitySet<PayOffStoreWorkUnit>(new Action<PayOffStoreWorkUnit>(this.attach_PayOffStoreWorkUnits), new Action<PayOffStoreWorkUnit>(this.detach_PayOffStoreWorkUnits));
		this._Item = default(EntityRef<Item>);
		this._PayOff = default(EntityRef<PayOff>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayOffID", DbType="Int NOT NULL")]
	public int PayOffID
	{
		get
		{
			return this._PayOffID;
		}
		set
		{
			if ((this._PayOffID != value))
			{
				if (this._PayOff.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPayOffIDChanging(value);
				this.SendPropertyChanging();
				this._PayOffID = value;
				this.SendPropertyChanged("PayOffID");
				this.OnPayOffIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal OriginalCost
	{
		get
		{
			return this._OriginalCost;
		}
		set
		{
			if ((this._OriginalCost != value))
			{
				this.OnOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._OriginalCost = value;
				this.SendPropertyChanged("OriginalCost");
				this.OnOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingPrice", DbType="Decimal(18,2) NOT NULL")]
	public decimal SellingPrice
	{
		get
		{
			return this._SellingPrice;
		}
		set
		{
			if ((this._SellingPrice != value))
			{
				this.OnSellingPriceChanging(value);
				this.SendPropertyChanging();
				this._SellingPrice = value;
				this.SendPropertyChanged("SellingPrice");
				this.OnSellingPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginPercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal MarginPercentage
	{
		get
		{
			return this._MarginPercentage;
		}
		set
		{
			if ((this._MarginPercentage != value))
			{
				this.OnMarginPercentageChanging(value);
				this.SendPropertyChanging();
				this._MarginPercentage = value;
				this.SendPropertyChanged("MarginPercentage");
				this.OnMarginPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RebatePercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal RebatePercentage
	{
		get
		{
			return this._RebatePercentage;
		}
		set
		{
			if ((this._RebatePercentage != value))
			{
				this.OnRebatePercentageChanging(value);
				this.SendPropertyChanging();
				this._RebatePercentage = value;
				this.SendPropertyChanged("RebatePercentage");
				this.OnRebatePercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxPercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxPercentage
	{
		get
		{
			return this._TaxPercentage;
		}
		set
		{
			if ((this._TaxPercentage != value))
			{
				this.OnTaxPercentageChanging(value);
				this.SendPropertyChanging();
				this._TaxPercentage = value;
				this.SendPropertyChanged("TaxPercentage");
				this.OnTaxPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostWithoutTax", DbType="Decimal(18,2) NOT NULL")]
	public decimal CostWithoutTax
	{
		get
		{
			return this._CostWithoutTax;
		}
		set
		{
			if ((this._CostWithoutTax != value))
			{
				this.OnCostWithoutTaxChanging(value);
				this.SendPropertyChanging();
				this._CostWithoutTax = value;
				this.SendPropertyChanged("CostWithoutTax");
				this.OnCostWithoutTaxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayOffItem_PayOffStoreWorkUnit", Storage="_PayOffStoreWorkUnits", ThisKey="ID", OtherKey="PayOffItemID")]
	public EntitySet<PayOffStoreWorkUnit> PayOffStoreWorkUnits
	{
		get
		{
			return this._PayOffStoreWorkUnits;
		}
		set
		{
			this._PayOffStoreWorkUnits.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_PayOffItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.PayOffItems.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.PayOffItems.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayOff_PayOffItem", Storage="_PayOff", ThisKey="PayOffID", OtherKey="ID", IsForeignKey=true)]
	public PayOff PayOff
	{
		get
		{
			return this._PayOff.Entity;
		}
		set
		{
			PayOff previousValue = this._PayOff.Entity;
			if (((previousValue != value) 
						|| (this._PayOff.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PayOff.Entity = null;
					previousValue.PayOffItems.Remove(this);
				}
				this._PayOff.Entity = value;
				if ((value != null))
				{
					value.PayOffItems.Add(this);
					this._PayOffID = value.ID;
				}
				else
				{
					this._PayOffID = default(int);
				}
				this.SendPropertyChanged("PayOff");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PayOffStoreWorkUnits(PayOffStoreWorkUnit entity)
	{
		this.SendPropertyChanging();
		entity.PayOffItem = this;
	}
	
	private void detach_PayOffStoreWorkUnits(PayOffStoreWorkUnit entity)
	{
		this.SendPropertyChanging();
		entity.PayOffItem = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayOffs")]
public partial class PayOff : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _PayOffNumber;
	
	private System.DateTime _Date;
	
	private bool _IsForRepresentation;
	
	private System.Nullable<int> _ClientID;
	
	private System.Nullable<int> _WorkUnitID;
	
	private int _CurrencyID;
	
	private decimal _CourseValue;
	
	private string _Description;
	
	private int _TypeID;
	
	private System.Nullable<int> _OutgoingFactureID;
	
	private EntitySet<PayOffItem> _PayOffItems;
	
	private EntitySet<PayOffStoreWorkUnit> _PayOffStoreWorkUnits;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Currency> _Currency;
	
	private EntityRef<MaterialDocumentSubType> _MaterialDocumentSubType;
	
	private EntityRef<OutgoingFacture> _OutgoingFacture;
	
	private EntityRef<WorkUnit> _WorkUnit;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPayOffNumberChanging(string value);
    partial void OnPayOffNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsForRepresentationChanging(bool value);
    partial void OnIsForRepresentationChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    partial void OnWorkUnitIDChanging(System.Nullable<int> value);
    partial void OnWorkUnitIDChanged();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnCourseValueChanging(decimal value);
    partial void OnCourseValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnOutgoingFactureIDChanging(System.Nullable<int> value);
    partial void OnOutgoingFactureIDChanged();
    #endregion
	
	public PayOff()
	{
		this._PayOffItems = new EntitySet<PayOffItem>(new Action<PayOffItem>(this.attach_PayOffItems), new Action<PayOffItem>(this.detach_PayOffItems));
		this._PayOffStoreWorkUnits = new EntitySet<PayOffStoreWorkUnit>(new Action<PayOffStoreWorkUnit>(this.attach_PayOffStoreWorkUnits), new Action<PayOffStoreWorkUnit>(this.detach_PayOffStoreWorkUnits));
		this._Client = default(EntityRef<Client>);
		this._Currency = default(EntityRef<Currency>);
		this._MaterialDocumentSubType = default(EntityRef<MaterialDocumentSubType>);
		this._OutgoingFacture = default(EntityRef<OutgoingFacture>);
		this._WorkUnit = default(EntityRef<WorkUnit>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayOffNumber", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
	public string PayOffNumber
	{
		get
		{
			return this._PayOffNumber;
		}
		set
		{
			if ((this._PayOffNumber != value))
			{
				this.OnPayOffNumberChanging(value);
				this.SendPropertyChanging();
				this._PayOffNumber = value;
				this.SendPropertyChanged("PayOffNumber");
				this.OnPayOffNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForRepresentation", DbType="Bit NOT NULL")]
	public bool IsForRepresentation
	{
		get
		{
			return this._IsForRepresentation;
		}
		set
		{
			if ((this._IsForRepresentation != value))
			{
				this.OnIsForRepresentationChanging(value);
				this.SendPropertyChanging();
				this._IsForRepresentation = value;
				this.SendPropertyChanged("IsForRepresentation");
				this.OnIsForRepresentationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
	public System.Nullable<int> ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkUnitID", DbType="Int")]
	public System.Nullable<int> WorkUnitID
	{
		get
		{
			return this._WorkUnitID;
		}
		set
		{
			if ((this._WorkUnitID != value))
			{
				if (this._WorkUnit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWorkUnitIDChanging(value);
				this.SendPropertyChanging();
				this._WorkUnitID = value;
				this.SendPropertyChanged("WorkUnitID");
				this.OnWorkUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int NOT NULL")]
	public int CurrencyID
	{
		get
		{
			return this._CurrencyID;
		}
		set
		{
			if ((this._CurrencyID != value))
			{
				if (this._Currency.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCurrencyIDChanging(value);
				this.SendPropertyChanging();
				this._CurrencyID = value;
				this.SendPropertyChanged("CurrencyID");
				this.OnCurrencyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseValue", DbType="Decimal(18,4) NOT NULL")]
	public decimal CourseValue
	{
		get
		{
			return this._CourseValue;
		}
		set
		{
			if ((this._CourseValue != value))
			{
				this.OnCourseValueChanging(value);
				this.SendPropertyChanging();
				this._CourseValue = value;
				this.SendPropertyChanged("CourseValue");
				this.OnCourseValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(200)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
	public int TypeID
	{
		get
		{
			return this._TypeID;
		}
		set
		{
			if ((this._TypeID != value))
			{
				if (this._MaterialDocumentSubType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeIDChanging(value);
				this.SendPropertyChanging();
				this._TypeID = value;
				this.SendPropertyChanged("TypeID");
				this.OnTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutgoingFactureID", DbType="Int")]
	public System.Nullable<int> OutgoingFactureID
	{
		get
		{
			return this._OutgoingFactureID;
		}
		set
		{
			if ((this._OutgoingFactureID != value))
			{
				if (this._OutgoingFacture.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOutgoingFactureIDChanging(value);
				this.SendPropertyChanging();
				this._OutgoingFactureID = value;
				this.SendPropertyChanged("OutgoingFactureID");
				this.OnOutgoingFactureIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayOff_PayOffItem", Storage="_PayOffItems", ThisKey="ID", OtherKey="PayOffID")]
	public EntitySet<PayOffItem> PayOffItems
	{
		get
		{
			return this._PayOffItems;
		}
		set
		{
			this._PayOffItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayOff_PayOffStoreWorkUnit", Storage="_PayOffStoreWorkUnits", ThisKey="ID", OtherKey="PayOffID")]
	public EntitySet<PayOffStoreWorkUnit> PayOffStoreWorkUnits
	{
		get
		{
			return this._PayOffStoreWorkUnits;
		}
		set
		{
			this._PayOffStoreWorkUnits.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_PayOff", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.PayOffs.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.PayOffs.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_PayOff", Storage="_Currency", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
	public Currency Currency
	{
		get
		{
			return this._Currency.Entity;
		}
		set
		{
			Currency previousValue = this._Currency.Entity;
			if (((previousValue != value) 
						|| (this._Currency.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Currency.Entity = null;
					previousValue.PayOffs.Remove(this);
				}
				this._Currency.Entity = value;
				if ((value != null))
				{
					value.PayOffs.Add(this);
					this._CurrencyID = value.ID;
				}
				else
				{
					this._CurrencyID = default(int);
				}
				this.SendPropertyChanged("Currency");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_PayOff", Storage="_MaterialDocumentSubType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
	public MaterialDocumentSubType MaterialDocumentSubType
	{
		get
		{
			return this._MaterialDocumentSubType.Entity;
		}
		set
		{
			MaterialDocumentSubType previousValue = this._MaterialDocumentSubType.Entity;
			if (((previousValue != value) 
						|| (this._MaterialDocumentSubType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaterialDocumentSubType.Entity = null;
					previousValue.PayOffs.Remove(this);
				}
				this._MaterialDocumentSubType.Entity = value;
				if ((value != null))
				{
					value.PayOffs.Add(this);
					this._TypeID = value.ID;
				}
				else
				{
					this._TypeID = default(int);
				}
				this.SendPropertyChanged("MaterialDocumentSubType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutgoingFacture_PayOff", Storage="_OutgoingFacture", ThisKey="OutgoingFactureID", OtherKey="ID", IsForeignKey=true)]
	public OutgoingFacture OutgoingFacture
	{
		get
		{
			return this._OutgoingFacture.Entity;
		}
		set
		{
			OutgoingFacture previousValue = this._OutgoingFacture.Entity;
			if (((previousValue != value) 
						|| (this._OutgoingFacture.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._OutgoingFacture.Entity = null;
					previousValue.PayOffs.Remove(this);
				}
				this._OutgoingFacture.Entity = value;
				if ((value != null))
				{
					value.PayOffs.Add(this);
					this._OutgoingFactureID = value.ID;
				}
				else
				{
					this._OutgoingFactureID = default(Nullable<int>);
				}
				this.SendPropertyChanged("OutgoingFacture");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_PayOff", Storage="_WorkUnit", ThisKey="WorkUnitID", OtherKey="ID", IsForeignKey=true)]
	public WorkUnit WorkUnit
	{
		get
		{
			return this._WorkUnit.Entity;
		}
		set
		{
			WorkUnit previousValue = this._WorkUnit.Entity;
			if (((previousValue != value) 
						|| (this._WorkUnit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkUnit.Entity = null;
					previousValue.PayOffs.Remove(this);
				}
				this._WorkUnit.Entity = value;
				if ((value != null))
				{
					value.PayOffs.Add(this);
					this._WorkUnitID = value.ID;
				}
				else
				{
					this._WorkUnitID = default(Nullable<int>);
				}
				this.SendPropertyChanged("WorkUnit");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PayOffItems(PayOffItem entity)
	{
		this.SendPropertyChanging();
		entity.PayOff = this;
	}
	
	private void detach_PayOffItems(PayOffItem entity)
	{
		this.SendPropertyChanging();
		entity.PayOff = null;
	}
	
	private void attach_PayOffStoreWorkUnits(PayOffStoreWorkUnit entity)
	{
		this.SendPropertyChanging();
		entity.PayOff = this;
	}
	
	private void detach_PayOffStoreWorkUnits(PayOffStoreWorkUnit entity)
	{
		this.SendPropertyChanging();
		entity.PayOff = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayOffStoreWorkUnit")]
public partial class PayOffStoreWorkUnit : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _PayOffID;
	
	private System.Nullable<int> _PayOffItemID;
	
	private int _WorkUnitID;
	
	private int _ItemID;
	
	private System.DateTime _DateTimeInsert;
	
	private decimal _InitialStateQuantitiItem;
	
	private decimal _QuantitiItem;
	
	private System.Nullable<int> _EntrancesID;
	
	private System.Nullable<int> _EntrancesItemID;
	
	private EntityRef<PayOffStoreWorkUnit> _PayOffStoreWorkUnit2;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<PayOff> _PayOff;
	
	private EntityRef<PayOffStoreWorkUnit> _PayOffStoreWorkUnit1;
	
	private EntityRef<PayOffItem> _PayOffItem;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPayOffIDChanging(System.Nullable<int> value);
    partial void OnPayOffIDChanged();
    partial void OnPayOffItemIDChanging(System.Nullable<int> value);
    partial void OnPayOffItemIDChanged();
    partial void OnWorkUnitIDChanging(int value);
    partial void OnWorkUnitIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnDateTimeInsertChanging(System.DateTime value);
    partial void OnDateTimeInsertChanged();
    partial void OnInitialStateQuantitiItemChanging(decimal value);
    partial void OnInitialStateQuantitiItemChanged();
    partial void OnQuantitiItemChanging(decimal value);
    partial void OnQuantitiItemChanged();
    partial void OnEntrancesIDChanging(System.Nullable<int> value);
    partial void OnEntrancesIDChanged();
    partial void OnEntrancesItemIDChanging(System.Nullable<int> value);
    partial void OnEntrancesItemIDChanged();
    #endregion
	
	public PayOffStoreWorkUnit()
	{
		this._PayOffStoreWorkUnit2 = default(EntityRef<PayOffStoreWorkUnit>);
		this._Item = default(EntityRef<Item>);
		this._PayOff = default(EntityRef<PayOff>);
		this._PayOffStoreWorkUnit1 = default(EntityRef<PayOffStoreWorkUnit>);
		this._PayOffItem = default(EntityRef<PayOffItem>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				if (this._PayOffStoreWorkUnit1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayOffID", DbType="Int")]
	public System.Nullable<int> PayOffID
	{
		get
		{
			return this._PayOffID;
		}
		set
		{
			if ((this._PayOffID != value))
			{
				if (this._PayOff.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPayOffIDChanging(value);
				this.SendPropertyChanging();
				this._PayOffID = value;
				this.SendPropertyChanged("PayOffID");
				this.OnPayOffIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayOffItemID", DbType="Int")]
	public System.Nullable<int> PayOffItemID
	{
		get
		{
			return this._PayOffItemID;
		}
		set
		{
			if ((this._PayOffItemID != value))
			{
				if (this._PayOffItem.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPayOffItemIDChanging(value);
				this.SendPropertyChanging();
				this._PayOffItemID = value;
				this.SendPropertyChanged("PayOffItemID");
				this.OnPayOffItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkUnitID", DbType="Int NOT NULL")]
	public int WorkUnitID
	{
		get
		{
			return this._WorkUnitID;
		}
		set
		{
			if ((this._WorkUnitID != value))
			{
				this.OnWorkUnitIDChanging(value);
				this.SendPropertyChanging();
				this._WorkUnitID = value;
				this.SendPropertyChanged("WorkUnitID");
				this.OnWorkUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeInsert", DbType="DateTime NOT NULL")]
	public System.DateTime DateTimeInsert
	{
		get
		{
			return this._DateTimeInsert;
		}
		set
		{
			if ((this._DateTimeInsert != value))
			{
				this.OnDateTimeInsertChanging(value);
				this.SendPropertyChanging();
				this._DateTimeInsert = value;
				this.SendPropertyChanged("DateTimeInsert");
				this.OnDateTimeInsertChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialStateQuantitiItem", DbType="Decimal(18,4) NOT NULL")]
	public decimal InitialStateQuantitiItem
	{
		get
		{
			return this._InitialStateQuantitiItem;
		}
		set
		{
			if ((this._InitialStateQuantitiItem != value))
			{
				this.OnInitialStateQuantitiItemChanging(value);
				this.SendPropertyChanging();
				this._InitialStateQuantitiItem = value;
				this.SendPropertyChanged("InitialStateQuantitiItem");
				this.OnInitialStateQuantitiItemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantitiItem", DbType="Decimal(18,4) NOT NULL")]
	public decimal QuantitiItem
	{
		get
		{
			return this._QuantitiItem;
		}
		set
		{
			if ((this._QuantitiItem != value))
			{
				this.OnQuantitiItemChanging(value);
				this.SendPropertyChanging();
				this._QuantitiItem = value;
				this.SendPropertyChanged("QuantitiItem");
				this.OnQuantitiItemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntrancesID", DbType="Int")]
	public System.Nullable<int> EntrancesID
	{
		get
		{
			return this._EntrancesID;
		}
		set
		{
			if ((this._EntrancesID != value))
			{
				this.OnEntrancesIDChanging(value);
				this.SendPropertyChanging();
				this._EntrancesID = value;
				this.SendPropertyChanged("EntrancesID");
				this.OnEntrancesIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntrancesItemID", DbType="Int")]
	public System.Nullable<int> EntrancesItemID
	{
		get
		{
			return this._EntrancesItemID;
		}
		set
		{
			if ((this._EntrancesItemID != value))
			{
				this.OnEntrancesItemIDChanging(value);
				this.SendPropertyChanging();
				this._EntrancesItemID = value;
				this.SendPropertyChanged("EntrancesItemID");
				this.OnEntrancesItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayOffStoreWorkUnit_PayOffStoreWorkUnit", Storage="_PayOffStoreWorkUnit2", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
	public PayOffStoreWorkUnit PayOffStoreWorkUnit2
	{
		get
		{
			return this._PayOffStoreWorkUnit2.Entity;
		}
		set
		{
			PayOffStoreWorkUnit previousValue = this._PayOffStoreWorkUnit2.Entity;
			if (((previousValue != value) 
						|| (this._PayOffStoreWorkUnit2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PayOffStoreWorkUnit2.Entity = null;
					previousValue.PayOffStoreWorkUnit1 = null;
				}
				this._PayOffStoreWorkUnit2.Entity = value;
				if ((value != null))
				{
					value.PayOffStoreWorkUnit1 = this;
				}
				this.SendPropertyChanged("PayOffStoreWorkUnit2");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_PayOffStoreWorkUnit", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.PayOffStoreWorkUnits.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.PayOffStoreWorkUnits.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayOff_PayOffStoreWorkUnit", Storage="_PayOff", ThisKey="PayOffID", OtherKey="ID", IsForeignKey=true)]
	public PayOff PayOff
	{
		get
		{
			return this._PayOff.Entity;
		}
		set
		{
			PayOff previousValue = this._PayOff.Entity;
			if (((previousValue != value) 
						|| (this._PayOff.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PayOff.Entity = null;
					previousValue.PayOffStoreWorkUnits.Remove(this);
				}
				this._PayOff.Entity = value;
				if ((value != null))
				{
					value.PayOffStoreWorkUnits.Add(this);
					this._PayOffID = value.ID;
				}
				else
				{
					this._PayOffID = default(Nullable<int>);
				}
				this.SendPropertyChanged("PayOff");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayOffStoreWorkUnit_PayOffStoreWorkUnit", Storage="_PayOffStoreWorkUnit1", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
	public PayOffStoreWorkUnit PayOffStoreWorkUnit1
	{
		get
		{
			return this._PayOffStoreWorkUnit1.Entity;
		}
		set
		{
			PayOffStoreWorkUnit previousValue = this._PayOffStoreWorkUnit1.Entity;
			if (((previousValue != value) 
						|| (this._PayOffStoreWorkUnit1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PayOffStoreWorkUnit1.Entity = null;
					previousValue.PayOffStoreWorkUnit2 = null;
				}
				this._PayOffStoreWorkUnit1.Entity = value;
				if ((value != null))
				{
					value.PayOffStoreWorkUnit2 = this;
					this._ID = value.ID;
				}
				else
				{
					this._ID = default(int);
				}
				this.SendPropertyChanged("PayOffStoreWorkUnit1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayOffItem_PayOffStoreWorkUnit", Storage="_PayOffItem", ThisKey="PayOffItemID", OtherKey="ID", IsForeignKey=true)]
	public PayOffItem PayOffItem
	{
		get
		{
			return this._PayOffItem.Entity;
		}
		set
		{
			PayOffItem previousValue = this._PayOffItem.Entity;
			if (((previousValue != value) 
						|| (this._PayOffItem.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PayOffItem.Entity = null;
					previousValue.PayOffStoreWorkUnits.Remove(this);
				}
				this._PayOffItem.Entity = value;
				if ((value != null))
				{
					value.PayOffStoreWorkUnits.Add(this);
					this._PayOffItemID = value.ID;
				}
				else
				{
					this._PayOffItemID = default(Nullable<int>);
				}
				this.SendPropertyChanged("PayOffItem");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persons")]
public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _EMBG;
	
	private string _FirstName;
	
	private string _LastName;
	
	private int _CompanyID;
	
	private EntitySet<CashDeskPerson> _CashDeskPersons;
	
	private EntitySet<Employee> _Employees;
	
	private EntitySet<IndebtPerson> _IndebtPersons;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEMBGChanging(string value);
    partial void OnEMBGChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Person()
	{
		this._CashDeskPersons = new EntitySet<CashDeskPerson>(new Action<CashDeskPerson>(this.attach_CashDeskPersons), new Action<CashDeskPerson>(this.detach_CashDeskPersons));
		this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
		this._IndebtPersons = new EntitySet<IndebtPerson>(new Action<IndebtPerson>(this.attach_IndebtPersons), new Action<IndebtPerson>(this.detach_IndebtPersons));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMBG", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string EMBG
	{
		get
		{
			return this._EMBG;
		}
		set
		{
			if ((this._EMBG != value))
			{
				this.OnEMBGChanging(value);
				this.SendPropertyChanging();
				this._EMBG = value;
				this.SendPropertyChanged("EMBG");
				this.OnEMBGChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_CashDeskPerson", Storage="_CashDeskPersons", ThisKey="ID", OtherKey="PersonID")]
	public EntitySet<CashDeskPerson> CashDeskPersons
	{
		get
		{
			return this._CashDeskPersons;
		}
		set
		{
			this._CashDeskPersons.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Employee", Storage="_Employees", ThisKey="ID", OtherKey="PersonID")]
	public EntitySet<Employee> Employees
	{
		get
		{
			return this._Employees;
		}
		set
		{
			this._Employees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_IndebtPerson", Storage="_IndebtPersons", ThisKey="ID", OtherKey="PersonID")]
	public EntitySet<IndebtPerson> IndebtPersons
	{
		get
		{
			return this._IndebtPersons;
		}
		set
		{
			this._IndebtPersons.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Person", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Persons.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Persons.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CashDeskPersons(CashDeskPerson entity)
	{
		this.SendPropertyChanging();
		entity.Person = this;
	}
	
	private void detach_CashDeskPersons(CashDeskPerson entity)
	{
		this.SendPropertyChanging();
		entity.Person = null;
	}
	
	private void attach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Person = this;
	}
	
	private void detach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Person = null;
	}
	
	private void attach_IndebtPersons(IndebtPerson entity)
	{
		this.SendPropertyChanging();
		entity.Person = this;
	}
	
	private void detach_IndebtPersons(IndebtPerson entity)
	{
		this.SendPropertyChanging();
		entity.Person = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Places")]
public partial class Place : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _MunicipalityID;
	
	private string _Name;
	
	private string _PostalCode;
	
	private EntitySet<Client> _Clients;
	
	private EntityRef<Municipality> _Municipality;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMunicipalityIDChanging(int value);
    partial void OnMunicipalityIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    #endregion
	
	public Place()
	{
		this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
		this._Municipality = default(EntityRef<Municipality>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MunicipalityID", DbType="Int NOT NULL")]
	public int MunicipalityID
	{
		get
		{
			return this._MunicipalityID;
		}
		set
		{
			if ((this._MunicipalityID != value))
			{
				if (this._Municipality.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMunicipalityIDChanging(value);
				this.SendPropertyChanging();
				this._MunicipalityID = value;
				this.SendPropertyChanged("MunicipalityID");
				this.OnMunicipalityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string PostalCode
	{
		get
		{
			return this._PostalCode;
		}
		set
		{
			if ((this._PostalCode != value))
			{
				this.OnPostalCodeChanging(value);
				this.SendPropertyChanging();
				this._PostalCode = value;
				this.SendPropertyChanged("PostalCode");
				this.OnPostalCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Client", Storage="_Clients", ThisKey="ID", OtherKey="PlaceID")]
	public EntitySet<Client> Clients
	{
		get
		{
			return this._Clients;
		}
		set
		{
			this._Clients.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipality_Place", Storage="_Municipality", ThisKey="MunicipalityID", OtherKey="ID", IsForeignKey=true)]
	public Municipality Municipality
	{
		get
		{
			return this._Municipality.Entity;
		}
		set
		{
			Municipality previousValue = this._Municipality.Entity;
			if (((previousValue != value) 
						|| (this._Municipality.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Municipality.Entity = null;
					previousValue.Places.Remove(this);
				}
				this._Municipality.Entity = value;
				if ((value != null))
				{
					value.Places.Add(this);
					this._MunicipalityID = value.ID;
				}
				else
				{
					this._MunicipalityID = default(int);
				}
				this.SendPropertyChanged("Municipality");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.Place = this;
	}
	
	private void detach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.Place = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Programs")]
public partial class Program : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Description;
	
	private bool _IsActive;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<Order> _Orders;
	
	private EntitySet<PaymentForm> _PaymentForms;
	
	private EntitySet<PaymentForm> _PaymentForms1;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Program()
	{
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._PaymentForms = new EntitySet<PaymentForm>(new Action<PaymentForm>(this.attach_PaymentForms), new Action<PaymentForm>(this.detach_PaymentForms));
		this._PaymentForms1 = new EntitySet<PaymentForm>(new Action<PaymentForm>(this.attach_PaymentForms1), new Action<PaymentForm>(this.detach_PaymentForms1));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_Order", Storage="_Orders", ThisKey="ID", OtherKey="ProgramID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_PaymentForm", Storage="_PaymentForms", ThisKey="ID", OtherKey="OutFlowProgramID")]
	public EntitySet<PaymentForm> PaymentForms
	{
		get
		{
			return this._PaymentForms;
		}
		set
		{
			this._PaymentForms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_PaymentForm1", Storage="_PaymentForms1", ThisKey="ID", OtherKey="InflowProgramID")]
	public EntitySet<PaymentForm> PaymentForms1
	{
		get
		{
			return this._PaymentForms1;
		}
		set
		{
			this._PaymentForms1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Program", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Programs.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Programs.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Program = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Program = null;
	}
	
	private void attach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Program = this;
	}
	
	private void detach_PaymentForms(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Program = null;
	}
	
	private void attach_PaymentForms1(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Program1 = this;
	}
	
	private void detach_PaymentForms1(PaymentForm entity)
	{
		this.SendPropertyChanging();
		entity.Program1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Religions")]
public partial class Religion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private EntitySet<Employee> _Employees;
	
	private EntitySet<StateHolidaysReligion> _StateHolidaysReligions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Religion()
	{
		this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
		this._StateHolidaysReligions = new EntitySet<StateHolidaysReligion>(new Action<StateHolidaysReligion>(this.attach_StateHolidaysReligions), new Action<StateHolidaysReligion>(this.detach_StateHolidaysReligions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Religion_Employee", Storage="_Employees", ThisKey="ID", OtherKey="ReligionID")]
	public EntitySet<Employee> Employees
	{
		get
		{
			return this._Employees;
		}
		set
		{
			this._Employees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Religion_StateHolidaysReligion", Storage="_StateHolidaysReligions", ThisKey="ID", OtherKey="ReligionID")]
	public EntitySet<StateHolidaysReligion> StateHolidaysReligions
	{
		get
		{
			return this._StateHolidaysReligions;
		}
		set
		{
			this._StateHolidaysReligions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Religion = this;
	}
	
	private void detach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Religion = null;
	}
	
	private void attach_StateHolidaysReligions(StateHolidaysReligion entity)
	{
		this.SendPropertyChanging();
		entity.Religion = this;
	}
	
	private void detach_StateHolidaysReligions(StateHolidaysReligion entity)
	{
		this.SendPropertyChanging();
		entity.Religion = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Returnees")]
public partial class Returnee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.DateTime _Date;
	
	private string _InputDocument;
	
	private string _Note;
	
	private int _ReturneesNumber;
	
	private int _TypeID;
	
	private System.Nullable<int> _ClientID;
	
	private System.Nullable<int> _WorkUnitsID;
	
	private EntitySet<ReturnyItem> _ReturnyItems;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<MaterialDocumentSubType> _MaterialDocumentSubType;
	
	private EntityRef<WorkUnit> _WorkUnit;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnInputDocumentChanging(string value);
    partial void OnInputDocumentChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnReturneesNumberChanging(int value);
    partial void OnReturneesNumberChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    partial void OnWorkUnitsIDChanging(System.Nullable<int> value);
    partial void OnWorkUnitsIDChanged();
    #endregion
	
	public Returnee()
	{
		this._ReturnyItems = new EntitySet<ReturnyItem>(new Action<ReturnyItem>(this.attach_ReturnyItems), new Action<ReturnyItem>(this.detach_ReturnyItems));
		this._Client = default(EntityRef<Client>);
		this._MaterialDocumentSubType = default(EntityRef<MaterialDocumentSubType>);
		this._WorkUnit = default(EntityRef<WorkUnit>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputDocument", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string InputDocument
	{
		get
		{
			return this._InputDocument;
		}
		set
		{
			if ((this._InputDocument != value))
			{
				this.OnInputDocumentChanging(value);
				this.SendPropertyChanging();
				this._InputDocument = value;
				this.SendPropertyChanged("InputDocument");
				this.OnInputDocumentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(150)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturneesNumber", DbType="Int NOT NULL")]
	public int ReturneesNumber
	{
		get
		{
			return this._ReturneesNumber;
		}
		set
		{
			if ((this._ReturneesNumber != value))
			{
				this.OnReturneesNumberChanging(value);
				this.SendPropertyChanging();
				this._ReturneesNumber = value;
				this.SendPropertyChanged("ReturneesNumber");
				this.OnReturneesNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
	public int TypeID
	{
		get
		{
			return this._TypeID;
		}
		set
		{
			if ((this._TypeID != value))
			{
				if (this._MaterialDocumentSubType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeIDChanging(value);
				this.SendPropertyChanging();
				this._TypeID = value;
				this.SendPropertyChanged("TypeID");
				this.OnTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
	public System.Nullable<int> ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkUnitsID", DbType="Int")]
	public System.Nullable<int> WorkUnitsID
	{
		get
		{
			return this._WorkUnitsID;
		}
		set
		{
			if ((this._WorkUnitsID != value))
			{
				if (this._WorkUnit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWorkUnitsIDChanging(value);
				this.SendPropertyChanging();
				this._WorkUnitsID = value;
				this.SendPropertyChanged("WorkUnitsID");
				this.OnWorkUnitsIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Returnee_ReturnyItem", Storage="_ReturnyItems", ThisKey="ID", OtherKey="ReturnyID")]
	public EntitySet<ReturnyItem> ReturnyItems
	{
		get
		{
			return this._ReturnyItems;
		}
		set
		{
			this._ReturnyItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Returnee", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.Returnees.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.Returnees.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_Returnee", Storage="_MaterialDocumentSubType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
	public MaterialDocumentSubType MaterialDocumentSubType
	{
		get
		{
			return this._MaterialDocumentSubType.Entity;
		}
		set
		{
			MaterialDocumentSubType previousValue = this._MaterialDocumentSubType.Entity;
			if (((previousValue != value) 
						|| (this._MaterialDocumentSubType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaterialDocumentSubType.Entity = null;
					previousValue.Returnees.Remove(this);
				}
				this._MaterialDocumentSubType.Entity = value;
				if ((value != null))
				{
					value.Returnees.Add(this);
					this._TypeID = value.ID;
				}
				else
				{
					this._TypeID = default(int);
				}
				this.SendPropertyChanged("MaterialDocumentSubType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_Returnee", Storage="_WorkUnit", ThisKey="WorkUnitsID", OtherKey="ID", IsForeignKey=true)]
	public WorkUnit WorkUnit
	{
		get
		{
			return this._WorkUnit.Entity;
		}
		set
		{
			WorkUnit previousValue = this._WorkUnit.Entity;
			if (((previousValue != value) 
						|| (this._WorkUnit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkUnit.Entity = null;
					previousValue.Returnees.Remove(this);
				}
				this._WorkUnit.Entity = value;
				if ((value != null))
				{
					value.Returnees.Add(this);
					this._WorkUnitsID = value.ID;
				}
				else
				{
					this._WorkUnitsID = default(Nullable<int>);
				}
				this.SendPropertyChanged("WorkUnit");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ReturnyItems(ReturnyItem entity)
	{
		this.SendPropertyChanging();
		entity.Returnee = this;
	}
	
	private void detach_ReturnyItems(ReturnyItem entity)
	{
		this.SendPropertyChanging();
		entity.Returnee = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReturnyItems")]
public partial class ReturnyItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ReturnyID;
	
	private int _OrdinaryNumber;
	
	private int _ItemID;
	
	private decimal _Quantity;
	
	private decimal _OriginalValue;
	
	private decimal _SellValue;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<Returnee> _Returnee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReturnyIDChanging(int value);
    partial void OnReturnyIDChanged();
    partial void OnOrdinaryNumberChanging(int value);
    partial void OnOrdinaryNumberChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnOriginalValueChanging(decimal value);
    partial void OnOriginalValueChanged();
    partial void OnSellValueChanging(decimal value);
    partial void OnSellValueChanged();
    #endregion
	
	public ReturnyItem()
	{
		this._Item = default(EntityRef<Item>);
		this._Returnee = default(EntityRef<Returnee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnyID", DbType="Int NOT NULL")]
	public int ReturnyID
	{
		get
		{
			return this._ReturnyID;
		}
		set
		{
			if ((this._ReturnyID != value))
			{
				if (this._Returnee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReturnyIDChanging(value);
				this.SendPropertyChanging();
				this._ReturnyID = value;
				this.SendPropertyChanged("ReturnyID");
				this.OnReturnyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinaryNumber", DbType="Int NOT NULL")]
	public int OrdinaryNumber
	{
		get
		{
			return this._OrdinaryNumber;
		}
		set
		{
			if ((this._OrdinaryNumber != value))
			{
				this.OnOrdinaryNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinaryNumber = value;
				this.SendPropertyChanged("OrdinaryNumber");
				this.OnOrdinaryNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal OriginalValue
	{
		get
		{
			return this._OriginalValue;
		}
		set
		{
			if ((this._OriginalValue != value))
			{
				this.OnOriginalValueChanging(value);
				this.SendPropertyChanging();
				this._OriginalValue = value;
				this.SendPropertyChanged("OriginalValue");
				this.OnOriginalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal SellValue
	{
		get
		{
			return this._SellValue;
		}
		set
		{
			if ((this._SellValue != value))
			{
				this.OnSellValueChanging(value);
				this.SendPropertyChanging();
				this._SellValue = value;
				this.SendPropertyChanged("SellValue");
				this.OnSellValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ReturnyItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.ReturnyItems.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.ReturnyItems.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Returnee_ReturnyItem", Storage="_Returnee", ThisKey="ReturnyID", OtherKey="ID", IsForeignKey=true)]
	public Returnee Returnee
	{
		get
		{
			return this._Returnee.Entity;
		}
		set
		{
			Returnee previousValue = this._Returnee.Entity;
			if (((previousValue != value) 
						|| (this._Returnee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Returnee.Entity = null;
					previousValue.ReturnyItems.Remove(this);
				}
				this._Returnee.Entity = value;
				if ((value != null))
				{
					value.ReturnyItems.Add(this);
					this._ReturnyID = value.ID;
				}
				else
				{
					this._ReturnyID = default(int);
				}
				this.SendPropertyChanged("Returnee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RevaluationFactors")]
public partial class RevaluationFactor : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Year;
	
	private decimal _Old;
	
	private decimal _January;
	
	private decimal _February;
	
	private decimal _March;
	
	private decimal _April;
	
	private decimal _May;
	
	private decimal _June;
	
	private decimal _July;
	
	private decimal _August;
	
	private decimal _September;
	
	private decimal _October;
	
	private decimal _November;
	
	private decimal _December;
	
	private System.Nullable<int> _CompanyID;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnOldChanging(decimal value);
    partial void OnOldChanged();
    partial void OnJanuaryChanging(decimal value);
    partial void OnJanuaryChanged();
    partial void OnFebruaryChanging(decimal value);
    partial void OnFebruaryChanged();
    partial void OnMarchChanging(decimal value);
    partial void OnMarchChanged();
    partial void OnAprilChanging(decimal value);
    partial void OnAprilChanged();
    partial void OnMayChanging(decimal value);
    partial void OnMayChanged();
    partial void OnJuneChanging(decimal value);
    partial void OnJuneChanged();
    partial void OnJulyChanging(decimal value);
    partial void OnJulyChanged();
    partial void OnAugustChanging(decimal value);
    partial void OnAugustChanged();
    partial void OnSeptemberChanging(decimal value);
    partial void OnSeptemberChanged();
    partial void OnOctoberChanging(decimal value);
    partial void OnOctoberChanged();
    partial void OnNovemberChanging(decimal value);
    partial void OnNovemberChanged();
    partial void OnDecemberChanging(decimal value);
    partial void OnDecemberChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public RevaluationFactor()
	{
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
	public int Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this.OnYearChanging(value);
				this.SendPropertyChanging();
				this._Year = value;
				this.SendPropertyChanged("Year");
				this.OnYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Old", DbType="Decimal(18,2) NOT NULL")]
	public decimal Old
	{
		get
		{
			return this._Old;
		}
		set
		{
			if ((this._Old != value))
			{
				this.OnOldChanging(value);
				this.SendPropertyChanging();
				this._Old = value;
				this.SendPropertyChanged("Old");
				this.OnOldChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_January", DbType="Decimal(18,2) NOT NULL")]
	public decimal January
	{
		get
		{
			return this._January;
		}
		set
		{
			if ((this._January != value))
			{
				this.OnJanuaryChanging(value);
				this.SendPropertyChanging();
				this._January = value;
				this.SendPropertyChanged("January");
				this.OnJanuaryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_February", DbType="Decimal(18,2) NOT NULL")]
	public decimal February
	{
		get
		{
			return this._February;
		}
		set
		{
			if ((this._February != value))
			{
				this.OnFebruaryChanging(value);
				this.SendPropertyChanging();
				this._February = value;
				this.SendPropertyChanged("February");
				this.OnFebruaryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_March", DbType="Decimal(18,2) NOT NULL")]
	public decimal March
	{
		get
		{
			return this._March;
		}
		set
		{
			if ((this._March != value))
			{
				this.OnMarchChanging(value);
				this.SendPropertyChanging();
				this._March = value;
				this.SendPropertyChanged("March");
				this.OnMarchChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_April", DbType="Decimal(18,2) NOT NULL")]
	public decimal April
	{
		get
		{
			return this._April;
		}
		set
		{
			if ((this._April != value))
			{
				this.OnAprilChanging(value);
				this.SendPropertyChanging();
				this._April = value;
				this.SendPropertyChanged("April");
				this.OnAprilChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_May", DbType="Decimal(18,2) NOT NULL")]
	public decimal May
	{
		get
		{
			return this._May;
		}
		set
		{
			if ((this._May != value))
			{
				this.OnMayChanging(value);
				this.SendPropertyChanging();
				this._May = value;
				this.SendPropertyChanged("May");
				this.OnMayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_June", DbType="Decimal(18,2) NOT NULL")]
	public decimal June
	{
		get
		{
			return this._June;
		}
		set
		{
			if ((this._June != value))
			{
				this.OnJuneChanging(value);
				this.SendPropertyChanging();
				this._June = value;
				this.SendPropertyChanged("June");
				this.OnJuneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_July", DbType="Decimal(18,2) NOT NULL")]
	public decimal July
	{
		get
		{
			return this._July;
		}
		set
		{
			if ((this._July != value))
			{
				this.OnJulyChanging(value);
				this.SendPropertyChanging();
				this._July = value;
				this.SendPropertyChanged("July");
				this.OnJulyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_August", DbType="Decimal(18,2) NOT NULL")]
	public decimal August
	{
		get
		{
			return this._August;
		}
		set
		{
			if ((this._August != value))
			{
				this.OnAugustChanging(value);
				this.SendPropertyChanging();
				this._August = value;
				this.SendPropertyChanged("August");
				this.OnAugustChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_September", DbType="Decimal(18,2) NOT NULL")]
	public decimal September
	{
		get
		{
			return this._September;
		}
		set
		{
			if ((this._September != value))
			{
				this.OnSeptemberChanging(value);
				this.SendPropertyChanging();
				this._September = value;
				this.SendPropertyChanged("September");
				this.OnSeptemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_October", DbType="Decimal(18,2) NOT NULL")]
	public decimal October
	{
		get
		{
			return this._October;
		}
		set
		{
			if ((this._October != value))
			{
				this.OnOctoberChanging(value);
				this.SendPropertyChanging();
				this._October = value;
				this.SendPropertyChanged("October");
				this.OnOctoberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_November", DbType="Decimal(18,2) NOT NULL")]
	public decimal November
	{
		get
		{
			return this._November;
		}
		set
		{
			if ((this._November != value))
			{
				this.OnNovemberChanging(value);
				this.SendPropertyChanging();
				this._November = value;
				this.SendPropertyChanged("November");
				this.OnNovemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_December", DbType="Decimal(18,2) NOT NULL")]
	public decimal December
	{
		get
		{
			return this._December;
		}
		set
		{
			if ((this._December != value))
			{
				this.OnDecemberChanging(value);
				this.SendPropertyChanging();
				this._December = value;
				this.SendPropertyChanged("December");
				this.OnDecemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_RevaluationFactor", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.RevaluationFactors.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.RevaluationFactors.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private EntitySet<RolesFunction> _RolesFunctions;
	
	private EntitySet<User> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Role()
	{
		this._RolesFunctions = new EntitySet<RolesFunction>(new Action<RolesFunction>(this.attach_RolesFunctions), new Action<RolesFunction>(this.detach_RolesFunctions));
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolesFunction", Storage="_RolesFunctions", ThisKey="ID", OtherKey="RoleID")]
	public EntitySet<RolesFunction> RolesFunctions
	{
		get
		{
			return this._RolesFunctions;
		}
		set
		{
			this._RolesFunctions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="ID", OtherKey="RoleID")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_RolesFunctions(RolesFunction entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_RolesFunctions(RolesFunction entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolesFunctions")]
public partial class RolesFunction : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _RoleID;
	
	private int _FunctionID;
	
	private EntityRef<Role> _Role;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnFunctionIDChanging(int value);
    partial void OnFunctionIDChanged();
    #endregion
	
	public RolesFunction()
	{
		this._Role = default(EntityRef<Role>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
	public int RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIDChanging(value);
				this.SendPropertyChanging();
				this._RoleID = value;
				this.SendPropertyChanged("RoleID");
				this.OnRoleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionID", DbType="Int NOT NULL")]
	public int FunctionID
	{
		get
		{
			return this._FunctionID;
		}
		set
		{
			if ((this._FunctionID != value))
			{
				this.OnFunctionIDChanging(value);
				this.SendPropertyChanging();
				this._FunctionID = value;
				this.SendPropertyChanged("FunctionID");
				this.OnFunctionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolesFunction", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.RolesFunctions.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.RolesFunctions.Add(this);
					this._RoleID = value.ID;
				}
				else
				{
					this._RoleID = default(int);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Salaries")]
public partial class Salary : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Month;
	
	private int _Year;
	
	private int _EmployeeID;
	
	private int _NetProduceHours;
	
	private decimal _NetProduceValue;
	
	private int _NetNormHours;
	
	private decimal _NetNormValue;
	
	private int _IllnessHours;
	
	private decimal _IllnessValue;
	
	private int _IllnessSocialHours;
	
	private decimal _IllnessSocialValue;
	
	private int _VacationHours;
	
	private decimal _VacationValue;
	
	private int _StateHolidayHours;
	
	private decimal _StateHolidayValue;
	
	private decimal _BaseCostValue;
	
	private int _SectorID;
	
	private decimal _AllowanceValue;
	
	private decimal _GrossAmmount;
	
	private decimal _PersonalTax;
	
	private decimal _PensionValue;
	
	private decimal _PensionValueAdditionalValue;
	
	private decimal _HealthValue;
	
	private decimal _HealtValueAdditionalValue;
	
	private decimal _AdditionalValue;
	
	private decimal _AdditionalValueAdditionalValue;
	
	private decimal _EmployValue;
	
	private System.Nullable<decimal> _EmployValueAdditionalValue;
	
	private decimal _TaxRealeseValue;
	
	private int _NonpaidHours;
	
	private int _PrivateAbsenceHours;
	
	private decimal _PrivateAbsenceValue;
	
	private int _IntershipTypeID;
	
	private bool _IsCorrection;
	
	private System.Nullable<System.DateTime> _DateOfPayment;
	
	private System.Nullable<bool> _IsLock;
	
	private System.Nullable<int> _CompanyID;
	
	private System.Nullable<decimal> _Fond;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Employee> _Employee;
	
	private EntityRef<IntershipType> _IntershipType;
	
	private EntityRef<Sector> _Sector;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnNetProduceHoursChanging(int value);
    partial void OnNetProduceHoursChanged();
    partial void OnNetProduceValueChanging(decimal value);
    partial void OnNetProduceValueChanged();
    partial void OnNetNormHoursChanging(int value);
    partial void OnNetNormHoursChanged();
    partial void OnNetNormValueChanging(decimal value);
    partial void OnNetNormValueChanged();
    partial void OnIllnessHoursChanging(int value);
    partial void OnIllnessHoursChanged();
    partial void OnIllnessValueChanging(decimal value);
    partial void OnIllnessValueChanged();
    partial void OnIllnessSocialHoursChanging(int value);
    partial void OnIllnessSocialHoursChanged();
    partial void OnIllnessSocialValueChanging(decimal value);
    partial void OnIllnessSocialValueChanged();
    partial void OnVacationHoursChanging(int value);
    partial void OnVacationHoursChanged();
    partial void OnVacationValueChanging(decimal value);
    partial void OnVacationValueChanged();
    partial void OnStateHolidayHoursChanging(int value);
    partial void OnStateHolidayHoursChanged();
    partial void OnStateHolidayValueChanging(decimal value);
    partial void OnStateHolidayValueChanged();
    partial void OnBaseCostValueChanging(decimal value);
    partial void OnBaseCostValueChanged();
    partial void OnSectorIDChanging(int value);
    partial void OnSectorIDChanged();
    partial void OnAllowanceValueChanging(decimal value);
    partial void OnAllowanceValueChanged();
    partial void OnGrossAmmountChanging(decimal value);
    partial void OnGrossAmmountChanged();
    partial void OnPersonalTaxChanging(decimal value);
    partial void OnPersonalTaxChanged();
    partial void OnPensionValueChanging(decimal value);
    partial void OnPensionValueChanged();
    partial void OnPensionValueAdditionalValueChanging(decimal value);
    partial void OnPensionValueAdditionalValueChanged();
    partial void OnHealthValueChanging(decimal value);
    partial void OnHealthValueChanged();
    partial void OnHealtValueAdditionalValueChanging(decimal value);
    partial void OnHealtValueAdditionalValueChanged();
    partial void OnAdditionalValueChanging(decimal value);
    partial void OnAdditionalValueChanged();
    partial void OnAdditionalValueAdditionalValueChanging(decimal value);
    partial void OnAdditionalValueAdditionalValueChanged();
    partial void OnEmployValueChanging(decimal value);
    partial void OnEmployValueChanged();
    partial void OnEmployValueAdditionalValueChanging(System.Nullable<decimal> value);
    partial void OnEmployValueAdditionalValueChanged();
    partial void OnTaxRealeseValueChanging(decimal value);
    partial void OnTaxRealeseValueChanged();
    partial void OnNonpaidHoursChanging(int value);
    partial void OnNonpaidHoursChanged();
    partial void OnPrivateAbsenceHoursChanging(int value);
    partial void OnPrivateAbsenceHoursChanged();
    partial void OnPrivateAbsenceValueChanging(decimal value);
    partial void OnPrivateAbsenceValueChanged();
    partial void OnIntershipTypeIDChanging(int value);
    partial void OnIntershipTypeIDChanged();
    partial void OnIsCorrectionChanging(bool value);
    partial void OnIsCorrectionChanged();
    partial void OnDateOfPaymentChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfPaymentChanged();
    partial void OnIsLockChanging(System.Nullable<bool> value);
    partial void OnIsLockChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    partial void OnFondChanging(System.Nullable<decimal> value);
    partial void OnFondChanged();
    #endregion
	
	public Salary()
	{
		this._Company = default(EntityRef<Company>);
		this._Employee = default(EntityRef<Employee>);
		this._IntershipType = default(EntityRef<IntershipType>);
		this._Sector = default(EntityRef<Sector>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int NOT NULL")]
	public int Month
	{
		get
		{
			return this._Month;
		}
		set
		{
			if ((this._Month != value))
			{
				this.OnMonthChanging(value);
				this.SendPropertyChanging();
				this._Month = value;
				this.SendPropertyChanged("Month");
				this.OnMonthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
	public int Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this.OnYearChanging(value);
				this.SendPropertyChanging();
				this._Year = value;
				this.SendPropertyChanged("Year");
				this.OnYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
	public int EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetProduceHours", DbType="Int NOT NULL")]
	public int NetProduceHours
	{
		get
		{
			return this._NetProduceHours;
		}
		set
		{
			if ((this._NetProduceHours != value))
			{
				this.OnNetProduceHoursChanging(value);
				this.SendPropertyChanging();
				this._NetProduceHours = value;
				this.SendPropertyChanged("NetProduceHours");
				this.OnNetProduceHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetProduceValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal NetProduceValue
	{
		get
		{
			return this._NetProduceValue;
		}
		set
		{
			if ((this._NetProduceValue != value))
			{
				this.OnNetProduceValueChanging(value);
				this.SendPropertyChanging();
				this._NetProduceValue = value;
				this.SendPropertyChanged("NetProduceValue");
				this.OnNetProduceValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetNormHours", DbType="Int NOT NULL")]
	public int NetNormHours
	{
		get
		{
			return this._NetNormHours;
		}
		set
		{
			if ((this._NetNormHours != value))
			{
				this.OnNetNormHoursChanging(value);
				this.SendPropertyChanging();
				this._NetNormHours = value;
				this.SendPropertyChanged("NetNormHours");
				this.OnNetNormHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetNormValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal NetNormValue
	{
		get
		{
			return this._NetNormValue;
		}
		set
		{
			if ((this._NetNormValue != value))
			{
				this.OnNetNormValueChanging(value);
				this.SendPropertyChanging();
				this._NetNormValue = value;
				this.SendPropertyChanged("NetNormValue");
				this.OnNetNormValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IllnessHours", DbType="Int NOT NULL")]
	public int IllnessHours
	{
		get
		{
			return this._IllnessHours;
		}
		set
		{
			if ((this._IllnessHours != value))
			{
				this.OnIllnessHoursChanging(value);
				this.SendPropertyChanging();
				this._IllnessHours = value;
				this.SendPropertyChanged("IllnessHours");
				this.OnIllnessHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IllnessValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal IllnessValue
	{
		get
		{
			return this._IllnessValue;
		}
		set
		{
			if ((this._IllnessValue != value))
			{
				this.OnIllnessValueChanging(value);
				this.SendPropertyChanging();
				this._IllnessValue = value;
				this.SendPropertyChanged("IllnessValue");
				this.OnIllnessValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IllnessSocialHours", DbType="Int NOT NULL")]
	public int IllnessSocialHours
	{
		get
		{
			return this._IllnessSocialHours;
		}
		set
		{
			if ((this._IllnessSocialHours != value))
			{
				this.OnIllnessSocialHoursChanging(value);
				this.SendPropertyChanging();
				this._IllnessSocialHours = value;
				this.SendPropertyChanged("IllnessSocialHours");
				this.OnIllnessSocialHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IllnessSocialValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal IllnessSocialValue
	{
		get
		{
			return this._IllnessSocialValue;
		}
		set
		{
			if ((this._IllnessSocialValue != value))
			{
				this.OnIllnessSocialValueChanging(value);
				this.SendPropertyChanging();
				this._IllnessSocialValue = value;
				this.SendPropertyChanged("IllnessSocialValue");
				this.OnIllnessSocialValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VacationHours", DbType="Int NOT NULL")]
	public int VacationHours
	{
		get
		{
			return this._VacationHours;
		}
		set
		{
			if ((this._VacationHours != value))
			{
				this.OnVacationHoursChanging(value);
				this.SendPropertyChanging();
				this._VacationHours = value;
				this.SendPropertyChanged("VacationHours");
				this.OnVacationHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VacationValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal VacationValue
	{
		get
		{
			return this._VacationValue;
		}
		set
		{
			if ((this._VacationValue != value))
			{
				this.OnVacationValueChanging(value);
				this.SendPropertyChanging();
				this._VacationValue = value;
				this.SendPropertyChanged("VacationValue");
				this.OnVacationValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateHolidayHours", DbType="Int NOT NULL")]
	public int StateHolidayHours
	{
		get
		{
			return this._StateHolidayHours;
		}
		set
		{
			if ((this._StateHolidayHours != value))
			{
				this.OnStateHolidayHoursChanging(value);
				this.SendPropertyChanging();
				this._StateHolidayHours = value;
				this.SendPropertyChanged("StateHolidayHours");
				this.OnStateHolidayHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateHolidayValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal StateHolidayValue
	{
		get
		{
			return this._StateHolidayValue;
		}
		set
		{
			if ((this._StateHolidayValue != value))
			{
				this.OnStateHolidayValueChanging(value);
				this.SendPropertyChanging();
				this._StateHolidayValue = value;
				this.SendPropertyChanged("StateHolidayValue");
				this.OnStateHolidayValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseCostValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal BaseCostValue
	{
		get
		{
			return this._BaseCostValue;
		}
		set
		{
			if ((this._BaseCostValue != value))
			{
				this.OnBaseCostValueChanging(value);
				this.SendPropertyChanging();
				this._BaseCostValue = value;
				this.SendPropertyChanged("BaseCostValue");
				this.OnBaseCostValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectorID", DbType="Int NOT NULL")]
	public int SectorID
	{
		get
		{
			return this._SectorID;
		}
		set
		{
			if ((this._SectorID != value))
			{
				if (this._Sector.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSectorIDChanging(value);
				this.SendPropertyChanging();
				this._SectorID = value;
				this.SendPropertyChanged("SectorID");
				this.OnSectorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowanceValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal AllowanceValue
	{
		get
		{
			return this._AllowanceValue;
		}
		set
		{
			if ((this._AllowanceValue != value))
			{
				this.OnAllowanceValueChanging(value);
				this.SendPropertyChanging();
				this._AllowanceValue = value;
				this.SendPropertyChanged("AllowanceValue");
				this.OnAllowanceValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrossAmmount", DbType="Decimal(18,2) NOT NULL")]
	public decimal GrossAmmount
	{
		get
		{
			return this._GrossAmmount;
		}
		set
		{
			if ((this._GrossAmmount != value))
			{
				this.OnGrossAmmountChanging(value);
				this.SendPropertyChanging();
				this._GrossAmmount = value;
				this.SendPropertyChanged("GrossAmmount");
				this.OnGrossAmmountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalTax", DbType="Decimal(18,2) NOT NULL")]
	public decimal PersonalTax
	{
		get
		{
			return this._PersonalTax;
		}
		set
		{
			if ((this._PersonalTax != value))
			{
				this.OnPersonalTaxChanging(value);
				this.SendPropertyChanging();
				this._PersonalTax = value;
				this.SendPropertyChanged("PersonalTax");
				this.OnPersonalTaxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PensionValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal PensionValue
	{
		get
		{
			return this._PensionValue;
		}
		set
		{
			if ((this._PensionValue != value))
			{
				this.OnPensionValueChanging(value);
				this.SendPropertyChanging();
				this._PensionValue = value;
				this.SendPropertyChanged("PensionValue");
				this.OnPensionValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PensionValueAdditionalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal PensionValueAdditionalValue
	{
		get
		{
			return this._PensionValueAdditionalValue;
		}
		set
		{
			if ((this._PensionValueAdditionalValue != value))
			{
				this.OnPensionValueAdditionalValueChanging(value);
				this.SendPropertyChanging();
				this._PensionValueAdditionalValue = value;
				this.SendPropertyChanged("PensionValueAdditionalValue");
				this.OnPensionValueAdditionalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal HealthValue
	{
		get
		{
			return this._HealthValue;
		}
		set
		{
			if ((this._HealthValue != value))
			{
				this.OnHealthValueChanging(value);
				this.SendPropertyChanging();
				this._HealthValue = value;
				this.SendPropertyChanged("HealthValue");
				this.OnHealthValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealtValueAdditionalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal HealtValueAdditionalValue
	{
		get
		{
			return this._HealtValueAdditionalValue;
		}
		set
		{
			if ((this._HealtValueAdditionalValue != value))
			{
				this.OnHealtValueAdditionalValueChanging(value);
				this.SendPropertyChanging();
				this._HealtValueAdditionalValue = value;
				this.SendPropertyChanged("HealtValueAdditionalValue");
				this.OnHealtValueAdditionalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal AdditionalValue
	{
		get
		{
			return this._AdditionalValue;
		}
		set
		{
			if ((this._AdditionalValue != value))
			{
				this.OnAdditionalValueChanging(value);
				this.SendPropertyChanging();
				this._AdditionalValue = value;
				this.SendPropertyChanged("AdditionalValue");
				this.OnAdditionalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalValueAdditionalValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal AdditionalValueAdditionalValue
	{
		get
		{
			return this._AdditionalValueAdditionalValue;
		}
		set
		{
			if ((this._AdditionalValueAdditionalValue != value))
			{
				this.OnAdditionalValueAdditionalValueChanging(value);
				this.SendPropertyChanging();
				this._AdditionalValueAdditionalValue = value;
				this.SendPropertyChanged("AdditionalValueAdditionalValue");
				this.OnAdditionalValueAdditionalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal EmployValue
	{
		get
		{
			return this._EmployValue;
		}
		set
		{
			if ((this._EmployValue != value))
			{
				this.OnEmployValueChanging(value);
				this.SendPropertyChanging();
				this._EmployValue = value;
				this.SendPropertyChanged("EmployValue");
				this.OnEmployValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployValueAdditionalValue", DbType="Decimal(18,0)")]
	public System.Nullable<decimal> EmployValueAdditionalValue
	{
		get
		{
			return this._EmployValueAdditionalValue;
		}
		set
		{
			if ((this._EmployValueAdditionalValue != value))
			{
				this.OnEmployValueAdditionalValueChanging(value);
				this.SendPropertyChanging();
				this._EmployValueAdditionalValue = value;
				this.SendPropertyChanged("EmployValueAdditionalValue");
				this.OnEmployValueAdditionalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxRealeseValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxRealeseValue
	{
		get
		{
			return this._TaxRealeseValue;
		}
		set
		{
			if ((this._TaxRealeseValue != value))
			{
				this.OnTaxRealeseValueChanging(value);
				this.SendPropertyChanging();
				this._TaxRealeseValue = value;
				this.SendPropertyChanged("TaxRealeseValue");
				this.OnTaxRealeseValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NonpaidHours", DbType="Int NOT NULL")]
	public int NonpaidHours
	{
		get
		{
			return this._NonpaidHours;
		}
		set
		{
			if ((this._NonpaidHours != value))
			{
				this.OnNonpaidHoursChanging(value);
				this.SendPropertyChanging();
				this._NonpaidHours = value;
				this.SendPropertyChanged("NonpaidHours");
				this.OnNonpaidHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateAbsenceHours", DbType="Int NOT NULL")]
	public int PrivateAbsenceHours
	{
		get
		{
			return this._PrivateAbsenceHours;
		}
		set
		{
			if ((this._PrivateAbsenceHours != value))
			{
				this.OnPrivateAbsenceHoursChanging(value);
				this.SendPropertyChanging();
				this._PrivateAbsenceHours = value;
				this.SendPropertyChanged("PrivateAbsenceHours");
				this.OnPrivateAbsenceHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateAbsenceValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal PrivateAbsenceValue
	{
		get
		{
			return this._PrivateAbsenceValue;
		}
		set
		{
			if ((this._PrivateAbsenceValue != value))
			{
				this.OnPrivateAbsenceValueChanging(value);
				this.SendPropertyChanging();
				this._PrivateAbsenceValue = value;
				this.SendPropertyChanged("PrivateAbsenceValue");
				this.OnPrivateAbsenceValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntershipTypeID", DbType="Int NOT NULL")]
	public int IntershipTypeID
	{
		get
		{
			return this._IntershipTypeID;
		}
		set
		{
			if ((this._IntershipTypeID != value))
			{
				if (this._IntershipType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIntershipTypeIDChanging(value);
				this.SendPropertyChanging();
				this._IntershipTypeID = value;
				this.SendPropertyChanged("IntershipTypeID");
				this.OnIntershipTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorrection", DbType="Bit NOT NULL")]
	public bool IsCorrection
	{
		get
		{
			return this._IsCorrection;
		}
		set
		{
			if ((this._IsCorrection != value))
			{
				this.OnIsCorrectionChanging(value);
				this.SendPropertyChanging();
				this._IsCorrection = value;
				this.SendPropertyChanged("IsCorrection");
				this.OnIsCorrectionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfPayment", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfPayment
	{
		get
		{
			return this._DateOfPayment;
		}
		set
		{
			if ((this._DateOfPayment != value))
			{
				this.OnDateOfPaymentChanging(value);
				this.SendPropertyChanging();
				this._DateOfPayment = value;
				this.SendPropertyChanged("DateOfPayment");
				this.OnDateOfPaymentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLock", DbType="Bit")]
	public System.Nullable<bool> IsLock
	{
		get
		{
			return this._IsLock;
		}
		set
		{
			if ((this._IsLock != value))
			{
				this.OnIsLockChanging(value);
				this.SendPropertyChanging();
				this._IsLock = value;
				this.SendPropertyChanged("IsLock");
				this.OnIsLockChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fond", DbType="Decimal(18,4)")]
	public System.Nullable<decimal> Fond
	{
		get
		{
			return this._Fond;
		}
		set
		{
			if ((this._Fond != value))
			{
				this.OnFondChanging(value);
				this.SendPropertyChanging();
				this._Fond = value;
				this.SendPropertyChanged("Fond");
				this.OnFondChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Salary", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Salaries.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Salaries.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Salary", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Salaries.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Salaries.Add(this);
					this._EmployeeID = value.ID;
				}
				else
				{
					this._EmployeeID = default(int);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IntershipType_Salary", Storage="_IntershipType", ThisKey="IntershipTypeID", OtherKey="ID", IsForeignKey=true)]
	public IntershipType IntershipType
	{
		get
		{
			return this._IntershipType.Entity;
		}
		set
		{
			IntershipType previousValue = this._IntershipType.Entity;
			if (((previousValue != value) 
						|| (this._IntershipType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._IntershipType.Entity = null;
					previousValue.Salaries.Remove(this);
				}
				this._IntershipType.Entity = value;
				if ((value != null))
				{
					value.Salaries.Add(this);
					this._IntershipTypeID = value.ID;
				}
				else
				{
					this._IntershipTypeID = default(int);
				}
				this.SendPropertyChanged("IntershipType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_Salary", Storage="_Sector", ThisKey="SectorID", OtherKey="ID", IsForeignKey=true)]
	public Sector Sector
	{
		get
		{
			return this._Sector.Entity;
		}
		set
		{
			Sector previousValue = this._Sector.Entity;
			if (((previousValue != value) 
						|| (this._Sector.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Sector.Entity = null;
					previousValue.Salaries.Remove(this);
				}
				this._Sector.Entity = value;
				if ((value != null))
				{
					value.Salaries.Add(this);
					this._SectorID = value.ID;
				}
				else
				{
					this._SectorID = default(int);
				}
				this.SendPropertyChanged("Sector");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalaryParameters")]
public partial class SalaryParameter : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private string _ParameterValue;
	
	private int _VariableTypeID;
	
	private EntityRef<VariableType> _VariableType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParameterValueChanging(string value);
    partial void OnParameterValueChanged();
    partial void OnVariableTypeIDChanging(int value);
    partial void OnVariableTypeIDChanged();
    #endregion
	
	public SalaryParameter()
	{
		this._VariableType = default(EntityRef<VariableType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterValue", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ParameterValue
	{
		get
		{
			return this._ParameterValue;
		}
		set
		{
			if ((this._ParameterValue != value))
			{
				this.OnParameterValueChanging(value);
				this.SendPropertyChanging();
				this._ParameterValue = value;
				this.SendPropertyChanged("ParameterValue");
				this.OnParameterValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariableTypeID", DbType="Int NOT NULL")]
	public int VariableTypeID
	{
		get
		{
			return this._VariableTypeID;
		}
		set
		{
			if ((this._VariableTypeID != value))
			{
				if (this._VariableType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnVariableTypeIDChanging(value);
				this.SendPropertyChanging();
				this._VariableTypeID = value;
				this.SendPropertyChanged("VariableTypeID");
				this.OnVariableTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VariableType_SalaryParameter", Storage="_VariableType", ThisKey="VariableTypeID", OtherKey="ID", IsForeignKey=true)]
	public VariableType VariableType
	{
		get
		{
			return this._VariableType.Entity;
		}
		set
		{
			VariableType previousValue = this._VariableType.Entity;
			if (((previousValue != value) 
						|| (this._VariableType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._VariableType.Entity = null;
					previousValue.SalaryParameters.Remove(this);
				}
				this._VariableType.Entity = value;
				if ((value != null))
				{
					value.SalaryParameters.Add(this);
					this._VariableTypeID = value.ID;
				}
				else
				{
					this._VariableTypeID = default(int);
				}
				this.SendPropertyChanged("VariableType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sectors")]
public partial class Sector : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<Employee> _Employees;
	
	private EntitySet<HistorySalary> _HistorySalaries;
	
	private EntitySet<Salary> _Salaries;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Sector()
	{
		this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
		this._HistorySalaries = new EntitySet<HistorySalary>(new Action<HistorySalary>(this.attach_HistorySalaries), new Action<HistorySalary>(this.detach_HistorySalaries));
		this._Salaries = new EntitySet<Salary>(new Action<Salary>(this.attach_Salaries), new Action<Salary>(this.detach_Salaries));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_Employee", Storage="_Employees", ThisKey="ID", OtherKey="SectorID")]
	public EntitySet<Employee> Employees
	{
		get
		{
			return this._Employees;
		}
		set
		{
			this._Employees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_HistorySalary", Storage="_HistorySalaries", ThisKey="ID", OtherKey="SectorID")]
	public EntitySet<HistorySalary> HistorySalaries
	{
		get
		{
			return this._HistorySalaries;
		}
		set
		{
			this._HistorySalaries.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_Salary", Storage="_Salaries", ThisKey="ID", OtherKey="SectorID")]
	public EntitySet<Salary> Salaries
	{
		get
		{
			return this._Salaries;
		}
		set
		{
			this._Salaries.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Sector", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Sectors.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Sectors.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Sector = this;
	}
	
	private void detach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Sector = null;
	}
	
	private void attach_HistorySalaries(HistorySalary entity)
	{
		this.SendPropertyChanging();
		entity.Sector = this;
	}
	
	private void detach_HistorySalaries(HistorySalary entity)
	{
		this.SendPropertyChanging();
		entity.Sector = null;
	}
	
	private void attach_Salaries(Salary entity)
	{
		this.SendPropertyChanging();
		entity.Sector = this;
	}
	
	private void detach_Salaries(Salary entity)
	{
		this.SendPropertyChanging();
		entity.Sector = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateHolidays")]
public partial class StateHoliday : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Year;
	
	private System.DateTime _Date;
	
	private string _Name;
	
	private EntitySet<StateHolidaysNationality> _StateHolidaysNationalities;
	
	private EntitySet<StateHolidaysReligion> _StateHolidaysReligions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public StateHoliday()
	{
		this._StateHolidaysNationalities = new EntitySet<StateHolidaysNationality>(new Action<StateHolidaysNationality>(this.attach_StateHolidaysNationalities), new Action<StateHolidaysNationality>(this.detach_StateHolidaysNationalities));
		this._StateHolidaysReligions = new EntitySet<StateHolidaysReligion>(new Action<StateHolidaysReligion>(this.attach_StateHolidaysReligions), new Action<StateHolidaysReligion>(this.detach_StateHolidaysReligions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
	public int Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this.OnYearChanging(value);
				this.SendPropertyChanging();
				this._Year = value;
				this.SendPropertyChanged("Year");
				this.OnYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateHoliday_StateHolidaysNationality", Storage="_StateHolidaysNationalities", ThisKey="ID", OtherKey="StateHolidayID")]
	public EntitySet<StateHolidaysNationality> StateHolidaysNationalities
	{
		get
		{
			return this._StateHolidaysNationalities;
		}
		set
		{
			this._StateHolidaysNationalities.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateHoliday_StateHolidaysReligion", Storage="_StateHolidaysReligions", ThisKey="ID", OtherKey="StateHolidayID")]
	public EntitySet<StateHolidaysReligion> StateHolidaysReligions
	{
		get
		{
			return this._StateHolidaysReligions;
		}
		set
		{
			this._StateHolidaysReligions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_StateHolidaysNationalities(StateHolidaysNationality entity)
	{
		this.SendPropertyChanging();
		entity.StateHoliday = this;
	}
	
	private void detach_StateHolidaysNationalities(StateHolidaysNationality entity)
	{
		this.SendPropertyChanging();
		entity.StateHoliday = null;
	}
	
	private void attach_StateHolidaysReligions(StateHolidaysReligion entity)
	{
		this.SendPropertyChanging();
		entity.StateHoliday = this;
	}
	
	private void detach_StateHolidaysReligions(StateHolidaysReligion entity)
	{
		this.SendPropertyChanging();
		entity.StateHoliday = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateHolidaysNationalities")]
public partial class StateHolidaysNationality : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _StateHolidayID;
	
	private int _NacionalityID;
	
	private EntityRef<Nationality> _Nationality;
	
	private EntityRef<StateHoliday> _StateHoliday;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStateHolidayIDChanging(int value);
    partial void OnStateHolidayIDChanged();
    partial void OnNacionalityIDChanging(int value);
    partial void OnNacionalityIDChanged();
    #endregion
	
	public StateHolidaysNationality()
	{
		this._Nationality = default(EntityRef<Nationality>);
		this._StateHoliday = default(EntityRef<StateHoliday>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateHolidayID", DbType="Int NOT NULL")]
	public int StateHolidayID
	{
		get
		{
			return this._StateHolidayID;
		}
		set
		{
			if ((this._StateHolidayID != value))
			{
				if (this._StateHoliday.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStateHolidayIDChanging(value);
				this.SendPropertyChanging();
				this._StateHolidayID = value;
				this.SendPropertyChanged("StateHolidayID");
				this.OnStateHolidayIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NacionalityID", DbType="Int NOT NULL")]
	public int NacionalityID
	{
		get
		{
			return this._NacionalityID;
		}
		set
		{
			if ((this._NacionalityID != value))
			{
				if (this._Nationality.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnNacionalityIDChanging(value);
				this.SendPropertyChanging();
				this._NacionalityID = value;
				this.SendPropertyChanged("NacionalityID");
				this.OnNacionalityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nationality_StateHolidaysNationality", Storage="_Nationality", ThisKey="NacionalityID", OtherKey="ID", IsForeignKey=true)]
	public Nationality Nationality
	{
		get
		{
			return this._Nationality.Entity;
		}
		set
		{
			Nationality previousValue = this._Nationality.Entity;
			if (((previousValue != value) 
						|| (this._Nationality.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Nationality.Entity = null;
					previousValue.StateHolidaysNationalities.Remove(this);
				}
				this._Nationality.Entity = value;
				if ((value != null))
				{
					value.StateHolidaysNationalities.Add(this);
					this._NacionalityID = value.ID;
				}
				else
				{
					this._NacionalityID = default(int);
				}
				this.SendPropertyChanged("Nationality");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateHoliday_StateHolidaysNationality", Storage="_StateHoliday", ThisKey="StateHolidayID", OtherKey="ID", IsForeignKey=true)]
	public StateHoliday StateHoliday
	{
		get
		{
			return this._StateHoliday.Entity;
		}
		set
		{
			StateHoliday previousValue = this._StateHoliday.Entity;
			if (((previousValue != value) 
						|| (this._StateHoliday.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._StateHoliday.Entity = null;
					previousValue.StateHolidaysNationalities.Remove(this);
				}
				this._StateHoliday.Entity = value;
				if ((value != null))
				{
					value.StateHolidaysNationalities.Add(this);
					this._StateHolidayID = value.ID;
				}
				else
				{
					this._StateHolidayID = default(int);
				}
				this.SendPropertyChanged("StateHoliday");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateHolidaysReligions")]
public partial class StateHolidaysReligion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _StateHolidayID;
	
	private int _ReligionID;
	
	private EntityRef<Religion> _Religion;
	
	private EntityRef<StateHoliday> _StateHoliday;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStateHolidayIDChanging(int value);
    partial void OnStateHolidayIDChanged();
    partial void OnReligionIDChanging(int value);
    partial void OnReligionIDChanged();
    #endregion
	
	public StateHolidaysReligion()
	{
		this._Religion = default(EntityRef<Religion>);
		this._StateHoliday = default(EntityRef<StateHoliday>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateHolidayID", DbType="Int NOT NULL")]
	public int StateHolidayID
	{
		get
		{
			return this._StateHolidayID;
		}
		set
		{
			if ((this._StateHolidayID != value))
			{
				if (this._StateHoliday.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStateHolidayIDChanging(value);
				this.SendPropertyChanging();
				this._StateHolidayID = value;
				this.SendPropertyChanged("StateHolidayID");
				this.OnStateHolidayIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReligionID", DbType="Int NOT NULL")]
	public int ReligionID
	{
		get
		{
			return this._ReligionID;
		}
		set
		{
			if ((this._ReligionID != value))
			{
				if (this._Religion.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReligionIDChanging(value);
				this.SendPropertyChanging();
				this._ReligionID = value;
				this.SendPropertyChanged("ReligionID");
				this.OnReligionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Religion_StateHolidaysReligion", Storage="_Religion", ThisKey="ReligionID", OtherKey="ID", IsForeignKey=true)]
	public Religion Religion
	{
		get
		{
			return this._Religion.Entity;
		}
		set
		{
			Religion previousValue = this._Religion.Entity;
			if (((previousValue != value) 
						|| (this._Religion.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Religion.Entity = null;
					previousValue.StateHolidaysReligions.Remove(this);
				}
				this._Religion.Entity = value;
				if ((value != null))
				{
					value.StateHolidaysReligions.Add(this);
					this._ReligionID = value.ID;
				}
				else
				{
					this._ReligionID = default(int);
				}
				this.SendPropertyChanged("Religion");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateHoliday_StateHolidaysReligion", Storage="_StateHoliday", ThisKey="StateHolidayID", OtherKey="ID", IsForeignKey=true)]
	public StateHoliday StateHoliday
	{
		get
		{
			return this._StateHoliday.Entity;
		}
		set
		{
			StateHoliday previousValue = this._StateHoliday.Entity;
			if (((previousValue != value) 
						|| (this._StateHoliday.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._StateHoliday.Entity = null;
					previousValue.StateHolidaysReligions.Remove(this);
				}
				this._StateHoliday.Entity = value;
				if ((value != null))
				{
					value.StateHolidaysReligions.Add(this);
					this._StateHolidayID = value.ID;
				}
				else
				{
					this._StateHolidayID = default(int);
				}
				this.SendPropertyChanged("StateHoliday");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private bool _IsActive;
	
	private EntitySet<Item> _Items;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
	
	public State()
	{
		this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Item", Storage="_Items", ThisKey="ID", OtherKey="NativityStateID")]
	public EntitySet<Item> Items
	{
		get
		{
			return this._Items;
		}
		set
		{
			this._Items.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.State = this;
	}
	
	private void detach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.State = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreEntanceItems")]
public partial class StoreEntanceItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OrdinalNumber;
	
	private int _StoreWorkUnitEntranceID;
	
	private int _ItemID;
	
	private System.DateTime _Date;
	
	private decimal _OriginalCost;
	
	private decimal _Quantity;
	
	private bool _IsOwn;
	
	private decimal _TaxPercentage;
	
	private decimal _TaxValue;
	
	private decimal _FactureValue;
	
	private int _StoreEntranceFacturesID;
	
	private EntityRef<StoreEntanceItem> _StoreEntanceItem2;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<StoreEntanceItem> _StoreEntanceItem1;
	
	private EntityRef<StoreWorkUnitEntrance> _StoreWorkUnitEntrance;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnStoreWorkUnitEntranceIDChanging(int value);
    partial void OnStoreWorkUnitEntranceIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnOriginalCostChanging(decimal value);
    partial void OnOriginalCostChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnIsOwnChanging(bool value);
    partial void OnIsOwnChanged();
    partial void OnTaxPercentageChanging(decimal value);
    partial void OnTaxPercentageChanged();
    partial void OnTaxValueChanging(decimal value);
    partial void OnTaxValueChanged();
    partial void OnFactureValueChanging(decimal value);
    partial void OnFactureValueChanged();
    partial void OnStoreEntranceFacturesIDChanging(int value);
    partial void OnStoreEntranceFacturesIDChanged();
    #endregion
	
	public StoreEntanceItem()
	{
		this._StoreEntanceItem2 = default(EntityRef<StoreEntanceItem>);
		this._Item = default(EntityRef<Item>);
		this._StoreEntanceItem1 = default(EntityRef<StoreEntanceItem>);
		this._StoreWorkUnitEntrance = default(EntityRef<StoreWorkUnitEntrance>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				if (this._StoreEntanceItem1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreWorkUnitEntranceID", DbType="Int NOT NULL")]
	public int StoreWorkUnitEntranceID
	{
		get
		{
			return this._StoreWorkUnitEntranceID;
		}
		set
		{
			if ((this._StoreWorkUnitEntranceID != value))
			{
				if (this._StoreWorkUnitEntrance.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStoreWorkUnitEntranceIDChanging(value);
				this.SendPropertyChanging();
				this._StoreWorkUnitEntranceID = value;
				this.SendPropertyChanged("StoreWorkUnitEntranceID");
				this.OnStoreWorkUnitEntranceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal OriginalCost
	{
		get
		{
			return this._OriginalCost;
		}
		set
		{
			if ((this._OriginalCost != value))
			{
				this.OnOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._OriginalCost = value;
				this.SendPropertyChanged("OriginalCost");
				this.OnOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOwn", DbType="Bit NOT NULL")]
	public bool IsOwn
	{
		get
		{
			return this._IsOwn;
		}
		set
		{
			if ((this._IsOwn != value))
			{
				this.OnIsOwnChanging(value);
				this.SendPropertyChanging();
				this._IsOwn = value;
				this.SendPropertyChanged("IsOwn");
				this.OnIsOwnChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxPercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxPercentage
	{
		get
		{
			return this._TaxPercentage;
		}
		set
		{
			if ((this._TaxPercentage != value))
			{
				this.OnTaxPercentageChanging(value);
				this.SendPropertyChanging();
				this._TaxPercentage = value;
				this.SendPropertyChanged("TaxPercentage");
				this.OnTaxPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal TaxValue
	{
		get
		{
			return this._TaxValue;
		}
		set
		{
			if ((this._TaxValue != value))
			{
				this.OnTaxValueChanging(value);
				this.SendPropertyChanging();
				this._TaxValue = value;
				this.SendPropertyChanged("TaxValue");
				this.OnTaxValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal FactureValue
	{
		get
		{
			return this._FactureValue;
		}
		set
		{
			if ((this._FactureValue != value))
			{
				this.OnFactureValueChanging(value);
				this.SendPropertyChanging();
				this._FactureValue = value;
				this.SendPropertyChanged("FactureValue");
				this.OnFactureValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreEntranceFacturesID", DbType="Int NOT NULL")]
	public int StoreEntranceFacturesID
	{
		get
		{
			return this._StoreEntranceFacturesID;
		}
		set
		{
			if ((this._StoreEntranceFacturesID != value))
			{
				this.OnStoreEntranceFacturesIDChanging(value);
				this.SendPropertyChanging();
				this._StoreEntranceFacturesID = value;
				this.SendPropertyChanged("StoreEntranceFacturesID");
				this.OnStoreEntranceFacturesIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreEntanceItem_StoreEntanceItem", Storage="_StoreEntanceItem2", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
	public StoreEntanceItem StoreEntanceItem2
	{
		get
		{
			return this._StoreEntanceItem2.Entity;
		}
		set
		{
			StoreEntanceItem previousValue = this._StoreEntanceItem2.Entity;
			if (((previousValue != value) 
						|| (this._StoreEntanceItem2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._StoreEntanceItem2.Entity = null;
					previousValue.StoreEntanceItem1 = null;
				}
				this._StoreEntanceItem2.Entity = value;
				if ((value != null))
				{
					value.StoreEntanceItem1 = this;
				}
				this.SendPropertyChanged("StoreEntanceItem2");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_StoreEntanceItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.StoreEntanceItems.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.StoreEntanceItems.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreEntanceItem_StoreEntanceItem", Storage="_StoreEntanceItem1", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
	public StoreEntanceItem StoreEntanceItem1
	{
		get
		{
			return this._StoreEntanceItem1.Entity;
		}
		set
		{
			StoreEntanceItem previousValue = this._StoreEntanceItem1.Entity;
			if (((previousValue != value) 
						|| (this._StoreEntanceItem1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._StoreEntanceItem1.Entity = null;
					previousValue.StoreEntanceItem2 = null;
				}
				this._StoreEntanceItem1.Entity = value;
				if ((value != null))
				{
					value.StoreEntanceItem2 = this;
					this._ID = value.ID;
				}
				else
				{
					this._ID = default(int);
				}
				this.SendPropertyChanged("StoreEntanceItem1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreWorkUnitEntrance_StoreEntanceItem", Storage="_StoreWorkUnitEntrance", ThisKey="StoreWorkUnitEntranceID", OtherKey="ID", IsForeignKey=true)]
	public StoreWorkUnitEntrance StoreWorkUnitEntrance
	{
		get
		{
			return this._StoreWorkUnitEntrance.Entity;
		}
		set
		{
			StoreWorkUnitEntrance previousValue = this._StoreWorkUnitEntrance.Entity;
			if (((previousValue != value) 
						|| (this._StoreWorkUnitEntrance.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._StoreWorkUnitEntrance.Entity = null;
					previousValue.StoreEntanceItems.Remove(this);
				}
				this._StoreWorkUnitEntrance.Entity = value;
				if ((value != null))
				{
					value.StoreEntanceItems.Add(this);
					this._StoreWorkUnitEntranceID = value.ID;
				}
				else
				{
					this._StoreWorkUnitEntranceID = default(int);
				}
				this.SendPropertyChanged("StoreWorkUnitEntrance");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreEntancesFactures")]
public partial class StoreEntancesFacture : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OrdinalNumber;
	
	private string _FactureNumber;
	
	private System.DateTime _FactureDate;
	
	private System.DateTime _CurrencyDate;
	
	private EntitySet<StoreWorkUnitEntrancesFacture> _StoreWorkUnitEntrancesFactures;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnFactureNumberChanging(string value);
    partial void OnFactureNumberChanged();
    partial void OnFactureDateChanging(System.DateTime value);
    partial void OnFactureDateChanged();
    partial void OnCurrencyDateChanging(System.DateTime value);
    partial void OnCurrencyDateChanged();
    #endregion
	
	public StoreEntancesFacture()
	{
		this._StoreWorkUnitEntrancesFactures = new EntitySet<StoreWorkUnitEntrancesFacture>(new Action<StoreWorkUnitEntrancesFacture>(this.attach_StoreWorkUnitEntrancesFactures), new Action<StoreWorkUnitEntrancesFacture>(this.detach_StoreWorkUnitEntrancesFactures));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureNumber", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
	public string FactureNumber
	{
		get
		{
			return this._FactureNumber;
		}
		set
		{
			if ((this._FactureNumber != value))
			{
				this.OnFactureNumberChanging(value);
				this.SendPropertyChanging();
				this._FactureNumber = value;
				this.SendPropertyChanged("FactureNumber");
				this.OnFactureNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureDate", DbType="DateTime NOT NULL")]
	public System.DateTime FactureDate
	{
		get
		{
			return this._FactureDate;
		}
		set
		{
			if ((this._FactureDate != value))
			{
				this.OnFactureDateChanging(value);
				this.SendPropertyChanging();
				this._FactureDate = value;
				this.SendPropertyChanged("FactureDate");
				this.OnFactureDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyDate", DbType="DateTime NOT NULL")]
	public System.DateTime CurrencyDate
	{
		get
		{
			return this._CurrencyDate;
		}
		set
		{
			if ((this._CurrencyDate != value))
			{
				this.OnCurrencyDateChanging(value);
				this.SendPropertyChanging();
				this._CurrencyDate = value;
				this.SendPropertyChanged("CurrencyDate");
				this.OnCurrencyDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreEntancesFacture_StoreWorkUnitEntrancesFacture", Storage="_StoreWorkUnitEntrancesFactures", ThisKey="ID", OtherKey="StoreEntranceFactureID")]
	public EntitySet<StoreWorkUnitEntrancesFacture> StoreWorkUnitEntrancesFactures
	{
		get
		{
			return this._StoreWorkUnitEntrancesFactures;
		}
		set
		{
			this._StoreWorkUnitEntrancesFactures.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_StoreWorkUnitEntrancesFactures(StoreWorkUnitEntrancesFacture entity)
	{
		this.SendPropertyChanging();
		entity.StoreEntancesFacture = this;
	}
	
	private void detach_StoreWorkUnitEntrancesFactures(StoreWorkUnitEntrancesFacture entity)
	{
		this.SendPropertyChanging();
		entity.StoreEntancesFacture = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StorePayOffItems")]
public partial class StorePayOffItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _PayOffID;
	
	private int _OrdinalNumber;
	
	private int _ItemID;
	
	private decimal _Quantity;
	
	private decimal _OriginalCost;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<StorePayOff> _StorePayOff;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPayOffIDChanging(int value);
    partial void OnPayOffIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnOriginalCostChanging(decimal value);
    partial void OnOriginalCostChanged();
    #endregion
	
	public StorePayOffItem()
	{
		this._Item = default(EntityRef<Item>);
		this._StorePayOff = default(EntityRef<StorePayOff>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayOffID", DbType="Int NOT NULL")]
	public int PayOffID
	{
		get
		{
			return this._PayOffID;
		}
		set
		{
			if ((this._PayOffID != value))
			{
				if (this._StorePayOff.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPayOffIDChanging(value);
				this.SendPropertyChanging();
				this._PayOffID = value;
				this.SendPropertyChanged("PayOffID");
				this.OnPayOffIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,4) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal OriginalCost
	{
		get
		{
			return this._OriginalCost;
		}
		set
		{
			if ((this._OriginalCost != value))
			{
				this.OnOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._OriginalCost = value;
				this.SendPropertyChanged("OriginalCost");
				this.OnOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_StorePayOffItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.StorePayOffItems.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.StorePayOffItems.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StorePayOff_StorePayOffItem", Storage="_StorePayOff", ThisKey="PayOffID", OtherKey="ID", IsForeignKey=true)]
	public StorePayOff StorePayOff
	{
		get
		{
			return this._StorePayOff.Entity;
		}
		set
		{
			StorePayOff previousValue = this._StorePayOff.Entity;
			if (((previousValue != value) 
						|| (this._StorePayOff.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._StorePayOff.Entity = null;
					previousValue.StorePayOffItems.Remove(this);
				}
				this._StorePayOff.Entity = value;
				if ((value != null))
				{
					value.StorePayOffItems.Add(this);
					this._PayOffID = value.ID;
				}
				else
				{
					this._PayOffID = default(int);
				}
				this.SendPropertyChanged("StorePayOff");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StorePayOffs")]
public partial class StorePayOff : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _PayOffNumber;
	
	private System.DateTime _Date;
	
	private System.Nullable<bool> _IsForRepresentation;
	
	private System.Nullable<int> _WorkUnitID;
	
	private string _Description;
	
	private int _TypeID;
	
	private System.Nullable<int> _OutgoingFactureID;
	
	private int _ForWorkUnitID;
	
	private EntitySet<StorePayOffItem> _StorePayOffItems;
	
	private EntityRef<MaterialDocumentSubType> _MaterialDocumentSubType;
	
	private EntityRef<WorkUnit> _WorkUnit;
	
	private EntityRef<WorkUnit> _WorkUnit1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPayOffNumberChanging(string value);
    partial void OnPayOffNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsForRepresentationChanging(System.Nullable<bool> value);
    partial void OnIsForRepresentationChanged();
    partial void OnWorkUnitIDChanging(System.Nullable<int> value);
    partial void OnWorkUnitIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnOutgoingFactureIDChanging(System.Nullable<int> value);
    partial void OnOutgoingFactureIDChanged();
    partial void OnForWorkUnitIDChanging(int value);
    partial void OnForWorkUnitIDChanged();
    #endregion
	
	public StorePayOff()
	{
		this._StorePayOffItems = new EntitySet<StorePayOffItem>(new Action<StorePayOffItem>(this.attach_StorePayOffItems), new Action<StorePayOffItem>(this.detach_StorePayOffItems));
		this._MaterialDocumentSubType = default(EntityRef<MaterialDocumentSubType>);
		this._WorkUnit = default(EntityRef<WorkUnit>);
		this._WorkUnit1 = default(EntityRef<WorkUnit>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayOffNumber", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
	public string PayOffNumber
	{
		get
		{
			return this._PayOffNumber;
		}
		set
		{
			if ((this._PayOffNumber != value))
			{
				this.OnPayOffNumberChanging(value);
				this.SendPropertyChanging();
				this._PayOffNumber = value;
				this.SendPropertyChanged("PayOffNumber");
				this.OnPayOffNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForRepresentation", DbType="Bit")]
	public System.Nullable<bool> IsForRepresentation
	{
		get
		{
			return this._IsForRepresentation;
		}
		set
		{
			if ((this._IsForRepresentation != value))
			{
				this.OnIsForRepresentationChanging(value);
				this.SendPropertyChanging();
				this._IsForRepresentation = value;
				this.SendPropertyChanged("IsForRepresentation");
				this.OnIsForRepresentationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkUnitID", DbType="Int")]
	public System.Nullable<int> WorkUnitID
	{
		get
		{
			return this._WorkUnitID;
		}
		set
		{
			if ((this._WorkUnitID != value))
			{
				if ((this._WorkUnit.HasLoadedOrAssignedValue || this._WorkUnit1.HasLoadedOrAssignedValue))
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWorkUnitIDChanging(value);
				this.SendPropertyChanging();
				this._WorkUnitID = value;
				this.SendPropertyChanged("WorkUnitID");
				this.OnWorkUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
	public int TypeID
	{
		get
		{
			return this._TypeID;
		}
		set
		{
			if ((this._TypeID != value))
			{
				if (this._MaterialDocumentSubType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeIDChanging(value);
				this.SendPropertyChanging();
				this._TypeID = value;
				this.SendPropertyChanged("TypeID");
				this.OnTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutgoingFactureID", DbType="Int")]
	public System.Nullable<int> OutgoingFactureID
	{
		get
		{
			return this._OutgoingFactureID;
		}
		set
		{
			if ((this._OutgoingFactureID != value))
			{
				this.OnOutgoingFactureIDChanging(value);
				this.SendPropertyChanging();
				this._OutgoingFactureID = value;
				this.SendPropertyChanged("OutgoingFactureID");
				this.OnOutgoingFactureIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForWorkUnitID", DbType="Int NOT NULL")]
	public int ForWorkUnitID
	{
		get
		{
			return this._ForWorkUnitID;
		}
		set
		{
			if ((this._ForWorkUnitID != value))
			{
				this.OnForWorkUnitIDChanging(value);
				this.SendPropertyChanging();
				this._ForWorkUnitID = value;
				this.SendPropertyChanged("ForWorkUnitID");
				this.OnForWorkUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StorePayOff_StorePayOffItem", Storage="_StorePayOffItems", ThisKey="ID", OtherKey="PayOffID")]
	public EntitySet<StorePayOffItem> StorePayOffItems
	{
		get
		{
			return this._StorePayOffItems;
		}
		set
		{
			this._StorePayOffItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_StorePayOff", Storage="_MaterialDocumentSubType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
	public MaterialDocumentSubType MaterialDocumentSubType
	{
		get
		{
			return this._MaterialDocumentSubType.Entity;
		}
		set
		{
			MaterialDocumentSubType previousValue = this._MaterialDocumentSubType.Entity;
			if (((previousValue != value) 
						|| (this._MaterialDocumentSubType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaterialDocumentSubType.Entity = null;
					previousValue.StorePayOffs.Remove(this);
				}
				this._MaterialDocumentSubType.Entity = value;
				if ((value != null))
				{
					value.StorePayOffs.Add(this);
					this._TypeID = value.ID;
				}
				else
				{
					this._TypeID = default(int);
				}
				this.SendPropertyChanged("MaterialDocumentSubType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StorePayOff", Storage="_WorkUnit", ThisKey="WorkUnitID", OtherKey="ID", IsForeignKey=true)]
	public WorkUnit WorkUnit
	{
		get
		{
			return this._WorkUnit.Entity;
		}
		set
		{
			WorkUnit previousValue = this._WorkUnit.Entity;
			if (((previousValue != value) 
						|| (this._WorkUnit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkUnit.Entity = null;
					previousValue.StorePayOffs.Remove(this);
				}
				this._WorkUnit.Entity = value;
				if ((value != null))
				{
					value.StorePayOffs.Add(this);
					this._WorkUnitID = value.ID;
				}
				else
				{
					this._WorkUnitID = default(Nullable<int>);
				}
				this.SendPropertyChanged("WorkUnit");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StorePayOff1", Storage="_WorkUnit1", ThisKey="WorkUnitID", OtherKey="ID", IsForeignKey=true)]
	public WorkUnit WorkUnit1
	{
		get
		{
			return this._WorkUnit1.Entity;
		}
		set
		{
			WorkUnit previousValue = this._WorkUnit1.Entity;
			if (((previousValue != value) 
						|| (this._WorkUnit1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkUnit1.Entity = null;
					previousValue.StorePayOffs1.Remove(this);
				}
				this._WorkUnit1.Entity = value;
				if ((value != null))
				{
					value.StorePayOffs1.Add(this);
					this._WorkUnitID = value.ID;
				}
				else
				{
					this._WorkUnitID = default(Nullable<int>);
				}
				this.SendPropertyChanged("WorkUnit1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_StorePayOffItems(StorePayOffItem entity)
	{
		this.SendPropertyChanging();
		entity.StorePayOff = this;
	}
	
	private void detach_StorePayOffItems(StorePayOffItem entity)
	{
		this.SendPropertyChanging();
		entity.StorePayOff = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreReturnees")]
public partial class StoreReturnee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ReturnesNumber;
	
	private string _InputDocument;
	
	private string _Description;
	
	private System.DateTime _Date;
	
	private System.DateTime _InsertDate;
	
	private int _TypeID;
	
	private System.Nullable<int> _WorkUnitID;
	
	private int _ForWorkUnitID;
	
	private EntitySet<StoreReturnyItem> _StoreReturnyItems;
	
	private EntityRef<MaterialDocumentSubType> _MaterialDocumentSubType;
	
	private EntityRef<WorkUnit> _WorkUnit;
	
	private EntityRef<WorkUnit> _WorkUnit1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReturnesNumberChanging(int value);
    partial void OnReturnesNumberChanged();
    partial void OnInputDocumentChanging(string value);
    partial void OnInputDocumentChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnWorkUnitIDChanging(System.Nullable<int> value);
    partial void OnWorkUnitIDChanged();
    partial void OnForWorkUnitIDChanging(int value);
    partial void OnForWorkUnitIDChanged();
    #endregion
	
	public StoreReturnee()
	{
		this._StoreReturnyItems = new EntitySet<StoreReturnyItem>(new Action<StoreReturnyItem>(this.attach_StoreReturnyItems), new Action<StoreReturnyItem>(this.detach_StoreReturnyItems));
		this._MaterialDocumentSubType = default(EntityRef<MaterialDocumentSubType>);
		this._WorkUnit = default(EntityRef<WorkUnit>);
		this._WorkUnit1 = default(EntityRef<WorkUnit>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnesNumber", DbType="Int NOT NULL")]
	public int ReturnesNumber
	{
		get
		{
			return this._ReturnesNumber;
		}
		set
		{
			if ((this._ReturnesNumber != value))
			{
				this.OnReturnesNumberChanging(value);
				this.SendPropertyChanging();
				this._ReturnesNumber = value;
				this.SendPropertyChanged("ReturnesNumber");
				this.OnReturnesNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputDocument", DbType="NVarChar(50)")]
	public string InputDocument
	{
		get
		{
			return this._InputDocument;
		}
		set
		{
			if ((this._InputDocument != value))
			{
				this.OnInputDocumentChanging(value);
				this.SendPropertyChanging();
				this._InputDocument = value;
				this.SendPropertyChanged("InputDocument");
				this.OnInputDocumentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL")]
	public System.DateTime InsertDate
	{
		get
		{
			return this._InsertDate;
		}
		set
		{
			if ((this._InsertDate != value))
			{
				this.OnInsertDateChanging(value);
				this.SendPropertyChanging();
				this._InsertDate = value;
				this.SendPropertyChanged("InsertDate");
				this.OnInsertDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
	public int TypeID
	{
		get
		{
			return this._TypeID;
		}
		set
		{
			if ((this._TypeID != value))
			{
				if (this._MaterialDocumentSubType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeIDChanging(value);
				this.SendPropertyChanging();
				this._TypeID = value;
				this.SendPropertyChanged("TypeID");
				this.OnTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkUnitID", DbType="Int")]
	public System.Nullable<int> WorkUnitID
	{
		get
		{
			return this._WorkUnitID;
		}
		set
		{
			if ((this._WorkUnitID != value))
			{
				if (this._WorkUnit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWorkUnitIDChanging(value);
				this.SendPropertyChanging();
				this._WorkUnitID = value;
				this.SendPropertyChanged("WorkUnitID");
				this.OnWorkUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForWorkUnitID", DbType="Int NOT NULL")]
	public int ForWorkUnitID
	{
		get
		{
			return this._ForWorkUnitID;
		}
		set
		{
			if ((this._ForWorkUnitID != value))
			{
				if (this._WorkUnit1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnForWorkUnitIDChanging(value);
				this.SendPropertyChanging();
				this._ForWorkUnitID = value;
				this.SendPropertyChanged("ForWorkUnitID");
				this.OnForWorkUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreReturnee_StoreReturnyItem", Storage="_StoreReturnyItems", ThisKey="ID", OtherKey="ReturnyID")]
	public EntitySet<StoreReturnyItem> StoreReturnyItems
	{
		get
		{
			return this._StoreReturnyItems;
		}
		set
		{
			this._StoreReturnyItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_StoreReturnee", Storage="_MaterialDocumentSubType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
	public MaterialDocumentSubType MaterialDocumentSubType
	{
		get
		{
			return this._MaterialDocumentSubType.Entity;
		}
		set
		{
			MaterialDocumentSubType previousValue = this._MaterialDocumentSubType.Entity;
			if (((previousValue != value) 
						|| (this._MaterialDocumentSubType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaterialDocumentSubType.Entity = null;
					previousValue.StoreReturnees.Remove(this);
				}
				this._MaterialDocumentSubType.Entity = value;
				if ((value != null))
				{
					value.StoreReturnees.Add(this);
					this._TypeID = value.ID;
				}
				else
				{
					this._TypeID = default(int);
				}
				this.SendPropertyChanged("MaterialDocumentSubType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StoreReturnee", Storage="_WorkUnit", ThisKey="WorkUnitID", OtherKey="ID", IsForeignKey=true)]
	public WorkUnit WorkUnit
	{
		get
		{
			return this._WorkUnit.Entity;
		}
		set
		{
			WorkUnit previousValue = this._WorkUnit.Entity;
			if (((previousValue != value) 
						|| (this._WorkUnit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkUnit.Entity = null;
					previousValue.StoreReturnees.Remove(this);
				}
				this._WorkUnit.Entity = value;
				if ((value != null))
				{
					value.StoreReturnees.Add(this);
					this._WorkUnitID = value.ID;
				}
				else
				{
					this._WorkUnitID = default(Nullable<int>);
				}
				this.SendPropertyChanged("WorkUnit");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StoreReturnee1", Storage="_WorkUnit1", ThisKey="ForWorkUnitID", OtherKey="ID", IsForeignKey=true)]
	public WorkUnit WorkUnit1
	{
		get
		{
			return this._WorkUnit1.Entity;
		}
		set
		{
			WorkUnit previousValue = this._WorkUnit1.Entity;
			if (((previousValue != value) 
						|| (this._WorkUnit1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkUnit1.Entity = null;
					previousValue.StoreReturnees1.Remove(this);
				}
				this._WorkUnit1.Entity = value;
				if ((value != null))
				{
					value.StoreReturnees1.Add(this);
					this._ForWorkUnitID = value.ID;
				}
				else
				{
					this._ForWorkUnitID = default(int);
				}
				this.SendPropertyChanged("WorkUnit1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_StoreReturnyItems(StoreReturnyItem entity)
	{
		this.SendPropertyChanging();
		entity.StoreReturnee = this;
	}
	
	private void detach_StoreReturnyItems(StoreReturnyItem entity)
	{
		this.SendPropertyChanging();
		entity.StoreReturnee = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreReturnyItems")]
public partial class StoreReturnyItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ReturnyID;
	
	private int _OrdinalNumber;
	
	private int _ItemID;
	
	private decimal _Quantity;
	
	private decimal _OriginalValue;
	
	private System.Nullable<decimal> _SellValue;
	
	private System.DateTime _InsertDate;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<StoreReturnee> _StoreReturnee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReturnyIDChanging(int value);
    partial void OnReturnyIDChanged();
    partial void OnOrdinalNumberChanging(int value);
    partial void OnOrdinalNumberChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnOriginalValueChanging(decimal value);
    partial void OnOriginalValueChanged();
    partial void OnSellValueChanging(System.Nullable<decimal> value);
    partial void OnSellValueChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    #endregion
	
	public StoreReturnyItem()
	{
		this._Item = default(EntityRef<Item>);
		this._StoreReturnee = default(EntityRef<StoreReturnee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnyID", DbType="Int NOT NULL")]
	public int ReturnyID
	{
		get
		{
			return this._ReturnyID;
		}
		set
		{
			if ((this._ReturnyID != value))
			{
				if (this._StoreReturnee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReturnyIDChanging(value);
				this.SendPropertyChanging();
				this._ReturnyID = value;
				this.SendPropertyChanged("ReturnyID");
				this.OnReturnyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalNumber", DbType="Int NOT NULL")]
	public int OrdinalNumber
	{
		get
		{
			return this._OrdinalNumber;
		}
		set
		{
			if ((this._OrdinalNumber != value))
			{
				this.OnOrdinalNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdinalNumber = value;
				this.SendPropertyChanged("OrdinalNumber");
				this.OnOrdinalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,4) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalValue", DbType="Decimal(18,4) NOT NULL")]
	public decimal OriginalValue
	{
		get
		{
			return this._OriginalValue;
		}
		set
		{
			if ((this._OriginalValue != value))
			{
				this.OnOriginalValueChanging(value);
				this.SendPropertyChanging();
				this._OriginalValue = value;
				this.SendPropertyChanged("OriginalValue");
				this.OnOriginalValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellValue", DbType="Decimal(18,4)")]
	public System.Nullable<decimal> SellValue
	{
		get
		{
			return this._SellValue;
		}
		set
		{
			if ((this._SellValue != value))
			{
				this.OnSellValueChanging(value);
				this.SendPropertyChanging();
				this._SellValue = value;
				this.SendPropertyChanged("SellValue");
				this.OnSellValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL")]
	public System.DateTime InsertDate
	{
		get
		{
			return this._InsertDate;
		}
		set
		{
			if ((this._InsertDate != value))
			{
				this.OnInsertDateChanging(value);
				this.SendPropertyChanging();
				this._InsertDate = value;
				this.SendPropertyChanged("InsertDate");
				this.OnInsertDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_StoreReturnyItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.StoreReturnyItems.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.StoreReturnyItems.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreReturnee_StoreReturnyItem", Storage="_StoreReturnee", ThisKey="ReturnyID", OtherKey="ID", IsForeignKey=true)]
	public StoreReturnee StoreReturnee
	{
		get
		{
			return this._StoreReturnee.Entity;
		}
		set
		{
			StoreReturnee previousValue = this._StoreReturnee.Entity;
			if (((previousValue != value) 
						|| (this._StoreReturnee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._StoreReturnee.Entity = null;
					previousValue.StoreReturnyItems.Remove(this);
				}
				this._StoreReturnee.Entity = value;
				if ((value != null))
				{
					value.StoreReturnyItems.Add(this);
					this._ReturnyID = value.ID;
				}
				else
				{
					this._ReturnyID = default(int);
				}
				this.SendPropertyChanged("StoreReturnee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreWorkUnitEntrances")]
public partial class StoreWorkUnitEntrance : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _EntranceNumber;
	
	private System.DateTime _EntranceDate;
	
	private System.Nullable<int> _SupplierID;
	
	private string _OrderNumberByManufacture;
	
	private string _Description;
	
	private int _MaterialDocumentSubTypeID;
	
	private System.Nullable<int> _WorkUnitID;
	
	private int _ForWorkUnitID;
	
	private decimal _FactureValue;
	
	private System.Nullable<System.DateTime> _ExchangeDate;
	
	private string _EvidenceNumber;
	
	private string _InputDocument;
	
	private EntitySet<StoreEntanceItem> _StoreEntanceItems;
	
	private EntitySet<StoreWorkUnitEntrancesFacture> _StoreWorkUnitEntrancesFactures;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<MaterialDocumentSubType> _MaterialDocumentSubType;
	
	private EntityRef<WorkUnit> _WorkUnit;
	
	private EntityRef<WorkUnit> _WorkUnit1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEntranceNumberChanging(string value);
    partial void OnEntranceNumberChanged();
    partial void OnEntranceDateChanging(System.DateTime value);
    partial void OnEntranceDateChanged();
    partial void OnSupplierIDChanging(System.Nullable<int> value);
    partial void OnSupplierIDChanged();
    partial void OnOrderNumberByManufactureChanging(string value);
    partial void OnOrderNumberByManufactureChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMaterialDocumentSubTypeIDChanging(int value);
    partial void OnMaterialDocumentSubTypeIDChanged();
    partial void OnWorkUnitIDChanging(System.Nullable<int> value);
    partial void OnWorkUnitIDChanged();
    partial void OnForWorkUnitIDChanging(int value);
    partial void OnForWorkUnitIDChanged();
    partial void OnFactureValueChanging(decimal value);
    partial void OnFactureValueChanged();
    partial void OnExchangeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExchangeDateChanged();
    partial void OnEvidenceNumberChanging(string value);
    partial void OnEvidenceNumberChanged();
    partial void OnInputDocumentChanging(string value);
    partial void OnInputDocumentChanged();
    #endregion
	
	public StoreWorkUnitEntrance()
	{
		this._StoreEntanceItems = new EntitySet<StoreEntanceItem>(new Action<StoreEntanceItem>(this.attach_StoreEntanceItems), new Action<StoreEntanceItem>(this.detach_StoreEntanceItems));
		this._StoreWorkUnitEntrancesFactures = new EntitySet<StoreWorkUnitEntrancesFacture>(new Action<StoreWorkUnitEntrancesFacture>(this.attach_StoreWorkUnitEntrancesFactures), new Action<StoreWorkUnitEntrancesFacture>(this.detach_StoreWorkUnitEntrancesFactures));
		this._Client = default(EntityRef<Client>);
		this._MaterialDocumentSubType = default(EntityRef<MaterialDocumentSubType>);
		this._WorkUnit = default(EntityRef<WorkUnit>);
		this._WorkUnit1 = default(EntityRef<WorkUnit>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntranceNumber", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string EntranceNumber
	{
		get
		{
			return this._EntranceNumber;
		}
		set
		{
			if ((this._EntranceNumber != value))
			{
				this.OnEntranceNumberChanging(value);
				this.SendPropertyChanging();
				this._EntranceNumber = value;
				this.SendPropertyChanged("EntranceNumber");
				this.OnEntranceNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntranceDate", DbType="DateTime NOT NULL")]
	public System.DateTime EntranceDate
	{
		get
		{
			return this._EntranceDate;
		}
		set
		{
			if ((this._EntranceDate != value))
			{
				this.OnEntranceDateChanging(value);
				this.SendPropertyChanging();
				this._EntranceDate = value;
				this.SendPropertyChanged("EntranceDate");
				this.OnEntranceDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int")]
	public System.Nullable<int> SupplierID
	{
		get
		{
			return this._SupplierID;
		}
		set
		{
			if ((this._SupplierID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSupplierIDChanging(value);
				this.SendPropertyChanging();
				this._SupplierID = value;
				this.SendPropertyChanged("SupplierID");
				this.OnSupplierIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumberByManufacture", DbType="NVarChar(20)")]
	public string OrderNumberByManufacture
	{
		get
		{
			return this._OrderNumberByManufacture;
		}
		set
		{
			if ((this._OrderNumberByManufacture != value))
			{
				this.OnOrderNumberByManufactureChanging(value);
				this.SendPropertyChanging();
				this._OrderNumberByManufacture = value;
				this.SendPropertyChanged("OrderNumberByManufacture");
				this.OnOrderNumberByManufactureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialDocumentSubTypeID", DbType="Int NOT NULL")]
	public int MaterialDocumentSubTypeID
	{
		get
		{
			return this._MaterialDocumentSubTypeID;
		}
		set
		{
			if ((this._MaterialDocumentSubTypeID != value))
			{
				if (this._MaterialDocumentSubType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMaterialDocumentSubTypeIDChanging(value);
				this.SendPropertyChanging();
				this._MaterialDocumentSubTypeID = value;
				this.SendPropertyChanged("MaterialDocumentSubTypeID");
				this.OnMaterialDocumentSubTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkUnitID", DbType="Int")]
	public System.Nullable<int> WorkUnitID
	{
		get
		{
			return this._WorkUnitID;
		}
		set
		{
			if ((this._WorkUnitID != value))
			{
				if (this._WorkUnit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWorkUnitIDChanging(value);
				this.SendPropertyChanging();
				this._WorkUnitID = value;
				this.SendPropertyChanged("WorkUnitID");
				this.OnWorkUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForWorkUnitID", DbType="Int NOT NULL")]
	public int ForWorkUnitID
	{
		get
		{
			return this._ForWorkUnitID;
		}
		set
		{
			if ((this._ForWorkUnitID != value))
			{
				if (this._WorkUnit1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnForWorkUnitIDChanging(value);
				this.SendPropertyChanging();
				this._ForWorkUnitID = value;
				this.SendPropertyChanged("ForWorkUnitID");
				this.OnForWorkUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal FactureValue
	{
		get
		{
			return this._FactureValue;
		}
		set
		{
			if ((this._FactureValue != value))
			{
				this.OnFactureValueChanging(value);
				this.SendPropertyChanging();
				this._FactureValue = value;
				this.SendPropertyChanged("FactureValue");
				this.OnFactureValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExchangeDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ExchangeDate
	{
		get
		{
			return this._ExchangeDate;
		}
		set
		{
			if ((this._ExchangeDate != value))
			{
				this.OnExchangeDateChanging(value);
				this.SendPropertyChanging();
				this._ExchangeDate = value;
				this.SendPropertyChanged("ExchangeDate");
				this.OnExchangeDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvidenceNumber", DbType="NVarChar(50)")]
	public string EvidenceNumber
	{
		get
		{
			return this._EvidenceNumber;
		}
		set
		{
			if ((this._EvidenceNumber != value))
			{
				this.OnEvidenceNumberChanging(value);
				this.SendPropertyChanging();
				this._EvidenceNumber = value;
				this.SendPropertyChanged("EvidenceNumber");
				this.OnEvidenceNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputDocument", DbType="NVarChar(50)")]
	public string InputDocument
	{
		get
		{
			return this._InputDocument;
		}
		set
		{
			if ((this._InputDocument != value))
			{
				this.OnInputDocumentChanging(value);
				this.SendPropertyChanging();
				this._InputDocument = value;
				this.SendPropertyChanged("InputDocument");
				this.OnInputDocumentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreWorkUnitEntrance_StoreEntanceItem", Storage="_StoreEntanceItems", ThisKey="ID", OtherKey="StoreWorkUnitEntranceID")]
	public EntitySet<StoreEntanceItem> StoreEntanceItems
	{
		get
		{
			return this._StoreEntanceItems;
		}
		set
		{
			this._StoreEntanceItems.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreWorkUnitEntrance_StoreWorkUnitEntrancesFacture", Storage="_StoreWorkUnitEntrancesFactures", ThisKey="ID", OtherKey="StoreWorkUnitEntranceID")]
	public EntitySet<StoreWorkUnitEntrancesFacture> StoreWorkUnitEntrancesFactures
	{
		get
		{
			return this._StoreWorkUnitEntrancesFactures;
		}
		set
		{
			this._StoreWorkUnitEntrancesFactures.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_StoreWorkUnitEntrance", Storage="_Client", ThisKey="SupplierID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.StoreWorkUnitEntrances.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.StoreWorkUnitEntrances.Add(this);
					this._SupplierID = value.ID;
				}
				else
				{
					this._SupplierID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialDocumentSubType_StoreWorkUnitEntrance", Storage="_MaterialDocumentSubType", ThisKey="MaterialDocumentSubTypeID", OtherKey="ID", IsForeignKey=true)]
	public MaterialDocumentSubType MaterialDocumentSubType
	{
		get
		{
			return this._MaterialDocumentSubType.Entity;
		}
		set
		{
			MaterialDocumentSubType previousValue = this._MaterialDocumentSubType.Entity;
			if (((previousValue != value) 
						|| (this._MaterialDocumentSubType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaterialDocumentSubType.Entity = null;
					previousValue.StoreWorkUnitEntrances.Remove(this);
				}
				this._MaterialDocumentSubType.Entity = value;
				if ((value != null))
				{
					value.StoreWorkUnitEntrances.Add(this);
					this._MaterialDocumentSubTypeID = value.ID;
				}
				else
				{
					this._MaterialDocumentSubTypeID = default(int);
				}
				this.SendPropertyChanged("MaterialDocumentSubType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StoreWorkUnitEntrance", Storage="_WorkUnit", ThisKey="WorkUnitID", OtherKey="ID", IsForeignKey=true)]
	public WorkUnit WorkUnit
	{
		get
		{
			return this._WorkUnit.Entity;
		}
		set
		{
			WorkUnit previousValue = this._WorkUnit.Entity;
			if (((previousValue != value) 
						|| (this._WorkUnit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkUnit.Entity = null;
					previousValue.StoreWorkUnitEntrances.Remove(this);
				}
				this._WorkUnit.Entity = value;
				if ((value != null))
				{
					value.StoreWorkUnitEntrances.Add(this);
					this._WorkUnitID = value.ID;
				}
				else
				{
					this._WorkUnitID = default(Nullable<int>);
				}
				this.SendPropertyChanged("WorkUnit");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_StoreWorkUnitEntrance1", Storage="_WorkUnit1", ThisKey="ForWorkUnitID", OtherKey="ID", IsForeignKey=true)]
	public WorkUnit WorkUnit1
	{
		get
		{
			return this._WorkUnit1.Entity;
		}
		set
		{
			WorkUnit previousValue = this._WorkUnit1.Entity;
			if (((previousValue != value) 
						|| (this._WorkUnit1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkUnit1.Entity = null;
					previousValue.StoreWorkUnitEntrances1.Remove(this);
				}
				this._WorkUnit1.Entity = value;
				if ((value != null))
				{
					value.StoreWorkUnitEntrances1.Add(this);
					this._ForWorkUnitID = value.ID;
				}
				else
				{
					this._ForWorkUnitID = default(int);
				}
				this.SendPropertyChanged("WorkUnit1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_StoreEntanceItems(StoreEntanceItem entity)
	{
		this.SendPropertyChanging();
		entity.StoreWorkUnitEntrance = this;
	}
	
	private void detach_StoreEntanceItems(StoreEntanceItem entity)
	{
		this.SendPropertyChanging();
		entity.StoreWorkUnitEntrance = null;
	}
	
	private void attach_StoreWorkUnitEntrancesFactures(StoreWorkUnitEntrancesFacture entity)
	{
		this.SendPropertyChanging();
		entity.StoreWorkUnitEntrance = this;
	}
	
	private void detach_StoreWorkUnitEntrancesFactures(StoreWorkUnitEntrancesFacture entity)
	{
		this.SendPropertyChanging();
		entity.StoreWorkUnitEntrance = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreWorkUnitEntrancesFactures")]
public partial class StoreWorkUnitEntrancesFacture : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _StoreWorkUnitEntranceID;
	
	private int _StoreEntranceFactureID;
	
	private EntityRef<StoreEntancesFacture> _StoreEntancesFacture;
	
	private EntityRef<StoreWorkUnitEntrance> _StoreWorkUnitEntrance;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStoreWorkUnitEntranceIDChanging(int value);
    partial void OnStoreWorkUnitEntranceIDChanged();
    partial void OnStoreEntranceFactureIDChanging(int value);
    partial void OnStoreEntranceFactureIDChanged();
    #endregion
	
	public StoreWorkUnitEntrancesFacture()
	{
		this._StoreEntancesFacture = default(EntityRef<StoreEntancesFacture>);
		this._StoreWorkUnitEntrance = default(EntityRef<StoreWorkUnitEntrance>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreWorkUnitEntranceID", DbType="Int NOT NULL")]
	public int StoreWorkUnitEntranceID
	{
		get
		{
			return this._StoreWorkUnitEntranceID;
		}
		set
		{
			if ((this._StoreWorkUnitEntranceID != value))
			{
				if (this._StoreWorkUnitEntrance.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStoreWorkUnitEntranceIDChanging(value);
				this.SendPropertyChanging();
				this._StoreWorkUnitEntranceID = value;
				this.SendPropertyChanged("StoreWorkUnitEntranceID");
				this.OnStoreWorkUnitEntranceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreEntranceFactureID", DbType="Int NOT NULL")]
	public int StoreEntranceFactureID
	{
		get
		{
			return this._StoreEntranceFactureID;
		}
		set
		{
			if ((this._StoreEntranceFactureID != value))
			{
				if (this._StoreEntancesFacture.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStoreEntranceFactureIDChanging(value);
				this.SendPropertyChanging();
				this._StoreEntranceFactureID = value;
				this.SendPropertyChanged("StoreEntranceFactureID");
				this.OnStoreEntranceFactureIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreEntancesFacture_StoreWorkUnitEntrancesFacture", Storage="_StoreEntancesFacture", ThisKey="StoreEntranceFactureID", OtherKey="ID", IsForeignKey=true)]
	public StoreEntancesFacture StoreEntancesFacture
	{
		get
		{
			return this._StoreEntancesFacture.Entity;
		}
		set
		{
			StoreEntancesFacture previousValue = this._StoreEntancesFacture.Entity;
			if (((previousValue != value) 
						|| (this._StoreEntancesFacture.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._StoreEntancesFacture.Entity = null;
					previousValue.StoreWorkUnitEntrancesFactures.Remove(this);
				}
				this._StoreEntancesFacture.Entity = value;
				if ((value != null))
				{
					value.StoreWorkUnitEntrancesFactures.Add(this);
					this._StoreEntranceFactureID = value.ID;
				}
				else
				{
					this._StoreEntranceFactureID = default(int);
				}
				this.SendPropertyChanged("StoreEntancesFacture");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreWorkUnitEntrance_StoreWorkUnitEntrancesFacture", Storage="_StoreWorkUnitEntrance", ThisKey="StoreWorkUnitEntranceID", OtherKey="ID", IsForeignKey=true)]
	public StoreWorkUnitEntrance StoreWorkUnitEntrance
	{
		get
		{
			return this._StoreWorkUnitEntrance.Entity;
		}
		set
		{
			StoreWorkUnitEntrance previousValue = this._StoreWorkUnitEntrance.Entity;
			if (((previousValue != value) 
						|| (this._StoreWorkUnitEntrance.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._StoreWorkUnitEntrance.Entity = null;
					previousValue.StoreWorkUnitEntrancesFactures.Remove(this);
				}
				this._StoreWorkUnitEntrance.Entity = value;
				if ((value != null))
				{
					value.StoreWorkUnitEntrancesFactures.Add(this);
					this._StoreWorkUnitEntranceID = value.ID;
				}
				else
				{
					this._StoreWorkUnitEntranceID = default(int);
				}
				this.SendPropertyChanged("StoreWorkUnitEntrance");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableNames")]
public partial class TableName : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private bool _IsTable;
	
	private System.Nullable<int> _ParentID;
	
	private System.Nullable<int> _FunctionID;
	
	private bool _IsExpand;
	
	private EntitySet<TableName> _TableNames;
	
	private EntityRef<TableName> _TableName1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsTableChanging(bool value);
    partial void OnIsTableChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnFunctionIDChanging(System.Nullable<int> value);
    partial void OnFunctionIDChanged();
    partial void OnIsExpandChanging(bool value);
    partial void OnIsExpandChanged();
    #endregion
	
	public TableName()
	{
		this._TableNames = new EntitySet<TableName>(new Action<TableName>(this.attach_TableNames), new Action<TableName>(this.detach_TableNames));
		this._TableName1 = default(EntityRef<TableName>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTable", DbType="Bit NOT NULL")]
	public bool IsTable
	{
		get
		{
			return this._IsTable;
		}
		set
		{
			if ((this._IsTable != value))
			{
				this.OnIsTableChanging(value);
				this.SendPropertyChanging();
				this._IsTable = value;
				this.SendPropertyChanged("IsTable");
				this.OnIsTableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
	public System.Nullable<int> ParentID
	{
		get
		{
			return this._ParentID;
		}
		set
		{
			if ((this._ParentID != value))
			{
				if (this._TableName1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentIDChanging(value);
				this.SendPropertyChanging();
				this._ParentID = value;
				this.SendPropertyChanged("ParentID");
				this.OnParentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionID", DbType="Int")]
	public System.Nullable<int> FunctionID
	{
		get
		{
			return this._FunctionID;
		}
		set
		{
			if ((this._FunctionID != value))
			{
				this.OnFunctionIDChanging(value);
				this.SendPropertyChanging();
				this._FunctionID = value;
				this.SendPropertyChanged("FunctionID");
				this.OnFunctionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsExpand", DbType="Bit NOT NULL")]
	public bool IsExpand
	{
		get
		{
			return this._IsExpand;
		}
		set
		{
			if ((this._IsExpand != value))
			{
				this.OnIsExpandChanging(value);
				this.SendPropertyChanging();
				this._IsExpand = value;
				this.SendPropertyChanged("IsExpand");
				this.OnIsExpandChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableName_TableName", Storage="_TableNames", ThisKey="ID", OtherKey="ParentID")]
	public EntitySet<TableName> TableNames
	{
		get
		{
			return this._TableNames;
		}
		set
		{
			this._TableNames.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableName_TableName", Storage="_TableName1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
	public TableName TableName1
	{
		get
		{
			return this._TableName1.Entity;
		}
		set
		{
			TableName previousValue = this._TableName1.Entity;
			if (((previousValue != value) 
						|| (this._TableName1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TableName1.Entity = null;
					previousValue.TableNames.Remove(this);
				}
				this._TableName1.Entity = value;
				if ((value != null))
				{
					value.TableNames.Add(this);
					this._ParentID = value.ID;
				}
				else
				{
					this._ParentID = default(Nullable<int>);
				}
				this.SendPropertyChanged("TableName1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TableNames(TableName entity)
	{
		this.SendPropertyChanging();
		entity.TableName1 = this;
	}
	
	private void detach_TableNames(TableName entity)
	{
		this.SendPropertyChanging();
		entity.TableName1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemporaryCapitalAssetsCards")]
public partial class TemporaryCapitalAssetsCard : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Number;
	
	private string _Name;
	
	private string _InventoryNumber;
	
	private int _AmortizationGroupID;
	
	private decimal _Factor;
	
	private System.DateTime _OrderDate;
	
	private System.Nullable<System.DateTime> _ApplicationDate;
	
	private System.Nullable<System.DateTime> _DebitDate;
	
	private decimal _Quantity;
	
	private int _WorkUnitID;
	
	private int _IndebtPersonID;
	
	private int _ClientID;
	
	private string _FactureNumber;
	
	private decimal _FactureValue;
	
	private decimal _DDVPercentage;
	
	private bool _IsForDDV;
	
	private int _LocationID;
	
	private string _AccountCode;
	
	private System.Nullable<System.DateTime> _LastAmortizationDate;
	
	private decimal _OriginalCost;
	
	private decimal _WrittenOffValue;
	
	private decimal _PresentValue;
	
	private decimal _AmortizationValue;
	
	private System.DateTime _InsertDate;
	
	private bool _IsAmortization;
	
	private int _CapitalAssetsCardID;
	
	private System.Nullable<int> _CompanyAccountID;
	
	private EntityRef<CapitalAssetsCard> _CapitalAssetsCard;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInventoryNumberChanging(string value);
    partial void OnInventoryNumberChanged();
    partial void OnAmortizationGroupIDChanging(int value);
    partial void OnAmortizationGroupIDChanged();
    partial void OnFactorChanging(decimal value);
    partial void OnFactorChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnApplicationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApplicationDateChanged();
    partial void OnDebitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDebitDateChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnWorkUnitIDChanging(int value);
    partial void OnWorkUnitIDChanged();
    partial void OnIndebtPersonIDChanging(int value);
    partial void OnIndebtPersonIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnFactureNumberChanging(string value);
    partial void OnFactureNumberChanged();
    partial void OnFactureValueChanging(decimal value);
    partial void OnFactureValueChanged();
    partial void OnDDVPercentageChanging(decimal value);
    partial void OnDDVPercentageChanged();
    partial void OnIsForDDVChanging(bool value);
    partial void OnIsForDDVChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnAccountCodeChanging(string value);
    partial void OnAccountCodeChanged();
    partial void OnLastAmortizationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastAmortizationDateChanged();
    partial void OnOriginalCostChanging(decimal value);
    partial void OnOriginalCostChanged();
    partial void OnWrittenOffValueChanging(decimal value);
    partial void OnWrittenOffValueChanged();
    partial void OnPresentValueChanging(decimal value);
    partial void OnPresentValueChanged();
    partial void OnAmortizationValueChanging(decimal value);
    partial void OnAmortizationValueChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnIsAmortizationChanging(bool value);
    partial void OnIsAmortizationChanged();
    partial void OnCapitalAssetsCardIDChanging(int value);
    partial void OnCapitalAssetsCardIDChanged();
    partial void OnCompanyAccountIDChanging(System.Nullable<int> value);
    partial void OnCompanyAccountIDChanged();
    #endregion
	
	public TemporaryCapitalAssetsCard()
	{
		this._CapitalAssetsCard = default(EntityRef<CapitalAssetsCard>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
	public int Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryNumber", DbType="NVarChar(30)")]
	public string InventoryNumber
	{
		get
		{
			return this._InventoryNumber;
		}
		set
		{
			if ((this._InventoryNumber != value))
			{
				this.OnInventoryNumberChanging(value);
				this.SendPropertyChanging();
				this._InventoryNumber = value;
				this.SendPropertyChanged("InventoryNumber");
				this.OnInventoryNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationGroupID", DbType="Int NOT NULL")]
	public int AmortizationGroupID
	{
		get
		{
			return this._AmortizationGroupID;
		}
		set
		{
			if ((this._AmortizationGroupID != value))
			{
				this.OnAmortizationGroupIDChanging(value);
				this.SendPropertyChanging();
				this._AmortizationGroupID = value;
				this.SendPropertyChanged("AmortizationGroupID");
				this.OnAmortizationGroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Factor", DbType="Decimal(18,2) NOT NULL")]
	public decimal Factor
	{
		get
		{
			return this._Factor;
		}
		set
		{
			if ((this._Factor != value))
			{
				this.OnFactorChanging(value);
				this.SendPropertyChanging();
				this._Factor = value;
				this.SendPropertyChanged("Factor");
				this.OnFactorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
	public System.DateTime OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ApplicationDate
	{
		get
		{
			return this._ApplicationDate;
		}
		set
		{
			if ((this._ApplicationDate != value))
			{
				this.OnApplicationDateChanging(value);
				this.SendPropertyChanging();
				this._ApplicationDate = value;
				this.SendPropertyChanged("ApplicationDate");
				this.OnApplicationDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebitDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> DebitDate
	{
		get
		{
			return this._DebitDate;
		}
		set
		{
			if ((this._DebitDate != value))
			{
				this.OnDebitDateChanging(value);
				this.SendPropertyChanging();
				this._DebitDate = value;
				this.SendPropertyChanged("DebitDate");
				this.OnDebitDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
	public decimal Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkUnitID", DbType="Int NOT NULL")]
	public int WorkUnitID
	{
		get
		{
			return this._WorkUnitID;
		}
		set
		{
			if ((this._WorkUnitID != value))
			{
				this.OnWorkUnitIDChanging(value);
				this.SendPropertyChanging();
				this._WorkUnitID = value;
				this.SendPropertyChanged("WorkUnitID");
				this.OnWorkUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndebtPersonID", DbType="Int NOT NULL")]
	public int IndebtPersonID
	{
		get
		{
			return this._IndebtPersonID;
		}
		set
		{
			if ((this._IndebtPersonID != value))
			{
				this.OnIndebtPersonIDChanging(value);
				this.SendPropertyChanging();
				this._IndebtPersonID = value;
				this.SendPropertyChanged("IndebtPersonID");
				this.OnIndebtPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
	public int ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FactureNumber
	{
		get
		{
			return this._FactureNumber;
		}
		set
		{
			if ((this._FactureNumber != value))
			{
				this.OnFactureNumberChanging(value);
				this.SendPropertyChanging();
				this._FactureNumber = value;
				this.SendPropertyChanged("FactureNumber");
				this.OnFactureNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactureValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal FactureValue
	{
		get
		{
			return this._FactureValue;
		}
		set
		{
			if ((this._FactureValue != value))
			{
				this.OnFactureValueChanging(value);
				this.SendPropertyChanging();
				this._FactureValue = value;
				this.SendPropertyChanged("FactureValue");
				this.OnFactureValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDVPercentage", DbType="Decimal(18,2) NOT NULL")]
	public decimal DDVPercentage
	{
		get
		{
			return this._DDVPercentage;
		}
		set
		{
			if ((this._DDVPercentage != value))
			{
				this.OnDDVPercentageChanging(value);
				this.SendPropertyChanging();
				this._DDVPercentage = value;
				this.SendPropertyChanged("DDVPercentage");
				this.OnDDVPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForDDV", DbType="Bit NOT NULL")]
	public bool IsForDDV
	{
		get
		{
			return this._IsForDDV;
		}
		set
		{
			if ((this._IsForDDV != value))
			{
				this.OnIsForDDVChanging(value);
				this.SendPropertyChanging();
				this._IsForDDV = value;
				this.SendPropertyChanged("IsForDDV");
				this.OnIsForDDVChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
	public int LocationID
	{
		get
		{
			return this._LocationID;
		}
		set
		{
			if ((this._LocationID != value))
			{
				this.OnLocationIDChanging(value);
				this.SendPropertyChanging();
				this._LocationID = value;
				this.SendPropertyChanged("LocationID");
				this.OnLocationIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string AccountCode
	{
		get
		{
			return this._AccountCode;
		}
		set
		{
			if ((this._AccountCode != value))
			{
				this.OnAccountCodeChanging(value);
				this.SendPropertyChanging();
				this._AccountCode = value;
				this.SendPropertyChanged("AccountCode");
				this.OnAccountCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastAmortizationDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastAmortizationDate
	{
		get
		{
			return this._LastAmortizationDate;
		}
		set
		{
			if ((this._LastAmortizationDate != value))
			{
				this.OnLastAmortizationDateChanging(value);
				this.SendPropertyChanging();
				this._LastAmortizationDate = value;
				this.SendPropertyChanged("LastAmortizationDate");
				this.OnLastAmortizationDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal OriginalCost
	{
		get
		{
			return this._OriginalCost;
		}
		set
		{
			if ((this._OriginalCost != value))
			{
				this.OnOriginalCostChanging(value);
				this.SendPropertyChanging();
				this._OriginalCost = value;
				this.SendPropertyChanged("OriginalCost");
				this.OnOriginalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WrittenOffValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal WrittenOffValue
	{
		get
		{
			return this._WrittenOffValue;
		}
		set
		{
			if ((this._WrittenOffValue != value))
			{
				this.OnWrittenOffValueChanging(value);
				this.SendPropertyChanging();
				this._WrittenOffValue = value;
				this.SendPropertyChanged("WrittenOffValue");
				this.OnWrittenOffValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresentValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal PresentValue
	{
		get
		{
			return this._PresentValue;
		}
		set
		{
			if ((this._PresentValue != value))
			{
				this.OnPresentValueChanging(value);
				this.SendPropertyChanging();
				this._PresentValue = value;
				this.SendPropertyChanged("PresentValue");
				this.OnPresentValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationValue", DbType="Decimal(18,2) NOT NULL")]
	public decimal AmortizationValue
	{
		get
		{
			return this._AmortizationValue;
		}
		set
		{
			if ((this._AmortizationValue != value))
			{
				this.OnAmortizationValueChanging(value);
				this.SendPropertyChanging();
				this._AmortizationValue = value;
				this.SendPropertyChanged("AmortizationValue");
				this.OnAmortizationValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL")]
	public System.DateTime InsertDate
	{
		get
		{
			return this._InsertDate;
		}
		set
		{
			if ((this._InsertDate != value))
			{
				this.OnInsertDateChanging(value);
				this.SendPropertyChanging();
				this._InsertDate = value;
				this.SendPropertyChanged("InsertDate");
				this.OnInsertDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAmortization", DbType="Bit NOT NULL")]
	public bool IsAmortization
	{
		get
		{
			return this._IsAmortization;
		}
		set
		{
			if ((this._IsAmortization != value))
			{
				this.OnIsAmortizationChanging(value);
				this.SendPropertyChanging();
				this._IsAmortization = value;
				this.SendPropertyChanged("IsAmortization");
				this.OnIsAmortizationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapitalAssetsCardID", DbType="Int NOT NULL")]
	public int CapitalAssetsCardID
	{
		get
		{
			return this._CapitalAssetsCardID;
		}
		set
		{
			if ((this._CapitalAssetsCardID != value))
			{
				if (this._CapitalAssetsCard.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCapitalAssetsCardIDChanging(value);
				this.SendPropertyChanging();
				this._CapitalAssetsCardID = value;
				this.SendPropertyChanged("CapitalAssetsCardID");
				this.OnCapitalAssetsCardIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAccountID", DbType="Int")]
	public System.Nullable<int> CompanyAccountID
	{
		get
		{
			return this._CompanyAccountID;
		}
		set
		{
			if ((this._CompanyAccountID != value))
			{
				this.OnCompanyAccountIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyAccountID = value;
				this.SendPropertyChanged("CompanyAccountID");
				this.OnCompanyAccountIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalAssetsCard_TemporaryCapitalAssetsCard", Storage="_CapitalAssetsCard", ThisKey="CapitalAssetsCardID", OtherKey="ID", IsForeignKey=true)]
	public CapitalAssetsCard CapitalAssetsCard
	{
		get
		{
			return this._CapitalAssetsCard.Entity;
		}
		set
		{
			CapitalAssetsCard previousValue = this._CapitalAssetsCard.Entity;
			if (((previousValue != value) 
						|| (this._CapitalAssetsCard.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CapitalAssetsCard.Entity = null;
					previousValue.TemporaryCapitalAssetsCards.Remove(this);
				}
				this._CapitalAssetsCard.Entity = value;
				if ((value != null))
				{
					value.TemporaryCapitalAssetsCards.Add(this);
					this._CapitalAssetsCardID = value.ID;
				}
				else
				{
					this._CapitalAssetsCardID = default(int);
				}
				this.SendPropertyChanged("CapitalAssetsCard");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Units")]
public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private bool _IsActive;
	
	private EntitySet<Item> _Items;
	
	private EntitySet<NormativesItem> _NormativesItems;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
	
	public Unit()
	{
		this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
		this._NormativesItems = new EntitySet<NormativesItem>(new Action<NormativesItem>(this.attach_NormativesItems), new Action<NormativesItem>(this.detach_NormativesItems));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Item", Storage="_Items", ThisKey="ID", OtherKey="UnitID")]
	public EntitySet<Item> Items
	{
		get
		{
			return this._Items;
		}
		set
		{
			this._Items.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_NormativesItem", Storage="_NormativesItems", ThisKey="ID", OtherKey="UnitID")]
	public EntitySet<NormativesItem> NormativesItems
	{
		get
		{
			return this._NormativesItems;
		}
		set
		{
			this._NormativesItems.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Unit = this;
	}
	
	private void detach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Unit = null;
	}
	
	private void attach_NormativesItems(NormativesItem entity)
	{
		this.SendPropertyChanging();
		entity.Unit = this;
	}
	
	private void detach_NormativesItems(NormativesItem entity)
	{
		this.SendPropertyChanging();
		entity.Unit = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLogs")]
public partial class UserLog : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _UserName;
	
	private string _Password;
	
	private string _Page;
	
	private string _DataTable;
	
	private string _IpAddress;
	
	private string _Description;
	
	private System.DateTime _Date;
	
	private int _ActionID;
	
	private int _CompanyID;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPageChanging(string value);
    partial void OnPageChanged();
    partial void OnDataTableChanging(string value);
    partial void OnDataTableChanged();
    partial void OnIpAddressChanging(string value);
    partial void OnIpAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public UserLog()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(10)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Page", DbType="NVarChar(350) NOT NULL", CanBeNull=false)]
	public string Page
	{
		get
		{
			return this._Page;
		}
		set
		{
			if ((this._Page != value))
			{
				this.OnPageChanging(value);
				this.SendPropertyChanging();
				this._Page = value;
				this.SendPropertyChanged("Page");
				this.OnPageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTable", DbType="NVarChar(150)")]
	public string DataTable
	{
		get
		{
			return this._DataTable;
		}
		set
		{
			if ((this._DataTable != value))
			{
				this.OnDataTableChanging(value);
				this.SendPropertyChanging();
				this._DataTable = value;
				this.SendPropertyChanged("DataTable");
				this.OnDataTableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpAddress", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string IpAddress
	{
		get
		{
			return this._IpAddress;
		}
		set
		{
			if ((this._IpAddress != value))
			{
				this.OnIpAddressChanging(value);
				this.SendPropertyChanging();
				this._IpAddress = value;
				this.SendPropertyChanged("IpAddress");
				this.OnIpAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="Int NOT NULL")]
	public int ActionID
	{
		get
		{
			return this._ActionID;
		}
		set
		{
			if ((this._ActionID != value))
			{
				this.OnActionIDChanging(value);
				this.SendPropertyChanging();
				this._ActionID = value;
				this.SendPropertyChanged("ActionID");
				this.OnActionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VariableTypes")]
public partial class VariableType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private string _CSintakse;
	
	private EntitySet<EntryControl> _EntryControls;
	
	private EntitySet<Parameter> _Parameters;
	
	private EntitySet<SalaryParameter> _SalaryParameters;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCSintakseChanging(string value);
    partial void OnCSintakseChanged();
    #endregion
	
	public VariableType()
	{
		this._EntryControls = new EntitySet<EntryControl>(new Action<EntryControl>(this.attach_EntryControls), new Action<EntryControl>(this.detach_EntryControls));
		this._Parameters = new EntitySet<Parameter>(new Action<Parameter>(this.attach_Parameters), new Action<Parameter>(this.detach_Parameters));
		this._SalaryParameters = new EntitySet<SalaryParameter>(new Action<SalaryParameter>(this.attach_SalaryParameters), new Action<SalaryParameter>(this.detach_SalaryParameters));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CSintakse", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string CSintakse
	{
		get
		{
			return this._CSintakse;
		}
		set
		{
			if ((this._CSintakse != value))
			{
				this.OnCSintakseChanging(value);
				this.SendPropertyChanging();
				this._CSintakse = value;
				this.SendPropertyChanged("CSintakse");
				this.OnCSintakseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VariableType_EntryControl", Storage="_EntryControls", ThisKey="ID", OtherKey="VariableTypeID")]
	public EntitySet<EntryControl> EntryControls
	{
		get
		{
			return this._EntryControls;
		}
		set
		{
			this._EntryControls.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VariableType_Parameter", Storage="_Parameters", ThisKey="ID", OtherKey="VariableTypeID")]
	public EntitySet<Parameter> Parameters
	{
		get
		{
			return this._Parameters;
		}
		set
		{
			this._Parameters.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VariableType_SalaryParameter", Storage="_SalaryParameters", ThisKey="ID", OtherKey="VariableTypeID")]
	public EntitySet<SalaryParameter> SalaryParameters
	{
		get
		{
			return this._SalaryParameters;
		}
		set
		{
			this._SalaryParameters.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EntryControls(EntryControl entity)
	{
		this.SendPropertyChanging();
		entity.VariableType = this;
	}
	
	private void detach_EntryControls(EntryControl entity)
	{
		this.SendPropertyChanging();
		entity.VariableType = null;
	}
	
	private void attach_Parameters(Parameter entity)
	{
		this.SendPropertyChanging();
		entity.VariableType = this;
	}
	
	private void detach_Parameters(Parameter entity)
	{
		this.SendPropertyChanging();
		entity.VariableType = null;
	}
	
	private void attach_SalaryParameters(SalaryParameter entity)
	{
		this.SendPropertyChanging();
		entity.VariableType = this;
	}
	
	private void detach_SalaryParameters(SalaryParameter entity)
	{
		this.SendPropertyChanging();
		entity.VariableType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Withholdings")]
public partial class Withholding : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _EmployeeID;
	
	private string _Code;
	
	private string _Name;
	
	private string _DocumentNumber;
	
	private int _ClientID;
	
	private decimal _TotalCost;
	
	private decimal _MonthlyCost;
	
	private System.DateTime _FromDate;
	
	private System.DateTime _ToDate;
	
	private bool _IsAutomaticRecord;
	
	private bool _IsPaid;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<MonthlyWithholding> _MonthlyWithholdings;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Employee> _Employee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnTotalCostChanging(decimal value);
    partial void OnTotalCostChanged();
    partial void OnMonthlyCostChanging(decimal value);
    partial void OnMonthlyCostChanged();
    partial void OnFromDateChanging(System.DateTime value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.DateTime value);
    partial void OnToDateChanged();
    partial void OnIsAutomaticRecordChanging(bool value);
    partial void OnIsAutomaticRecordChanged();
    partial void OnIsPaidChanging(bool value);
    partial void OnIsPaidChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Withholding()
	{
		this._MonthlyWithholdings = new EntitySet<MonthlyWithholding>(new Action<MonthlyWithholding>(this.attach_MonthlyWithholdings), new Action<MonthlyWithholding>(this.detach_MonthlyWithholdings));
		this._Client = default(EntityRef<Client>);
		this._Company = default(EntityRef<Company>);
		this._Employee = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
	public int EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string DocumentNumber
	{
		get
		{
			return this._DocumentNumber;
		}
		set
		{
			if ((this._DocumentNumber != value))
			{
				this.OnDocumentNumberChanging(value);
				this.SendPropertyChanging();
				this._DocumentNumber = value;
				this.SendPropertyChanged("DocumentNumber");
				this.OnDocumentNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
	public int ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal TotalCost
	{
		get
		{
			return this._TotalCost;
		}
		set
		{
			if ((this._TotalCost != value))
			{
				this.OnTotalCostChanging(value);
				this.SendPropertyChanging();
				this._TotalCost = value;
				this.SendPropertyChanged("TotalCost");
				this.OnTotalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthlyCost", DbType="Decimal(18,2) NOT NULL")]
	public decimal MonthlyCost
	{
		get
		{
			return this._MonthlyCost;
		}
		set
		{
			if ((this._MonthlyCost != value))
			{
				this.OnMonthlyCostChanging(value);
				this.SendPropertyChanging();
				this._MonthlyCost = value;
				this.SendPropertyChanged("MonthlyCost");
				this.OnMonthlyCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="DateTime NOT NULL")]
	public System.DateTime FromDate
	{
		get
		{
			return this._FromDate;
		}
		set
		{
			if ((this._FromDate != value))
			{
				this.OnFromDateChanging(value);
				this.SendPropertyChanging();
				this._FromDate = value;
				this.SendPropertyChanged("FromDate");
				this.OnFromDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="DateTime NOT NULL")]
	public System.DateTime ToDate
	{
		get
		{
			return this._ToDate;
		}
		set
		{
			if ((this._ToDate != value))
			{
				this.OnToDateChanging(value);
				this.SendPropertyChanging();
				this._ToDate = value;
				this.SendPropertyChanged("ToDate");
				this.OnToDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAutomaticRecord", DbType="Bit NOT NULL")]
	public bool IsAutomaticRecord
	{
		get
		{
			return this._IsAutomaticRecord;
		}
		set
		{
			if ((this._IsAutomaticRecord != value))
			{
				this.OnIsAutomaticRecordChanging(value);
				this.SendPropertyChanging();
				this._IsAutomaticRecord = value;
				this.SendPropertyChanged("IsAutomaticRecord");
				this.OnIsAutomaticRecordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaid", DbType="Bit NOT NULL")]
	public bool IsPaid
	{
		get
		{
			return this._IsPaid;
		}
		set
		{
			if ((this._IsPaid != value))
			{
				this.OnIsPaidChanging(value);
				this.SendPropertyChanging();
				this._IsPaid = value;
				this.SendPropertyChanged("IsPaid");
				this.OnIsPaidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Withholding_MonthlyWithholding", Storage="_MonthlyWithholdings", ThisKey="ID", OtherKey="WithholdingID")]
	public EntitySet<MonthlyWithholding> MonthlyWithholdings
	{
		get
		{
			return this._MonthlyWithholdings;
		}
		set
		{
			this._MonthlyWithholdings.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Withholding", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.Withholdings.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.Withholdings.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(int);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Withholding", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Withholdings.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Withholdings.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Withholding", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Withholdings.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Withholdings.Add(this);
					this._EmployeeID = value.ID;
				}
				else
				{
					this._EmployeeID = default(int);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MonthlyWithholdings(MonthlyWithholding entity)
	{
		this.SendPropertyChanging();
		entity.Withholding = this;
	}
	
	private void detach_MonthlyWithholdings(MonthlyWithholding entity)
	{
		this.SendPropertyChanging();
		entity.Withholding = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkPositions")]
public partial class WorkPosition : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private string _Name;
	
	private System.Nullable<int> _CompanyID;
	
	private EntitySet<Employee> _Employees;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public WorkPosition()
	{
		this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
	public System.Nullable<int> CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkPosition_Employee", Storage="_Employees", ThisKey="ID", OtherKey="WorkPositionID")]
	public EntitySet<Employee> Employees
	{
		get
		{
			return this._Employees;
		}
		set
		{
			this._Employees.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_WorkPosition", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.WorkPositions.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.WorkPositions.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.WorkPosition = this;
	}
	
	private void detach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.WorkPosition = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _UserName;
	
	private string _Password;
	
	private int _WorkUnitID;
	
	private int _RoleID;
	
	private EntitySet<Account> _Accounts;
	
	private EntitySet<CompanyAccountsUser> _CompanyAccountsUsers;
	
	private EntityRef<Role> _Role;
	
	private EntityRef<WorkUnit> _WorkUnit;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnWorkUnitIDChanging(int value);
    partial void OnWorkUnitIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
	
	public User()
	{
		this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
		this._CompanyAccountsUsers = new EntitySet<CompanyAccountsUser>(new Action<CompanyAccountsUser>(this.attach_CompanyAccountsUsers), new Action<CompanyAccountsUser>(this.detach_CompanyAccountsUsers));
		this._Role = default(EntityRef<Role>);
		this._WorkUnit = default(EntityRef<WorkUnit>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(6) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkUnitID", DbType="Int NOT NULL")]
	public int WorkUnitID
	{
		get
		{
			return this._WorkUnitID;
		}
		set
		{
			if ((this._WorkUnitID != value))
			{
				if (this._WorkUnit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWorkUnitIDChanging(value);
				this.SendPropertyChanging();
				this._WorkUnitID = value;
				this.SendPropertyChanged("WorkUnitID");
				this.OnWorkUnitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
	public int RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIDChanging(value);
				this.SendPropertyChanging();
				this._RoleID = value;
				this.SendPropertyChanged("RoleID");
				this.OnRoleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Account", Storage="_Accounts", ThisKey="ID", OtherKey="UserID")]
	public EntitySet<Account> Accounts
	{
		get
		{
			return this._Accounts;
		}
		set
		{
			this._Accounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompanyAccountsUser", Storage="_CompanyAccountsUsers", ThisKey="ID", OtherKey="UserID")]
	public EntitySet<CompanyAccountsUser> CompanyAccountsUsers
	{
		get
		{
			return this._CompanyAccountsUsers;
		}
		set
		{
			this._CompanyAccountsUsers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._RoleID = value.ID;
				}
				else
				{
					this._RoleID = default(int);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkUnit_User", Storage="_WorkUnit", ThisKey="WorkUnitID", OtherKey="ID", IsForeignKey=true)]
	public WorkUnit WorkUnit
	{
		get
		{
			return this._WorkUnit.Entity;
		}
		set
		{
			WorkUnit previousValue = this._WorkUnit.Entity;
			if (((previousValue != value) 
						|| (this._WorkUnit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkUnit.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._WorkUnit.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._WorkUnitID = value.ID;
				}
				else
				{
					this._WorkUnitID = default(int);
				}
				this.SendPropertyChanged("WorkUnit");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Accounts(Account entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Accounts(Account entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_CompanyAccountsUsers(CompanyAccountsUser entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_CompanyAccountsUsers(CompanyAccountsUser entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

#pragma warning restore 1591
