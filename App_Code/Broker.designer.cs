#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;


namespace Broker.DataAccess
{
    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "ASUCBroker")]
    public partial class DataClassesDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertAccountFactureItemPolicyItem(AccountFactureItemPolicyItem instance);
        partial void UpdateAccountFactureItemPolicyItem(AccountFactureItemPolicyItem instance);
        partial void DeleteAccountFactureItemPolicyItem(AccountFactureItemPolicyItem instance);
        partial void InsertAccountFactureItem(AccountFactureItem instance);
        partial void UpdateAccountFactureItem(AccountFactureItem instance);
        partial void DeleteAccountFactureItem(AccountFactureItem instance);
        partial void InsertAccountFacture(AccountFacture instance);
        partial void UpdateAccountFacture(AccountFacture instance);
        partial void DeleteAccountFacture(AccountFacture instance);
        partial void InsertAccreditationInsuranceType(AccreditationInsuranceType instance);
        partial void UpdateAccreditationInsuranceType(AccreditationInsuranceType instance);
        partial void DeleteAccreditationInsuranceType(AccreditationInsuranceType instance);
        partial void InsertAccreditation(Accreditation instance);
        partial void UpdateAccreditation(Accreditation instance);
        partial void DeleteAccreditation(Accreditation instance);
        partial void InsertAppartment(Appartment instance);
        partial void UpdateAppartment(Appartment instance);
        partial void DeleteAppartment(Appartment instance);
        partial void InsertAttachment(Attachment instance);
        partial void UpdateAttachment(Attachment instance);
        partial void DeleteAttachment(Attachment instance);
        partial void InsertBankCreditCard(BankCreditCard instance);
        partial void UpdateBankCreditCard(BankCreditCard instance);
        partial void DeleteBankCreditCard(BankCreditCard instance);
        partial void InsertBank(Bank instance);
        partial void UpdateBank(Bank instance);
        partial void DeleteBank(Bank instance);
        partial void InsertBankslipItem(BankslipItem instance);
        partial void UpdateBankslipItem(BankslipItem instance);
        partial void DeleteBankslipItem(BankslipItem instance);
        partial void InsertBankslip(Bankslip instance);
        partial void UpdateBankslip(Bankslip instance);
        partial void DeleteBankslip(Bankslip instance);
        partial void InsertBranch(Branch instance);
        partial void UpdateBranch(Branch instance);
        partial void DeleteBranch(Branch instance);
        partial void InsertBrokerageBrokerageType(BrokerageBrokerageType instance);
        partial void UpdateBrokerageBrokerageType(BrokerageBrokerageType instance);
        partial void DeleteBrokerageBrokerageType(BrokerageBrokerageType instance);
        partial void InsertBrokerageOperator(BrokerageOperator instance);
        partial void UpdateBrokerageOperator(BrokerageOperator instance);
        partial void DeleteBrokerageOperator(BrokerageOperator instance);
        partial void InsertBrokerageParameter(BrokerageParameter instance);
        partial void UpdateBrokerageParameter(BrokerageParameter instance);
        partial void DeleteBrokerageParameter(BrokerageParameter instance);
        partial void InsertBrokerageParametersBrokerageType(BrokerageParametersBrokerageType instance);
        partial void UpdateBrokerageParametersBrokerageType(BrokerageParametersBrokerageType instance);
        partial void DeleteBrokerageParametersBrokerageType(BrokerageParametersBrokerageType instance);
        partial void InsertBrokerage(Brokerage instance);
        partial void UpdateBrokerage(Brokerage instance);
        partial void DeleteBrokerage(Brokerage instance);
        partial void InsertBrokeragesForMarketingAgent(BrokeragesForMarketingAgent instance);
        partial void UpdateBrokeragesForMarketingAgent(BrokeragesForMarketingAgent instance);
        partial void DeleteBrokeragesForMarketingAgent(BrokeragesForMarketingAgent instance);
        partial void InsertBrokerageSlipInsuranceSubType(BrokerageSlipInsuranceSubType instance);
        partial void UpdateBrokerageSlipInsuranceSubType(BrokerageSlipInsuranceSubType instance);
        partial void DeleteBrokerageSlipInsuranceSubType(BrokerageSlipInsuranceSubType instance);
        partial void InsertBrokerageSlipPolicyItem(BrokerageSlipPolicyItem instance);
        partial void UpdateBrokerageSlipPolicyItem(BrokerageSlipPolicyItem instance);
        partial void DeleteBrokerageSlipPolicyItem(BrokerageSlipPolicyItem instance);
        partial void InsertBrokerageSlip(BrokerageSlip instance);
        partial void UpdateBrokerageSlip(BrokerageSlip instance);
        partial void DeleteBrokerageSlip(BrokerageSlip instance);
        partial void InsertBrokerageSpecification(BrokerageSpecification instance);
        partial void UpdateBrokerageSpecification(BrokerageSpecification instance);
        partial void DeleteBrokerageSpecification(BrokerageSpecification instance);
        partial void InsertBrokerageTypeBrokerageOperator(BrokerageTypeBrokerageOperator instance);
        partial void UpdateBrokerageTypeBrokerageOperator(BrokerageTypeBrokerageOperator instance);
        partial void DeleteBrokerageTypeBrokerageOperator(BrokerageTypeBrokerageOperator instance);
        partial void InsertBrokerageType(BrokerageType instance);
        partial void UpdateBrokerageType(BrokerageType instance);
        partial void DeleteBrokerageType(BrokerageType instance);
        partial void InsertBrokerHouseInformation(BrokerHouseInformation instance);
        partial void UpdateBrokerHouseInformation(BrokerHouseInformation instance);
        partial void DeleteBrokerHouseInformation(BrokerHouseInformation instance);
        partial void InsertCashReportItem(CashReportItem instance);
        partial void UpdateCashReportItem(CashReportItem instance);
        partial void DeleteCashReportItem(CashReportItem instance);
        partial void InsertCashReport(CashReport instance);
        partial void UpdateCashReport(CashReport instance);
        partial void DeleteCashReport(CashReport instance);
        partial void InsertCashReportStatuse(CashReportStatuse instance);
        partial void UpdateCashReportStatuse(CashReportStatuse instance);
        partial void DeleteCashReportStatuse(CashReportStatuse instance);
        partial void InsertClientAccount(ClientAccount instance);
        partial void UpdateClientAccount(ClientAccount instance);
        partial void DeleteClientAccount(ClientAccount instance);
        partial void InsertClient(Client instance);
        partial void UpdateClient(Client instance);
        partial void DeleteClient(Client instance);
        partial void InsertControlAppropriateInsuranceSubType(ControlAppropriateInsuranceSubType instance);
        partial void UpdateControlAppropriateInsuranceSubType(ControlAppropriateInsuranceSubType instance);
        partial void DeleteControlAppropriateInsuranceSubType(ControlAppropriateInsuranceSubType instance);
        partial void InsertControlBindableValue(ControlBindableValue instance);
        partial void UpdateControlBindableValue(ControlBindableValue instance);
        partial void DeleteControlBindableValue(ControlBindableValue instance);
        partial void InsertControl(Control instance);
        partial void UpdateControl(Control instance);
        partial void DeleteControl(Control instance);
        partial void InsertControlsSpecialType(ControlsSpecialType instance);
        partial void UpdateControlsSpecialType(ControlsSpecialType instance);
        partial void DeleteControlsSpecialType(ControlsSpecialType instance);
        partial void InsertCreditCard(CreditCard instance);
        partial void UpdateCreditCard(CreditCard instance);
        partial void DeleteCreditCard(CreditCard instance);
        partial void InsertDamage(Damage instance);
        partial void UpdateDamage(Damage instance);
        partial void DeleteDamage(Damage instance);
        partial void InsertDDVType(DDVType instance);
        partial void UpdateDDVType(DDVType instance);
        partial void DeleteDDVType(DDVType instance);
        partial void InsertDeal(Deal instance);
        partial void UpdateDeal(Deal instance);
        partial void DeleteDeal(Deal instance);
        partial void InsertDistributionDocType(DistributionDocType instance);
        partial void UpdateDistributionDocType(DistributionDocType instance);
        partial void DeleteDistributionDocType(DistributionDocType instance);
        partial void InsertDistributionDocumentItem(DistributionDocumentItem instance);
        partial void UpdateDistributionDocumentItem(DistributionDocumentItem instance);
        partial void DeleteDistributionDocumentItem(DistributionDocumentItem instance);
        partial void InsertDistributionDocument(DistributionDocument instance);
        partial void UpdateDistributionDocument(DistributionDocument instance);
        partial void DeleteDistributionDocument(DistributionDocument instance);
        partial void InsertDistributionDocumentStatuse(DistributionDocumentStatuse instance);
        partial void UpdateDistributionDocumentStatuse(DistributionDocumentStatuse instance);
        partial void DeleteDistributionDocumentStatuse(DistributionDocumentStatuse instance);
        partial void InsertDistributionDocumentType(DistributionDocumentType instance);
        partial void UpdateDistributionDocumentType(DistributionDocumentType instance);
        partial void DeleteDistributionDocumentType(DistributionDocumentType instance);
        partial void InsertDistributionRoute(DistributionRoute instance);
        partial void UpdateDistributionRoute(DistributionRoute instance);
        partial void DeleteDistributionRoute(DistributionRoute instance);
        partial void InsertDistribution(Distribution instance);
        partial void UpdateDistribution(Distribution instance);
        partial void DeleteDistribution(Distribution instance);
        partial void InsertDistributionStatuse(DistributionStatuse instance);
        partial void UpdateDistributionStatuse(DistributionStatuse instance);
        partial void DeleteDistributionStatuse(DistributionStatuse instance);
        partial void InsertDocumentSubType(DocumentSubType instance);
        partial void UpdateDocumentSubType(DocumentSubType instance);
        partial void DeleteDocumentSubType(DocumentSubType instance);
        partial void InsertDocumentType(DocumentType instance);
        partial void UpdateDocumentType(DocumentType instance);
        partial void DeleteDocumentType(DocumentType instance);
        partial void InsertFacCollPaidValuesPerInsSubType(FacCollPaidValuesPerInsSubType instance);
        partial void UpdateFacCollPaidValuesPerInsSubType(FacCollPaidValuesPerInsSubType instance);
        partial void DeleteFacCollPaidValuesPerInsSubType(FacCollPaidValuesPerInsSubType instance);
        partial void InsertFactureCollectedPaidValue(FactureCollectedPaidValue instance);
        partial void UpdateFactureCollectedPaidValue(FactureCollectedPaidValue instance);
        partial void DeleteFactureCollectedPaidValue(FactureCollectedPaidValue instance);
        partial void InsertFactureItem(FactureItem instance);
        partial void UpdateFactureItem(FactureItem instance);
        partial void DeleteFactureItem(FactureItem instance);
        partial void InsertFacturePayment(FacturePayment instance);
        partial void UpdateFacturePayment(FacturePayment instance);
        partial void DeleteFacturePayment(FacturePayment instance);
        partial void InsertFacture(Facture instance);
        partial void UpdateFacture(Facture instance);
        partial void DeleteFacture(Facture instance);
        partial void InsertFactureSpecification(FactureSpecification instance);
        partial void UpdateFactureSpecification(FactureSpecification instance);
        partial void DeleteFactureSpecification(FactureSpecification instance);
        partial void InsertFieldType(FieldType instance);
        partial void UpdateFieldType(FieldType instance);
        partial void DeleteFieldType(FieldType instance);
        partial void InsertFunction(Function instance);
        partial void UpdateFunction(Function instance);
        partial void DeleteFunction(Function instance);
        partial void InsertIncomingFacturePolicyItem(IncomingFacturePolicyItem instance);
        partial void UpdateIncomingFacturePolicyItem(IncomingFacturePolicyItem instance);
        partial void DeleteIncomingFacturePolicyItem(IncomingFacturePolicyItem instance);
        partial void InsertIncomingFacture(IncomingFacture instance);
        partial void UpdateIncomingFacture(IncomingFacture instance);
        partial void DeleteIncomingFacture(IncomingFacture instance);
        partial void InsertIncomingFactureType(IncomingFactureType instance);
        partial void UpdateIncomingFactureType(IncomingFactureType instance);
        partial void DeleteIncomingFactureType(IncomingFactureType instance);
        partial void InsertInsuranceCompany(InsuranceCompany instance);
        partial void UpdateInsuranceCompany(InsuranceCompany instance);
        partial void DeleteInsuranceCompany(InsuranceCompany instance);
        partial void InsertInsuranceSubType(InsuranceSubType instance);
        partial void UpdateInsuranceSubType(InsuranceSubType instance);
        partial void DeleteInsuranceSubType(InsuranceSubType instance);
        partial void InsertInsuranceType(InsuranceType instance);
        partial void UpdateInsuranceType(InsuranceType instance);
        partial void DeleteInsuranceType(InsuranceType instance);
        partial void InsertInusranceCompanyInsuranceSubTypeDescription(InusranceCompanyInsuranceSubTypeDescription instance);
        partial void UpdateInusranceCompanyInsuranceSubTypeDescription(InusranceCompanyInsuranceSubTypeDescription instance);
        partial void DeleteInusranceCompanyInsuranceSubTypeDescription(InusranceCompanyInsuranceSubTypeDescription instance);
        partial void InsertLifeDealBrokerage(LifeDealBrokerage instance);
        partial void UpdateLifeDealBrokerage(LifeDealBrokerage instance);
        partial void DeleteLifeDealBrokerage(LifeDealBrokerage instance);
        partial void InsertLifeDeal(LifeDeal instance);
        partial void UpdateLifeDeal(LifeDeal instance);
        partial void DeleteLifeDeal(LifeDeal instance);
        partial void InsertLifePolicy(LifePolicy instance);
        partial void UpdateLifePolicy(LifePolicy instance);
        partial void DeleteLifePolicy(LifePolicy instance);
        partial void InsertLifePolicyBrokerage(LifePolicyBrokerage instance);
        partial void UpdateLifePolicyBrokerage(LifePolicyBrokerage instance);
        partial void DeleteLifePolicyBrokerage(LifePolicyBrokerage instance);
        partial void InsertLifePolicyFactureItem(LifePolicyFactureItem instance);
        partial void UpdateLifePolicyFactureItem(LifePolicyFactureItem instance);
        partial void DeleteLifePolicyFactureItem(LifePolicyFactureItem instance);
        partial void InsertLifePolicyPremiumValue(LifePolicyPremiumValue instance);
        partial void UpdateLifePolicyPremiumValue(LifePolicyPremiumValue instance);
        partial void DeleteLifePolicyPremiumValue(LifePolicyPremiumValue instance);
        partial void InsertLoginLog(LoginLog instance);
        partial void UpdateLoginLog(LoginLog instance);
        partial void DeleteLoginLog(LoginLog instance);
        partial void InsertMunicipality(Municipality instance);
        partial void UpdateMunicipality(Municipality instance);
        partial void DeleteMunicipality(Municipality instance);
        partial void InsertOfferItem(OfferItem instance);
        partial void UpdateOfferItem(OfferItem instance);
        partial void DeleteOfferItem(OfferItem instance);
        partial void InsertOffer(Offer instance);
        partial void UpdateOffer(Offer instance);
        partial void DeleteOffer(Offer instance);
        partial void InsertOrderItem(OrderItem instance);
        partial void UpdateOrderItem(OrderItem instance);
        partial void DeleteOrderItem(OrderItem instance);
        partial void InsertOrder(Order instance);
        partial void UpdateOrder(Order instance);
        partial void DeleteOrder(Order instance);
        partial void InsertPacket(Packet instance);
        partial void UpdatePacket(Packet instance);
        partial void DeletePacket(Packet instance);
        partial void InsertPacketsInsuranceSubType(PacketsInsuranceSubType instance);
        partial void UpdatePacketsInsuranceSubType(PacketsInsuranceSubType instance);
        partial void DeletePacketsInsuranceSubType(PacketsInsuranceSubType instance);
        partial void InsertParameter(Parameter instance);
        partial void UpdateParameter(Parameter instance);
        partial void DeleteParameter(Parameter instance);
        partial void InsertPaymentItem(PaymentItem instance);
        partial void UpdatePaymentItem(PaymentItem instance);
        partial void DeletePaymentItem(PaymentItem instance);
        partial void InsertPayment(Payment instance);
        partial void UpdatePayment(Payment instance);
        partial void DeletePayment(Payment instance);
        partial void InsertPaymentsPerInsSubType(PaymentsPerInsSubType instance);
        partial void UpdatePaymentsPerInsSubType(PaymentsPerInsSubType instance);
        partial void DeletePaymentsPerInsSubType(PaymentsPerInsSubType instance);
        partial void InsertPaymentType(PaymentType instance);
        partial void UpdatePaymentType(PaymentType instance);
        partial void DeletePaymentType(PaymentType instance);
        partial void InsertPlace(Place instance);
        partial void UpdatePlace(Place instance);
        partial void DeletePlace(Place instance);
        partial void InsertPolicy(Policy instance);
        partial void UpdatePolicy(Policy instance);
        partial void DeletePolicy(Policy instance);
        partial void InsertPolicyExtendInformation(PolicyExtendInformation instance);
        partial void UpdatePolicyExtendInformation(PolicyExtendInformation instance);
        partial void DeletePolicyExtendInformation(PolicyExtendInformation instance);
        partial void InsertPolicyIncomeFactureStatuse(PolicyIncomeFactureStatuse instance);
        partial void UpdatePolicyIncomeFactureStatuse(PolicyIncomeFactureStatuse instance);
        partial void DeletePolicyIncomeFactureStatuse(PolicyIncomeFactureStatuse instance);
        partial void InsertPolicyItemFactureItem(PolicyItemFactureItem instance);
        partial void UpdatePolicyItemFactureItem(PolicyItemFactureItem instance);
        partial void DeletePolicyItemFactureItem(PolicyItemFactureItem instance);
        partial void InsertPolicyItem(PolicyItem instance);
        partial void UpdatePolicyItem(PolicyItem instance);
        partial void DeletePolicyItem(PolicyItem instance);
        partial void InsertProvisionRate(ProvisionRate instance);
        partial void UpdateProvisionRate(ProvisionRate instance);
        partial void DeleteProvisionRate(ProvisionRate instance);
        partial void InsertRateDealInsuranceSubType(RateDealInsuranceSubType instance);
        partial void UpdateRateDealInsuranceSubType(RateDealInsuranceSubType instance);
        partial void DeleteRateDealInsuranceSubType(RateDealInsuranceSubType instance);
        partial void InsertRateDeal(RateDeal instance);
        partial void UpdateRateDeal(RateDeal instance);
        partial void DeleteRateDeal(RateDeal instance);
        partial void InsertRate(Rate instance);
        partial void UpdateRate(Rate instance);
        partial void DeleteRate(Rate instance);
        partial void InsertRestrictionsRestrictionRollBack(RestrictionsRestrictionRollBack instance);
        partial void UpdateRestrictionsRestrictionRollBack(RestrictionsRestrictionRollBack instance);
        partial void DeleteRestrictionsRestrictionRollBack(RestrictionsRestrictionRollBack instance);
        partial void InsertRestrictionsRollBackDistribution(RestrictionsRollBackDistribution instance);
        partial void UpdateRestrictionsRollBackDistribution(RestrictionsRollBackDistribution instance);
        partial void DeleteRestrictionsRollBackDistribution(RestrictionsRollBackDistribution instance);
        partial void InsertRightRestrictionDistribution(RightRestrictionDistribution instance);
        partial void UpdateRightRestrictionDistribution(RightRestrictionDistribution instance);
        partial void DeleteRightRestrictionDistribution(RightRestrictionDistribution instance);
        partial void InsertRightRestriction(RightRestriction instance);
        partial void UpdateRightRestriction(RightRestriction instance);
        partial void DeleteRightRestriction(RightRestriction instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertRolesFunction(RolesFunction instance);
        partial void UpdateRolesFunction(RolesFunction instance);
        partial void DeleteRolesFunction(RolesFunction instance);
        partial void InsertRollBackDistributionItemPolicyItem(RollBackDistributionItemPolicyItem instance);
        partial void UpdateRollBackDistributionItemPolicyItem(RollBackDistributionItemPolicyItem instance);
        partial void DeleteRollBackDistributionItemPolicyItem(RollBackDistributionItemPolicyItem instance);
        partial void InsertRollBackDistributionItem(RollBackDistributionItem instance);
        partial void UpdateRollBackDistributionItem(RollBackDistributionItem instance);
        partial void DeleteRollBackDistributionItem(RollBackDistributionItem instance);
        partial void InsertRollBackDistributionParentship(RollBackDistributionParentship instance);
        partial void UpdateRollBackDistributionParentship(RollBackDistributionParentship instance);
        partial void DeleteRollBackDistributionParentship(RollBackDistributionParentship instance);
        partial void InsertRollBackDistribution(RollBackDistribution instance);
        partial void UpdateRollBackDistribution(RollBackDistribution instance);
        partial void DeleteRollBackDistribution(RollBackDistribution instance);
        partial void InsertRollBackDistributionStatuse(RollBackDistributionStatuse instance);
        partial void UpdateRollBackDistributionStatuse(RollBackDistributionStatuse instance);
        partial void DeleteRollBackDistributionStatuse(RollBackDistributionStatuse instance);
        partial void InsertService(Service instance);
        partial void UpdateService(Service instance);
        partial void DeleteService(Service instance);
        partial void InsertSlip(Slip instance);
        partial void UpdateSlip(Slip instance);
        partial void DeleteSlip(Slip instance);
        partial void InsertSpecialFieldType(SpecialFieldType instance);
        partial void UpdateSpecialFieldType(SpecialFieldType instance);
        partial void DeleteSpecialFieldType(SpecialFieldType instance);
        partial void InsertState(State instance);
        partial void UpdateState(State instance);
        partial void DeleteState(State instance);
        partial void InsertStatuse(Statuse instance);
        partial void UpdateStatuse(Statuse instance);
        partial void DeleteStatuse(Statuse instance);
        partial void InsertTemporaryDistribution(TemporaryDistribution instance);
        partial void UpdateTemporaryDistribution(TemporaryDistribution instance);
        partial void DeleteTemporaryDistribution(TemporaryDistribution instance);
        partial void InsertTemporaryPolicy(TemporaryPolicy instance);
        partial void UpdateTemporaryPolicy(TemporaryPolicy instance);
        partial void DeleteTemporaryPolicy(TemporaryPolicy instance);
        partial void InsertTraveler(Traveler instance);
        partial void UpdateTraveler(Traveler instance);
        partial void DeleteTraveler(Traveler instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        partial void InsertUsersFunction(UsersFunction instance);
        partial void UpdateUsersFunction(UsersFunction instance);
        partial void DeleteUsersFunction(UsersFunction instance);
        partial void InsertUsersParentship(UsersParentship instance);
        partial void UpdateUsersParentship(UsersParentship instance);
        partial void DeleteUsersParentship(UsersParentship instance);
        partial void InsertUsersWebPage(UsersWebPage instance);
        partial void UpdateUsersWebPage(UsersWebPage instance);
        partial void DeleteUsersWebPage(UsersWebPage instance);
        partial void InsertValidator(Validator instance);
        partial void UpdateValidator(Validator instance);
        partial void DeleteValidator(Validator instance);
        partial void InsertVariableType(VariableType instance);
        partial void UpdateVariableType(VariableType instance);
        partial void DeleteVariableType(VariableType instance);
        partial void InsertVehicle(Vehicle instance);
        partial void UpdateVehicle(Vehicle instance);
        partial void DeleteVehicle(Vehicle instance);
        partial void InsertWebPage(WebPage instance);
        partial void UpdateWebPage(WebPage instance);
        partial void DeleteWebPage(WebPage instance);
        #endregion

        public DataClassesDataContext() :
            base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ASUCBrokerConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public DataClassesDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public DataClassesDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<ViewRollBacksDeliveredInCompany> ViewRollBacksDeliveredInCompanies
        {
            get
            {
                return this.GetTable<ViewRollBacksDeliveredInCompany>();
            }
        }

        public System.Data.Linq.Table<AccountFactureItemPolicyItem> AccountFactureItemPolicyItems
        {
            get
            {
                return this.GetTable<AccountFactureItemPolicyItem>();
            }
        }

        public System.Data.Linq.Table<AccountFactureItem> AccountFactureItems
        {
            get
            {
                return this.GetTable<AccountFactureItem>();
            }
        }

        public System.Data.Linq.Table<AccountFacture> AccountFactures
        {
            get
            {
                return this.GetTable<AccountFacture>();
            }
        }

        public System.Data.Linq.Table<AccreditationInsuranceType> AccreditationInsuranceTypes
        {
            get
            {
                return this.GetTable<AccreditationInsuranceType>();
            }
        }

        public System.Data.Linq.Table<Accreditation> Accreditations
        {
            get
            {
                return this.GetTable<Accreditation>();
            }
        }

        public System.Data.Linq.Table<Appartment> Appartments
        {
            get
            {
                return this.GetTable<Appartment>();
            }
        }

        public System.Data.Linq.Table<Attachment> Attachments
        {
            get
            {
                return this.GetTable<Attachment>();
            }
        }

        public System.Data.Linq.Table<BankCreditCard> BankCreditCards
        {
            get
            {
                return this.GetTable<BankCreditCard>();
            }
        }

        public System.Data.Linq.Table<Bank> Banks
        {
            get
            {
                return this.GetTable<Bank>();
            }
        }

        public System.Data.Linq.Table<BankslipItem> BankslipItems
        {
            get
            {
                return this.GetTable<BankslipItem>();
            }
        }

        public System.Data.Linq.Table<Bankslip> Bankslips
        {
            get
            {
                return this.GetTable<Bankslip>();
            }
        }

        public System.Data.Linq.Table<Branch> Branches
        {
            get
            {
                return this.GetTable<Branch>();
            }
        }

        public System.Data.Linq.Table<BrokerageBrokerageType> BrokerageBrokerageTypes
        {
            get
            {
                return this.GetTable<BrokerageBrokerageType>();
            }
        }

        public System.Data.Linq.Table<BrokerageOperator> BrokerageOperators
        {
            get
            {
                return this.GetTable<BrokerageOperator>();
            }
        }

        public System.Data.Linq.Table<BrokerageParameter> BrokerageParameters
        {
            get
            {
                return this.GetTable<BrokerageParameter>();
            }
        }

        public System.Data.Linq.Table<BrokerageParametersBrokerageType> BrokerageParametersBrokerageTypes
        {
            get
            {
                return this.GetTable<BrokerageParametersBrokerageType>();
            }
        }

        public System.Data.Linq.Table<Brokerage> Brokerages
        {
            get
            {
                return this.GetTable<Brokerage>();
            }
        }

        public System.Data.Linq.Table<BrokeragesForMarketingAgent> BrokeragesForMarketingAgents
        {
            get
            {
                return this.GetTable<BrokeragesForMarketingAgent>();
            }
        }

        public System.Data.Linq.Table<BrokerageSlipInsuranceSubType> BrokerageSlipInsuranceSubTypes
        {
            get
            {
                return this.GetTable<BrokerageSlipInsuranceSubType>();
            }
        }

        public System.Data.Linq.Table<BrokerageSlipPolicyItem> BrokerageSlipPolicyItems
        {
            get
            {
                return this.GetTable<BrokerageSlipPolicyItem>();
            }
        }

        public System.Data.Linq.Table<BrokerageSlip> BrokerageSlips
        {
            get
            {
                return this.GetTable<BrokerageSlip>();
            }
        }

        public System.Data.Linq.Table<BrokerageSpecification> BrokerageSpecifications
        {
            get
            {
                return this.GetTable<BrokerageSpecification>();
            }
        }

        public System.Data.Linq.Table<BrokerageTypeBrokerageOperator> BrokerageTypeBrokerageOperators
        {
            get
            {
                return this.GetTable<BrokerageTypeBrokerageOperator>();
            }
        }

        public System.Data.Linq.Table<BrokerageType> BrokerageTypes
        {
            get
            {
                return this.GetTable<BrokerageType>();
            }
        }

        public System.Data.Linq.Table<BrokerHouseInformation> BrokerHouseInformations
        {
            get
            {
                return this.GetTable<BrokerHouseInformation>();
            }
        }

        public System.Data.Linq.Table<CashReportItem> CashReportItems
        {
            get
            {
                return this.GetTable<CashReportItem>();
            }
        }

        public System.Data.Linq.Table<CashReport> CashReports
        {
            get
            {
                return this.GetTable<CashReport>();
            }
        }

        public System.Data.Linq.Table<CashReportStatuse> CashReportStatuses
        {
            get
            {
                return this.GetTable<CashReportStatuse>();
            }
        }

        public System.Data.Linq.Table<ClientAccount> ClientAccounts
        {
            get
            {
                return this.GetTable<ClientAccount>();
            }
        }

        public System.Data.Linq.Table<Client> Clients
        {
            get
            {
                return this.GetTable<Client>();
            }
        }

        public System.Data.Linq.Table<ControlAppropriateInsuranceSubType> ControlAppropriateInsuranceSubTypes
        {
            get
            {
                return this.GetTable<ControlAppropriateInsuranceSubType>();
            }
        }

        public System.Data.Linq.Table<ControlBindableValue> ControlBindableValues
        {
            get
            {
                return this.GetTable<ControlBindableValue>();
            }
        }

        public System.Data.Linq.Table<Control> Controls
        {
            get
            {
                return this.GetTable<Control>();
            }
        }

        public System.Data.Linq.Table<ControlsSpecialType> ControlsSpecialTypes
        {
            get
            {
                return this.GetTable<ControlsSpecialType>();
            }
        }

        public System.Data.Linq.Table<CreditCard> CreditCards
        {
            get
            {
                return this.GetTable<CreditCard>();
            }
        }

        public System.Data.Linq.Table<Damage> Damages
        {
            get
            {
                return this.GetTable<Damage>();
            }
        }

        public System.Data.Linq.Table<DDVType> DDVTypes
        {
            get
            {
                return this.GetTable<DDVType>();
            }
        }

        public System.Data.Linq.Table<Deal> Deals
        {
            get
            {
                return this.GetTable<Deal>();
            }
        }

        public System.Data.Linq.Table<DistributionDocType> DistributionDocTypes
        {
            get
            {
                return this.GetTable<DistributionDocType>();
            }
        }

        public System.Data.Linq.Table<DistributionDocumentItem> DistributionDocumentItems
        {
            get
            {
                return this.GetTable<DistributionDocumentItem>();
            }
        }

        public System.Data.Linq.Table<DistributionDocument> DistributionDocuments
        {
            get
            {
                return this.GetTable<DistributionDocument>();
            }
        }

        public System.Data.Linq.Table<DistributionDocumentStatuse> DistributionDocumentStatuses
        {
            get
            {
                return this.GetTable<DistributionDocumentStatuse>();
            }
        }

        public System.Data.Linq.Table<DistributionDocumentType> DistributionDocumentTypes
        {
            get
            {
                return this.GetTable<DistributionDocumentType>();
            }
        }

        public System.Data.Linq.Table<DistributionRoute> DistributionRoutes
        {
            get
            {
                return this.GetTable<DistributionRoute>();
            }
        }

        public System.Data.Linq.Table<Distribution> Distributions
        {
            get
            {
                return this.GetTable<Distribution>();
            }
        }

        public System.Data.Linq.Table<DistributionStatuse> DistributionStatuses
        {
            get
            {
                return this.GetTable<DistributionStatuse>();
            }
        }

        public System.Data.Linq.Table<DocumentSubType> DocumentSubTypes
        {
            get
            {
                return this.GetTable<DocumentSubType>();
            }
        }

        public System.Data.Linq.Table<DocumentType> DocumentTypes
        {
            get
            {
                return this.GetTable<DocumentType>();
            }
        }

        public System.Data.Linq.Table<FacCollPaidValuesPerInsSubType> FacCollPaidValuesPerInsSubTypes
        {
            get
            {
                return this.GetTable<FacCollPaidValuesPerInsSubType>();
            }
        }

        public System.Data.Linq.Table<FactureCollectedPaidValue> FactureCollectedPaidValues
        {
            get
            {
                return this.GetTable<FactureCollectedPaidValue>();
            }
        }

        public System.Data.Linq.Table<FactureItem> FactureItems
        {
            get
            {
                return this.GetTable<FactureItem>();
            }
        }

        public System.Data.Linq.Table<FacturePayment> FacturePayments
        {
            get
            {
                return this.GetTable<FacturePayment>();
            }
        }

        public System.Data.Linq.Table<Facture> Factures
        {
            get
            {
                return this.GetTable<Facture>();
            }
        }

        public System.Data.Linq.Table<FactureSpecification> FactureSpecifications
        {
            get
            {
                return this.GetTable<FactureSpecification>();
            }
        }

        public System.Data.Linq.Table<FieldType> FieldTypes
        {
            get
            {
                return this.GetTable<FieldType>();
            }
        }

        public System.Data.Linq.Table<Function> Functions
        {
            get
            {
                return this.GetTable<Function>();
            }
        }

        public System.Data.Linq.Table<IncomingFacturePolicyItem> IncomingFacturePolicyItems
        {
            get
            {
                return this.GetTable<IncomingFacturePolicyItem>();
            }
        }

        public System.Data.Linq.Table<IncomingFacture> IncomingFactures
        {
            get
            {
                return this.GetTable<IncomingFacture>();
            }
        }

        public System.Data.Linq.Table<IncomingFactureType> IncomingFactureTypes
        {
            get
            {
                return this.GetTable<IncomingFactureType>();
            }
        }

        public System.Data.Linq.Table<InsuranceCompany> InsuranceCompanies
        {
            get
            {
                return this.GetTable<InsuranceCompany>();
            }
        }

        public System.Data.Linq.Table<InsuranceSubType> InsuranceSubTypes
        {
            get
            {
                return this.GetTable<InsuranceSubType>();
            }
        }

        public System.Data.Linq.Table<InsuranceType> InsuranceTypes
        {
            get
            {
                return this.GetTable<InsuranceType>();
            }
        }

        public System.Data.Linq.Table<InusranceCompanyInsuranceSubTypeDescription> InusranceCompanyInsuranceSubTypeDescriptions
        {
            get
            {
                return this.GetTable<InusranceCompanyInsuranceSubTypeDescription>();
            }
        }

        public System.Data.Linq.Table<LifeDealBrokerage> LifeDealBrokerages
        {
            get
            {
                return this.GetTable<LifeDealBrokerage>();
            }
        }

        public System.Data.Linq.Table<LifeDeal> LifeDeals
        {
            get
            {
                return this.GetTable<LifeDeal>();
            }
        }

        public System.Data.Linq.Table<LifePolicy> LifePolicies
        {
            get
            {
                return this.GetTable<LifePolicy>();
            }
        }

        public System.Data.Linq.Table<LifePolicyBrokerage> LifePolicyBrokerages
        {
            get
            {
                return this.GetTable<LifePolicyBrokerage>();
            }
        }

        public System.Data.Linq.Table<LifePolicyFactureItem> LifePolicyFactureItems
        {
            get
            {
                return this.GetTable<LifePolicyFactureItem>();
            }
        }

        public System.Data.Linq.Table<LifePolicyPremiumValue> LifePolicyPremiumValues
        {
            get
            {
                return this.GetTable<LifePolicyPremiumValue>();
            }
        }

        public System.Data.Linq.Table<LoginLog> LoginLogs
        {
            get
            {
                return this.GetTable<LoginLog>();
            }
        }

        public System.Data.Linq.Table<Municipality> Municipalities
        {
            get
            {
                return this.GetTable<Municipality>();
            }
        }

        public System.Data.Linq.Table<OfferItem> OfferItems
        {
            get
            {
                return this.GetTable<OfferItem>();
            }
        }

        public System.Data.Linq.Table<Offer> Offers
        {
            get
            {
                return this.GetTable<Offer>();
            }
        }

        public System.Data.Linq.Table<OrderItem> OrderItems
        {
            get
            {
                return this.GetTable<OrderItem>();
            }
        }

        public System.Data.Linq.Table<Order> Orders
        {
            get
            {
                return this.GetTable<Order>();
            }
        }

        public System.Data.Linq.Table<Packet> Packets
        {
            get
            {
                return this.GetTable<Packet>();
            }
        }

        public System.Data.Linq.Table<PacketsInsuranceSubType> PacketsInsuranceSubTypes
        {
            get
            {
                return this.GetTable<PacketsInsuranceSubType>();
            }
        }

        public System.Data.Linq.Table<Parameter> Parameters
        {
            get
            {
                return this.GetTable<Parameter>();
            }
        }

        public System.Data.Linq.Table<PaymentItem> PaymentItems
        {
            get
            {
                return this.GetTable<PaymentItem>();
            }
        }

        public System.Data.Linq.Table<Payment> Payments
        {
            get
            {
                return this.GetTable<Payment>();
            }
        }

        public System.Data.Linq.Table<PaymentsPerInsSubType> PaymentsPerInsSubTypes
        {
            get
            {
                return this.GetTable<PaymentsPerInsSubType>();
            }
        }

        public System.Data.Linq.Table<PaymentType> PaymentTypes
        {
            get
            {
                return this.GetTable<PaymentType>();
            }
        }

        public System.Data.Linq.Table<Place> Places
        {
            get
            {
                return this.GetTable<Place>();
            }
        }

        public System.Data.Linq.Table<Policy> Policies
        {
            get
            {
                return this.GetTable<Policy>();
            }
        }

        public System.Data.Linq.Table<PolicyExtendInformation> PolicyExtendInformations
        {
            get
            {
                return this.GetTable<PolicyExtendInformation>();
            }
        }

        public System.Data.Linq.Table<PolicyIncomeFactureStatuse> PolicyIncomeFactureStatuses
        {
            get
            {
                return this.GetTable<PolicyIncomeFactureStatuse>();
            }
        }

        public System.Data.Linq.Table<PolicyItemFactureItem> PolicyItemFactureItems
        {
            get
            {
                return this.GetTable<PolicyItemFactureItem>();
            }
        }

        public System.Data.Linq.Table<PolicyItem> PolicyItems
        {
            get
            {
                return this.GetTable<PolicyItem>();
            }
        }

        public System.Data.Linq.Table<ProvisionRate> ProvisionRates
        {
            get
            {
                return this.GetTable<ProvisionRate>();
            }
        }

        public System.Data.Linq.Table<RateDealInsuranceSubType> RateDealInsuranceSubTypes
        {
            get
            {
                return this.GetTable<RateDealInsuranceSubType>();
            }
        }

        public System.Data.Linq.Table<RateDeal> RateDeals
        {
            get
            {
                return this.GetTable<RateDeal>();
            }
        }

        public System.Data.Linq.Table<Rate> Rates
        {
            get
            {
                return this.GetTable<Rate>();
            }
        }

        public System.Data.Linq.Table<RestrictionsRestrictionRollBack> RestrictionsRestrictionRollBacks
        {
            get
            {
                return this.GetTable<RestrictionsRestrictionRollBack>();
            }
        }

        public System.Data.Linq.Table<RestrictionsRollBackDistribution> RestrictionsRollBackDistributions
        {
            get
            {
                return this.GetTable<RestrictionsRollBackDistribution>();
            }
        }

        public System.Data.Linq.Table<RightRestrictionDistribution> RightRestrictionDistributions
        {
            get
            {
                return this.GetTable<RightRestrictionDistribution>();
            }
        }

        public System.Data.Linq.Table<RightRestriction> RightRestrictions
        {
            get
            {
                return this.GetTable<RightRestriction>();
            }
        }

        public System.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public System.Data.Linq.Table<RolesFunction> RolesFunctions
        {
            get
            {
                return this.GetTable<RolesFunction>();
            }
        }

        public System.Data.Linq.Table<RollBackDistributionItemPolicyItem> RollBackDistributionItemPolicyItems
        {
            get
            {
                return this.GetTable<RollBackDistributionItemPolicyItem>();
            }
        }

        public System.Data.Linq.Table<RollBackDistributionItem> RollBackDistributionItems
        {
            get
            {
                return this.GetTable<RollBackDistributionItem>();
            }
        }

        public System.Data.Linq.Table<RollBackDistributionParentship> RollBackDistributionParentships
        {
            get
            {
                return this.GetTable<RollBackDistributionParentship>();
            }
        }

        public System.Data.Linq.Table<RollBackDistribution> RollBackDistributions
        {
            get
            {
                return this.GetTable<RollBackDistribution>();
            }
        }

        public System.Data.Linq.Table<RollBackDistributionStatuse> RollBackDistributionStatuses
        {
            get
            {
                return this.GetTable<RollBackDistributionStatuse>();
            }
        }

        public System.Data.Linq.Table<Service> Services
        {
            get
            {
                return this.GetTable<Service>();
            }
        }

        public System.Data.Linq.Table<Slip> Slips
        {
            get
            {
                return this.GetTable<Slip>();
            }
        }

        public System.Data.Linq.Table<SpecialFieldType> SpecialFieldTypes
        {
            get
            {
                return this.GetTable<SpecialFieldType>();
            }
        }

        public System.Data.Linq.Table<State> States
        {
            get
            {
                return this.GetTable<State>();
            }
        }

        public System.Data.Linq.Table<Statuse> Statuses
        {
            get
            {
                return this.GetTable<Statuse>();
            }
        }

        public System.Data.Linq.Table<TemporaryDistribution> TemporaryDistributions
        {
            get
            {
                return this.GetTable<TemporaryDistribution>();
            }
        }

        public System.Data.Linq.Table<TemporaryPolicy> TemporaryPolicies
        {
            get
            {
                return this.GetTable<TemporaryPolicy>();
            }
        }

        public System.Data.Linq.Table<Traveler> Travelers
        {
            get
            {
                return this.GetTable<Traveler>();
            }
        }

        public System.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }

        public System.Data.Linq.Table<UsersFunction> UsersFunctions
        {
            get
            {
                return this.GetTable<UsersFunction>();
            }
        }

        public System.Data.Linq.Table<UsersParentship> UsersParentships
        {
            get
            {
                return this.GetTable<UsersParentship>();
            }
        }

        public System.Data.Linq.Table<UsersWebPage> UsersWebPages
        {
            get
            {
                return this.GetTable<UsersWebPage>();
            }
        }

        public System.Data.Linq.Table<Validator> Validators
        {
            get
            {
                return this.GetTable<Validator>();
            }
        }

        public System.Data.Linq.Table<VariableType> VariableTypes
        {
            get
            {
                return this.GetTable<VariableType>();
            }
        }

        public System.Data.Linq.Table<Vehicle> Vehicles
        {
            get
            {
                return this.GetTable<Vehicle>();
            }
        }

        public System.Data.Linq.Table<WebPage> WebPages
        {
            get
            {
                return this.GetTable<WebPage>();
            }
        }

        public System.Data.Linq.Table<ActiveBank> ActiveBanks
        {
            get
            {
                return this.GetTable<ActiveBank>();
            }
        }

        public System.Data.Linq.Table<ActiveBranch> ActiveBranches
        {
            get
            {
                return this.GetTable<ActiveBranch>();
            }
        }

        public System.Data.Linq.Table<ActiveDeal> ActiveDeals
        {
            get
            {
                return this.GetTable<ActiveDeal>();
            }
        }

        public System.Data.Linq.Table<ActiveInsuranceCompany> ActiveInsuranceCompanies
        {
            get
            {
                return this.GetTable<ActiveInsuranceCompany>();
            }
        }

        public System.Data.Linq.Table<ActiveMunicipality> ActiveMunicipalities
        {
            get
            {
                return this.GetTable<ActiveMunicipality>();
            }
        }

        public System.Data.Linq.Table<ActivePacket> ActivePackets
        {
            get
            {
                return this.GetTable<ActivePacket>();
            }
        }

        public System.Data.Linq.Table<ActivePlace> ActivePlaces
        {
            get
            {
                return this.GetTable<ActivePlace>();
            }
        }

        public System.Data.Linq.Table<ActiveState> ActiveStates
        {
            get
            {
                return this.GetTable<ActiveState>();
            }
        }

        public System.Data.Linq.Table<ActiveStatuse> ActiveStatuses
        {
            get
            {
                return this.GetTable<ActiveStatuse>();
            }
        }

        public System.Data.Linq.Table<ClientAccountsView> ClientAccountsViews
        {
            get
            {
                return this.GetTable<ClientAccountsView>();
            }
        }

        public System.Data.Linq.Table<LifePoliciesView> LifePoliciesViews
        {
            get
            {
                return this.GetTable<LifePoliciesView>();
            }
        }

        public System.Data.Linq.Table<OfferItemsView> OfferItemsViews
        {
            get
            {
                return this.GetTable<OfferItemsView>();
            }
        }

        public System.Data.Linq.Table<OrdersView> OrdersViews
        {
            get
            {
                return this.GetTable<OrdersView>();
            }
        }

        public System.Data.Linq.Table<PoliciesView> PoliciesViews
        {
            get
            {
                return this.GetTable<PoliciesView>();
            }
        }

        public System.Data.Linq.Table<ViewAccountFacture> ViewAccountFactures
        {
            get
            {
                return this.GetTable<ViewAccountFacture>();
            }
        }

        public System.Data.Linq.Table<ViewBankslipItem> ViewBankslipItems
        {
            get
            {
                return this.GetTable<ViewBankslipItem>();
            }
        }

        public System.Data.Linq.Table<ViewBankslip> ViewBankslips
        {
            get
            {
                return this.GetTable<ViewBankslip>();
            }
        }

        public System.Data.Linq.Table<ViewBrokerage> ViewBrokerages
        {
            get
            {
                return this.GetTable<ViewBrokerage>();
            }
        }

        public System.Data.Linq.Table<ViewBrokeragesForMarketingAgent> ViewBrokeragesForMarketingAgents
        {
            get
            {
                return this.GetTable<ViewBrokeragesForMarketingAgent>();
            }
        }

        public System.Data.Linq.Table<ViewBrokerageSlip> ViewBrokerageSlips
        {
            get
            {
                return this.GetTable<ViewBrokerageSlip>();
            }
        }

        public System.Data.Linq.Table<ViewCashReport> ViewCashReports
        {
            get
            {
                return this.GetTable<ViewCashReport>();
            }
        }

        public System.Data.Linq.Table<ViewClient> ViewClients
        {
            get
            {
                return this.GetTable<ViewClient>();
            }
        }

        public System.Data.Linq.Table<ViewDamage> ViewDamages
        {
            get
            {
                return this.GetTable<ViewDamage>();
            }
        }

        public System.Data.Linq.Table<ViewDistributionDocument> ViewDistributionDocuments
        {
            get
            {
                return this.GetTable<ViewDistributionDocument>();
            }
        }

        public System.Data.Linq.Table<ViewDistributionRoute> ViewDistributionRoutes
        {
            get
            {
                return this.GetTable<ViewDistributionRoute>();
            }
        }

        public System.Data.Linq.Table<ViewDistribution> ViewDistributions
        {
            get
            {
                return this.GetTable<ViewDistribution>();
            }
        }

        public System.Data.Linq.Table<ViewDocumentSubType> ViewDocumentSubTypes
        {
            get
            {
                return this.GetTable<ViewDocumentSubType>();
            }
        }

        public System.Data.Linq.Table<ViewFacture> ViewFactures
        {
            get
            {
                return this.GetTable<ViewFacture>();
            }
        }

        public System.Data.Linq.Table<ViewIncomeFacturesPolicyItem> ViewIncomeFacturesPolicyItems
        {
            get
            {
                return this.GetTable<ViewIncomeFacturesPolicyItem>();
            }
        }

        public System.Data.Linq.Table<ViewIncomingFacture> ViewIncomingFactures
        {
            get
            {
                return this.GetTable<ViewIncomingFacture>();
            }
        }

        public System.Data.Linq.Table<ViewInsuranceSubType> ViewInsuranceSubTypes
        {
            get
            {
                return this.GetTable<ViewInsuranceSubType>();
            }
        }

        public System.Data.Linq.Table<ViewLifeDeal> ViewLifeDeals
        {
            get
            {
                return this.GetTable<ViewLifeDeal>();
            }
        }

        public System.Data.Linq.Table<ViewOffer> ViewOffers
        {
            get
            {
                return this.GetTable<ViewOffer>();
            }
        }

        public System.Data.Linq.Table<ViewRateDealInsuranceSubType> ViewRateDealInsuranceSubTypes
        {
            get
            {
                return this.GetTable<ViewRateDealInsuranceSubType>();
            }
        }

        public System.Data.Linq.Table<ViewRateDeal> ViewRateDeals
        {
            get
            {
                return this.GetTable<ViewRateDeal>();
            }
        }

        public System.Data.Linq.Table<ViewRightRestrictionDistribution> ViewRightRestrictionDistributions
        {
            get
            {
                return this.GetTable<ViewRightRestrictionDistribution>();
            }
        }

        public System.Data.Linq.Table<ViewRollBackDistributionBranch> ViewRollBackDistributionBranches
        {
            get
            {
                return this.GetTable<ViewRollBackDistributionBranch>();
            }
        }

        public System.Data.Linq.Table<ViewRollBackDistributionCompany> ViewRollBackDistributionCompanies
        {
            get
            {
                return this.GetTable<ViewRollBackDistributionCompany>();
            }
        }

        public System.Data.Linq.Table<ViewRollBackDistribution> ViewRollBackDistributions
        {
            get
            {
                return this.GetTable<ViewRollBackDistribution>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewRollBacksDeliveredInCompanies")]
    public partial class ViewRollBacksDeliveredInCompany
    {

        private int _Number;

        private System.DateTime _Date;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private decimal _TotalValue;

        private decimal _BrokerageValue;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        private string _Description;

        private int _ID;

        private int _StatusID;

        private int _InsuranceCompanyID;

        public ViewRollBacksDeliveredInCompany()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "Int NOT NULL")]
        public int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this._Number = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "DateTime NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this._StartDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "DateTime NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this._EndDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalValue
        {
            get
            {
                return this._TotalValue;
            }
            set
            {
                if ((this._TotalValue != value))
                {
                    this._TotalValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this._BrokerageValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusID", DbType = "Int NOT NULL")]
        public int StatusID
        {
            get
            {
                return this._StatusID;
            }
            set
            {
                if ((this._StatusID != value))
                {
                    this._StatusID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.AccountFactureItemPolicyItems")]
    public partial class AccountFactureItemPolicyItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _FactureItemID;

        private int _PolicyItemID;

        private EntityRef<AccountFactureItem> _AccountFactureItem;

        private EntityRef<PolicyItem> _PolicyItem;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFactureItemIDChanging(int value);
        partial void OnFactureItemIDChanged();
        partial void OnPolicyItemIDChanging(int value);
        partial void OnPolicyItemIDChanged();
        #endregion

        public AccountFactureItemPolicyItem()
        {
            this._AccountFactureItem = default(EntityRef<AccountFactureItem>);
            this._PolicyItem = default(EntityRef<PolicyItem>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureItemID", DbType = "Int NOT NULL")]
        public int FactureItemID
        {
            get
            {
                return this._FactureItemID;
            }
            set
            {
                if ((this._FactureItemID != value))
                {
                    if (this._AccountFactureItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFactureItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._FactureItemID = value;
                    this.SendPropertyChanged("FactureItemID");
                    this.OnFactureItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL")]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    if (this._PolicyItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPolicyItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyItemID = value;
                    this.SendPropertyChanged("PolicyItemID");
                    this.OnPolicyItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "AccountFactureItem_AccountFactureItemPolicyItem", Storage = "_AccountFactureItem", ThisKey = "FactureItemID", OtherKey = "ID", IsForeignKey = true)]
        public AccountFactureItem AccountFactureItem
        {
            get
            {
                return this._AccountFactureItem.Entity;
            }
            set
            {
                AccountFactureItem previousValue = this._AccountFactureItem.Entity;
                if (((previousValue != value)
                            || (this._AccountFactureItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._AccountFactureItem.Entity = null;
                        previousValue.AccountFactureItemPolicyItems.Remove(this);
                    }
                    this._AccountFactureItem.Entity = value;
                    if ((value != null))
                    {
                        value.AccountFactureItemPolicyItems.Add(this);
                        this._FactureItemID = value.ID;
                    }
                    else
                    {
                        this._FactureItemID = default(int);
                    }
                    this.SendPropertyChanged("AccountFactureItem");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_AccountFactureItemPolicyItem", Storage = "_PolicyItem", ThisKey = "PolicyItemID", OtherKey = "ID", IsForeignKey = true)]
        public PolicyItem PolicyItem
        {
            get
            {
                return this._PolicyItem.Entity;
            }
            set
            {
                PolicyItem previousValue = this._PolicyItem.Entity;
                if (((previousValue != value)
                            || (this._PolicyItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PolicyItem.Entity = null;
                        previousValue.AccountFactureItemPolicyItems.Remove(this);
                    }
                    this._PolicyItem.Entity = value;
                    if ((value != null))
                    {
                        value.AccountFactureItemPolicyItems.Add(this);
                        this._PolicyItemID = value.ID;
                    }
                    else
                    {
                        this._PolicyItemID = default(int);
                    }
                    this.SendPropertyChanged("PolicyItem");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.AccountFactureItems")]
    public partial class AccountFactureItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _Number;

        private int _FactureID;

        private int _InsuranceSubTypeID;

        private int _Count;

        private string _Description;

        private decimal _PremiumValue;

        private decimal _BrokerageValue;

        private EntitySet<AccountFactureItemPolicyItem> _AccountFactureItemPolicyItems;

        private EntityRef<AccountFacture> _AccountFacture;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();
        partial void OnFactureIDChanging(int value);
        partial void OnFactureIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnCountChanging(int value);
        partial void OnCountChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPremiumValueChanging(decimal value);
        partial void OnPremiumValueChanged();
        partial void OnBrokerageValueChanging(decimal value);
        partial void OnBrokerageValueChanged();
        #endregion

        public AccountFactureItem()
        {
            this._AccountFactureItemPolicyItems = new EntitySet<AccountFactureItemPolicyItem>(new Action<AccountFactureItemPolicyItem>(this.attach_AccountFactureItemPolicyItems), new Action<AccountFactureItemPolicyItem>(this.detach_AccountFactureItemPolicyItems));
            this._AccountFacture = default(EntityRef<AccountFacture>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "Int NOT NULL")]
        public int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureID", DbType = "Int NOT NULL")]
        public int FactureID
        {
            get
            {
                return this._FactureID;
            }
            set
            {
                if ((this._FactureID != value))
                {
                    if (this._AccountFacture.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFactureIDChanging(value);
                    this.SendPropertyChanging();
                    this._FactureID = value;
                    this.SendPropertyChanged("FactureID");
                    this.OnFactureIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Count", DbType = "Int NOT NULL")]
        public int Count
        {
            get
            {
                return this._Count;
            }
            set
            {
                if ((this._Count != value))
                {
                    this.OnCountChanging(value);
                    this.SendPropertyChanging();
                    this._Count = value;
                    this.SendPropertyChanged("Count");
                    this.OnCountChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PremiumValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PremiumValue
        {
            get
            {
                return this._PremiumValue;
            }
            set
            {
                if ((this._PremiumValue != value))
                {
                    this.OnPremiumValueChanging(value);
                    this.SendPropertyChanging();
                    this._PremiumValue = value;
                    this.SendPropertyChanged("PremiumValue");
                    this.OnPremiumValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this.OnBrokerageValueChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageValue = value;
                    this.SendPropertyChanged("BrokerageValue");
                    this.OnBrokerageValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "AccountFactureItem_AccountFactureItemPolicyItem", Storage = "_AccountFactureItemPolicyItems", ThisKey = "ID", OtherKey = "FactureItemID")]
        public EntitySet<AccountFactureItemPolicyItem> AccountFactureItemPolicyItems
        {
            get
            {
                return this._AccountFactureItemPolicyItems;
            }
            set
            {
                this._AccountFactureItemPolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "AccountFacture_AccountFactureItem", Storage = "_AccountFacture", ThisKey = "FactureID", OtherKey = "ID", IsForeignKey = true)]
        public AccountFacture AccountFacture
        {
            get
            {
                return this._AccountFacture.Entity;
            }
            set
            {
                AccountFacture previousValue = this._AccountFacture.Entity;
                if (((previousValue != value)
                            || (this._AccountFacture.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._AccountFacture.Entity = null;
                        previousValue.AccountFactureItems.Remove(this);
                    }
                    this._AccountFacture.Entity = value;
                    if ((value != null))
                    {
                        value.AccountFactureItems.Add(this);
                        this._FactureID = value.ID;
                    }
                    else
                    {
                        this._FactureID = default(int);
                    }
                    this.SendPropertyChanged("AccountFacture");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_AccountFactureItem", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.AccountFactureItems.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.AccountFactureItems.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccountFactureItemPolicyItems(AccountFactureItemPolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.AccountFactureItem = this;
        }

        private void detach_AccountFactureItemPolicyItems(AccountFactureItemPolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.AccountFactureItem = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.AccountFactures")]
    public partial class AccountFacture : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _FactureNumber;

        private decimal _TotalCost;

        private decimal _BrokerageValue;

        private System.DateTime _DateOfCreation;

        private int _StatusID;

        private int _ClientID;

        private int _DocumentSubTypeID;

        private int _UserID;

        private System.DateTime _FromDate;

        private System.DateTime _ToDate;

        private System.DateTime _DateOfPayment;

        private int _InsuranceCompanyID;

        private bool _Discard;

        private bool _IsAccountBooked;

        private int _BranchID;

        private EntitySet<AccountFactureItem> _AccountFactureItems;

        private EntityRef<Branch> _Branch;

        private EntityRef<Client> _Client;

        private EntityRef<DocumentSubType> _DocumentSubType;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<Statuse> _Statuse;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFactureNumberChanging(string value);
        partial void OnFactureNumberChanged();
        partial void OnTotalCostChanging(decimal value);
        partial void OnTotalCostChanged();
        partial void OnBrokerageValueChanging(decimal value);
        partial void OnBrokerageValueChanged();
        partial void OnDateOfCreationChanging(System.DateTime value);
        partial void OnDateOfCreationChanged();
        partial void OnStatusIDChanging(int value);
        partial void OnStatusIDChanged();
        partial void OnClientIDChanging(int value);
        partial void OnClientIDChanged();
        partial void OnDocumentSubTypeIDChanging(int value);
        partial void OnDocumentSubTypeIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnFromDateChanging(System.DateTime value);
        partial void OnFromDateChanged();
        partial void OnToDateChanging(System.DateTime value);
        partial void OnToDateChanged();
        partial void OnDateOfPaymentChanging(System.DateTime value);
        partial void OnDateOfPaymentChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnDiscardChanging(bool value);
        partial void OnDiscardChanged();
        partial void OnIsAccountBookedChanging(bool value);
        partial void OnIsAccountBookedChanged();
        partial void OnBranchIDChanging(int value);
        partial void OnBranchIDChanged();
        #endregion

        public AccountFacture()
        {
            this._AccountFactureItems = new EntitySet<AccountFactureItem>(new Action<AccountFactureItem>(this.attach_AccountFactureItems), new Action<AccountFactureItem>(this.detach_AccountFactureItems));
            this._Branch = default(EntityRef<Branch>);
            this._Client = default(EntityRef<Client>);
            this._DocumentSubType = default(EntityRef<DocumentSubType>);
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._Statuse = default(EntityRef<Statuse>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string FactureNumber
        {
            get
            {
                return this._FactureNumber;
            }
            set
            {
                if ((this._FactureNumber != value))
                {
                    this.OnFactureNumberChanging(value);
                    this.SendPropertyChanging();
                    this._FactureNumber = value;
                    this.SendPropertyChanged("FactureNumber");
                    this.OnFactureNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalCost", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalCost
        {
            get
            {
                return this._TotalCost;
            }
            set
            {
                if ((this._TotalCost != value))
                {
                    this.OnTotalCostChanging(value);
                    this.SendPropertyChanging();
                    this._TotalCost = value;
                    this.SendPropertyChanged("TotalCost");
                    this.OnTotalCostChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this.OnBrokerageValueChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageValue = value;
                    this.SendPropertyChanged("BrokerageValue");
                    this.OnBrokerageValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DateOfCreation", DbType = "DateTime NOT NULL")]
        public System.DateTime DateOfCreation
        {
            get
            {
                return this._DateOfCreation;
            }
            set
            {
                if ((this._DateOfCreation != value))
                {
                    this.OnDateOfCreationChanging(value);
                    this.SendPropertyChanging();
                    this._DateOfCreation = value;
                    this.SendPropertyChanged("DateOfCreation");
                    this.OnDateOfCreationChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusID", DbType = "Int NOT NULL")]
        public int StatusID
        {
            get
            {
                return this._StatusID;
            }
            set
            {
                if ((this._StatusID != value))
                {
                    if (this._Statuse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnStatusIDChanging(value);
                    this.SendPropertyChanging();
                    this._StatusID = value;
                    this.SendPropertyChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeID", DbType = "Int NOT NULL")]
        public int DocumentSubTypeID
        {
            get
            {
                return this._DocumentSubTypeID;
            }
            set
            {
                if ((this._DocumentSubTypeID != value))
                {
                    if (this._DocumentSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDocumentSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentSubTypeID = value;
                    this.SendPropertyChanged("DocumentSubTypeID");
                    this.OnDocumentSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if ((this._FromDate != value))
                {
                    this.OnFromDateChanging(value);
                    this.SendPropertyChanging();
                    this._FromDate = value;
                    this.SendPropertyChanged("FromDate");
                    this.OnFromDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if ((this._ToDate != value))
                {
                    this.OnToDateChanging(value);
                    this.SendPropertyChanging();
                    this._ToDate = value;
                    this.SendPropertyChanged("ToDate");
                    this.OnToDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DateOfPayment", DbType = "DateTime NOT NULL")]
        public System.DateTime DateOfPayment
        {
            get
            {
                return this._DateOfPayment;
            }
            set
            {
                if ((this._DateOfPayment != value))
                {
                    this.OnDateOfPaymentChanging(value);
                    this.SendPropertyChanging();
                    this._DateOfPayment = value;
                    this.SendPropertyChanged("DateOfPayment");
                    this.OnDateOfPaymentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Discard", DbType = "Bit NOT NULL")]
        public bool Discard
        {
            get
            {
                return this._Discard;
            }
            set
            {
                if ((this._Discard != value))
                {
                    this.OnDiscardChanging(value);
                    this.SendPropertyChanging();
                    this._Discard = value;
                    this.SendPropertyChanged("Discard");
                    this.OnDiscardChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsAccountBooked", DbType = "Bit NOT NULL")]
        public bool IsAccountBooked
        {
            get
            {
                return this._IsAccountBooked;
            }
            set
            {
                if ((this._IsAccountBooked != value))
                {
                    this.OnIsAccountBookedChanging(value);
                    this.SendPropertyChanging();
                    this._IsAccountBooked = value;
                    this.SendPropertyChanged("IsAccountBooked");
                    this.OnIsAccountBookedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBranchIDChanging(value);
                    this.SendPropertyChanging();
                    this._BranchID = value;
                    this.SendPropertyChanged("BranchID");
                    this.OnBranchIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "AccountFacture_AccountFactureItem", Storage = "_AccountFactureItems", ThisKey = "ID", OtherKey = "FactureID")]
        public EntitySet<AccountFactureItem> AccountFactureItems
        {
            get
            {
                return this._AccountFactureItems;
            }
            set
            {
                this._AccountFactureItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_AccountFacture", Storage = "_Branch", ThisKey = "BranchID", OtherKey = "ID", IsForeignKey = true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if (((previousValue != value)
                            || (this._Branch.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Branch.Entity = null;
                        previousValue.AccountFactures.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if ((value != null))
                    {
                        value.AccountFactures.Add(this);
                        this._BranchID = value.ID;
                    }
                    else
                    {
                        this._BranchID = default(int);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_AccountFacture", Storage = "_Client", ThisKey = "ClientID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if (((previousValue != value)
                            || (this._Client.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client.Entity = null;
                        previousValue.AccountFactures.Remove(this);
                    }
                    this._Client.Entity = value;
                    if ((value != null))
                    {
                        value.AccountFactures.Add(this);
                        this._ClientID = value.ID;
                    }
                    else
                    {
                        this._ClientID = default(int);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentSubType_AccountFacture", Storage = "_DocumentSubType", ThisKey = "DocumentSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public DocumentSubType DocumentSubType
        {
            get
            {
                return this._DocumentSubType.Entity;
            }
            set
            {
                DocumentSubType previousValue = this._DocumentSubType.Entity;
                if (((previousValue != value)
                            || (this._DocumentSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DocumentSubType.Entity = null;
                        previousValue.AccountFactures.Remove(this);
                    }
                    this._DocumentSubType.Entity = value;
                    if ((value != null))
                    {
                        value.AccountFactures.Add(this);
                        this._DocumentSubTypeID = value.ID;
                    }
                    else
                    {
                        this._DocumentSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("DocumentSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_AccountFacture", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.AccountFactures.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.AccountFactures.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Statuse_AccountFacture", Storage = "_Statuse", ThisKey = "StatusID", OtherKey = "ID", IsForeignKey = true)]
        public Statuse Statuse
        {
            get
            {
                return this._Statuse.Entity;
            }
            set
            {
                Statuse previousValue = this._Statuse.Entity;
                if (((previousValue != value)
                            || (this._Statuse.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Statuse.Entity = null;
                        previousValue.AccountFactures.Remove(this);
                    }
                    this._Statuse.Entity = value;
                    if ((value != null))
                    {
                        value.AccountFactures.Add(this);
                        this._StatusID = value.ID;
                    }
                    else
                    {
                        this._StatusID = default(int);
                    }
                    this.SendPropertyChanged("Statuse");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_AccountFacture", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.AccountFactures.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.AccountFactures.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccountFactureItems(AccountFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.AccountFacture = this;
        }

        private void detach_AccountFactureItems(AccountFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.AccountFacture = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.AccreditationInsuranceTypes")]
    public partial class AccreditationInsuranceType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _AccreditationID;

        private int _InsuranceTypeID;

        private EntityRef<Accreditation> _Accreditation;

        private EntityRef<InsuranceType> _InsuranceType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnAccreditationIDChanging(int value);
        partial void OnAccreditationIDChanged();
        partial void OnInsuranceTypeIDChanging(int value);
        partial void OnInsuranceTypeIDChanged();
        #endregion

        public AccreditationInsuranceType()
        {
            this._Accreditation = default(EntityRef<Accreditation>);
            this._InsuranceType = default(EntityRef<InsuranceType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AccreditationID", DbType = "Int NOT NULL")]
        public int AccreditationID
        {
            get
            {
                return this._AccreditationID;
            }
            set
            {
                if ((this._AccreditationID != value))
                {
                    if (this._Accreditation.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnAccreditationIDChanging(value);
                    this.SendPropertyChanging();
                    this._AccreditationID = value;
                    this.SendPropertyChanged("AccreditationID");
                    this.OnAccreditationIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeID", DbType = "Int NOT NULL")]
        public int InsuranceTypeID
        {
            get
            {
                return this._InsuranceTypeID;
            }
            set
            {
                if ((this._InsuranceTypeID != value))
                {
                    if (this._InsuranceType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceTypeID = value;
                    this.SendPropertyChanged("InsuranceTypeID");
                    this.OnInsuranceTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Accreditation_AccreditationInsuranceType", Storage = "_Accreditation", ThisKey = "AccreditationID", OtherKey = "ID", IsForeignKey = true)]
        public Accreditation Accreditation
        {
            get
            {
                return this._Accreditation.Entity;
            }
            set
            {
                Accreditation previousValue = this._Accreditation.Entity;
                if (((previousValue != value)
                            || (this._Accreditation.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Accreditation.Entity = null;
                        previousValue.AccreditationInsuranceTypes.Remove(this);
                    }
                    this._Accreditation.Entity = value;
                    if ((value != null))
                    {
                        value.AccreditationInsuranceTypes.Add(this);
                        this._AccreditationID = value.ID;
                    }
                    else
                    {
                        this._AccreditationID = default(int);
                    }
                    this.SendPropertyChanged("Accreditation");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceType_AccreditationInsuranceType", Storage = "_InsuranceType", ThisKey = "InsuranceTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceType InsuranceType
        {
            get
            {
                return this._InsuranceType.Entity;
            }
            set
            {
                InsuranceType previousValue = this._InsuranceType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceType.Entity = null;
                        previousValue.AccreditationInsuranceTypes.Remove(this);
                    }
                    this._InsuranceType.Entity = value;
                    if ((value != null))
                    {
                        value.AccreditationInsuranceTypes.Add(this);
                        this._InsuranceTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Accreditations")]
    public partial class Accreditation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ClientID;

        private System.DateTime _FromDate;

        private System.DateTime _ToDate;

        private string _Title;

        private EntitySet<AccreditationInsuranceType> _AccreditationInsuranceTypes;

        private EntityRef<Client> _Client;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnClientIDChanging(int value);
        partial void OnClientIDChanged();
        partial void OnFromDateChanging(System.DateTime value);
        partial void OnFromDateChanged();
        partial void OnToDateChanging(System.DateTime value);
        partial void OnToDateChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        #endregion

        public Accreditation()
        {
            this._AccreditationInsuranceTypes = new EntitySet<AccreditationInsuranceType>(new Action<AccreditationInsuranceType>(this.attach_AccreditationInsuranceTypes), new Action<AccreditationInsuranceType>(this.detach_AccreditationInsuranceTypes));
            this._Client = default(EntityRef<Client>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if ((this._FromDate != value))
                {
                    this.OnFromDateChanging(value);
                    this.SendPropertyChanging();
                    this._FromDate = value;
                    this.SendPropertyChanged("FromDate");
                    this.OnFromDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if ((this._ToDate != value))
                {
                    this.OnToDateChanging(value);
                    this.SendPropertyChanging();
                    this._ToDate = value;
                    this.SendPropertyChanged("ToDate");
                    this.OnToDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Title", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if ((this._Title != value))
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Accreditation_AccreditationInsuranceType", Storage = "_AccreditationInsuranceTypes", ThisKey = "ID", OtherKey = "AccreditationID")]
        public EntitySet<AccreditationInsuranceType> AccreditationInsuranceTypes
        {
            get
            {
                return this._AccreditationInsuranceTypes;
            }
            set
            {
                this._AccreditationInsuranceTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Accreditation", Storage = "_Client", ThisKey = "ClientID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if (((previousValue != value)
                            || (this._Client.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client.Entity = null;
                        previousValue.Accreditations.Remove(this);
                    }
                    this._Client.Entity = value;
                    if ((value != null))
                    {
                        value.Accreditations.Add(this);
                        this._ClientID = value.ID;
                    }
                    else
                    {
                        this._ClientID = default(int);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccreditationInsuranceTypes(AccreditationInsuranceType entity)
        {
            this.SendPropertyChanging();
            entity.Accreditation = this;
        }

        private void detach_AccreditationInsuranceTypes(AccreditationInsuranceType entity)
        {
            this.SendPropertyChanging();
            entity.Accreditation = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Appartments")]
    public partial class Appartment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Address;

        private int _MunicipalityID;

        private string _Object;

        private string _Description;

        private EntityRef<Municipality> _Municipality;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnMunicipalityIDChanging(int value);
        partial void OnMunicipalityIDChanged();
        partial void OnObjectChanging(string value);
        partial void OnObjectChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public Appartment()
        {
            this._Municipality = default(EntityRef<Municipality>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MunicipalityID", DbType = "Int NOT NULL")]
        public int MunicipalityID
        {
            get
            {
                return this._MunicipalityID;
            }
            set
            {
                if ((this._MunicipalityID != value))
                {
                    if (this._Municipality.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnMunicipalityIDChanging(value);
                    this.SendPropertyChanging();
                    this._MunicipalityID = value;
                    this.SendPropertyChanged("MunicipalityID");
                    this.OnMunicipalityIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Object", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Object
        {
            get
            {
                return this._Object;
            }
            set
            {
                if ((this._Object != value))
                {
                    this.OnObjectChanging(value);
                    this.SendPropertyChanging();
                    this._Object = value;
                    this.SendPropertyChanged("Object");
                    this.OnObjectChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Municipality_Appartment", Storage = "_Municipality", ThisKey = "MunicipalityID", OtherKey = "ID", IsForeignKey = true)]
        public Municipality Municipality
        {
            get
            {
                return this._Municipality.Entity;
            }
            set
            {
                Municipality previousValue = this._Municipality.Entity;
                if (((previousValue != value)
                            || (this._Municipality.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Municipality.Entity = null;
                        previousValue.Appartments.Remove(this);
                    }
                    this._Municipality.Entity = value;
                    if ((value != null))
                    {
                        value.Appartments.Add(this);
                        this._MunicipalityID = value.ID;
                    }
                    else
                    {
                        this._MunicipalityID = default(int);
                    }
                    this.SendPropertyChanged("Municipality");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Attachments")]
    public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _DocumentTypeID;

        private int _DocumentID;

        private string _RelativePath;

        private EntityRef<DocumentType> _DocumentType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDocumentTypeIDChanging(int value);
        partial void OnDocumentTypeIDChanged();
        partial void OnDocumentIDChanging(int value);
        partial void OnDocumentIDChanged();
        partial void OnRelativePathChanging(string value);
        partial void OnRelativePathChanged();
        #endregion

        public Attachment()
        {
            this._DocumentType = default(EntityRef<DocumentType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentTypeID", DbType = "Int NOT NULL")]
        public int DocumentTypeID
        {
            get
            {
                return this._DocumentTypeID;
            }
            set
            {
                if ((this._DocumentTypeID != value))
                {
                    if (this._DocumentType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDocumentTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentTypeID = value;
                    this.SendPropertyChanged("DocumentTypeID");
                    this.OnDocumentTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentID", DbType = "Int NOT NULL")]
        public int DocumentID
        {
            get
            {
                return this._DocumentID;
            }
            set
            {
                if ((this._DocumentID != value))
                {
                    this.OnDocumentIDChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentID = value;
                    this.SendPropertyChanged("DocumentID");
                    this.OnDocumentIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RelativePath", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string RelativePath
        {
            get
            {
                return this._RelativePath;
            }
            set
            {
                if ((this._RelativePath != value))
                {
                    this.OnRelativePathChanging(value);
                    this.SendPropertyChanging();
                    this._RelativePath = value;
                    this.SendPropertyChanged("RelativePath");
                    this.OnRelativePathChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentType_Attachment", Storage = "_DocumentType", ThisKey = "DocumentTypeID", OtherKey = "ID", IsForeignKey = true)]
        public DocumentType DocumentType
        {
            get
            {
                return this._DocumentType.Entity;
            }
            set
            {
                DocumentType previousValue = this._DocumentType.Entity;
                if (((previousValue != value)
                            || (this._DocumentType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DocumentType.Entity = null;
                        previousValue.Attachments.Remove(this);
                    }
                    this._DocumentType.Entity = value;
                    if ((value != null))
                    {
                        value.Attachments.Add(this);
                        this._DocumentTypeID = value.ID;
                    }
                    else
                    {
                        this._DocumentTypeID = default(int);
                    }
                    this.SendPropertyChanged("DocumentType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BankCreditCards")]
    public partial class BankCreditCard : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _BankID;

        private int _CreditCardID;

        private EntitySet<Payment> _Payments;

        private EntityRef<Bank> _Bank;

        private EntityRef<CreditCard> _CreditCard;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBankIDChanging(int value);
        partial void OnBankIDChanged();
        partial void OnCreditCardIDChanging(int value);
        partial void OnCreditCardIDChanged();
        #endregion

        public BankCreditCard()
        {
            this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
            this._Bank = default(EntityRef<Bank>);
            this._CreditCard = default(EntityRef<CreditCard>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankID", DbType = "Int NOT NULL")]
        public int BankID
        {
            get
            {
                return this._BankID;
            }
            set
            {
                if ((this._BankID != value))
                {
                    if (this._Bank.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBankIDChanging(value);
                    this.SendPropertyChanging();
                    this._BankID = value;
                    this.SendPropertyChanged("BankID");
                    this.OnBankIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreditCardID", DbType = "Int NOT NULL")]
        public int CreditCardID
        {
            get
            {
                return this._CreditCardID;
            }
            set
            {
                if ((this._CreditCardID != value))
                {
                    if (this._CreditCard.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCreditCardIDChanging(value);
                    this.SendPropertyChanging();
                    this._CreditCardID = value;
                    this.SendPropertyChanged("CreditCardID");
                    this.OnCreditCardIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BankCreditCard_Payment", Storage = "_Payments", ThisKey = "ID", OtherKey = "BankCreditCardID")]
        public EntitySet<Payment> Payments
        {
            get
            {
                return this._Payments;
            }
            set
            {
                this._Payments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_BankCreditCard", Storage = "_Bank", ThisKey = "BankID", OtherKey = "ID", IsForeignKey = true)]
        public Bank Bank
        {
            get
            {
                return this._Bank.Entity;
            }
            set
            {
                Bank previousValue = this._Bank.Entity;
                if (((previousValue != value)
                            || (this._Bank.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Bank.Entity = null;
                        previousValue.BankCreditCards.Remove(this);
                    }
                    this._Bank.Entity = value;
                    if ((value != null))
                    {
                        value.BankCreditCards.Add(this);
                        this._BankID = value.ID;
                    }
                    else
                    {
                        this._BankID = default(int);
                    }
                    this.SendPropertyChanged("Bank");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "CreditCard_BankCreditCard", Storage = "_CreditCard", ThisKey = "CreditCardID", OtherKey = "ID", IsForeignKey = true)]
        public CreditCard CreditCard
        {
            get
            {
                return this._CreditCard.Entity;
            }
            set
            {
                CreditCard previousValue = this._CreditCard.Entity;
                if (((previousValue != value)
                            || (this._CreditCard.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._CreditCard.Entity = null;
                        previousValue.BankCreditCards.Remove(this);
                    }
                    this._CreditCard.Entity = value;
                    if ((value != null))
                    {
                        value.BankCreditCards.Add(this);
                        this._CreditCardID = value.ID;
                    }
                    else
                    {
                        this._CreditCardID = default(int);
                    }
                    this.SendPropertyChanged("CreditCard");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.BankCreditCard = this;
        }

        private void detach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.BankCreditCard = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Banks")]
    public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private string _Code;

        private string _BankAccount;

        private string _EMBG;

        private string _Phone;

        private string _Fax;

        private string _Mobile;

        private string _EMail;

        private bool _IsActive;

        private EntitySet<BankCreditCard> _BankCreditCards;

        private EntitySet<Bankslip> _Bankslips;

        private EntitySet<ClientAccount> _ClientAccounts;

        private EntitySet<Payment> _Payments;

        private EntitySet<ProvisionRate> _ProvisionRates;

        private EntitySet<RightRestriction> _RightRestrictions;

        private EntitySet<Slip> _Slips;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnBankAccountChanging(string value);
        partial void OnBankAccountChanged();
        partial void OnEMBGChanging(string value);
        partial void OnEMBGChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnMobileChanging(string value);
        partial void OnMobileChanged();
        partial void OnEMailChanging(string value);
        partial void OnEMailChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public Bank()
        {
            this._BankCreditCards = new EntitySet<BankCreditCard>(new Action<BankCreditCard>(this.attach_BankCreditCards), new Action<BankCreditCard>(this.detach_BankCreditCards));
            this._Bankslips = new EntitySet<Bankslip>(new Action<Bankslip>(this.attach_Bankslips), new Action<Bankslip>(this.detach_Bankslips));
            this._ClientAccounts = new EntitySet<ClientAccount>(new Action<ClientAccount>(this.attach_ClientAccounts), new Action<ClientAccount>(this.detach_ClientAccounts));
            this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
            this._ProvisionRates = new EntitySet<ProvisionRate>(new Action<ProvisionRate>(this.attach_ProvisionRates), new Action<ProvisionRate>(this.detach_ProvisionRates));
            this._RightRestrictions = new EntitySet<RightRestriction>(new Action<RightRestriction>(this.attach_RightRestrictions), new Action<RightRestriction>(this.detach_RightRestrictions));
            this._Slips = new EntitySet<Slip>(new Action<Slip>(this.attach_Slips), new Action<Slip>(this.detach_Slips));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankAccount", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string BankAccount
        {
            get
            {
                return this._BankAccount;
            }
            set
            {
                if ((this._BankAccount != value))
                {
                    this.OnBankAccountChanging(value);
                    this.SendPropertyChanging();
                    this._BankAccount = value;
                    this.SendPropertyChanged("BankAccount");
                    this.OnBankAccountChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15)")]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this.OnEMBGChanging(value);
                    this.SendPropertyChanging();
                    this._EMBG = value;
                    this.SendPropertyChanged("EMBG");
                    this.OnEMBGChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Phone", DbType = "NVarChar(30)")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if ((this._Phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Fax", DbType = "NVarChar(30)")]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if ((this._Fax != value))
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Mobile", DbType = "NVarChar(30)")]
        public string Mobile
        {
            get
            {
                return this._Mobile;
            }
            set
            {
                if ((this._Mobile != value))
                {
                    this.OnMobileChanging(value);
                    this.SendPropertyChanging();
                    this._Mobile = value;
                    this.SendPropertyChanged("Mobile");
                    this.OnMobileChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMail", DbType = "NVarChar(100)")]
        public string EMail
        {
            get
            {
                return this._EMail;
            }
            set
            {
                if ((this._EMail != value))
                {
                    this.OnEMailChanging(value);
                    this.SendPropertyChanging();
                    this._EMail = value;
                    this.SendPropertyChanged("EMail");
                    this.OnEMailChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_BankCreditCard", Storage = "_BankCreditCards", ThisKey = "ID", OtherKey = "BankID")]
        public EntitySet<BankCreditCard> BankCreditCards
        {
            get
            {
                return this._BankCreditCards;
            }
            set
            {
                this._BankCreditCards.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_Bankslip", Storage = "_Bankslips", ThisKey = "ID", OtherKey = "BankID")]
        public EntitySet<Bankslip> Bankslips
        {
            get
            {
                return this._Bankslips;
            }
            set
            {
                this._Bankslips.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_ClientAccount", Storage = "_ClientAccounts", ThisKey = "ID", OtherKey = "BankID")]
        public EntitySet<ClientAccount> ClientAccounts
        {
            get
            {
                return this._ClientAccounts;
            }
            set
            {
                this._ClientAccounts.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_Payment", Storage = "_Payments", ThisKey = "ID", OtherKey = "BankslipBankID")]
        public EntitySet<Payment> Payments
        {
            get
            {
                return this._Payments;
            }
            set
            {
                this._Payments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_ProvisionRate", Storage = "_ProvisionRates", ThisKey = "ID", OtherKey = "BankID")]
        public EntitySet<ProvisionRate> ProvisionRates
        {
            get
            {
                return this._ProvisionRates;
            }
            set
            {
                this._ProvisionRates.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_RightRestriction", Storage = "_RightRestrictions", ThisKey = "ID", OtherKey = "BankID")]
        public EntitySet<RightRestriction> RightRestrictions
        {
            get
            {
                return this._RightRestrictions;
            }
            set
            {
                this._RightRestrictions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_Slip", Storage = "_Slips", ThisKey = "ID", OtherKey = "BankID")]
        public EntitySet<Slip> Slips
        {
            get
            {
                return this._Slips;
            }
            set
            {
                this._Slips.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_BankCreditCards(BankCreditCard entity)
        {
            this.SendPropertyChanging();
            entity.Bank = this;
        }

        private void detach_BankCreditCards(BankCreditCard entity)
        {
            this.SendPropertyChanging();
            entity.Bank = null;
        }

        private void attach_Bankslips(Bankslip entity)
        {
            this.SendPropertyChanging();
            entity.Bank = this;
        }

        private void detach_Bankslips(Bankslip entity)
        {
            this.SendPropertyChanging();
            entity.Bank = null;
        }

        private void attach_ClientAccounts(ClientAccount entity)
        {
            this.SendPropertyChanging();
            entity.Bank = this;
        }

        private void detach_ClientAccounts(ClientAccount entity)
        {
            this.SendPropertyChanging();
            entity.Bank = null;
        }

        private void attach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.Bank = this;
        }

        private void detach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.Bank = null;
        }

        private void attach_ProvisionRates(ProvisionRate entity)
        {
            this.SendPropertyChanging();
            entity.Bank = this;
        }

        private void detach_ProvisionRates(ProvisionRate entity)
        {
            this.SendPropertyChanging();
            entity.Bank = null;
        }

        private void attach_RightRestrictions(RightRestriction entity)
        {
            this.SendPropertyChanging();
            entity.Bank = this;
        }

        private void detach_RightRestrictions(RightRestriction entity)
        {
            this.SendPropertyChanging();
            entity.Bank = null;
        }

        private void attach_Slips(Slip entity)
        {
            this.SendPropertyChanging();
            entity.Bank = this;
        }

        private void detach_Slips(Slip entity)
        {
            this.SendPropertyChanging();
            entity.Bank = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BankslipItems")]
    public partial class BankslipItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _BankslipID;

        private string _ClientName;

        private string _ClientAccountNumber;

        private decimal _DemandValue;

        private decimal _DebtValue;

        private decimal _ProvisionValue;

        private string _Code;

        private string _PaymentDescription;

        private string _CallOnPaymentNumber;

        private bool _IsPaid;

        private EntitySet<PaymentItem> _PaymentItems;

        private EntityRef<Bankslip> _Bankslip;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBankslipIDChanging(int value);
        partial void OnBankslipIDChanged();
        partial void OnClientNameChanging(string value);
        partial void OnClientNameChanged();
        partial void OnClientAccountNumberChanging(string value);
        partial void OnClientAccountNumberChanged();
        partial void OnDemandValueChanging(decimal value);
        partial void OnDemandValueChanged();
        partial void OnDebtValueChanging(decimal value);
        partial void OnDebtValueChanged();
        partial void OnProvisionValueChanging(decimal value);
        partial void OnProvisionValueChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnPaymentDescriptionChanging(string value);
        partial void OnPaymentDescriptionChanged();
        partial void OnCallOnPaymentNumberChanging(string value);
        partial void OnCallOnPaymentNumberChanged();
        partial void OnIsPaidChanging(bool value);
        partial void OnIsPaidChanged();
        #endregion

        public BankslipItem()
        {
            this._PaymentItems = new EntitySet<PaymentItem>(new Action<PaymentItem>(this.attach_PaymentItems), new Action<PaymentItem>(this.detach_PaymentItems));
            this._Bankslip = default(EntityRef<Bankslip>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankslipID", DbType = "Int NOT NULL")]
        public int BankslipID
        {
            get
            {
                return this._BankslipID;
            }
            set
            {
                if ((this._BankslipID != value))
                {
                    if (this._Bankslip.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBankslipIDChanging(value);
                    this.SendPropertyChanging();
                    this._BankslipID = value;
                    this.SendPropertyChanged("BankslipID");
                    this.OnBankslipIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientName", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string ClientName
        {
            get
            {
                return this._ClientName;
            }
            set
            {
                if ((this._ClientName != value))
                {
                    this.OnClientNameChanging(value);
                    this.SendPropertyChanging();
                    this._ClientName = value;
                    this.SendPropertyChanged("ClientName");
                    this.OnClientNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientAccountNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ClientAccountNumber
        {
            get
            {
                return this._ClientAccountNumber;
            }
            set
            {
                if ((this._ClientAccountNumber != value))
                {
                    this.OnClientAccountNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ClientAccountNumber = value;
                    this.SendPropertyChanged("ClientAccountNumber");
                    this.OnClientAccountNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DemandValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DemandValue
        {
            get
            {
                return this._DemandValue;
            }
            set
            {
                if ((this._DemandValue != value))
                {
                    this.OnDemandValueChanging(value);
                    this.SendPropertyChanging();
                    this._DemandValue = value;
                    this.SendPropertyChanged("DemandValue");
                    this.OnDemandValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DebtValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DebtValue
        {
            get
            {
                return this._DebtValue;
            }
            set
            {
                if ((this._DebtValue != value))
                {
                    this.OnDebtValueChanging(value);
                    this.SendPropertyChanging();
                    this._DebtValue = value;
                    this.SendPropertyChanged("DebtValue");
                    this.OnDebtValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ProvisionValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal ProvisionValue
        {
            get
            {
                return this._ProvisionValue;
            }
            set
            {
                if ((this._ProvisionValue != value))
                {
                    this.OnProvisionValueChanging(value);
                    this.SendPropertyChanging();
                    this._ProvisionValue = value;
                    this.SendPropertyChanged("ProvisionValue");
                    this.OnProvisionValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaymentDescription", DbType = "NVarChar(300) NOT NULL", CanBeNull = false)]
        public string PaymentDescription
        {
            get
            {
                return this._PaymentDescription;
            }
            set
            {
                if ((this._PaymentDescription != value))
                {
                    this.OnPaymentDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentDescription = value;
                    this.SendPropertyChanged("PaymentDescription");
                    this.OnPaymentDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CallOnPaymentNumber", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string CallOnPaymentNumber
        {
            get
            {
                return this._CallOnPaymentNumber;
            }
            set
            {
                if ((this._CallOnPaymentNumber != value))
                {
                    this.OnCallOnPaymentNumberChanging(value);
                    this.SendPropertyChanging();
                    this._CallOnPaymentNumber = value;
                    this.SendPropertyChanged("CallOnPaymentNumber");
                    this.OnCallOnPaymentNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsPaid", DbType = "Bit NOT NULL")]
        public bool IsPaid
        {
            get
            {
                return this._IsPaid;
            }
            set
            {
                if ((this._IsPaid != value))
                {
                    this.OnIsPaidChanging(value);
                    this.SendPropertyChanging();
                    this._IsPaid = value;
                    this.SendPropertyChanged("IsPaid");
                    this.OnIsPaidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BankslipItem_PaymentItem", Storage = "_PaymentItems", ThisKey = "ID", OtherKey = "BankslipItemID")]
        public EntitySet<PaymentItem> PaymentItems
        {
            get
            {
                return this._PaymentItems;
            }
            set
            {
                this._PaymentItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bankslip_BankslipItem", Storage = "_Bankslip", ThisKey = "BankslipID", OtherKey = "ID", IsForeignKey = true)]
        public Bankslip Bankslip
        {
            get
            {
                return this._Bankslip.Entity;
            }
            set
            {
                Bankslip previousValue = this._Bankslip.Entity;
                if (((previousValue != value)
                            || (this._Bankslip.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Bankslip.Entity = null;
                        previousValue.BankslipItems.Remove(this);
                    }
                    this._Bankslip.Entity = value;
                    if ((value != null))
                    {
                        value.BankslipItems.Add(this);
                        this._BankslipID = value.ID;
                    }
                    else
                    {
                        this._BankslipID = default(int);
                    }
                    this.SendPropertyChanged("Bankslip");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_PaymentItems(PaymentItem entity)
        {
            this.SendPropertyChanging();
            entity.BankslipItem = this;
        }

        private void detach_PaymentItems(PaymentItem entity)
        {
            this.SendPropertyChanging();
            entity.BankslipItem = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Bankslips")]
    public partial class Bankslip : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _BankslipNumber;

        private int _BankID;

        private decimal _DemandValue;

        private decimal _DebtValue;

        private System.DateTime _Date;

        private System.Nullable<decimal> _AccountPreviousValue;

        private System.Nullable<decimal> _AccountNewValue;

        private System.Nullable<int> _AccountNumberOfDebts;

        private System.Nullable<int> _AccountNumberOfDemands;

        private EntitySet<BankslipItem> _BankslipItems;

        private EntityRef<Bank> _Bank;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBankslipNumberChanging(string value);
        partial void OnBankslipNumberChanged();
        partial void OnBankIDChanging(int value);
        partial void OnBankIDChanged();
        partial void OnDemandValueChanging(decimal value);
        partial void OnDemandValueChanged();
        partial void OnDebtValueChanging(decimal value);
        partial void OnDebtValueChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnAccountPreviousValueChanging(System.Nullable<decimal> value);
        partial void OnAccountPreviousValueChanged();
        partial void OnAccountNewValueChanging(System.Nullable<decimal> value);
        partial void OnAccountNewValueChanged();
        partial void OnAccountNumberOfDebtsChanging(System.Nullable<int> value);
        partial void OnAccountNumberOfDebtsChanged();
        partial void OnAccountNumberOfDemandsChanging(System.Nullable<int> value);
        partial void OnAccountNumberOfDemandsChanged();
        #endregion

        public Bankslip()
        {
            this._BankslipItems = new EntitySet<BankslipItem>(new Action<BankslipItem>(this.attach_BankslipItems), new Action<BankslipItem>(this.detach_BankslipItems));
            this._Bank = default(EntityRef<Bank>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankslipNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string BankslipNumber
        {
            get
            {
                return this._BankslipNumber;
            }
            set
            {
                if ((this._BankslipNumber != value))
                {
                    this.OnBankslipNumberChanging(value);
                    this.SendPropertyChanging();
                    this._BankslipNumber = value;
                    this.SendPropertyChanged("BankslipNumber");
                    this.OnBankslipNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankID", DbType = "Int NOT NULL")]
        public int BankID
        {
            get
            {
                return this._BankID;
            }
            set
            {
                if ((this._BankID != value))
                {
                    if (this._Bank.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBankIDChanging(value);
                    this.SendPropertyChanging();
                    this._BankID = value;
                    this.SendPropertyChanged("BankID");
                    this.OnBankIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DemandValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DemandValue
        {
            get
            {
                return this._DemandValue;
            }
            set
            {
                if ((this._DemandValue != value))
                {
                    this.OnDemandValueChanging(value);
                    this.SendPropertyChanging();
                    this._DemandValue = value;
                    this.SendPropertyChanged("DemandValue");
                    this.OnDemandValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DebtValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DebtValue
        {
            get
            {
                return this._DebtValue;
            }
            set
            {
                if ((this._DebtValue != value))
                {
                    this.OnDebtValueChanging(value);
                    this.SendPropertyChanging();
                    this._DebtValue = value;
                    this.SendPropertyChanged("DebtValue");
                    this.OnDebtValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AccountPreviousValue", DbType = "Decimal(18,2)")]
        public System.Nullable<decimal> AccountPreviousValue
        {
            get
            {
                return this._AccountPreviousValue;
            }
            set
            {
                if ((this._AccountPreviousValue != value))
                {
                    this.OnAccountPreviousValueChanging(value);
                    this.SendPropertyChanging();
                    this._AccountPreviousValue = value;
                    this.SendPropertyChanged("AccountPreviousValue");
                    this.OnAccountPreviousValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AccountNewValue", DbType = "Decimal(18,2)")]
        public System.Nullable<decimal> AccountNewValue
        {
            get
            {
                return this._AccountNewValue;
            }
            set
            {
                if ((this._AccountNewValue != value))
                {
                    this.OnAccountNewValueChanging(value);
                    this.SendPropertyChanging();
                    this._AccountNewValue = value;
                    this.SendPropertyChanged("AccountNewValue");
                    this.OnAccountNewValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AccountNumberOfDebts", DbType = "Int")]
        public System.Nullable<int> AccountNumberOfDebts
        {
            get
            {
                return this._AccountNumberOfDebts;
            }
            set
            {
                if ((this._AccountNumberOfDebts != value))
                {
                    this.OnAccountNumberOfDebtsChanging(value);
                    this.SendPropertyChanging();
                    this._AccountNumberOfDebts = value;
                    this.SendPropertyChanged("AccountNumberOfDebts");
                    this.OnAccountNumberOfDebtsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AccountNumberOfDemands", DbType = "Int")]
        public System.Nullable<int> AccountNumberOfDemands
        {
            get
            {
                return this._AccountNumberOfDemands;
            }
            set
            {
                if ((this._AccountNumberOfDemands != value))
                {
                    this.OnAccountNumberOfDemandsChanging(value);
                    this.SendPropertyChanging();
                    this._AccountNumberOfDemands = value;
                    this.SendPropertyChanged("AccountNumberOfDemands");
                    this.OnAccountNumberOfDemandsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bankslip_BankslipItem", Storage = "_BankslipItems", ThisKey = "ID", OtherKey = "BankslipID")]
        public EntitySet<BankslipItem> BankslipItems
        {
            get
            {
                return this._BankslipItems;
            }
            set
            {
                this._BankslipItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_Bankslip", Storage = "_Bank", ThisKey = "BankID", OtherKey = "ID", IsForeignKey = true)]
        public Bank Bank
        {
            get
            {
                return this._Bank.Entity;
            }
            set
            {
                Bank previousValue = this._Bank.Entity;
                if (((previousValue != value)
                            || (this._Bank.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Bank.Entity = null;
                        previousValue.Bankslips.Remove(this);
                    }
                    this._Bank.Entity = value;
                    if ((value != null))
                    {
                        value.Bankslips.Add(this);
                        this._BankID = value.ID;
                    }
                    else
                    {
                        this._BankID = default(int);
                    }
                    this.SendPropertyChanged("Bank");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_BankslipItems(BankslipItem entity)
        {
            this.SendPropertyChanging();
            entity.Bankslip = this;
        }

        private void detach_BankslipItems(BankslipItem entity)
        {
            this.SendPropertyChanging();
            entity.Bankslip = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Branches")]
    public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private bool _IsActive;

        private int _MunicipalityID;

        private EntitySet<AccountFacture> _AccountFactures;

        private EntitySet<CashReport> _CashReports;

        private EntitySet<DistributionDocument> _DistributionDocuments;

        private EntitySet<Distribution> _Distributions;

        private EntitySet<IncomingFacture> _IncomingFactures;

        private EntitySet<LifePolicy> _LifePolicies;

        private EntitySet<Payment> _Payments;

        private EntitySet<Policy> _Policies;

        private EntitySet<RollBackDistribution> _RollBackDistributions;

        private EntitySet<User> _Users;

        private EntityRef<Municipality> _Municipality;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnMunicipalityIDChanging(int value);
        partial void OnMunicipalityIDChanged();
        #endregion

        public Branch()
        {
            this._AccountFactures = new EntitySet<AccountFacture>(new Action<AccountFacture>(this.attach_AccountFactures), new Action<AccountFacture>(this.detach_AccountFactures));
            this._CashReports = new EntitySet<CashReport>(new Action<CashReport>(this.attach_CashReports), new Action<CashReport>(this.detach_CashReports));
            this._DistributionDocuments = new EntitySet<DistributionDocument>(new Action<DistributionDocument>(this.attach_DistributionDocuments), new Action<DistributionDocument>(this.detach_DistributionDocuments));
            this._Distributions = new EntitySet<Distribution>(new Action<Distribution>(this.attach_Distributions), new Action<Distribution>(this.detach_Distributions));
            this._IncomingFactures = new EntitySet<IncomingFacture>(new Action<IncomingFacture>(this.attach_IncomingFactures), new Action<IncomingFacture>(this.detach_IncomingFactures));
            this._LifePolicies = new EntitySet<LifePolicy>(new Action<LifePolicy>(this.attach_LifePolicies), new Action<LifePolicy>(this.detach_LifePolicies));
            this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
            this._Policies = new EntitySet<Policy>(new Action<Policy>(this.attach_Policies), new Action<Policy>(this.detach_Policies));
            this._RollBackDistributions = new EntitySet<RollBackDistribution>(new Action<RollBackDistribution>(this.attach_RollBackDistributions), new Action<RollBackDistribution>(this.detach_RollBackDistributions));
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            this._Municipality = default(EntityRef<Municipality>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MunicipalityID", DbType = "Int NOT NULL")]
        public int MunicipalityID
        {
            get
            {
                return this._MunicipalityID;
            }
            set
            {
                if ((this._MunicipalityID != value))
                {
                    if (this._Municipality.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnMunicipalityIDChanging(value);
                    this.SendPropertyChanging();
                    this._MunicipalityID = value;
                    this.SendPropertyChanged("MunicipalityID");
                    this.OnMunicipalityIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_AccountFacture", Storage = "_AccountFactures", ThisKey = "ID", OtherKey = "BranchID")]
        public EntitySet<AccountFacture> AccountFactures
        {
            get
            {
                return this._AccountFactures;
            }
            set
            {
                this._AccountFactures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_CashReport", Storage = "_CashReports", ThisKey = "ID", OtherKey = "BranchID")]
        public EntitySet<CashReport> CashReports
        {
            get
            {
                return this._CashReports;
            }
            set
            {
                this._CashReports.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_DistributionDocument", Storage = "_DistributionDocuments", ThisKey = "ID", OtherKey = "BranchID")]
        public EntitySet<DistributionDocument> DistributionDocuments
        {
            get
            {
                return this._DistributionDocuments;
            }
            set
            {
                this._DistributionDocuments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_Distribution", Storage = "_Distributions", ThisKey = "ID", OtherKey = "BranchID")]
        public EntitySet<Distribution> Distributions
        {
            get
            {
                return this._Distributions;
            }
            set
            {
                this._Distributions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_IncomingFacture", Storage = "_IncomingFactures", ThisKey = "ID", OtherKey = "BranchID")]
        public EntitySet<IncomingFacture> IncomingFactures
        {
            get
            {
                return this._IncomingFactures;
            }
            set
            {
                this._IncomingFactures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_LifePolicy", Storage = "_LifePolicies", ThisKey = "ID", OtherKey = "BranchID")]
        public EntitySet<LifePolicy> LifePolicies
        {
            get
            {
                return this._LifePolicies;
            }
            set
            {
                this._LifePolicies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_Payment", Storage = "_Payments", ThisKey = "ID", OtherKey = "BranchID")]
        public EntitySet<Payment> Payments
        {
            get
            {
                return this._Payments;
            }
            set
            {
                this._Payments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_Policy", Storage = "_Policies", ThisKey = "ID", OtherKey = "BranchID")]
        public EntitySet<Policy> Policies
        {
            get
            {
                return this._Policies;
            }
            set
            {
                this._Policies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_RollBackDistribution", Storage = "_RollBackDistributions", ThisKey = "ID", OtherKey = "BranchID")]
        public EntitySet<RollBackDistribution> RollBackDistributions
        {
            get
            {
                return this._RollBackDistributions;
            }
            set
            {
                this._RollBackDistributions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_User", Storage = "_Users", ThisKey = "ID", OtherKey = "BranchID")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Municipality_Branch", Storage = "_Municipality", ThisKey = "MunicipalityID", OtherKey = "ID", IsForeignKey = true)]
        public Municipality Municipality
        {
            get
            {
                return this._Municipality.Entity;
            }
            set
            {
                Municipality previousValue = this._Municipality.Entity;
                if (((previousValue != value)
                            || (this._Municipality.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Municipality.Entity = null;
                        previousValue.Branches.Remove(this);
                    }
                    this._Municipality.Entity = value;
                    if ((value != null))
                    {
                        value.Branches.Add(this);
                        this._MunicipalityID = value.ID;
                    }
                    else
                    {
                        this._MunicipalityID = default(int);
                    }
                    this.SendPropertyChanged("Municipality");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.Branch = this;
        }

        private void detach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.Branch = null;
        }

        private void attach_CashReports(CashReport entity)
        {
            this.SendPropertyChanging();
            entity.Branch = this;
        }

        private void detach_CashReports(CashReport entity)
        {
            this.SendPropertyChanging();
            entity.Branch = null;
        }

        private void attach_DistributionDocuments(DistributionDocument entity)
        {
            this.SendPropertyChanging();
            entity.Branch = this;
        }

        private void detach_DistributionDocuments(DistributionDocument entity)
        {
            this.SendPropertyChanging();
            entity.Branch = null;
        }

        private void attach_Distributions(Distribution entity)
        {
            this.SendPropertyChanging();
            entity.Branch = this;
        }

        private void detach_Distributions(Distribution entity)
        {
            this.SendPropertyChanging();
            entity.Branch = null;
        }

        private void attach_IncomingFactures(IncomingFacture entity)
        {
            this.SendPropertyChanging();
            entity.Branch = this;
        }

        private void detach_IncomingFactures(IncomingFacture entity)
        {
            this.SendPropertyChanging();
            entity.Branch = null;
        }

        private void attach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.Branch = this;
        }

        private void detach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.Branch = null;
        }

        private void attach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.Branch = this;
        }

        private void detach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.Branch = null;
        }

        private void attach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Branch = this;
        }

        private void detach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Branch = null;
        }

        private void attach_RollBackDistributions(RollBackDistribution entity)
        {
            this.SendPropertyChanging();
            entity.Branch = this;
        }

        private void detach_RollBackDistributions(RollBackDistribution entity)
        {
            this.SendPropertyChanging();
            entity.Branch = null;
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging();
            entity.Branch = this;
        }

        private void detach_Users(User entity)
        {
            this.SendPropertyChanging();
            entity.Branch = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokerageBrokerageTypes")]
    public partial class BrokerageBrokerageType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _BrokerageID;

        private int _BrokerageTypeID;

        private bool _IsActive;

        private EntitySet<BrokerageSpecification> _BrokerageSpecifications;

        private EntityRef<Brokerage> _Brokerage;

        private EntityRef<BrokerageType> _BrokerageType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBrokerageIDChanging(int value);
        partial void OnBrokerageIDChanged();
        partial void OnBrokerageTypeIDChanging(int value);
        partial void OnBrokerageTypeIDChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public BrokerageBrokerageType()
        {
            this._BrokerageSpecifications = new EntitySet<BrokerageSpecification>(new Action<BrokerageSpecification>(this.attach_BrokerageSpecifications), new Action<BrokerageSpecification>(this.detach_BrokerageSpecifications));
            this._Brokerage = default(EntityRef<Brokerage>);
            this._BrokerageType = default(EntityRef<BrokerageType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageID", DbType = "Int NOT NULL")]
        public int BrokerageID
        {
            get
            {
                return this._BrokerageID;
            }
            set
            {
                if ((this._BrokerageID != value))
                {
                    if (this._Brokerage.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBrokerageIDChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageID = value;
                    this.SendPropertyChanged("BrokerageID");
                    this.OnBrokerageIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageTypeID", DbType = "Int NOT NULL")]
        public int BrokerageTypeID
        {
            get
            {
                return this._BrokerageTypeID;
            }
            set
            {
                if ((this._BrokerageTypeID != value))
                {
                    if (this._BrokerageType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBrokerageTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageTypeID = value;
                    this.SendPropertyChanged("BrokerageTypeID");
                    this.OnBrokerageTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageBrokerageType_BrokerageSpecification", Storage = "_BrokerageSpecifications", ThisKey = "ID", OtherKey = "BrokerageBrokerageTypeID")]
        public EntitySet<BrokerageSpecification> BrokerageSpecifications
        {
            get
            {
                return this._BrokerageSpecifications;
            }
            set
            {
                this._BrokerageSpecifications.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Brokerage_BrokerageBrokerageType", Storage = "_Brokerage", ThisKey = "BrokerageID", OtherKey = "ID", IsForeignKey = true)]
        public Brokerage Brokerage
        {
            get
            {
                return this._Brokerage.Entity;
            }
            set
            {
                Brokerage previousValue = this._Brokerage.Entity;
                if (((previousValue != value)
                            || (this._Brokerage.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Brokerage.Entity = null;
                        previousValue.BrokerageBrokerageTypes.Remove(this);
                    }
                    this._Brokerage.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageBrokerageTypes.Add(this);
                        this._BrokerageID = value.ID;
                    }
                    else
                    {
                        this._BrokerageID = default(int);
                    }
                    this.SendPropertyChanged("Brokerage");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageType_BrokerageBrokerageType", Storage = "_BrokerageType", ThisKey = "BrokerageTypeID", OtherKey = "ID", IsForeignKey = true)]
        public BrokerageType BrokerageType
        {
            get
            {
                return this._BrokerageType.Entity;
            }
            set
            {
                BrokerageType previousValue = this._BrokerageType.Entity;
                if (((previousValue != value)
                            || (this._BrokerageType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BrokerageType.Entity = null;
                        previousValue.BrokerageBrokerageTypes.Remove(this);
                    }
                    this._BrokerageType.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageBrokerageTypes.Add(this);
                        this._BrokerageTypeID = value.ID;
                    }
                    else
                    {
                        this._BrokerageTypeID = default(int);
                    }
                    this.SendPropertyChanged("BrokerageType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_BrokerageSpecifications(BrokerageSpecification entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageBrokerageType = this;
        }

        private void detach_BrokerageSpecifications(BrokerageSpecification entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageBrokerageType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokerageOperators")]
    public partial class BrokerageOperator : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private string _Code;

        private EntitySet<BrokerageTypeBrokerageOperator> _BrokerageTypeBrokerageOperators;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        #endregion

        public BrokerageOperator()
        {
            this._BrokerageTypeBrokerageOperators = new EntitySet<BrokerageTypeBrokerageOperator>(new Action<BrokerageTypeBrokerageOperator>(this.attach_BrokerageTypeBrokerageOperators), new Action<BrokerageTypeBrokerageOperator>(this.detach_BrokerageTypeBrokerageOperators));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(2) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageOperator_BrokerageTypeBrokerageOperator", Storage = "_BrokerageTypeBrokerageOperators", ThisKey = "ID", OtherKey = "BrokerageOperationID")]
        public EntitySet<BrokerageTypeBrokerageOperator> BrokerageTypeBrokerageOperators
        {
            get
            {
                return this._BrokerageTypeBrokerageOperators;
            }
            set
            {
                this._BrokerageTypeBrokerageOperators.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_BrokerageTypeBrokerageOperators(BrokerageTypeBrokerageOperator entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageOperator = this;
        }

        private void detach_BrokerageTypeBrokerageOperators(BrokerageTypeBrokerageOperator entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageOperator = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokerageParameters")]
    public partial class BrokerageParameter : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Description;

        private string _Name;

        private EntitySet<BrokerageParametersBrokerageType> _BrokerageParametersBrokerageTypes;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public BrokerageParameter()
        {
            this._BrokerageParametersBrokerageTypes = new EntitySet<BrokerageParametersBrokerageType>(new Action<BrokerageParametersBrokerageType>(this.attach_BrokerageParametersBrokerageTypes), new Action<BrokerageParametersBrokerageType>(this.detach_BrokerageParametersBrokerageTypes));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(5) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageParameter_BrokerageParametersBrokerageType", Storage = "_BrokerageParametersBrokerageTypes", ThisKey = "ID", OtherKey = "BrokerageParameterID")]
        public EntitySet<BrokerageParametersBrokerageType> BrokerageParametersBrokerageTypes
        {
            get
            {
                return this._BrokerageParametersBrokerageTypes;
            }
            set
            {
                this._BrokerageParametersBrokerageTypes.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_BrokerageParametersBrokerageTypes(BrokerageParametersBrokerageType entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageParameter = this;
        }

        private void detach_BrokerageParametersBrokerageTypes(BrokerageParametersBrokerageType entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageParameter = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokerageParametersBrokerageTypes")]
    public partial class BrokerageParametersBrokerageType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _BrokerageParameterID;

        private int _BrokerageTypeID;

        private int _OrderNumber;

        private EntityRef<BrokerageParameter> _BrokerageParameter;

        private EntityRef<BrokerageType> _BrokerageType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBrokerageParameterIDChanging(int value);
        partial void OnBrokerageParameterIDChanged();
        partial void OnBrokerageTypeIDChanging(int value);
        partial void OnBrokerageTypeIDChanged();
        partial void OnOrderNumberChanging(int value);
        partial void OnOrderNumberChanged();
        #endregion

        public BrokerageParametersBrokerageType()
        {
            this._BrokerageParameter = default(EntityRef<BrokerageParameter>);
            this._BrokerageType = default(EntityRef<BrokerageType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageParameterID", DbType = "Int NOT NULL")]
        public int BrokerageParameterID
        {
            get
            {
                return this._BrokerageParameterID;
            }
            set
            {
                if ((this._BrokerageParameterID != value))
                {
                    if (this._BrokerageParameter.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBrokerageParameterIDChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageParameterID = value;
                    this.SendPropertyChanged("BrokerageParameterID");
                    this.OnBrokerageParameterIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageTypeID", DbType = "Int NOT NULL")]
        public int BrokerageTypeID
        {
            get
            {
                return this._BrokerageTypeID;
            }
            set
            {
                if ((this._BrokerageTypeID != value))
                {
                    if (this._BrokerageType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBrokerageTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageTypeID = value;
                    this.SendPropertyChanged("BrokerageTypeID");
                    this.OnBrokerageTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderNumber", DbType = "Int NOT NULL")]
        public int OrderNumber
        {
            get
            {
                return this._OrderNumber;
            }
            set
            {
                if ((this._OrderNumber != value))
                {
                    this.OnOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrderNumber = value;
                    this.SendPropertyChanged("OrderNumber");
                    this.OnOrderNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageParameter_BrokerageParametersBrokerageType", Storage = "_BrokerageParameter", ThisKey = "BrokerageParameterID", OtherKey = "ID", IsForeignKey = true)]
        public BrokerageParameter BrokerageParameter
        {
            get
            {
                return this._BrokerageParameter.Entity;
            }
            set
            {
                BrokerageParameter previousValue = this._BrokerageParameter.Entity;
                if (((previousValue != value)
                            || (this._BrokerageParameter.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BrokerageParameter.Entity = null;
                        previousValue.BrokerageParametersBrokerageTypes.Remove(this);
                    }
                    this._BrokerageParameter.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageParametersBrokerageTypes.Add(this);
                        this._BrokerageParameterID = value.ID;
                    }
                    else
                    {
                        this._BrokerageParameterID = default(int);
                    }
                    this.SendPropertyChanged("BrokerageParameter");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageType_BrokerageParametersBrokerageType", Storage = "_BrokerageType", ThisKey = "BrokerageTypeID", OtherKey = "ID", IsForeignKey = true)]
        public BrokerageType BrokerageType
        {
            get
            {
                return this._BrokerageType.Entity;
            }
            set
            {
                BrokerageType previousValue = this._BrokerageType.Entity;
                if (((previousValue != value)
                            || (this._BrokerageType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BrokerageType.Entity = null;
                        previousValue.BrokerageParametersBrokerageTypes.Remove(this);
                    }
                    this._BrokerageType.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageParametersBrokerageTypes.Add(this);
                        this._BrokerageTypeID = value.ID;
                    }
                    else
                    {
                        this._BrokerageTypeID = default(int);
                    }
                    this.SendPropertyChanged("BrokerageType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Brokerages")]
    public partial class Brokerage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _DealID;

        private int _InsuranceSubTypeID;

        private decimal _PercentageForPrivates;

        private decimal _PercentageForLaws;

        private bool _IsActive;

        private EntitySet<BrokerageBrokerageType> _BrokerageBrokerageTypes;

        private EntitySet<PolicyItem> _PolicyItems;

        private EntityRef<Deal> _Deal;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDealIDChanging(int value);
        partial void OnDealIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnPercentageForPrivatesChanging(decimal value);
        partial void OnPercentageForPrivatesChanged();
        partial void OnPercentageForLawsChanging(decimal value);
        partial void OnPercentageForLawsChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public Brokerage()
        {
            this._BrokerageBrokerageTypes = new EntitySet<BrokerageBrokerageType>(new Action<BrokerageBrokerageType>(this.attach_BrokerageBrokerageTypes), new Action<BrokerageBrokerageType>(this.detach_BrokerageBrokerageTypes));
            this._PolicyItems = new EntitySet<PolicyItem>(new Action<PolicyItem>(this.attach_PolicyItems), new Action<PolicyItem>(this.detach_PolicyItems));
            this._Deal = default(EntityRef<Deal>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DealID", DbType = "Int NOT NULL")]
        public int DealID
        {
            get
            {
                return this._DealID;
            }
            set
            {
                if ((this._DealID != value))
                {
                    if (this._Deal.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDealIDChanging(value);
                    this.SendPropertyChanging();
                    this._DealID = value;
                    this.SendPropertyChanged("DealID");
                    this.OnDealIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageForPrivates", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageForPrivates
        {
            get
            {
                return this._PercentageForPrivates;
            }
            set
            {
                if ((this._PercentageForPrivates != value))
                {
                    this.OnPercentageForPrivatesChanging(value);
                    this.SendPropertyChanging();
                    this._PercentageForPrivates = value;
                    this.SendPropertyChanged("PercentageForPrivates");
                    this.OnPercentageForPrivatesChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageForLaws", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageForLaws
        {
            get
            {
                return this._PercentageForLaws;
            }
            set
            {
                if ((this._PercentageForLaws != value))
                {
                    this.OnPercentageForLawsChanging(value);
                    this.SendPropertyChanging();
                    this._PercentageForLaws = value;
                    this.SendPropertyChanged("PercentageForLaws");
                    this.OnPercentageForLawsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Brokerage_BrokerageBrokerageType", Storage = "_BrokerageBrokerageTypes", ThisKey = "ID", OtherKey = "BrokerageID")]
        public EntitySet<BrokerageBrokerageType> BrokerageBrokerageTypes
        {
            get
            {
                return this._BrokerageBrokerageTypes;
            }
            set
            {
                this._BrokerageBrokerageTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Brokerage_PolicyItem", Storage = "_PolicyItems", ThisKey = "ID", OtherKey = "BrokerageID")]
        public EntitySet<PolicyItem> PolicyItems
        {
            get
            {
                return this._PolicyItems;
            }
            set
            {
                this._PolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Deal_Brokerage", Storage = "_Deal", ThisKey = "DealID", OtherKey = "ID", IsForeignKey = true)]
        public Deal Deal
        {
            get
            {
                return this._Deal.Entity;
            }
            set
            {
                Deal previousValue = this._Deal.Entity;
                if (((previousValue != value)
                            || (this._Deal.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Deal.Entity = null;
                        previousValue.Brokerages.Remove(this);
                    }
                    this._Deal.Entity = value;
                    if ((value != null))
                    {
                        value.Brokerages.Add(this);
                        this._DealID = value.ID;
                    }
                    else
                    {
                        this._DealID = default(int);
                    }
                    this.SendPropertyChanged("Deal");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_Brokerage", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.Brokerages.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.Brokerages.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_BrokerageBrokerageTypes(BrokerageBrokerageType entity)
        {
            this.SendPropertyChanging();
            entity.Brokerage = this;
        }

        private void detach_BrokerageBrokerageTypes(BrokerageBrokerageType entity)
        {
            this.SendPropertyChanging();
            entity.Brokerage = null;
        }

        private void attach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.Brokerage = this;
        }

        private void detach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.Brokerage = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokeragesForMarketingAgents")]
    public partial class BrokeragesForMarketingAgent : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _UserID;

        private int _InsuranceSubTypeID;

        private int _InsuranceCompanyID;

        private decimal _PercentageForPrivates;

        private decimal _PercentageForLaws;

        private bool _IsActive;

        private EntitySet<PolicyItem> _PolicyItems;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnPercentageForPrivatesChanging(decimal value);
        partial void OnPercentageForPrivatesChanged();
        partial void OnPercentageForLawsChanging(decimal value);
        partial void OnPercentageForLawsChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public BrokeragesForMarketingAgent()
        {
            this._PolicyItems = new EntitySet<PolicyItem>(new Action<PolicyItem>(this.attach_PolicyItems), new Action<PolicyItem>(this.detach_PolicyItems));
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageForPrivates", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageForPrivates
        {
            get
            {
                return this._PercentageForPrivates;
            }
            set
            {
                if ((this._PercentageForPrivates != value))
                {
                    this.OnPercentageForPrivatesChanging(value);
                    this.SendPropertyChanging();
                    this._PercentageForPrivates = value;
                    this.SendPropertyChanged("PercentageForPrivates");
                    this.OnPercentageForPrivatesChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageForLaws", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageForLaws
        {
            get
            {
                return this._PercentageForLaws;
            }
            set
            {
                if ((this._PercentageForLaws != value))
                {
                    this.OnPercentageForLawsChanging(value);
                    this.SendPropertyChanging();
                    this._PercentageForLaws = value;
                    this.SendPropertyChanged("PercentageForLaws");
                    this.OnPercentageForLawsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokeragesForMarketingAgent_PolicyItem", Storage = "_PolicyItems", ThisKey = "ID", OtherKey = "MarketingAgentBrokerageID")]
        public EntitySet<PolicyItem> PolicyItems
        {
            get
            {
                return this._PolicyItems;
            }
            set
            {
                this._PolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_BrokeragesForMarketingAgent", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.BrokeragesForMarketingAgents.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.BrokeragesForMarketingAgents.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_BrokeragesForMarketingAgent", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.BrokeragesForMarketingAgents.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.BrokeragesForMarketingAgents.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_BrokeragesForMarketingAgent", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.BrokeragesForMarketingAgents.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.BrokeragesForMarketingAgents.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.BrokeragesForMarketingAgent = this;
        }

        private void detach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.BrokeragesForMarketingAgent = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokerageSlipInsuranceSubTypes")]
    public partial class BrokerageSlipInsuranceSubType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _BrokerageSlipID;

        private int _InsuranceSubTypeID;

        private decimal _BrokeragePercentagePrivates;

        private decimal _BrokeragePercentageLaws;

        private EntityRef<BrokerageSlip> _BrokerageSlip;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBrokerageSlipIDChanging(int value);
        partial void OnBrokerageSlipIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnBrokeragePercentagePrivatesChanging(decimal value);
        partial void OnBrokeragePercentagePrivatesChanged();
        partial void OnBrokeragePercentageLawsChanging(decimal value);
        partial void OnBrokeragePercentageLawsChanged();
        #endregion

        public BrokerageSlipInsuranceSubType()
        {
            this._BrokerageSlip = default(EntityRef<BrokerageSlip>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageSlipID", DbType = "Int NOT NULL")]
        public int BrokerageSlipID
        {
            get
            {
                return this._BrokerageSlipID;
            }
            set
            {
                if ((this._BrokerageSlipID != value))
                {
                    if (this._BrokerageSlip.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBrokerageSlipIDChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageSlipID = value;
                    this.SendPropertyChanged("BrokerageSlipID");
                    this.OnBrokerageSlipIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokeragePercentagePrivates", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokeragePercentagePrivates
        {
            get
            {
                return this._BrokeragePercentagePrivates;
            }
            set
            {
                if ((this._BrokeragePercentagePrivates != value))
                {
                    this.OnBrokeragePercentagePrivatesChanging(value);
                    this.SendPropertyChanging();
                    this._BrokeragePercentagePrivates = value;
                    this.SendPropertyChanged("BrokeragePercentagePrivates");
                    this.OnBrokeragePercentagePrivatesChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokeragePercentageLaws", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokeragePercentageLaws
        {
            get
            {
                return this._BrokeragePercentageLaws;
            }
            set
            {
                if ((this._BrokeragePercentageLaws != value))
                {
                    this.OnBrokeragePercentageLawsChanging(value);
                    this.SendPropertyChanging();
                    this._BrokeragePercentageLaws = value;
                    this.SendPropertyChanged("BrokeragePercentageLaws");
                    this.OnBrokeragePercentageLawsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageSlip_BrokerageSlipInsuranceSubType", Storage = "_BrokerageSlip", ThisKey = "BrokerageSlipID", OtherKey = "ID", IsForeignKey = true)]
        public BrokerageSlip BrokerageSlip
        {
            get
            {
                return this._BrokerageSlip.Entity;
            }
            set
            {
                BrokerageSlip previousValue = this._BrokerageSlip.Entity;
                if (((previousValue != value)
                            || (this._BrokerageSlip.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BrokerageSlip.Entity = null;
                        previousValue.BrokerageSlipInsuranceSubTypes.Remove(this);
                    }
                    this._BrokerageSlip.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageSlipInsuranceSubTypes.Add(this);
                        this._BrokerageSlipID = value.ID;
                    }
                    else
                    {
                        this._BrokerageSlipID = default(int);
                    }
                    this.SendPropertyChanged("BrokerageSlip");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_BrokerageSlipInsuranceSubType", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.BrokerageSlipInsuranceSubTypes.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageSlipInsuranceSubTypes.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokerageSlipPolicyItems")]
    public partial class BrokerageSlipPolicyItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _BrokerageSlipID;

        private int _PolicyItemID;

        private EntityRef<BrokerageSlip> _BrokerageSlip;

        private EntityRef<PolicyItem> _PolicyItem;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBrokerageSlipIDChanging(int value);
        partial void OnBrokerageSlipIDChanged();
        partial void OnPolicyItemIDChanging(int value);
        partial void OnPolicyItemIDChanged();
        #endregion

        public BrokerageSlipPolicyItem()
        {
            this._BrokerageSlip = default(EntityRef<BrokerageSlip>);
            this._PolicyItem = default(EntityRef<PolicyItem>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageSlipID", DbType = "Int NOT NULL")]
        public int BrokerageSlipID
        {
            get
            {
                return this._BrokerageSlipID;
            }
            set
            {
                if ((this._BrokerageSlipID != value))
                {
                    if (this._BrokerageSlip.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBrokerageSlipIDChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageSlipID = value;
                    this.SendPropertyChanged("BrokerageSlipID");
                    this.OnBrokerageSlipIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL")]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    if (this._PolicyItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPolicyItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyItemID = value;
                    this.SendPropertyChanged("PolicyItemID");
                    this.OnPolicyItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageSlip_BrokerageSlipPolicyItem", Storage = "_BrokerageSlip", ThisKey = "BrokerageSlipID", OtherKey = "ID", IsForeignKey = true)]
        public BrokerageSlip BrokerageSlip
        {
            get
            {
                return this._BrokerageSlip.Entity;
            }
            set
            {
                BrokerageSlip previousValue = this._BrokerageSlip.Entity;
                if (((previousValue != value)
                            || (this._BrokerageSlip.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BrokerageSlip.Entity = null;
                        previousValue.BrokerageSlipPolicyItems.Remove(this);
                    }
                    this._BrokerageSlip.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageSlipPolicyItems.Add(this);
                        this._BrokerageSlipID = value.ID;
                    }
                    else
                    {
                        this._BrokerageSlipID = default(int);
                    }
                    this.SendPropertyChanged("BrokerageSlip");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_BrokerageSlipPolicyItem", Storage = "_PolicyItem", ThisKey = "PolicyItemID", OtherKey = "ID", IsForeignKey = true)]
        public PolicyItem PolicyItem
        {
            get
            {
                return this._PolicyItem.Entity;
            }
            set
            {
                PolicyItem previousValue = this._PolicyItem.Entity;
                if (((previousValue != value)
                            || (this._PolicyItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PolicyItem.Entity = null;
                        previousValue.BrokerageSlipPolicyItems.Remove(this);
                    }
                    this._PolicyItem.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageSlipPolicyItems.Add(this);
                        this._PolicyItemID = value.ID;
                    }
                    else
                    {
                        this._PolicyItemID = default(int);
                    }
                    this.SendPropertyChanged("PolicyItem");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokerageSlips")]
    public partial class BrokerageSlip : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Number;

        private System.DateTime _FromDate;

        private System.DateTime _ToDate;

        private int _InsuranceCompanyID;

        private string _Insurer;

        private string _InsuranceRisks;

        private string _InsuranceThings;

        private string _BasisForCompensation;

        private string _OtherConditions;

        private string _Description;

        private System.DateTime _Date;

        private EntitySet<BrokerageSlipInsuranceSubType> _BrokerageSlipInsuranceSubTypes;

        private EntitySet<BrokerageSlipPolicyItem> _BrokerageSlipPolicyItems;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNumberChanging(string value);
        partial void OnNumberChanged();
        partial void OnFromDateChanging(System.DateTime value);
        partial void OnFromDateChanged();
        partial void OnToDateChanging(System.DateTime value);
        partial void OnToDateChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnInsurerChanging(string value);
        partial void OnInsurerChanged();
        partial void OnInsuranceRisksChanging(string value);
        partial void OnInsuranceRisksChanged();
        partial void OnInsuranceThingsChanging(string value);
        partial void OnInsuranceThingsChanged();
        partial void OnBasisForCompensationChanging(string value);
        partial void OnBasisForCompensationChanged();
        partial void OnOtherConditionsChanging(string value);
        partial void OnOtherConditionsChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        #endregion

        public BrokerageSlip()
        {
            this._BrokerageSlipInsuranceSubTypes = new EntitySet<BrokerageSlipInsuranceSubType>(new Action<BrokerageSlipInsuranceSubType>(this.attach_BrokerageSlipInsuranceSubTypes), new Action<BrokerageSlipInsuranceSubType>(this.detach_BrokerageSlipInsuranceSubTypes));
            this._BrokerageSlipPolicyItems = new EntitySet<BrokerageSlipPolicyItem>(new Action<BrokerageSlipPolicyItem>(this.attach_BrokerageSlipPolicyItems), new Action<BrokerageSlipPolicyItem>(this.detach_BrokerageSlipPolicyItems));
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if ((this._FromDate != value))
                {
                    this.OnFromDateChanging(value);
                    this.SendPropertyChanging();
                    this._FromDate = value;
                    this.SendPropertyChanged("FromDate");
                    this.OnFromDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if ((this._ToDate != value))
                {
                    this.OnToDateChanging(value);
                    this.SendPropertyChanging();
                    this._ToDate = value;
                    this.SendPropertyChanged("ToDate");
                    this.OnToDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Insurer", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string Insurer
        {
            get
            {
                return this._Insurer;
            }
            set
            {
                if ((this._Insurer != value))
                {
                    this.OnInsurerChanging(value);
                    this.SendPropertyChanging();
                    this._Insurer = value;
                    this.SendPropertyChanged("Insurer");
                    this.OnInsurerChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceRisks", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string InsuranceRisks
        {
            get
            {
                return this._InsuranceRisks;
            }
            set
            {
                if ((this._InsuranceRisks != value))
                {
                    this.OnInsuranceRisksChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceRisks = value;
                    this.SendPropertyChanged("InsuranceRisks");
                    this.OnInsuranceRisksChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceThings", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string InsuranceThings
        {
            get
            {
                return this._InsuranceThings;
            }
            set
            {
                if ((this._InsuranceThings != value))
                {
                    this.OnInsuranceThingsChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceThings = value;
                    this.SendPropertyChanged("InsuranceThings");
                    this.OnInsuranceThingsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BasisForCompensation", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string BasisForCompensation
        {
            get
            {
                return this._BasisForCompensation;
            }
            set
            {
                if ((this._BasisForCompensation != value))
                {
                    this.OnBasisForCompensationChanging(value);
                    this.SendPropertyChanging();
                    this._BasisForCompensation = value;
                    this.SendPropertyChanged("BasisForCompensation");
                    this.OnBasisForCompensationChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OtherConditions", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string OtherConditions
        {
            get
            {
                return this._OtherConditions;
            }
            set
            {
                if ((this._OtherConditions != value))
                {
                    this.OnOtherConditionsChanging(value);
                    this.SendPropertyChanging();
                    this._OtherConditions = value;
                    this.SendPropertyChanged("OtherConditions");
                    this.OnOtherConditionsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageSlip_BrokerageSlipInsuranceSubType", Storage = "_BrokerageSlipInsuranceSubTypes", ThisKey = "ID", OtherKey = "BrokerageSlipID")]
        public EntitySet<BrokerageSlipInsuranceSubType> BrokerageSlipInsuranceSubTypes
        {
            get
            {
                return this._BrokerageSlipInsuranceSubTypes;
            }
            set
            {
                this._BrokerageSlipInsuranceSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageSlip_BrokerageSlipPolicyItem", Storage = "_BrokerageSlipPolicyItems", ThisKey = "ID", OtherKey = "BrokerageSlipID")]
        public EntitySet<BrokerageSlipPolicyItem> BrokerageSlipPolicyItems
        {
            get
            {
                return this._BrokerageSlipPolicyItems;
            }
            set
            {
                this._BrokerageSlipPolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_BrokerageSlip", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.BrokerageSlips.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageSlips.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_BrokerageSlipInsuranceSubTypes(BrokerageSlipInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageSlip = this;
        }

        private void detach_BrokerageSlipInsuranceSubTypes(BrokerageSlipInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageSlip = null;
        }

        private void attach_BrokerageSlipPolicyItems(BrokerageSlipPolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageSlip = this;
        }

        private void detach_BrokerageSlipPolicyItems(BrokerageSlipPolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageSlip = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokerageSpecifications")]
    public partial class BrokerageSpecification : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private decimal _DownValue;

        private decimal _UpValue;

        private decimal _AdditionalValue;

        private int _BrokerageBrokerageTypeID;

        private System.Nullable<bool> _IsPositive;

        private EntityRef<BrokerageBrokerageType> _BrokerageBrokerageType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDownValueChanging(decimal value);
        partial void OnDownValueChanged();
        partial void OnUpValueChanging(decimal value);
        partial void OnUpValueChanged();
        partial void OnAdditionalValueChanging(decimal value);
        partial void OnAdditionalValueChanged();
        partial void OnBrokerageBrokerageTypeIDChanging(int value);
        partial void OnBrokerageBrokerageTypeIDChanged();
        partial void OnIsPositiveChanging(System.Nullable<bool> value);
        partial void OnIsPositiveChanged();
        #endregion

        public BrokerageSpecification()
        {
            this._BrokerageBrokerageType = default(EntityRef<BrokerageBrokerageType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DownValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DownValue
        {
            get
            {
                return this._DownValue;
            }
            set
            {
                if ((this._DownValue != value))
                {
                    this.OnDownValueChanging(value);
                    this.SendPropertyChanging();
                    this._DownValue = value;
                    this.SendPropertyChanged("DownValue");
                    this.OnDownValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UpValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal UpValue
        {
            get
            {
                return this._UpValue;
            }
            set
            {
                if ((this._UpValue != value))
                {
                    this.OnUpValueChanging(value);
                    this.SendPropertyChanging();
                    this._UpValue = value;
                    this.SendPropertyChanged("UpValue");
                    this.OnUpValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AdditionalValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal AdditionalValue
        {
            get
            {
                return this._AdditionalValue;
            }
            set
            {
                if ((this._AdditionalValue != value))
                {
                    this.OnAdditionalValueChanging(value);
                    this.SendPropertyChanging();
                    this._AdditionalValue = value;
                    this.SendPropertyChanged("AdditionalValue");
                    this.OnAdditionalValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageBrokerageTypeID", DbType = "Int NOT NULL")]
        public int BrokerageBrokerageTypeID
        {
            get
            {
                return this._BrokerageBrokerageTypeID;
            }
            set
            {
                if ((this._BrokerageBrokerageTypeID != value))
                {
                    if (this._BrokerageBrokerageType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBrokerageBrokerageTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageBrokerageTypeID = value;
                    this.SendPropertyChanged("BrokerageBrokerageTypeID");
                    this.OnBrokerageBrokerageTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsPositive", DbType = "Bit")]
        public System.Nullable<bool> IsPositive
        {
            get
            {
                return this._IsPositive;
            }
            set
            {
                if ((this._IsPositive != value))
                {
                    this.OnIsPositiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsPositive = value;
                    this.SendPropertyChanged("IsPositive");
                    this.OnIsPositiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageBrokerageType_BrokerageSpecification", Storage = "_BrokerageBrokerageType", ThisKey = "BrokerageBrokerageTypeID", OtherKey = "ID", IsForeignKey = true)]
        public BrokerageBrokerageType BrokerageBrokerageType
        {
            get
            {
                return this._BrokerageBrokerageType.Entity;
            }
            set
            {
                BrokerageBrokerageType previousValue = this._BrokerageBrokerageType.Entity;
                if (((previousValue != value)
                            || (this._BrokerageBrokerageType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BrokerageBrokerageType.Entity = null;
                        previousValue.BrokerageSpecifications.Remove(this);
                    }
                    this._BrokerageBrokerageType.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageSpecifications.Add(this);
                        this._BrokerageBrokerageTypeID = value.ID;
                    }
                    else
                    {
                        this._BrokerageBrokerageTypeID = default(int);
                    }
                    this.SendPropertyChanged("BrokerageBrokerageType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokerageTypeBrokerageOperators")]
    public partial class BrokerageTypeBrokerageOperator : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _BrokerageOperationID;

        private int _BrokerageTypeID;

        private int _OrderNumber;

        private EntityRef<BrokerageOperator> _BrokerageOperator;

        private EntityRef<BrokerageType> _BrokerageType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBrokerageOperationIDChanging(int value);
        partial void OnBrokerageOperationIDChanged();
        partial void OnBrokerageTypeIDChanging(int value);
        partial void OnBrokerageTypeIDChanged();
        partial void OnOrderNumberChanging(int value);
        partial void OnOrderNumberChanged();
        #endregion

        public BrokerageTypeBrokerageOperator()
        {
            this._BrokerageOperator = default(EntityRef<BrokerageOperator>);
            this._BrokerageType = default(EntityRef<BrokerageType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageOperationID", DbType = "Int NOT NULL")]
        public int BrokerageOperationID
        {
            get
            {
                return this._BrokerageOperationID;
            }
            set
            {
                if ((this._BrokerageOperationID != value))
                {
                    if (this._BrokerageOperator.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBrokerageOperationIDChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageOperationID = value;
                    this.SendPropertyChanged("BrokerageOperationID");
                    this.OnBrokerageOperationIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageTypeID", DbType = "Int NOT NULL")]
        public int BrokerageTypeID
        {
            get
            {
                return this._BrokerageTypeID;
            }
            set
            {
                if ((this._BrokerageTypeID != value))
                {
                    if (this._BrokerageType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBrokerageTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageTypeID = value;
                    this.SendPropertyChanged("BrokerageTypeID");
                    this.OnBrokerageTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderNumber", DbType = "Int NOT NULL")]
        public int OrderNumber
        {
            get
            {
                return this._OrderNumber;
            }
            set
            {
                if ((this._OrderNumber != value))
                {
                    this.OnOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrderNumber = value;
                    this.SendPropertyChanged("OrderNumber");
                    this.OnOrderNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageOperator_BrokerageTypeBrokerageOperator", Storage = "_BrokerageOperator", ThisKey = "BrokerageOperationID", OtherKey = "ID", IsForeignKey = true)]
        public BrokerageOperator BrokerageOperator
        {
            get
            {
                return this._BrokerageOperator.Entity;
            }
            set
            {
                BrokerageOperator previousValue = this._BrokerageOperator.Entity;
                if (((previousValue != value)
                            || (this._BrokerageOperator.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BrokerageOperator.Entity = null;
                        previousValue.BrokerageTypeBrokerageOperators.Remove(this);
                    }
                    this._BrokerageOperator.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageTypeBrokerageOperators.Add(this);
                        this._BrokerageOperationID = value.ID;
                    }
                    else
                    {
                        this._BrokerageOperationID = default(int);
                    }
                    this.SendPropertyChanged("BrokerageOperator");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageType_BrokerageTypeBrokerageOperator", Storage = "_BrokerageType", ThisKey = "BrokerageTypeID", OtherKey = "ID", IsForeignKey = true)]
        public BrokerageType BrokerageType
        {
            get
            {
                return this._BrokerageType.Entity;
            }
            set
            {
                BrokerageType previousValue = this._BrokerageType.Entity;
                if (((previousValue != value)
                            || (this._BrokerageType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BrokerageType.Entity = null;
                        previousValue.BrokerageTypeBrokerageOperators.Remove(this);
                    }
                    this._BrokerageType.Entity = value;
                    if ((value != null))
                    {
                        value.BrokerageTypeBrokerageOperators.Add(this);
                        this._BrokerageTypeID = value.ID;
                    }
                    else
                    {
                        this._BrokerageTypeID = default(int);
                    }
                    this.SendPropertyChanged("BrokerageType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokerageTypes")]
    public partial class BrokerageType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private string _Code;

        private string _Description;

        private EntitySet<BrokerageBrokerageType> _BrokerageBrokerageTypes;

        private EntitySet<BrokerageParametersBrokerageType> _BrokerageParametersBrokerageTypes;

        private EntitySet<BrokerageTypeBrokerageOperator> _BrokerageTypeBrokerageOperators;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public BrokerageType()
        {
            this._BrokerageBrokerageTypes = new EntitySet<BrokerageBrokerageType>(new Action<BrokerageBrokerageType>(this.attach_BrokerageBrokerageTypes), new Action<BrokerageBrokerageType>(this.detach_BrokerageBrokerageTypes));
            this._BrokerageParametersBrokerageTypes = new EntitySet<BrokerageParametersBrokerageType>(new Action<BrokerageParametersBrokerageType>(this.attach_BrokerageParametersBrokerageTypes), new Action<BrokerageParametersBrokerageType>(this.detach_BrokerageParametersBrokerageTypes));
            this._BrokerageTypeBrokerageOperators = new EntitySet<BrokerageTypeBrokerageOperator>(new Action<BrokerageTypeBrokerageOperator>(this.attach_BrokerageTypeBrokerageOperators), new Action<BrokerageTypeBrokerageOperator>(this.detach_BrokerageTypeBrokerageOperators));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(5) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageType_BrokerageBrokerageType", Storage = "_BrokerageBrokerageTypes", ThisKey = "ID", OtherKey = "BrokerageTypeID")]
        public EntitySet<BrokerageBrokerageType> BrokerageBrokerageTypes
        {
            get
            {
                return this._BrokerageBrokerageTypes;
            }
            set
            {
                this._BrokerageBrokerageTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageType_BrokerageParametersBrokerageType", Storage = "_BrokerageParametersBrokerageTypes", ThisKey = "ID", OtherKey = "BrokerageTypeID")]
        public EntitySet<BrokerageParametersBrokerageType> BrokerageParametersBrokerageTypes
        {
            get
            {
                return this._BrokerageParametersBrokerageTypes;
            }
            set
            {
                this._BrokerageParametersBrokerageTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokerageType_BrokerageTypeBrokerageOperator", Storage = "_BrokerageTypeBrokerageOperators", ThisKey = "ID", OtherKey = "BrokerageTypeID")]
        public EntitySet<BrokerageTypeBrokerageOperator> BrokerageTypeBrokerageOperators
        {
            get
            {
                return this._BrokerageTypeBrokerageOperators;
            }
            set
            {
                this._BrokerageTypeBrokerageOperators.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_BrokerageBrokerageTypes(BrokerageBrokerageType entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageType = this;
        }

        private void detach_BrokerageBrokerageTypes(BrokerageBrokerageType entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageType = null;
        }

        private void attach_BrokerageParametersBrokerageTypes(BrokerageParametersBrokerageType entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageType = this;
        }

        private void detach_BrokerageParametersBrokerageTypes(BrokerageParametersBrokerageType entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageType = null;
        }

        private void attach_BrokerageTypeBrokerageOperators(BrokerageTypeBrokerageOperator entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageType = this;
        }

        private void detach_BrokerageTypeBrokerageOperators(BrokerageTypeBrokerageOperator entity)
        {
            this.SendPropertyChanging();
            entity.BrokerageType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BrokerHouseInformations")]
    public partial class BrokerHouseInformation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _BrokerHouseName;

        private string _BrokerHouseLogoRelativeUrl;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnBrokerHouseNameChanging(string value);
        partial void OnBrokerHouseNameChanged();
        partial void OnBrokerHouseLogoRelativeUrlChanging(string value);
        partial void OnBrokerHouseLogoRelativeUrlChanged();
        #endregion

        public BrokerHouseInformation()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerHouseName", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string BrokerHouseName
        {
            get
            {
                return this._BrokerHouseName;
            }
            set
            {
                if ((this._BrokerHouseName != value))
                {
                    this.OnBrokerHouseNameChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerHouseName = value;
                    this.SendPropertyChanged("BrokerHouseName");
                    this.OnBrokerHouseNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerHouseLogoRelativeUrl", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string BrokerHouseLogoRelativeUrl
        {
            get
            {
                return this._BrokerHouseLogoRelativeUrl;
            }
            set
            {
                if ((this._BrokerHouseLogoRelativeUrl != value))
                {
                    this.OnBrokerHouseLogoRelativeUrlChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerHouseLogoRelativeUrl = value;
                    this.SendPropertyChanged("BrokerHouseLogoRelativeUrl");
                    this.OnBrokerHouseLogoRelativeUrlChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.CashReportItems")]
    public partial class CashReportItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _CashReportID;

        private int _PaymentID;

        private bool _IsActive;

        private EntityRef<CashReport> _CashReport;

        private EntityRef<Payment> _Payment;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCashReportIDChanging(int value);
        partial void OnCashReportIDChanged();
        partial void OnPaymentIDChanging(int value);
        partial void OnPaymentIDChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public CashReportItem()
        {
            this._CashReport = default(EntityRef<CashReport>);
            this._Payment = default(EntityRef<Payment>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CashReportID", DbType = "Int NOT NULL")]
        public int CashReportID
        {
            get
            {
                return this._CashReportID;
            }
            set
            {
                if ((this._CashReportID != value))
                {
                    if (this._CashReport.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCashReportIDChanging(value);
                    this.SendPropertyChanging();
                    this._CashReportID = value;
                    this.SendPropertyChanged("CashReportID");
                    this.OnCashReportIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaymentID", DbType = "Int NOT NULL")]
        public int PaymentID
        {
            get
            {
                return this._PaymentID;
            }
            set
            {
                if ((this._PaymentID != value))
                {
                    if (this._Payment.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPaymentIDChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentID = value;
                    this.SendPropertyChanged("PaymentID");
                    this.OnPaymentIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "CashReport_CashReportItem", Storage = "_CashReport", ThisKey = "CashReportID", OtherKey = "ID", IsForeignKey = true)]
        public CashReport CashReport
        {
            get
            {
                return this._CashReport.Entity;
            }
            set
            {
                CashReport previousValue = this._CashReport.Entity;
                if (((previousValue != value)
                            || (this._CashReport.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._CashReport.Entity = null;
                        previousValue.CashReportItems.Remove(this);
                    }
                    this._CashReport.Entity = value;
                    if ((value != null))
                    {
                        value.CashReportItems.Add(this);
                        this._CashReportID = value.ID;
                    }
                    else
                    {
                        this._CashReportID = default(int);
                    }
                    this.SendPropertyChanged("CashReport");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Payment_CashReportItem", Storage = "_Payment", ThisKey = "PaymentID", OtherKey = "ID", IsForeignKey = true)]
        public Payment Payment
        {
            get
            {
                return this._Payment.Entity;
            }
            set
            {
                Payment previousValue = this._Payment.Entity;
                if (((previousValue != value)
                            || (this._Payment.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Payment.Entity = null;
                        previousValue.CashReportItems.Remove(this);
                    }
                    this._Payment.Entity = value;
                    if ((value != null))
                    {
                        value.CashReportItems.Add(this);
                        this._PaymentID = value.ID;
                    }
                    else
                    {
                        this._PaymentID = default(int);
                    }
                    this.SendPropertyChanged("Payment");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.CashReports")]
    public partial class CashReport : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Number;

        private bool _Discard;

        private int _CashReportStatusID;

        private decimal _TotalValue;

        private int _BranchID;

        private System.DateTime _CashReportDate;

        private bool _IsAccountBooked;

        private System.Nullable<int> _ApproverUserID;

        private System.Nullable<System.DateTime> _ApproverDate;

        private EntitySet<CashReportItem> _CashReportItems;

        private EntityRef<Branch> _Branch;

        private EntityRef<CashReportStatuse> _CashReportStatuse;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNumberChanging(string value);
        partial void OnNumberChanged();
        partial void OnDiscardChanging(bool value);
        partial void OnDiscardChanged();
        partial void OnCashReportStatusIDChanging(int value);
        partial void OnCashReportStatusIDChanged();
        partial void OnTotalValueChanging(decimal value);
        partial void OnTotalValueChanged();
        partial void OnBranchIDChanging(int value);
        partial void OnBranchIDChanged();
        partial void OnCashReportDateChanging(System.DateTime value);
        partial void OnCashReportDateChanged();
        partial void OnIsAccountBookedChanging(bool value);
        partial void OnIsAccountBookedChanged();
        partial void OnApproverUserIDChanging(System.Nullable<int> value);
        partial void OnApproverUserIDChanged();
        partial void OnApproverDateChanging(System.Nullable<System.DateTime> value);
        partial void OnApproverDateChanged();
        #endregion

        public CashReport()
        {
            this._CashReportItems = new EntitySet<CashReportItem>(new Action<CashReportItem>(this.attach_CashReportItems), new Action<CashReportItem>(this.detach_CashReportItems));
            this._Branch = default(EntityRef<Branch>);
            this._CashReportStatuse = default(EntityRef<CashReportStatuse>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Discard", DbType = "Bit NOT NULL")]
        public bool Discard
        {
            get
            {
                return this._Discard;
            }
            set
            {
                if ((this._Discard != value))
                {
                    this.OnDiscardChanging(value);
                    this.SendPropertyChanging();
                    this._Discard = value;
                    this.SendPropertyChanged("Discard");
                    this.OnDiscardChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CashReportStatusID", DbType = "Int NOT NULL")]
        public int CashReportStatusID
        {
            get
            {
                return this._CashReportStatusID;
            }
            set
            {
                if ((this._CashReportStatusID != value))
                {
                    if (this._CashReportStatuse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCashReportStatusIDChanging(value);
                    this.SendPropertyChanging();
                    this._CashReportStatusID = value;
                    this.SendPropertyChanged("CashReportStatusID");
                    this.OnCashReportStatusIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalValue
        {
            get
            {
                return this._TotalValue;
            }
            set
            {
                if ((this._TotalValue != value))
                {
                    this.OnTotalValueChanging(value);
                    this.SendPropertyChanging();
                    this._TotalValue = value;
                    this.SendPropertyChanged("TotalValue");
                    this.OnTotalValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBranchIDChanging(value);
                    this.SendPropertyChanging();
                    this._BranchID = value;
                    this.SendPropertyChanged("BranchID");
                    this.OnBranchIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CashReportDate", DbType = "DateTime NOT NULL")]
        public System.DateTime CashReportDate
        {
            get
            {
                return this._CashReportDate;
            }
            set
            {
                if ((this._CashReportDate != value))
                {
                    this.OnCashReportDateChanging(value);
                    this.SendPropertyChanging();
                    this._CashReportDate = value;
                    this.SendPropertyChanged("CashReportDate");
                    this.OnCashReportDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsAccountBooked", DbType = "Bit NOT NULL")]
        public bool IsAccountBooked
        {
            get
            {
                return this._IsAccountBooked;
            }
            set
            {
                if ((this._IsAccountBooked != value))
                {
                    this.OnIsAccountBookedChanging(value);
                    this.SendPropertyChanging();
                    this._IsAccountBooked = value;
                    this.SendPropertyChanged("IsAccountBooked");
                    this.OnIsAccountBookedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ApproverUserID", DbType = "Int")]
        public System.Nullable<int> ApproverUserID
        {
            get
            {
                return this._ApproverUserID;
            }
            set
            {
                if ((this._ApproverUserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnApproverUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._ApproverUserID = value;
                    this.SendPropertyChanged("ApproverUserID");
                    this.OnApproverUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ApproverDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> ApproverDate
        {
            get
            {
                return this._ApproverDate;
            }
            set
            {
                if ((this._ApproverDate != value))
                {
                    this.OnApproverDateChanging(value);
                    this.SendPropertyChanging();
                    this._ApproverDate = value;
                    this.SendPropertyChanged("ApproverDate");
                    this.OnApproverDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "CashReport_CashReportItem", Storage = "_CashReportItems", ThisKey = "ID", OtherKey = "CashReportID")]
        public EntitySet<CashReportItem> CashReportItems
        {
            get
            {
                return this._CashReportItems;
            }
            set
            {
                this._CashReportItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_CashReport", Storage = "_Branch", ThisKey = "BranchID", OtherKey = "ID", IsForeignKey = true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if (((previousValue != value)
                            || (this._Branch.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Branch.Entity = null;
                        previousValue.CashReports.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if ((value != null))
                    {
                        value.CashReports.Add(this);
                        this._BranchID = value.ID;
                    }
                    else
                    {
                        this._BranchID = default(int);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "CashReportStatuse_CashReport", Storage = "_CashReportStatuse", ThisKey = "CashReportStatusID", OtherKey = "ID", IsForeignKey = true)]
        public CashReportStatuse CashReportStatuse
        {
            get
            {
                return this._CashReportStatuse.Entity;
            }
            set
            {
                CashReportStatuse previousValue = this._CashReportStatuse.Entity;
                if (((previousValue != value)
                            || (this._CashReportStatuse.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._CashReportStatuse.Entity = null;
                        previousValue.CashReports.Remove(this);
                    }
                    this._CashReportStatuse.Entity = value;
                    if ((value != null))
                    {
                        value.CashReports.Add(this);
                        this._CashReportStatusID = value.ID;
                    }
                    else
                    {
                        this._CashReportStatusID = default(int);
                    }
                    this.SendPropertyChanged("CashReportStatuse");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_CashReport", Storage = "_User", ThisKey = "ApproverUserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.CashReports.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.CashReports.Add(this);
                        this._ApproverUserID = value.ID;
                    }
                    else
                    {
                        this._ApproverUserID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_CashReportItems(CashReportItem entity)
        {
            this.SendPropertyChanging();
            entity.CashReport = this;
        }

        private void detach_CashReportItems(CashReportItem entity)
        {
            this.SendPropertyChanging();
            entity.CashReport = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.CashReportStatuses")]
    public partial class CashReportStatuse : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private EntitySet<CashReport> _CashReports;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public CashReportStatuse()
        {
            this._CashReports = new EntitySet<CashReport>(new Action<CashReport>(this.attach_CashReports), new Action<CashReport>(this.detach_CashReports));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "CashReportStatuse_CashReport", Storage = "_CashReports", ThisKey = "ID", OtherKey = "CashReportStatusID")]
        public EntitySet<CashReport> CashReports
        {
            get
            {
                return this._CashReports;
            }
            set
            {
                this._CashReports.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_CashReports(CashReport entity)
        {
            this.SendPropertyChanging();
            entity.CashReportStatuse = this;
        }

        private void detach_CashReports(CashReport entity)
        {
            this.SendPropertyChanging();
            entity.CashReportStatuse = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ClientAccounts")]
    public partial class ClientAccount : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ClientID;

        private int _BankID;

        private string _AccountNumber;

        private bool _IsActive;

        private EntityRef<Bank> _Bank;

        private EntityRef<Client> _Client;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnClientIDChanging(int value);
        partial void OnClientIDChanged();
        partial void OnBankIDChanging(int value);
        partial void OnBankIDChanged();
        partial void OnAccountNumberChanging(string value);
        partial void OnAccountNumberChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public ClientAccount()
        {
            this._Bank = default(EntityRef<Bank>);
            this._Client = default(EntityRef<Client>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankID", DbType = "Int NOT NULL")]
        public int BankID
        {
            get
            {
                return this._BankID;
            }
            set
            {
                if ((this._BankID != value))
                {
                    if (this._Bank.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBankIDChanging(value);
                    this.SendPropertyChanging();
                    this._BankID = value;
                    this.SendPropertyChanged("BankID");
                    this.OnBankIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AccountNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string AccountNumber
        {
            get
            {
                return this._AccountNumber;
            }
            set
            {
                if ((this._AccountNumber != value))
                {
                    this.OnAccountNumberChanging(value);
                    this.SendPropertyChanging();
                    this._AccountNumber = value;
                    this.SendPropertyChanged("AccountNumber");
                    this.OnAccountNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_ClientAccount", Storage = "_Bank", ThisKey = "BankID", OtherKey = "ID", IsForeignKey = true)]
        public Bank Bank
        {
            get
            {
                return this._Bank.Entity;
            }
            set
            {
                Bank previousValue = this._Bank.Entity;
                if (((previousValue != value)
                            || (this._Bank.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Bank.Entity = null;
                        previousValue.ClientAccounts.Remove(this);
                    }
                    this._Bank.Entity = value;
                    if ((value != null))
                    {
                        value.ClientAccounts.Add(this);
                        this._BankID = value.ID;
                    }
                    else
                    {
                        this._BankID = default(int);
                    }
                    this.SendPropertyChanged("Bank");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_ClientAccount", Storage = "_Client", ThisKey = "ClientID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if (((previousValue != value)
                            || (this._Client.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client.Entity = null;
                        previousValue.ClientAccounts.Remove(this);
                    }
                    this._Client.Entity = value;
                    if ((value != null))
                    {
                        value.ClientAccounts.Add(this);
                        this._ClientID = value.ID;
                    }
                    else
                    {
                        this._ClientID = default(int);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Clients")]
    public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _EMBG;

        private string _Name;

        private string _Phone;

        private string _Fax;

        private string _Mobile;

        private string _EMail;

        private bool _IsLaw;

        private string _Address;

        private int _PlaceID;

        private bool _IsInsuranceCompany;

        private bool _IsForeigner;

        private EntitySet<AccountFacture> _AccountFactures;

        private EntitySet<Accreditation> _Accreditations;

        private EntitySet<ClientAccount> _ClientAccounts;

        private EntitySet<Facture> _Factures;

        private EntitySet<LifePolicy> _LifePolicies;

        private EntitySet<LifePolicy> _LifePolicies1;

        private EntitySet<Offer> _Offers;

        private EntitySet<Offer> _Offers1;

        private EntitySet<Order> _Orders;

        private EntitySet<Order> _Orders1;

        private EntitySet<Policy> _Policies;

        private EntitySet<Policy> _Policies1;

        private EntitySet<RateDeal> _RateDeals;

        private EntitySet<Traveler> _Travelers;

        private EntityRef<Place> _Place;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnEMBGChanging(string value);
        partial void OnEMBGChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnMobileChanging(string value);
        partial void OnMobileChanged();
        partial void OnEMailChanging(string value);
        partial void OnEMailChanged();
        partial void OnIsLawChanging(bool value);
        partial void OnIsLawChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnPlaceIDChanging(int value);
        partial void OnPlaceIDChanged();
        partial void OnIsInsuranceCompanyChanging(bool value);
        partial void OnIsInsuranceCompanyChanged();
        partial void OnIsForeignerChanging(bool value);
        partial void OnIsForeignerChanged();
        #endregion

        public Client()
        {
            this._AccountFactures = new EntitySet<AccountFacture>(new Action<AccountFacture>(this.attach_AccountFactures), new Action<AccountFacture>(this.detach_AccountFactures));
            this._Accreditations = new EntitySet<Accreditation>(new Action<Accreditation>(this.attach_Accreditations), new Action<Accreditation>(this.detach_Accreditations));
            this._ClientAccounts = new EntitySet<ClientAccount>(new Action<ClientAccount>(this.attach_ClientAccounts), new Action<ClientAccount>(this.detach_ClientAccounts));
            this._Factures = new EntitySet<Facture>(new Action<Facture>(this.attach_Factures), new Action<Facture>(this.detach_Factures));
            this._LifePolicies = new EntitySet<LifePolicy>(new Action<LifePolicy>(this.attach_LifePolicies), new Action<LifePolicy>(this.detach_LifePolicies));
            this._LifePolicies1 = new EntitySet<LifePolicy>(new Action<LifePolicy>(this.attach_LifePolicies1), new Action<LifePolicy>(this.detach_LifePolicies1));
            this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
            this._Offers1 = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers1), new Action<Offer>(this.detach_Offers1));
            this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
            this._Orders1 = new EntitySet<Order>(new Action<Order>(this.attach_Orders1), new Action<Order>(this.detach_Orders1));
            this._Policies = new EntitySet<Policy>(new Action<Policy>(this.attach_Policies), new Action<Policy>(this.detach_Policies));
            this._Policies1 = new EntitySet<Policy>(new Action<Policy>(this.attach_Policies1), new Action<Policy>(this.detach_Policies1));
            this._RateDeals = new EntitySet<RateDeal>(new Action<RateDeal>(this.attach_RateDeals), new Action<RateDeal>(this.detach_RateDeals));
            this._Travelers = new EntitySet<Traveler>(new Action<Traveler>(this.attach_Travelers), new Action<Traveler>(this.detach_Travelers));
            this._Place = default(EntityRef<Place>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this.OnEMBGChanging(value);
                    this.SendPropertyChanging();
                    this._EMBG = value;
                    this.SendPropertyChanged("EMBG");
                    this.OnEMBGChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Phone", DbType = "NVarChar(30)")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if ((this._Phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Fax", DbType = "NVarChar(30)")]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if ((this._Fax != value))
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Mobile", DbType = "NVarChar(30)")]
        public string Mobile
        {
            get
            {
                return this._Mobile;
            }
            set
            {
                if ((this._Mobile != value))
                {
                    this.OnMobileChanging(value);
                    this.SendPropertyChanging();
                    this._Mobile = value;
                    this.SendPropertyChanged("Mobile");
                    this.OnMobileChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMail", DbType = "NVarChar(100)")]
        public string EMail
        {
            get
            {
                return this._EMail;
            }
            set
            {
                if ((this._EMail != value))
                {
                    this.OnEMailChanging(value);
                    this.SendPropertyChanging();
                    this._EMail = value;
                    this.SendPropertyChanged("EMail");
                    this.OnEMailChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsLaw", DbType = "Bit NOT NULL")]
        public bool IsLaw
        {
            get
            {
                return this._IsLaw;
            }
            set
            {
                if ((this._IsLaw != value))
                {
                    this.OnIsLawChanging(value);
                    this.SendPropertyChanging();
                    this._IsLaw = value;
                    this.SendPropertyChanged("IsLaw");
                    this.OnIsLawChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(100)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PlaceID", DbType = "Int NOT NULL")]
        public int PlaceID
        {
            get
            {
                return this._PlaceID;
            }
            set
            {
                if ((this._PlaceID != value))
                {
                    if (this._Place.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPlaceIDChanging(value);
                    this.SendPropertyChanging();
                    this._PlaceID = value;
                    this.SendPropertyChanged("PlaceID");
                    this.OnPlaceIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsInsuranceCompany", DbType = "Bit NOT NULL")]
        public bool IsInsuranceCompany
        {
            get
            {
                return this._IsInsuranceCompany;
            }
            set
            {
                if ((this._IsInsuranceCompany != value))
                {
                    this.OnIsInsuranceCompanyChanging(value);
                    this.SendPropertyChanging();
                    this._IsInsuranceCompany = value;
                    this.SendPropertyChanged("IsInsuranceCompany");
                    this.OnIsInsuranceCompanyChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsForeigner", DbType = "Bit NOT NULL")]
        public bool IsForeigner
        {
            get
            {
                return this._IsForeigner;
            }
            set
            {
                if ((this._IsForeigner != value))
                {
                    this.OnIsForeignerChanging(value);
                    this.SendPropertyChanging();
                    this._IsForeigner = value;
                    this.SendPropertyChanged("IsForeigner");
                    this.OnIsForeignerChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_AccountFacture", Storage = "_AccountFactures", ThisKey = "ID", OtherKey = "ClientID")]
        public EntitySet<AccountFacture> AccountFactures
        {
            get
            {
                return this._AccountFactures;
            }
            set
            {
                this._AccountFactures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Accreditation", Storage = "_Accreditations", ThisKey = "ID", OtherKey = "ClientID")]
        public EntitySet<Accreditation> Accreditations
        {
            get
            {
                return this._Accreditations;
            }
            set
            {
                this._Accreditations.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_ClientAccount", Storage = "_ClientAccounts", ThisKey = "ID", OtherKey = "ClientID")]
        public EntitySet<ClientAccount> ClientAccounts
        {
            get
            {
                return this._ClientAccounts;
            }
            set
            {
                this._ClientAccounts.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Facture", Storage = "_Factures", ThisKey = "ID", OtherKey = "ClientID")]
        public EntitySet<Facture> Factures
        {
            get
            {
                return this._Factures;
            }
            set
            {
                this._Factures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_LifePolicy", Storage = "_LifePolicies", ThisKey = "ID", OtherKey = "ClientID")]
        public EntitySet<LifePolicy> LifePolicies
        {
            get
            {
                return this._LifePolicies;
            }
            set
            {
                this._LifePolicies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_LifePolicy1", Storage = "_LifePolicies1", ThisKey = "ID", OtherKey = "OwnerID")]
        public EntitySet<LifePolicy> LifePolicies1
        {
            get
            {
                return this._LifePolicies1;
            }
            set
            {
                this._LifePolicies1.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Offer", Storage = "_Offers", ThisKey = "ID", OtherKey = "ClientID")]
        public EntitySet<Offer> Offers
        {
            get
            {
                return this._Offers;
            }
            set
            {
                this._Offers.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Offer1", Storage = "_Offers1", ThisKey = "ID", OtherKey = "OwnerID")]
        public EntitySet<Offer> Offers1
        {
            get
            {
                return this._Offers1;
            }
            set
            {
                this._Offers1.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Order", Storage = "_Orders", ThisKey = "ID", OtherKey = "ClientID")]
        public EntitySet<Order> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Order1", Storage = "_Orders1", ThisKey = "ID", OtherKey = "OwnerID")]
        public EntitySet<Order> Orders1
        {
            get
            {
                return this._Orders1;
            }
            set
            {
                this._Orders1.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Policy", Storage = "_Policies", ThisKey = "ID", OtherKey = "ClientID")]
        public EntitySet<Policy> Policies
        {
            get
            {
                return this._Policies;
            }
            set
            {
                this._Policies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Policy1", Storage = "_Policies1", ThisKey = "ID", OtherKey = "OwnerID")]
        public EntitySet<Policy> Policies1
        {
            get
            {
                return this._Policies1;
            }
            set
            {
                this._Policies1.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_RateDeal", Storage = "_RateDeals", ThisKey = "ID", OtherKey = "ClientID")]
        public EntitySet<RateDeal> RateDeals
        {
            get
            {
                return this._RateDeals;
            }
            set
            {
                this._RateDeals.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Traveler", Storage = "_Travelers", ThisKey = "ID", OtherKey = "ClientID")]
        public EntitySet<Traveler> Travelers
        {
            get
            {
                return this._Travelers;
            }
            set
            {
                this._Travelers.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Place_Client", Storage = "_Place", ThisKey = "PlaceID", OtherKey = "ID", IsForeignKey = true)]
        public Place Place
        {
            get
            {
                return this._Place.Entity;
            }
            set
            {
                Place previousValue = this._Place.Entity;
                if (((previousValue != value)
                            || (this._Place.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Place.Entity = null;
                        previousValue.Clients.Remove(this);
                    }
                    this._Place.Entity = value;
                    if ((value != null))
                    {
                        value.Clients.Add(this);
                        this._PlaceID = value.ID;
                    }
                    else
                    {
                        this._PlaceID = default(int);
                    }
                    this.SendPropertyChanged("Place");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.Client = this;
        }

        private void detach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.Client = null;
        }

        private void attach_Accreditations(Accreditation entity)
        {
            this.SendPropertyChanging();
            entity.Client = this;
        }

        private void detach_Accreditations(Accreditation entity)
        {
            this.SendPropertyChanging();
            entity.Client = null;
        }

        private void attach_ClientAccounts(ClientAccount entity)
        {
            this.SendPropertyChanging();
            entity.Client = this;
        }

        private void detach_ClientAccounts(ClientAccount entity)
        {
            this.SendPropertyChanging();
            entity.Client = null;
        }

        private void attach_Factures(Facture entity)
        {
            this.SendPropertyChanging();
            entity.Client = this;
        }

        private void detach_Factures(Facture entity)
        {
            this.SendPropertyChanging();
            entity.Client = null;
        }

        private void attach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.Client = this;
        }

        private void detach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.Client = null;
        }

        private void attach_LifePolicies1(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.Client1 = this;
        }

        private void detach_LifePolicies1(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.Client1 = null;
        }

        private void attach_Offers(Offer entity)
        {
            this.SendPropertyChanging();
            entity.Client = this;
        }

        private void detach_Offers(Offer entity)
        {
            this.SendPropertyChanging();
            entity.Client = null;
        }

        private void attach_Offers1(Offer entity)
        {
            this.SendPropertyChanging();
            entity.Client1 = this;
        }

        private void detach_Offers1(Offer entity)
        {
            this.SendPropertyChanging();
            entity.Client1 = null;
        }

        private void attach_Orders(Order entity)
        {
            this.SendPropertyChanging();
            entity.Client = this;
        }

        private void detach_Orders(Order entity)
        {
            this.SendPropertyChanging();
            entity.Client = null;
        }

        private void attach_Orders1(Order entity)
        {
            this.SendPropertyChanging();
            entity.Client1 = this;
        }

        private void detach_Orders1(Order entity)
        {
            this.SendPropertyChanging();
            entity.Client1 = null;
        }

        private void attach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Client = this;
        }

        private void detach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Client = null;
        }

        private void attach_Policies1(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Client1 = this;
        }

        private void detach_Policies1(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Client1 = null;
        }

        private void attach_RateDeals(RateDeal entity)
        {
            this.SendPropertyChanging();
            entity.Client = this;
        }

        private void detach_RateDeals(RateDeal entity)
        {
            this.SendPropertyChanging();
            entity.Client = null;
        }

        private void attach_Travelers(Traveler entity)
        {
            this.SendPropertyChanging();
            entity.Client = this;
        }

        private void detach_Travelers(Traveler entity)
        {
            this.SendPropertyChanging();
            entity.Client = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ControlAppropriateInsuranceSubType")]
    public partial class ControlAppropriateInsuranceSubType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ControlID;

        private int _InsuranceSubTypeID;

        private bool _IsActive;

        private EntityRef<Control> _Control;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnControlIDChanging(int value);
        partial void OnControlIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public ControlAppropriateInsuranceSubType()
        {
            this._Control = default(EntityRef<Control>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlID", DbType = "Int NOT NULL")]
        public int ControlID
        {
            get
            {
                return this._ControlID;
            }
            set
            {
                if ((this._ControlID != value))
                {
                    if (this._Control.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnControlIDChanging(value);
                    this.SendPropertyChanging();
                    this._ControlID = value;
                    this.SendPropertyChanged("ControlID");
                    this.OnControlIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Control_ControlAppropriateInsuranceSubType", Storage = "_Control", ThisKey = "ControlID", OtherKey = "ID", IsForeignKey = true)]
        public Control Control
        {
            get
            {
                return this._Control.Entity;
            }
            set
            {
                Control previousValue = this._Control.Entity;
                if (((previousValue != value)
                            || (this._Control.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Control.Entity = null;
                        previousValue.ControlAppropriateInsuranceSubTypes.Remove(this);
                    }
                    this._Control.Entity = value;
                    if ((value != null))
                    {
                        value.ControlAppropriateInsuranceSubTypes.Add(this);
                        this._ControlID = value.ID;
                    }
                    else
                    {
                        this._ControlID = default(int);
                    }
                    this.SendPropertyChanged("Control");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_ControlAppropriateInsuranceSubType", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.ControlAppropriateInsuranceSubTypes.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.ControlAppropriateInsuranceSubTypes.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ControlBindableValues")]
    public partial class ControlBindableValue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ControlID;

        private string _Value;

        private bool _IsActive;

        private EntityRef<Control> _Control;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnControlIDChanging(int value);
        partial void OnControlIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public ControlBindableValue()
        {
            this._Control = default(EntityRef<Control>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlID", DbType = "Int NOT NULL")]
        public int ControlID
        {
            get
            {
                return this._ControlID;
            }
            set
            {
                if ((this._ControlID != value))
                {
                    if (this._Control.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnControlIDChanging(value);
                    this.SendPropertyChanging();
                    this._ControlID = value;
                    this.SendPropertyChanged("ControlID");
                    this.OnControlIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Control_ControlBindableValue", Storage = "_Control", ThisKey = "ControlID", OtherKey = "ID", IsForeignKey = true)]
        public Control Control
        {
            get
            {
                return this._Control.Entity;
            }
            set
            {
                Control previousValue = this._Control.Entity;
                if (((previousValue != value)
                            || (this._Control.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Control.Entity = null;
                        previousValue.ControlBindableValues.Remove(this);
                    }
                    this._Control.Entity = value;
                    if ((value != null))
                    {
                        value.ControlBindableValues.Add(this);
                        this._ControlID = value.ID;
                    }
                    else
                    {
                        this._ControlID = default(int);
                    }
                    this.SendPropertyChanged("Control");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Controls")]
    public partial class Control : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _InsuranceSubTypeID;

        private string _TextBoxID;

        private bool _HasRequredFieldValidator;

        private string _LabelID;

        private string _LabelName;

        private bool _IsActive;

        private int _VariableTypeID;

        private bool _HasCompareValidator;

        private string _Description;

        private int _SpecialFieldTypeID;

        private System.Nullable<bool> _IsPositive;

        private System.Nullable<bool> _IsLatin;

        private int _FieldTypeID;

        private int _ColumnNumber;

        private int _OrderNumber;

        private EntitySet<ControlAppropriateInsuranceSubType> _ControlAppropriateInsuranceSubTypes;

        private EntitySet<ControlBindableValue> _ControlBindableValues;

        private EntitySet<ControlsSpecialType> _ControlsSpecialTypes;

        private EntitySet<PolicyExtendInformation> _PolicyExtendInformations;

        private EntityRef<FieldType> _FieldType;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        private EntityRef<SpecialFieldType> _SpecialFieldType;

        private EntityRef<VariableType> _VariableType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnTextBoxIDChanging(string value);
        partial void OnTextBoxIDChanged();
        partial void OnHasRequredFieldValidatorChanging(bool value);
        partial void OnHasRequredFieldValidatorChanged();
        partial void OnLabelIDChanging(string value);
        partial void OnLabelIDChanged();
        partial void OnLabelNameChanging(string value);
        partial void OnLabelNameChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnVariableTypeIDChanging(int value);
        partial void OnVariableTypeIDChanged();
        partial void OnHasCompareValidatorChanging(bool value);
        partial void OnHasCompareValidatorChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSpecialFieldTypeIDChanging(int value);
        partial void OnSpecialFieldTypeIDChanged();
        partial void OnIsPositiveChanging(System.Nullable<bool> value);
        partial void OnIsPositiveChanged();
        partial void OnIsLatinChanging(System.Nullable<bool> value);
        partial void OnIsLatinChanged();
        partial void OnFieldTypeIDChanging(int value);
        partial void OnFieldTypeIDChanged();
        partial void OnColumnNumberChanging(int value);
        partial void OnColumnNumberChanged();
        partial void OnOrderNumberChanging(int value);
        partial void OnOrderNumberChanged();
        #endregion

        public Control()
        {
            this._ControlAppropriateInsuranceSubTypes = new EntitySet<ControlAppropriateInsuranceSubType>(new Action<ControlAppropriateInsuranceSubType>(this.attach_ControlAppropriateInsuranceSubTypes), new Action<ControlAppropriateInsuranceSubType>(this.detach_ControlAppropriateInsuranceSubTypes));
            this._ControlBindableValues = new EntitySet<ControlBindableValue>(new Action<ControlBindableValue>(this.attach_ControlBindableValues), new Action<ControlBindableValue>(this.detach_ControlBindableValues));
            this._ControlsSpecialTypes = new EntitySet<ControlsSpecialType>(new Action<ControlsSpecialType>(this.attach_ControlsSpecialTypes), new Action<ControlsSpecialType>(this.detach_ControlsSpecialTypes));
            this._PolicyExtendInformations = new EntitySet<PolicyExtendInformation>(new Action<PolicyExtendInformation>(this.attach_PolicyExtendInformations), new Action<PolicyExtendInformation>(this.detach_PolicyExtendInformations));
            this._FieldType = default(EntityRef<FieldType>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            this._SpecialFieldType = default(EntityRef<SpecialFieldType>);
            this._VariableType = default(EntityRef<VariableType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TextBoxID", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string TextBoxID
        {
            get
            {
                return this._TextBoxID;
            }
            set
            {
                if ((this._TextBoxID != value))
                {
                    this.OnTextBoxIDChanging(value);
                    this.SendPropertyChanging();
                    this._TextBoxID = value;
                    this.SendPropertyChanged("TextBoxID");
                    this.OnTextBoxIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HasRequredFieldValidator", DbType = "Bit NOT NULL")]
        public bool HasRequredFieldValidator
        {
            get
            {
                return this._HasRequredFieldValidator;
            }
            set
            {
                if ((this._HasRequredFieldValidator != value))
                {
                    this.OnHasRequredFieldValidatorChanging(value);
                    this.SendPropertyChanging();
                    this._HasRequredFieldValidator = value;
                    this.SendPropertyChanged("HasRequredFieldValidator");
                    this.OnHasRequredFieldValidatorChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LabelID", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string LabelID
        {
            get
            {
                return this._LabelID;
            }
            set
            {
                if ((this._LabelID != value))
                {
                    this.OnLabelIDChanging(value);
                    this.SendPropertyChanging();
                    this._LabelID = value;
                    this.SendPropertyChanged("LabelID");
                    this.OnLabelIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LabelName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string LabelName
        {
            get
            {
                return this._LabelName;
            }
            set
            {
                if ((this._LabelName != value))
                {
                    this.OnLabelNameChanging(value);
                    this.SendPropertyChanging();
                    this._LabelName = value;
                    this.SendPropertyChanged("LabelName");
                    this.OnLabelNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_VariableTypeID", DbType = "Int NOT NULL")]
        public int VariableTypeID
        {
            get
            {
                return this._VariableTypeID;
            }
            set
            {
                if ((this._VariableTypeID != value))
                {
                    if (this._VariableType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnVariableTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._VariableTypeID = value;
                    this.SendPropertyChanged("VariableTypeID");
                    this.OnVariableTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HasCompareValidator", DbType = "Bit NOT NULL")]
        public bool HasCompareValidator
        {
            get
            {
                return this._HasCompareValidator;
            }
            set
            {
                if ((this._HasCompareValidator != value))
                {
                    this.OnHasCompareValidatorChanging(value);
                    this.SendPropertyChanging();
                    this._HasCompareValidator = value;
                    this.SendPropertyChanged("HasCompareValidator");
                    this.OnHasCompareValidatorChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SpecialFieldTypeID", DbType = "Int NOT NULL")]
        public int SpecialFieldTypeID
        {
            get
            {
                return this._SpecialFieldTypeID;
            }
            set
            {
                if ((this._SpecialFieldTypeID != value))
                {
                    if (this._SpecialFieldType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnSpecialFieldTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._SpecialFieldTypeID = value;
                    this.SendPropertyChanged("SpecialFieldTypeID");
                    this.OnSpecialFieldTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsPositive", DbType = "Bit")]
        public System.Nullable<bool> IsPositive
        {
            get
            {
                return this._IsPositive;
            }
            set
            {
                if ((this._IsPositive != value))
                {
                    this.OnIsPositiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsPositive = value;
                    this.SendPropertyChanged("IsPositive");
                    this.OnIsPositiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsLatin", DbType = "Bit")]
        public System.Nullable<bool> IsLatin
        {
            get
            {
                return this._IsLatin;
            }
            set
            {
                if ((this._IsLatin != value))
                {
                    this.OnIsLatinChanging(value);
                    this.SendPropertyChanging();
                    this._IsLatin = value;
                    this.SendPropertyChanged("IsLatin");
                    this.OnIsLatinChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FieldTypeID", DbType = "Int NOT NULL")]
        public int FieldTypeID
        {
            get
            {
                return this._FieldTypeID;
            }
            set
            {
                if ((this._FieldTypeID != value))
                {
                    if (this._FieldType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFieldTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._FieldTypeID = value;
                    this.SendPropertyChanged("FieldTypeID");
                    this.OnFieldTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ColumnNumber", DbType = "Int NOT NULL")]
        public int ColumnNumber
        {
            get
            {
                return this._ColumnNumber;
            }
            set
            {
                if ((this._ColumnNumber != value))
                {
                    this.OnColumnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ColumnNumber = value;
                    this.SendPropertyChanged("ColumnNumber");
                    this.OnColumnNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderNumber", DbType = "Int NOT NULL")]
        public int OrderNumber
        {
            get
            {
                return this._OrderNumber;
            }
            set
            {
                if ((this._OrderNumber != value))
                {
                    this.OnOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrderNumber = value;
                    this.SendPropertyChanged("OrderNumber");
                    this.OnOrderNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Control_ControlAppropriateInsuranceSubType", Storage = "_ControlAppropriateInsuranceSubTypes", ThisKey = "ID", OtherKey = "ControlID")]
        public EntitySet<ControlAppropriateInsuranceSubType> ControlAppropriateInsuranceSubTypes
        {
            get
            {
                return this._ControlAppropriateInsuranceSubTypes;
            }
            set
            {
                this._ControlAppropriateInsuranceSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Control_ControlBindableValue", Storage = "_ControlBindableValues", ThisKey = "ID", OtherKey = "ControlID")]
        public EntitySet<ControlBindableValue> ControlBindableValues
        {
            get
            {
                return this._ControlBindableValues;
            }
            set
            {
                this._ControlBindableValues.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Control_ControlsSpecialType", Storage = "_ControlsSpecialTypes", ThisKey = "ID", OtherKey = "ControlID")]
        public EntitySet<ControlsSpecialType> ControlsSpecialTypes
        {
            get
            {
                return this._ControlsSpecialTypes;
            }
            set
            {
                this._ControlsSpecialTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Control_PolicyExtendInformation", Storage = "_PolicyExtendInformations", ThisKey = "ID", OtherKey = "ControlID")]
        public EntitySet<PolicyExtendInformation> PolicyExtendInformations
        {
            get
            {
                return this._PolicyExtendInformations;
            }
            set
            {
                this._PolicyExtendInformations.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FieldType_Control", Storage = "_FieldType", ThisKey = "FieldTypeID", OtherKey = "ID", IsForeignKey = true)]
        public FieldType FieldType
        {
            get
            {
                return this._FieldType.Entity;
            }
            set
            {
                FieldType previousValue = this._FieldType.Entity;
                if (((previousValue != value)
                            || (this._FieldType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._FieldType.Entity = null;
                        previousValue.Controls.Remove(this);
                    }
                    this._FieldType.Entity = value;
                    if ((value != null))
                    {
                        value.Controls.Add(this);
                        this._FieldTypeID = value.ID;
                    }
                    else
                    {
                        this._FieldTypeID = default(int);
                    }
                    this.SendPropertyChanged("FieldType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_Control", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.Controls.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.Controls.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "SpecialFieldType_Control", Storage = "_SpecialFieldType", ThisKey = "SpecialFieldTypeID", OtherKey = "ID", IsForeignKey = true)]
        public SpecialFieldType SpecialFieldType
        {
            get
            {
                return this._SpecialFieldType.Entity;
            }
            set
            {
                SpecialFieldType previousValue = this._SpecialFieldType.Entity;
                if (((previousValue != value)
                            || (this._SpecialFieldType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SpecialFieldType.Entity = null;
                        previousValue.Controls.Remove(this);
                    }
                    this._SpecialFieldType.Entity = value;
                    if ((value != null))
                    {
                        value.Controls.Add(this);
                        this._SpecialFieldTypeID = value.ID;
                    }
                    else
                    {
                        this._SpecialFieldTypeID = default(int);
                    }
                    this.SendPropertyChanged("SpecialFieldType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "VariableType_Control", Storage = "_VariableType", ThisKey = "VariableTypeID", OtherKey = "ID", IsForeignKey = true)]
        public VariableType VariableType
        {
            get
            {
                return this._VariableType.Entity;
            }
            set
            {
                VariableType previousValue = this._VariableType.Entity;
                if (((previousValue != value)
                            || (this._VariableType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._VariableType.Entity = null;
                        previousValue.Controls.Remove(this);
                    }
                    this._VariableType.Entity = value;
                    if ((value != null))
                    {
                        value.Controls.Add(this);
                        this._VariableTypeID = value.ID;
                    }
                    else
                    {
                        this._VariableTypeID = default(int);
                    }
                    this.SendPropertyChanged("VariableType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ControlAppropriateInsuranceSubTypes(ControlAppropriateInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.Control = this;
        }

        private void detach_ControlAppropriateInsuranceSubTypes(ControlAppropriateInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.Control = null;
        }

        private void attach_ControlBindableValues(ControlBindableValue entity)
        {
            this.SendPropertyChanging();
            entity.Control = this;
        }

        private void detach_ControlBindableValues(ControlBindableValue entity)
        {
            this.SendPropertyChanging();
            entity.Control = null;
        }

        private void attach_ControlsSpecialTypes(ControlsSpecialType entity)
        {
            this.SendPropertyChanging();
            entity.Control = this;
        }

        private void detach_ControlsSpecialTypes(ControlsSpecialType entity)
        {
            this.SendPropertyChanging();
            entity.Control = null;
        }

        private void attach_PolicyExtendInformations(PolicyExtendInformation entity)
        {
            this.SendPropertyChanging();
            entity.Control = this;
        }

        private void detach_PolicyExtendInformations(PolicyExtendInformation entity)
        {
            this.SendPropertyChanging();
            entity.Control = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ControlsSpecialTypes")]
    public partial class ControlsSpecialType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _SpecialFieldTypeID;

        private int _ControlID;

        private bool _IsActive;

        private EntityRef<Control> _Control;

        private EntityRef<SpecialFieldType> _SpecialFieldType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnSpecialFieldTypeIDChanging(int value);
        partial void OnSpecialFieldTypeIDChanged();
        partial void OnControlIDChanging(int value);
        partial void OnControlIDChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public ControlsSpecialType()
        {
            this._Control = default(EntityRef<Control>);
            this._SpecialFieldType = default(EntityRef<SpecialFieldType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SpecialFieldTypeID", DbType = "Int NOT NULL")]
        public int SpecialFieldTypeID
        {
            get
            {
                return this._SpecialFieldTypeID;
            }
            set
            {
                if ((this._SpecialFieldTypeID != value))
                {
                    if (this._SpecialFieldType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnSpecialFieldTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._SpecialFieldTypeID = value;
                    this.SendPropertyChanged("SpecialFieldTypeID");
                    this.OnSpecialFieldTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlID", DbType = "Int NOT NULL")]
        public int ControlID
        {
            get
            {
                return this._ControlID;
            }
            set
            {
                if ((this._ControlID != value))
                {
                    if (this._Control.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnControlIDChanging(value);
                    this.SendPropertyChanging();
                    this._ControlID = value;
                    this.SendPropertyChanged("ControlID");
                    this.OnControlIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Control_ControlsSpecialType", Storage = "_Control", ThisKey = "ControlID", OtherKey = "ID", IsForeignKey = true)]
        public Control Control
        {
            get
            {
                return this._Control.Entity;
            }
            set
            {
                Control previousValue = this._Control.Entity;
                if (((previousValue != value)
                            || (this._Control.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Control.Entity = null;
                        previousValue.ControlsSpecialTypes.Remove(this);
                    }
                    this._Control.Entity = value;
                    if ((value != null))
                    {
                        value.ControlsSpecialTypes.Add(this);
                        this._ControlID = value.ID;
                    }
                    else
                    {
                        this._ControlID = default(int);
                    }
                    this.SendPropertyChanged("Control");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "SpecialFieldType_ControlsSpecialType", Storage = "_SpecialFieldType", ThisKey = "SpecialFieldTypeID", OtherKey = "ID", IsForeignKey = true)]
        public SpecialFieldType SpecialFieldType
        {
            get
            {
                return this._SpecialFieldType.Entity;
            }
            set
            {
                SpecialFieldType previousValue = this._SpecialFieldType.Entity;
                if (((previousValue != value)
                            || (this._SpecialFieldType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SpecialFieldType.Entity = null;
                        previousValue.ControlsSpecialTypes.Remove(this);
                    }
                    this._SpecialFieldType.Entity = value;
                    if ((value != null))
                    {
                        value.ControlsSpecialTypes.Add(this);
                        this._SpecialFieldTypeID = value.ID;
                    }
                    else
                    {
                        this._SpecialFieldTypeID = default(int);
                    }
                    this.SendPropertyChanged("SpecialFieldType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.CreditCards")]
    public partial class CreditCard : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private string _Description;

        private EntitySet<BankCreditCard> _BankCreditCards;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public CreditCard()
        {
            this._BankCreditCards = new EntitySet<BankCreditCard>(new Action<BankCreditCard>(this.attach_BankCreditCards), new Action<BankCreditCard>(this.detach_BankCreditCards));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "CreditCard_BankCreditCard", Storage = "_BankCreditCards", ThisKey = "ID", OtherKey = "CreditCardID")]
        public EntitySet<BankCreditCard> BankCreditCards
        {
            get
            {
                return this._BankCreditCards;
            }
            set
            {
                this._BankCreditCards.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_BankCreditCards(BankCreditCard entity)
        {
            this.SendPropertyChanging();
            entity.CreditCard = this;
        }

        private void detach_BankCreditCards(BankCreditCard entity)
        {
            this.SendPropertyChanging();
            entity.CreditCard = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Damages")]
    public partial class Damage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _DamageNumber;

        private int _PolicyItemID;

        private System.DateTime _DamageDate;

        private System.DateTime _AplicationDate;

        private string _DamagePlace;

        private decimal _EstimatedDamageValue;

        private decimal _LiquedatedValue;

        private decimal _PaidValue;

        private string _Description;

        private int _EntryByUserID;

        private EntityRef<PolicyItem> _PolicyItem;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDamageNumberChanging(string value);
        partial void OnDamageNumberChanged();
        partial void OnPolicyItemIDChanging(int value);
        partial void OnPolicyItemIDChanged();
        partial void OnDamageDateChanging(System.DateTime value);
        partial void OnDamageDateChanged();
        partial void OnAplicationDateChanging(System.DateTime value);
        partial void OnAplicationDateChanged();
        partial void OnDamagePlaceChanging(string value);
        partial void OnDamagePlaceChanged();
        partial void OnEstimatedDamageValueChanging(decimal value);
        partial void OnEstimatedDamageValueChanged();
        partial void OnLiquedatedValueChanging(decimal value);
        partial void OnLiquedatedValueChanged();
        partial void OnPaidValueChanging(decimal value);
        partial void OnPaidValueChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEntryByUserIDChanging(int value);
        partial void OnEntryByUserIDChanged();
        #endregion

        public Damage()
        {
            this._PolicyItem = default(EntityRef<PolicyItem>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DamageNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DamageNumber
        {
            get
            {
                return this._DamageNumber;
            }
            set
            {
                if ((this._DamageNumber != value))
                {
                    this.OnDamageNumberChanging(value);
                    this.SendPropertyChanging();
                    this._DamageNumber = value;
                    this.SendPropertyChanged("DamageNumber");
                    this.OnDamageNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL")]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    if (this._PolicyItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPolicyItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyItemID = value;
                    this.SendPropertyChanged("PolicyItemID");
                    this.OnPolicyItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DamageDate", DbType = "DateTime NOT NULL")]
        public System.DateTime DamageDate
        {
            get
            {
                return this._DamageDate;
            }
            set
            {
                if ((this._DamageDate != value))
                {
                    this.OnDamageDateChanging(value);
                    this.SendPropertyChanging();
                    this._DamageDate = value;
                    this.SendPropertyChanged("DamageDate");
                    this.OnDamageDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AplicationDate", DbType = "DateTime NOT NULL")]
        public System.DateTime AplicationDate
        {
            get
            {
                return this._AplicationDate;
            }
            set
            {
                if ((this._AplicationDate != value))
                {
                    this.OnAplicationDateChanging(value);
                    this.SendPropertyChanging();
                    this._AplicationDate = value;
                    this.SendPropertyChanged("AplicationDate");
                    this.OnAplicationDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DamagePlace", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string DamagePlace
        {
            get
            {
                return this._DamagePlace;
            }
            set
            {
                if ((this._DamagePlace != value))
                {
                    this.OnDamagePlaceChanging(value);
                    this.SendPropertyChanging();
                    this._DamagePlace = value;
                    this.SendPropertyChanged("DamagePlace");
                    this.OnDamagePlaceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EstimatedDamageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal EstimatedDamageValue
        {
            get
            {
                return this._EstimatedDamageValue;
            }
            set
            {
                if ((this._EstimatedDamageValue != value))
                {
                    this.OnEstimatedDamageValueChanging(value);
                    this.SendPropertyChanging();
                    this._EstimatedDamageValue = value;
                    this.SendPropertyChanged("EstimatedDamageValue");
                    this.OnEstimatedDamageValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LiquedatedValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal LiquedatedValue
        {
            get
            {
                return this._LiquedatedValue;
            }
            set
            {
                if ((this._LiquedatedValue != value))
                {
                    this.OnLiquedatedValueChanging(value);
                    this.SendPropertyChanging();
                    this._LiquedatedValue = value;
                    this.SendPropertyChanged("LiquedatedValue");
                    this.OnLiquedatedValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaidValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PaidValue
        {
            get
            {
                return this._PaidValue;
            }
            set
            {
                if ((this._PaidValue != value))
                {
                    this.OnPaidValueChanging(value);
                    this.SendPropertyChanging();
                    this._PaidValue = value;
                    this.SendPropertyChanged("PaidValue");
                    this.OnPaidValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EntryByUserID", DbType = "Int NOT NULL")]
        public int EntryByUserID
        {
            get
            {
                return this._EntryByUserID;
            }
            set
            {
                if ((this._EntryByUserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnEntryByUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._EntryByUserID = value;
                    this.SendPropertyChanged("EntryByUserID");
                    this.OnEntryByUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_Damage", Storage = "_PolicyItem", ThisKey = "PolicyItemID", OtherKey = "ID", IsForeignKey = true)]
        public PolicyItem PolicyItem
        {
            get
            {
                return this._PolicyItem.Entity;
            }
            set
            {
                PolicyItem previousValue = this._PolicyItem.Entity;
                if (((previousValue != value)
                            || (this._PolicyItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PolicyItem.Entity = null;
                        previousValue.Damages.Remove(this);
                    }
                    this._PolicyItem.Entity = value;
                    if ((value != null))
                    {
                        value.Damages.Add(this);
                        this._PolicyItemID = value.ID;
                    }
                    else
                    {
                        this._PolicyItemID = default(int);
                    }
                    this.SendPropertyChanged("PolicyItem");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Damage", Storage = "_User", ThisKey = "EntryByUserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Damages.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Damages.Add(this);
                        this._EntryByUserID = value.ID;
                    }
                    else
                    {
                        this._EntryByUserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DDVTypes")]
    public partial class DDVType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private string _Code;

        private bool _IsActive;

        private decimal _Percentage;

        private EntitySet<FactureSpecification> _FactureSpecifications;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnPercentageChanging(decimal value);
        partial void OnPercentageChanged();
        #endregion

        public DDVType()
        {
            this._FactureSpecifications = new EntitySet<FactureSpecification>(new Action<FactureSpecification>(this.attach_FactureSpecifications), new Action<FactureSpecification>(this.detach_FactureSpecifications));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(1) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Percentage", DbType = "Decimal(18,2) NOT NULL")]
        public decimal Percentage
        {
            get
            {
                return this._Percentage;
            }
            set
            {
                if ((this._Percentage != value))
                {
                    this.OnPercentageChanging(value);
                    this.SendPropertyChanging();
                    this._Percentage = value;
                    this.SendPropertyChanged("Percentage");
                    this.OnPercentageChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DDVType_FactureSpecification", Storage = "_FactureSpecifications", ThisKey = "ID", OtherKey = "DDVTypeID")]
        public EntitySet<FactureSpecification> FactureSpecifications
        {
            get
            {
                return this._FactureSpecifications;
            }
            set
            {
                this._FactureSpecifications.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_FactureSpecifications(FactureSpecification entity)
        {
            this.SendPropertyChanging();
            entity.DDVType = this;
        }

        private void detach_FactureSpecifications(FactureSpecification entity)
        {
            this.SendPropertyChanging();
            entity.DDVType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Deals")]
    public partial class Deal : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _InsuranceCompanyID;

        private string _Code;

        private string _Description;

        private bool _IsActive;

        private EntitySet<Brokerage> _Brokerages;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public Deal()
        {
            this._Brokerages = new EntitySet<Brokerage>(new Action<Brokerage>(this.attach_Brokerages), new Action<Brokerage>(this.detach_Brokerages));
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(100)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Deal_Brokerage", Storage = "_Brokerages", ThisKey = "ID", OtherKey = "DealID")]
        public EntitySet<Brokerage> Brokerages
        {
            get
            {
                return this._Brokerages;
            }
            set
            {
                this._Brokerages.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_Deal", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.Deals.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.Deals.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Brokerages(Brokerage entity)
        {
            this.SendPropertyChanging();
            entity.Deal = this;
        }

        private void detach_Brokerages(Brokerage entity)
        {
            this.SendPropertyChanging();
            entity.Deal = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DistributionDocTypes")]
    public partial class DistributionDocType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private EntitySet<DistributionDocument> _DistributionDocuments;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public DistributionDocType()
        {
            this._DistributionDocuments = new EntitySet<DistributionDocument>(new Action<DistributionDocument>(this.attach_DistributionDocuments), new Action<DistributionDocument>(this.detach_DistributionDocuments));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DistributionDocType_DistributionDocument", Storage = "_DistributionDocuments", ThisKey = "ID", OtherKey = "DistributionDocTypeID")]
        public EntitySet<DistributionDocument> DistributionDocuments
        {
            get
            {
                return this._DistributionDocuments;
            }
            set
            {
                this._DistributionDocuments.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_DistributionDocuments(DistributionDocument entity)
        {
            this.SendPropertyChanging();
            entity.DistributionDocType = this;
        }

        private void detach_DistributionDocuments(DistributionDocument entity)
        {
            this.SendPropertyChanging();
            entity.DistributionDocType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DistributionDocumentItems")]
    public partial class DistributionDocumentItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _DistributionDocumentID;

        private int _DistributionID;

        private EntityRef<DistributionDocument> _DistributionDocument;

        private EntityRef<Distribution> _Distribution;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDistributionDocumentIDChanging(int value);
        partial void OnDistributionDocumentIDChanged();
        partial void OnDistributionIDChanging(int value);
        partial void OnDistributionIDChanged();
        #endregion

        public DistributionDocumentItem()
        {
            this._DistributionDocument = default(EntityRef<DistributionDocument>);
            this._Distribution = default(EntityRef<Distribution>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionDocumentID", DbType = "Int NOT NULL")]
        public int DistributionDocumentID
        {
            get
            {
                return this._DistributionDocumentID;
            }
            set
            {
                if ((this._DistributionDocumentID != value))
                {
                    if (this._DistributionDocument.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDistributionDocumentIDChanging(value);
                    this.SendPropertyChanging();
                    this._DistributionDocumentID = value;
                    this.SendPropertyChanged("DistributionDocumentID");
                    this.OnDistributionDocumentIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionID", DbType = "Int NOT NULL")]
        public int DistributionID
        {
            get
            {
                return this._DistributionID;
            }
            set
            {
                if ((this._DistributionID != value))
                {
                    if (this._Distribution.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDistributionIDChanging(value);
                    this.SendPropertyChanging();
                    this._DistributionID = value;
                    this.SendPropertyChanged("DistributionID");
                    this.OnDistributionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DistributionDocument_DistributionDocumentItem", Storage = "_DistributionDocument", ThisKey = "DistributionDocumentID", OtherKey = "ID", IsForeignKey = true)]
        public DistributionDocument DistributionDocument
        {
            get
            {
                return this._DistributionDocument.Entity;
            }
            set
            {
                DistributionDocument previousValue = this._DistributionDocument.Entity;
                if (((previousValue != value)
                            || (this._DistributionDocument.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DistributionDocument.Entity = null;
                        previousValue.DistributionDocumentItems.Remove(this);
                    }
                    this._DistributionDocument.Entity = value;
                    if ((value != null))
                    {
                        value.DistributionDocumentItems.Add(this);
                        this._DistributionDocumentID = value.ID;
                    }
                    else
                    {
                        this._DistributionDocumentID = default(int);
                    }
                    this.SendPropertyChanged("DistributionDocument");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Distribution_DistributionDocumentItem", Storage = "_Distribution", ThisKey = "DistributionID", OtherKey = "ID", IsForeignKey = true)]
        public Distribution Distribution
        {
            get
            {
                return this._Distribution.Entity;
            }
            set
            {
                Distribution previousValue = this._Distribution.Entity;
                if (((previousValue != value)
                            || (this._Distribution.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Distribution.Entity = null;
                        previousValue.DistributionDocumentItems.Remove(this);
                    }
                    this._Distribution.Entity = value;
                    if ((value != null))
                    {
                        value.DistributionDocumentItems.Add(this);
                        this._DistributionID = value.ID;
                    }
                    else
                    {
                        this._DistributionID = default(int);
                    }
                    this.SendPropertyChanged("Distribution");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DistributionDocuments")]
    public partial class DistributionDocument : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _DocumentNumber;

        private System.DateTime _DocumentDate;

        private int _DocumentStatusID;

        private System.Nullable<int> _BranchID;

        private int _DistributionDocTypeID;

        private string _Description;

        private EntitySet<DistributionDocumentItem> _DistributionDocumentItems;

        private EntitySet<DistributionRoute> _DistributionRoutes;

        private EntityRef<Branch> _Branch;

        private EntityRef<DistributionDocType> _DistributionDocType;

        private EntityRef<DistributionDocumentStatuse> _DistributionDocumentStatuse;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDocumentNumberChanging(string value);
        partial void OnDocumentNumberChanged();
        partial void OnDocumentDateChanging(System.DateTime value);
        partial void OnDocumentDateChanged();
        partial void OnDocumentStatusIDChanging(int value);
        partial void OnDocumentStatusIDChanged();
        partial void OnBranchIDChanging(System.Nullable<int> value);
        partial void OnBranchIDChanged();
        partial void OnDistributionDocTypeIDChanging(int value);
        partial void OnDistributionDocTypeIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public DistributionDocument()
        {
            this._DistributionDocumentItems = new EntitySet<DistributionDocumentItem>(new Action<DistributionDocumentItem>(this.attach_DistributionDocumentItems), new Action<DistributionDocumentItem>(this.detach_DistributionDocumentItems));
            this._DistributionRoutes = new EntitySet<DistributionRoute>(new Action<DistributionRoute>(this.attach_DistributionRoutes), new Action<DistributionRoute>(this.detach_DistributionRoutes));
            this._Branch = default(EntityRef<Branch>);
            this._DistributionDocType = default(EntityRef<DistributionDocType>);
            this._DistributionDocumentStatuse = default(EntityRef<DistributionDocumentStatuse>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DocumentNumber
        {
            get
            {
                return this._DocumentNumber;
            }
            set
            {
                if ((this._DocumentNumber != value))
                {
                    this.OnDocumentNumberChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentNumber = value;
                    this.SendPropertyChanged("DocumentNumber");
                    this.OnDocumentNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentDate", DbType = "DateTime NOT NULL")]
        public System.DateTime DocumentDate
        {
            get
            {
                return this._DocumentDate;
            }
            set
            {
                if ((this._DocumentDate != value))
                {
                    this.OnDocumentDateChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentDate = value;
                    this.SendPropertyChanged("DocumentDate");
                    this.OnDocumentDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentStatusID", DbType = "Int NOT NULL")]
        public int DocumentStatusID
        {
            get
            {
                return this._DocumentStatusID;
            }
            set
            {
                if ((this._DocumentStatusID != value))
                {
                    if (this._DistributionDocumentStatuse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDocumentStatusIDChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentStatusID = value;
                    this.SendPropertyChanged("DocumentStatusID");
                    this.OnDocumentStatusIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int")]
        public System.Nullable<int> BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBranchIDChanging(value);
                    this.SendPropertyChanging();
                    this._BranchID = value;
                    this.SendPropertyChanged("BranchID");
                    this.OnBranchIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionDocTypeID", DbType = "Int NOT NULL")]
        public int DistributionDocTypeID
        {
            get
            {
                return this._DistributionDocTypeID;
            }
            set
            {
                if ((this._DistributionDocTypeID != value))
                {
                    if (this._DistributionDocType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDistributionDocTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._DistributionDocTypeID = value;
                    this.SendPropertyChanged("DistributionDocTypeID");
                    this.OnDistributionDocTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(500)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DistributionDocument_DistributionDocumentItem", Storage = "_DistributionDocumentItems", ThisKey = "ID", OtherKey = "DistributionDocumentID")]
        public EntitySet<DistributionDocumentItem> DistributionDocumentItems
        {
            get
            {
                return this._DistributionDocumentItems;
            }
            set
            {
                this._DistributionDocumentItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DistributionDocument_DistributionRoute", Storage = "_DistributionRoutes", ThisKey = "ID", OtherKey = "DistributionDocumentID")]
        public EntitySet<DistributionRoute> DistributionRoutes
        {
            get
            {
                return this._DistributionRoutes;
            }
            set
            {
                this._DistributionRoutes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_DistributionDocument", Storage = "_Branch", ThisKey = "BranchID", OtherKey = "ID", IsForeignKey = true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if (((previousValue != value)
                            || (this._Branch.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Branch.Entity = null;
                        previousValue.DistributionDocuments.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if ((value != null))
                    {
                        value.DistributionDocuments.Add(this);
                        this._BranchID = value.ID;
                    }
                    else
                    {
                        this._BranchID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DistributionDocType_DistributionDocument", Storage = "_DistributionDocType", ThisKey = "DistributionDocTypeID", OtherKey = "ID", IsForeignKey = true)]
        public DistributionDocType DistributionDocType
        {
            get
            {
                return this._DistributionDocType.Entity;
            }
            set
            {
                DistributionDocType previousValue = this._DistributionDocType.Entity;
                if (((previousValue != value)
                            || (this._DistributionDocType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DistributionDocType.Entity = null;
                        previousValue.DistributionDocuments.Remove(this);
                    }
                    this._DistributionDocType.Entity = value;
                    if ((value != null))
                    {
                        value.DistributionDocuments.Add(this);
                        this._DistributionDocTypeID = value.ID;
                    }
                    else
                    {
                        this._DistributionDocTypeID = default(int);
                    }
                    this.SendPropertyChanged("DistributionDocType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DistributionDocumentStatuse_DistributionDocument", Storage = "_DistributionDocumentStatuse", ThisKey = "DocumentStatusID", OtherKey = "ID", IsForeignKey = true)]
        public DistributionDocumentStatuse DistributionDocumentStatuse
        {
            get
            {
                return this._DistributionDocumentStatuse.Entity;
            }
            set
            {
                DistributionDocumentStatuse previousValue = this._DistributionDocumentStatuse.Entity;
                if (((previousValue != value)
                            || (this._DistributionDocumentStatuse.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DistributionDocumentStatuse.Entity = null;
                        previousValue.DistributionDocuments.Remove(this);
                    }
                    this._DistributionDocumentStatuse.Entity = value;
                    if ((value != null))
                    {
                        value.DistributionDocuments.Add(this);
                        this._DocumentStatusID = value.ID;
                    }
                    else
                    {
                        this._DocumentStatusID = default(int);
                    }
                    this.SendPropertyChanged("DistributionDocumentStatuse");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_DistributionDocumentItems(DistributionDocumentItem entity)
        {
            this.SendPropertyChanging();
            entity.DistributionDocument = this;
        }

        private void detach_DistributionDocumentItems(DistributionDocumentItem entity)
        {
            this.SendPropertyChanging();
            entity.DistributionDocument = null;
        }

        private void attach_DistributionRoutes(DistributionRoute entity)
        {
            this.SendPropertyChanging();
            entity.DistributionDocument = this;
        }

        private void detach_DistributionRoutes(DistributionRoute entity)
        {
            this.SendPropertyChanging();
            entity.DistributionDocument = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DistributionDocumentStatuses")]
    public partial class DistributionDocumentStatuse : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private EntitySet<DistributionDocument> _DistributionDocuments;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public DistributionDocumentStatuse()
        {
            this._DistributionDocuments = new EntitySet<DistributionDocument>(new Action<DistributionDocument>(this.attach_DistributionDocuments), new Action<DistributionDocument>(this.detach_DistributionDocuments));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DistributionDocumentStatuse_DistributionDocument", Storage = "_DistributionDocuments", ThisKey = "ID", OtherKey = "DocumentStatusID")]
        public EntitySet<DistributionDocument> DistributionDocuments
        {
            get
            {
                return this._DistributionDocuments;
            }
            set
            {
                this._DistributionDocuments.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_DistributionDocuments(DistributionDocument entity)
        {
            this.SendPropertyChanging();
            entity.DistributionDocumentStatuse = this;
        }

        private void detach_DistributionDocuments(DistributionDocument entity)
        {
            this.SendPropertyChanging();
            entity.DistributionDocumentStatuse = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DistributionDocumentTypes")]
    public partial class DistributionDocumentType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Description;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public DistributionDocumentType()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(2) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DistributionRoutes")]
    public partial class DistributionRoute : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _FromNumber;

        private string _ToNumber;

        private System.DateTime _Date;

        private int _FromUserID;

        private int _ToUserID;

        private int _DistributionDocumentID;

        private int _InsuranceCompanyID;

        private int _InsuranceSubTypeID;

        private EntityRef<DistributionDocument> _DistributionDocument;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        private EntityRef<User> _User;

        private EntityRef<User> _User1;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFromNumberChanging(string value);
        partial void OnFromNumberChanged();
        partial void OnToNumberChanging(string value);
        partial void OnToNumberChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnFromUserIDChanging(int value);
        partial void OnFromUserIDChanged();
        partial void OnToUserIDChanging(int value);
        partial void OnToUserIDChanged();
        partial void OnDistributionDocumentIDChanging(int value);
        partial void OnDistributionDocumentIDChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        #endregion

        public DistributionRoute()
        {
            this._DistributionDocument = default(EntityRef<DistributionDocument>);
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            this._User = default(EntityRef<User>);
            this._User1 = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string FromNumber
        {
            get
            {
                return this._FromNumber;
            }
            set
            {
                if ((this._FromNumber != value))
                {
                    this.OnFromNumberChanging(value);
                    this.SendPropertyChanging();
                    this._FromNumber = value;
                    this.SendPropertyChanged("FromNumber");
                    this.OnFromNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ToNumber
        {
            get
            {
                return this._ToNumber;
            }
            set
            {
                if ((this._ToNumber != value))
                {
                    this.OnToNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ToNumber = value;
                    this.SendPropertyChanged("ToNumber");
                    this.OnToNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromUserID", DbType = "Int NOT NULL")]
        public int FromUserID
        {
            get
            {
                return this._FromUserID;
            }
            set
            {
                if ((this._FromUserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFromUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._FromUserID = value;
                    this.SendPropertyChanged("FromUserID");
                    this.OnFromUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToUserID", DbType = "Int NOT NULL")]
        public int ToUserID
        {
            get
            {
                return this._ToUserID;
            }
            set
            {
                if ((this._ToUserID != value))
                {
                    if (this._User1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnToUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._ToUserID = value;
                    this.SendPropertyChanged("ToUserID");
                    this.OnToUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionDocumentID", DbType = "Int NOT NULL")]
        public int DistributionDocumentID
        {
            get
            {
                return this._DistributionDocumentID;
            }
            set
            {
                if ((this._DistributionDocumentID != value))
                {
                    if (this._DistributionDocument.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDistributionDocumentIDChanging(value);
                    this.SendPropertyChanging();
                    this._DistributionDocumentID = value;
                    this.SendPropertyChanged("DistributionDocumentID");
                    this.OnDistributionDocumentIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DistributionDocument_DistributionRoute", Storage = "_DistributionDocument", ThisKey = "DistributionDocumentID", OtherKey = "ID", IsForeignKey = true)]
        public DistributionDocument DistributionDocument
        {
            get
            {
                return this._DistributionDocument.Entity;
            }
            set
            {
                DistributionDocument previousValue = this._DistributionDocument.Entity;
                if (((previousValue != value)
                            || (this._DistributionDocument.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DistributionDocument.Entity = null;
                        previousValue.DistributionRoutes.Remove(this);
                    }
                    this._DistributionDocument.Entity = value;
                    if ((value != null))
                    {
                        value.DistributionRoutes.Add(this);
                        this._DistributionDocumentID = value.ID;
                    }
                    else
                    {
                        this._DistributionDocumentID = default(int);
                    }
                    this.SendPropertyChanged("DistributionDocument");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_DistributionRoute", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.DistributionRoutes.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.DistributionRoutes.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_DistributionRoute", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.DistributionRoutes.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.DistributionRoutes.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_DistributionRoute", Storage = "_User", ThisKey = "FromUserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.DistributionRoutes.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.DistributionRoutes.Add(this);
                        this._FromUserID = value.ID;
                    }
                    else
                    {
                        this._FromUserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_DistributionRoute1", Storage = "_User1", ThisKey = "ToUserID", OtherKey = "ID", IsForeignKey = true)]
        public User User1
        {
            get
            {
                return this._User1.Entity;
            }
            set
            {
                User previousValue = this._User1.Entity;
                if (((previousValue != value)
                            || (this._User1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User1.Entity = null;
                        previousValue.DistributionRoutes1.Remove(this);
                    }
                    this._User1.Entity = value;
                    if ((value != null))
                    {
                        value.DistributionRoutes1.Add(this);
                        this._ToUserID = value.ID;
                    }
                    else
                    {
                        this._ToUserID = default(int);
                    }
                    this.SendPropertyChanged("User1");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Distributions")]
    public partial class Distribution : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _InsuranceCompanyID;

        private string _PolicyNumber;

        private int _InsuranceSubTypeID;

        private System.DateTime _Date;

        private int _UserID;

        private bool _IsUsed;

        private int _DistributionStatusID;

        private System.Nullable<int> _BranchID;

        private EntitySet<DistributionDocumentItem> _DistributionDocumentItems;

        private EntitySet<TemporaryDistribution> _TemporaryDistributions;

        private EntityRef<Branch> _Branch;

        private EntityRef<DistributionStatuse> _DistributionStatuse;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnPolicyNumberChanging(string value);
        partial void OnPolicyNumberChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnIsUsedChanging(bool value);
        partial void OnIsUsedChanged();
        partial void OnDistributionStatusIDChanging(int value);
        partial void OnDistributionStatusIDChanged();
        partial void OnBranchIDChanging(System.Nullable<int> value);
        partial void OnBranchIDChanged();
        #endregion

        public Distribution()
        {
            this._DistributionDocumentItems = new EntitySet<DistributionDocumentItem>(new Action<DistributionDocumentItem>(this.attach_DistributionDocumentItems), new Action<DistributionDocumentItem>(this.detach_DistributionDocumentItems));
            this._TemporaryDistributions = new EntitySet<TemporaryDistribution>(new Action<TemporaryDistribution>(this.attach_TemporaryDistributions), new Action<TemporaryDistribution>(this.detach_TemporaryDistributions));
            this._Branch = default(EntityRef<Branch>);
            this._DistributionStatuse = default(EntityRef<DistributionStatuse>);
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string PolicyNumber
        {
            get
            {
                return this._PolicyNumber;
            }
            set
            {
                if ((this._PolicyNumber != value))
                {
                    this.OnPolicyNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyNumber = value;
                    this.SendPropertyChanged("PolicyNumber");
                    this.OnPolicyNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsUsed", DbType = "Bit NOT NULL")]
        public bool IsUsed
        {
            get
            {
                return this._IsUsed;
            }
            set
            {
                if ((this._IsUsed != value))
                {
                    this.OnIsUsedChanging(value);
                    this.SendPropertyChanging();
                    this._IsUsed = value;
                    this.SendPropertyChanged("IsUsed");
                    this.OnIsUsedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionStatusID", DbType = "Int NOT NULL")]
        public int DistributionStatusID
        {
            get
            {
                return this._DistributionStatusID;
            }
            set
            {
                if ((this._DistributionStatusID != value))
                {
                    if (this._DistributionStatuse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDistributionStatusIDChanging(value);
                    this.SendPropertyChanging();
                    this._DistributionStatusID = value;
                    this.SendPropertyChanged("DistributionStatusID");
                    this.OnDistributionStatusIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int")]
        public System.Nullable<int> BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBranchIDChanging(value);
                    this.SendPropertyChanging();
                    this._BranchID = value;
                    this.SendPropertyChanged("BranchID");
                    this.OnBranchIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Distribution_DistributionDocumentItem", Storage = "_DistributionDocumentItems", ThisKey = "ID", OtherKey = "DistributionID")]
        public EntitySet<DistributionDocumentItem> DistributionDocumentItems
        {
            get
            {
                return this._DistributionDocumentItems;
            }
            set
            {
                this._DistributionDocumentItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Distribution_TemporaryDistribution", Storage = "_TemporaryDistributions", ThisKey = "ID", OtherKey = "DistributionID")]
        public EntitySet<TemporaryDistribution> TemporaryDistributions
        {
            get
            {
                return this._TemporaryDistributions;
            }
            set
            {
                this._TemporaryDistributions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_Distribution", Storage = "_Branch", ThisKey = "BranchID", OtherKey = "ID", IsForeignKey = true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if (((previousValue != value)
                            || (this._Branch.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Branch.Entity = null;
                        previousValue.Distributions.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if ((value != null))
                    {
                        value.Distributions.Add(this);
                        this._BranchID = value.ID;
                    }
                    else
                    {
                        this._BranchID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DistributionStatuse_Distribution", Storage = "_DistributionStatuse", ThisKey = "DistributionStatusID", OtherKey = "ID", IsForeignKey = true)]
        public DistributionStatuse DistributionStatuse
        {
            get
            {
                return this._DistributionStatuse.Entity;
            }
            set
            {
                DistributionStatuse previousValue = this._DistributionStatuse.Entity;
                if (((previousValue != value)
                            || (this._DistributionStatuse.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DistributionStatuse.Entity = null;
                        previousValue.Distributions.Remove(this);
                    }
                    this._DistributionStatuse.Entity = value;
                    if ((value != null))
                    {
                        value.Distributions.Add(this);
                        this._DistributionStatusID = value.ID;
                    }
                    else
                    {
                        this._DistributionStatusID = default(int);
                    }
                    this.SendPropertyChanged("DistributionStatuse");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_Distribution", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.Distributions.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.Distributions.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_Distribution", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.Distributions.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.Distributions.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Distribution", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Distributions.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Distributions.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_DistributionDocumentItems(DistributionDocumentItem entity)
        {
            this.SendPropertyChanging();
            entity.Distribution = this;
        }

        private void detach_DistributionDocumentItems(DistributionDocumentItem entity)
        {
            this.SendPropertyChanging();
            entity.Distribution = null;
        }

        private void attach_TemporaryDistributions(TemporaryDistribution entity)
        {
            this.SendPropertyChanging();
            entity.Distribution = this;
        }

        private void detach_TemporaryDistributions(TemporaryDistribution entity)
        {
            this.SendPropertyChanging();
            entity.Distribution = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DistributionStatuses")]
    public partial class DistributionStatuse : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private string _Code;

        private EntitySet<Distribution> _Distributions;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        #endregion

        public DistributionStatuse()
        {
            this._Distributions = new EntitySet<Distribution>(new Action<Distribution>(this.attach_Distributions), new Action<Distribution>(this.detach_Distributions));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(2) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DistributionStatuse_Distribution", Storage = "_Distributions", ThisKey = "ID", OtherKey = "DistributionStatusID")]
        public EntitySet<Distribution> Distributions
        {
            get
            {
                return this._Distributions;
            }
            set
            {
                this._Distributions.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Distributions(Distribution entity)
        {
            this.SendPropertyChanging();
            entity.DistributionStatuse = this;
        }

        private void detach_Distributions(Distribution entity)
        {
            this.SendPropertyChanging();
            entity.DistributionStatuse = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DocumentSubTypes")]
    public partial class DocumentSubType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _DocumentTypeID;

        private string _Code;

        private string _Description;

        private EntitySet<AccountFacture> _AccountFactures;

        private EntitySet<Facture> _Factures;

        private EntitySet<Order> _Orders;

        private EntitySet<Service> _Services;

        private EntitySet<Statuse> _Statuses;

        private EntityRef<DocumentType> _DocumentType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDocumentTypeIDChanging(int value);
        partial void OnDocumentTypeIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public DocumentSubType()
        {
            this._AccountFactures = new EntitySet<AccountFacture>(new Action<AccountFacture>(this.attach_AccountFactures), new Action<AccountFacture>(this.detach_AccountFactures));
            this._Factures = new EntitySet<Facture>(new Action<Facture>(this.attach_Factures), new Action<Facture>(this.detach_Factures));
            this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
            this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
            this._Statuses = new EntitySet<Statuse>(new Action<Statuse>(this.attach_Statuses), new Action<Statuse>(this.detach_Statuses));
            this._DocumentType = default(EntityRef<DocumentType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentTypeID", DbType = "Int NOT NULL")]
        public int DocumentTypeID
        {
            get
            {
                return this._DocumentTypeID;
            }
            set
            {
                if ((this._DocumentTypeID != value))
                {
                    if (this._DocumentType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDocumentTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentTypeID = value;
                    this.SendPropertyChanged("DocumentTypeID");
                    this.OnDocumentTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentSubType_AccountFacture", Storage = "_AccountFactures", ThisKey = "ID", OtherKey = "DocumentSubTypeID")]
        public EntitySet<AccountFacture> AccountFactures
        {
            get
            {
                return this._AccountFactures;
            }
            set
            {
                this._AccountFactures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentSubType_Facture", Storage = "_Factures", ThisKey = "ID", OtherKey = "DocumentSubTypeID")]
        public EntitySet<Facture> Factures
        {
            get
            {
                return this._Factures;
            }
            set
            {
                this._Factures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentSubType_Order", Storage = "_Orders", ThisKey = "ID", OtherKey = "DocumentSubTypeID")]
        public EntitySet<Order> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentSubType_Service", Storage = "_Services", ThisKey = "ID", OtherKey = "DocumentSubTypeID")]
        public EntitySet<Service> Services
        {
            get
            {
                return this._Services;
            }
            set
            {
                this._Services.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentSubType_Statuse", Storage = "_Statuses", ThisKey = "ID", OtherKey = "DocumentSubTypeID")]
        public EntitySet<Statuse> Statuses
        {
            get
            {
                return this._Statuses;
            }
            set
            {
                this._Statuses.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentType_DocumentSubType", Storage = "_DocumentType", ThisKey = "DocumentTypeID", OtherKey = "ID", IsForeignKey = true)]
        public DocumentType DocumentType
        {
            get
            {
                return this._DocumentType.Entity;
            }
            set
            {
                DocumentType previousValue = this._DocumentType.Entity;
                if (((previousValue != value)
                            || (this._DocumentType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DocumentType.Entity = null;
                        previousValue.DocumentSubTypes.Remove(this);
                    }
                    this._DocumentType.Entity = value;
                    if ((value != null))
                    {
                        value.DocumentSubTypes.Add(this);
                        this._DocumentTypeID = value.ID;
                    }
                    else
                    {
                        this._DocumentTypeID = default(int);
                    }
                    this.SendPropertyChanged("DocumentType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.DocumentSubType = this;
        }

        private void detach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.DocumentSubType = null;
        }

        private void attach_Factures(Facture entity)
        {
            this.SendPropertyChanging();
            entity.DocumentSubType = this;
        }

        private void detach_Factures(Facture entity)
        {
            this.SendPropertyChanging();
            entity.DocumentSubType = null;
        }

        private void attach_Orders(Order entity)
        {
            this.SendPropertyChanging();
            entity.DocumentSubType = this;
        }

        private void detach_Orders(Order entity)
        {
            this.SendPropertyChanging();
            entity.DocumentSubType = null;
        }

        private void attach_Services(Service entity)
        {
            this.SendPropertyChanging();
            entity.DocumentSubType = this;
        }

        private void detach_Services(Service entity)
        {
            this.SendPropertyChanging();
            entity.DocumentSubType = null;
        }

        private void attach_Statuses(Statuse entity)
        {
            this.SendPropertyChanging();
            entity.DocumentSubType = this;
        }

        private void detach_Statuses(Statuse entity)
        {
            this.SendPropertyChanging();
            entity.DocumentSubType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.DocumentTypes")]
    public partial class DocumentType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private EntitySet<Attachment> _Attachments;

        private EntitySet<DocumentSubType> _DocumentSubTypes;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public DocumentType()
        {
            this._Attachments = new EntitySet<Attachment>(new Action<Attachment>(this.attach_Attachments), new Action<Attachment>(this.detach_Attachments));
            this._DocumentSubTypes = new EntitySet<DocumentSubType>(new Action<DocumentSubType>(this.attach_DocumentSubTypes), new Action<DocumentSubType>(this.detach_DocumentSubTypes));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentType_Attachment", Storage = "_Attachments", ThisKey = "ID", OtherKey = "DocumentTypeID")]
        public EntitySet<Attachment> Attachments
        {
            get
            {
                return this._Attachments;
            }
            set
            {
                this._Attachments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentType_DocumentSubType", Storage = "_DocumentSubTypes", ThisKey = "ID", OtherKey = "DocumentTypeID")]
        public EntitySet<DocumentSubType> DocumentSubTypes
        {
            get
            {
                return this._DocumentSubTypes;
            }
            set
            {
                this._DocumentSubTypes.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Attachments(Attachment entity)
        {
            this.SendPropertyChanging();
            entity.DocumentType = this;
        }

        private void detach_Attachments(Attachment entity)
        {
            this.SendPropertyChanging();
            entity.DocumentType = null;
        }

        private void attach_DocumentSubTypes(DocumentSubType entity)
        {
            this.SendPropertyChanging();
            entity.DocumentType = this;
        }

        private void detach_DocumentSubTypes(DocumentSubType entity)
        {
            this.SendPropertyChanging();
            entity.DocumentType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.FacCollPaidValuesPerInsSubTypes")]
    public partial class FacCollPaidValuesPerInsSubType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _InsuranceSubTypeID;

        private int _FactureCollectedPaidValueID;

        private decimal _PaidValue;

        private EntityRef<FactureCollectedPaidValue> _FactureCollectedPaidValue;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnFactureCollectedPaidValueIDChanging(int value);
        partial void OnFactureCollectedPaidValueIDChanged();
        partial void OnPaidValueChanging(decimal value);
        partial void OnPaidValueChanged();
        #endregion

        public FacCollPaidValuesPerInsSubType()
        {
            this._FactureCollectedPaidValue = default(EntityRef<FactureCollectedPaidValue>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureCollectedPaidValueID", DbType = "Int NOT NULL")]
        public int FactureCollectedPaidValueID
        {
            get
            {
                return this._FactureCollectedPaidValueID;
            }
            set
            {
                if ((this._FactureCollectedPaidValueID != value))
                {
                    if (this._FactureCollectedPaidValue.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFactureCollectedPaidValueIDChanging(value);
                    this.SendPropertyChanging();
                    this._FactureCollectedPaidValueID = value;
                    this.SendPropertyChanged("FactureCollectedPaidValueID");
                    this.OnFactureCollectedPaidValueIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaidValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PaidValue
        {
            get
            {
                return this._PaidValue;
            }
            set
            {
                if ((this._PaidValue != value))
                {
                    this.OnPaidValueChanging(value);
                    this.SendPropertyChanging();
                    this._PaidValue = value;
                    this.SendPropertyChanged("PaidValue");
                    this.OnPaidValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FactureCollectedPaidValue_FacCollPaidValuesPerInsSubType", Storage = "_FactureCollectedPaidValue", ThisKey = "FactureCollectedPaidValueID", OtherKey = "ID", IsForeignKey = true)]
        public FactureCollectedPaidValue FactureCollectedPaidValue
        {
            get
            {
                return this._FactureCollectedPaidValue.Entity;
            }
            set
            {
                FactureCollectedPaidValue previousValue = this._FactureCollectedPaidValue.Entity;
                if (((previousValue != value)
                            || (this._FactureCollectedPaidValue.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._FactureCollectedPaidValue.Entity = null;
                        previousValue.FacCollPaidValuesPerInsSubTypes.Remove(this);
                    }
                    this._FactureCollectedPaidValue.Entity = value;
                    if ((value != null))
                    {
                        value.FacCollPaidValuesPerInsSubTypes.Add(this);
                        this._FactureCollectedPaidValueID = value.ID;
                    }
                    else
                    {
                        this._FactureCollectedPaidValueID = default(int);
                    }
                    this.SendPropertyChanged("FactureCollectedPaidValue");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_FacCollPaidValuesPerInsSubType", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.FacCollPaidValuesPerInsSubTypes.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.FacCollPaidValuesPerInsSubTypes.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.FactureCollectedPaidValues")]
    public partial class FactureCollectedPaidValue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _FactureItemID;

        private decimal _PaidValue;

        private System.DateTime _PaidDate;

        private EntitySet<FacCollPaidValuesPerInsSubType> _FacCollPaidValuesPerInsSubTypes;

        private EntityRef<FactureItem> _FactureItem;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFactureItemIDChanging(int value);
        partial void OnFactureItemIDChanged();
        partial void OnPaidValueChanging(decimal value);
        partial void OnPaidValueChanged();
        partial void OnPaidDateChanging(System.DateTime value);
        partial void OnPaidDateChanged();
        #endregion

        public FactureCollectedPaidValue()
        {
            this._FacCollPaidValuesPerInsSubTypes = new EntitySet<FacCollPaidValuesPerInsSubType>(new Action<FacCollPaidValuesPerInsSubType>(this.attach_FacCollPaidValuesPerInsSubTypes), new Action<FacCollPaidValuesPerInsSubType>(this.detach_FacCollPaidValuesPerInsSubTypes));
            this._FactureItem = default(EntityRef<FactureItem>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureItemID", DbType = "Int NOT NULL")]
        public int FactureItemID
        {
            get
            {
                return this._FactureItemID;
            }
            set
            {
                if ((this._FactureItemID != value))
                {
                    if (this._FactureItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFactureItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._FactureItemID = value;
                    this.SendPropertyChanged("FactureItemID");
                    this.OnFactureItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaidValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PaidValue
        {
            get
            {
                return this._PaidValue;
            }
            set
            {
                if ((this._PaidValue != value))
                {
                    this.OnPaidValueChanging(value);
                    this.SendPropertyChanging();
                    this._PaidValue = value;
                    this.SendPropertyChanged("PaidValue");
                    this.OnPaidValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaidDate", DbType = "DateTime NOT NULL")]
        public System.DateTime PaidDate
        {
            get
            {
                return this._PaidDate;
            }
            set
            {
                if ((this._PaidDate != value))
                {
                    this.OnPaidDateChanging(value);
                    this.SendPropertyChanging();
                    this._PaidDate = value;
                    this.SendPropertyChanged("PaidDate");
                    this.OnPaidDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FactureCollectedPaidValue_FacCollPaidValuesPerInsSubType", Storage = "_FacCollPaidValuesPerInsSubTypes", ThisKey = "ID", OtherKey = "FactureCollectedPaidValueID")]
        public EntitySet<FacCollPaidValuesPerInsSubType> FacCollPaidValuesPerInsSubTypes
        {
            get
            {
                return this._FacCollPaidValuesPerInsSubTypes;
            }
            set
            {
                this._FacCollPaidValuesPerInsSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FactureItem_FactureCollectedPaidValue", Storage = "_FactureItem", ThisKey = "FactureItemID", OtherKey = "ID", IsForeignKey = true)]
        public FactureItem FactureItem
        {
            get
            {
                return this._FactureItem.Entity;
            }
            set
            {
                FactureItem previousValue = this._FactureItem.Entity;
                if (((previousValue != value)
                            || (this._FactureItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._FactureItem.Entity = null;
                        previousValue.FactureCollectedPaidValues.Remove(this);
                    }
                    this._FactureItem.Entity = value;
                    if ((value != null))
                    {
                        value.FactureCollectedPaidValues.Add(this);
                        this._FactureItemID = value.ID;
                    }
                    else
                    {
                        this._FactureItemID = default(int);
                    }
                    this.SendPropertyChanged("FactureItem");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_FacCollPaidValuesPerInsSubTypes(FacCollPaidValuesPerInsSubType entity)
        {
            this.SendPropertyChanging();
            entity.FactureCollectedPaidValue = this;
        }

        private void detach_FacCollPaidValuesPerInsSubTypes(FacCollPaidValuesPerInsSubType entity)
        {
            this.SendPropertyChanging();
            entity.FactureCollectedPaidValue = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.FactureItems")]
    public partial class FactureItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _Number;

        private int _FactureID;

        private int _InsuranceSubTypeID;

        private int _Count;

        private string _Description;

        private decimal _PremiumValue;

        private decimal _BrokerageValue;

        private EntitySet<FactureCollectedPaidValue> _FactureCollectedPaidValues;

        private EntitySet<LifePolicyFactureItem> _LifePolicyFactureItems;

        private EntitySet<PolicyItemFactureItem> _PolicyItemFactureItems;

        private EntityRef<Facture> _Facture;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();
        partial void OnFactureIDChanging(int value);
        partial void OnFactureIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnCountChanging(int value);
        partial void OnCountChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPremiumValueChanging(decimal value);
        partial void OnPremiumValueChanged();
        partial void OnBrokerageValueChanging(decimal value);
        partial void OnBrokerageValueChanged();
        #endregion

        public FactureItem()
        {
            this._FactureCollectedPaidValues = new EntitySet<FactureCollectedPaidValue>(new Action<FactureCollectedPaidValue>(this.attach_FactureCollectedPaidValues), new Action<FactureCollectedPaidValue>(this.detach_FactureCollectedPaidValues));
            this._LifePolicyFactureItems = new EntitySet<LifePolicyFactureItem>(new Action<LifePolicyFactureItem>(this.attach_LifePolicyFactureItems), new Action<LifePolicyFactureItem>(this.detach_LifePolicyFactureItems));
            this._PolicyItemFactureItems = new EntitySet<PolicyItemFactureItem>(new Action<PolicyItemFactureItem>(this.attach_PolicyItemFactureItems), new Action<PolicyItemFactureItem>(this.detach_PolicyItemFactureItems));
            this._Facture = default(EntityRef<Facture>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "Int NOT NULL")]
        public int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureID", DbType = "Int NOT NULL")]
        public int FactureID
        {
            get
            {
                return this._FactureID;
            }
            set
            {
                if ((this._FactureID != value))
                {
                    if (this._Facture.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFactureIDChanging(value);
                    this.SendPropertyChanging();
                    this._FactureID = value;
                    this.SendPropertyChanged("FactureID");
                    this.OnFactureIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Count", DbType = "Int NOT NULL")]
        public int Count
        {
            get
            {
                return this._Count;
            }
            set
            {
                if ((this._Count != value))
                {
                    this.OnCountChanging(value);
                    this.SendPropertyChanging();
                    this._Count = value;
                    this.SendPropertyChanged("Count");
                    this.OnCountChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PremiumValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PremiumValue
        {
            get
            {
                return this._PremiumValue;
            }
            set
            {
                if ((this._PremiumValue != value))
                {
                    this.OnPremiumValueChanging(value);
                    this.SendPropertyChanging();
                    this._PremiumValue = value;
                    this.SendPropertyChanged("PremiumValue");
                    this.OnPremiumValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this.OnBrokerageValueChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageValue = value;
                    this.SendPropertyChanged("BrokerageValue");
                    this.OnBrokerageValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FactureItem_FactureCollectedPaidValue", Storage = "_FactureCollectedPaidValues", ThisKey = "ID", OtherKey = "FactureItemID")]
        public EntitySet<FactureCollectedPaidValue> FactureCollectedPaidValues
        {
            get
            {
                return this._FactureCollectedPaidValues;
            }
            set
            {
                this._FactureCollectedPaidValues.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FactureItem_LifePolicyFactureItem", Storage = "_LifePolicyFactureItems", ThisKey = "ID", OtherKey = "FactureItemID")]
        public EntitySet<LifePolicyFactureItem> LifePolicyFactureItems
        {
            get
            {
                return this._LifePolicyFactureItems;
            }
            set
            {
                this._LifePolicyFactureItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FactureItem_PolicyItemFactureItem", Storage = "_PolicyItemFactureItems", ThisKey = "ID", OtherKey = "FactureItemID")]
        public EntitySet<PolicyItemFactureItem> PolicyItemFactureItems
        {
            get
            {
                return this._PolicyItemFactureItems;
            }
            set
            {
                this._PolicyItemFactureItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Facture_FactureItem", Storage = "_Facture", ThisKey = "FactureID", OtherKey = "ID", IsForeignKey = true)]
        public Facture Facture
        {
            get
            {
                return this._Facture.Entity;
            }
            set
            {
                Facture previousValue = this._Facture.Entity;
                if (((previousValue != value)
                            || (this._Facture.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Facture.Entity = null;
                        previousValue.FactureItems.Remove(this);
                    }
                    this._Facture.Entity = value;
                    if ((value != null))
                    {
                        value.FactureItems.Add(this);
                        this._FactureID = value.ID;
                    }
                    else
                    {
                        this._FactureID = default(int);
                    }
                    this.SendPropertyChanged("Facture");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_FactureItem", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.FactureItems.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.FactureItems.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_FactureCollectedPaidValues(FactureCollectedPaidValue entity)
        {
            this.SendPropertyChanging();
            entity.FactureItem = this;
        }

        private void detach_FactureCollectedPaidValues(FactureCollectedPaidValue entity)
        {
            this.SendPropertyChanging();
            entity.FactureItem = null;
        }

        private void attach_LifePolicyFactureItems(LifePolicyFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.FactureItem = this;
        }

        private void detach_LifePolicyFactureItems(LifePolicyFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.FactureItem = null;
        }

        private void attach_PolicyItemFactureItems(PolicyItemFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.FactureItem = this;
        }

        private void detach_PolicyItemFactureItems(PolicyItemFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.FactureItem = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.FacturePayments")]
    public partial class FacturePayment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _PaymentTypeID;

        private int _PaymentID;

        private int _FactureID;

        private EntityRef<Facture> _Facture;

        private EntityRef<PaymentType> _PaymentType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPaymentTypeIDChanging(int value);
        partial void OnPaymentTypeIDChanged();
        partial void OnPaymentIDChanging(int value);
        partial void OnPaymentIDChanged();
        partial void OnFactureIDChanging(int value);
        partial void OnFactureIDChanged();
        #endregion

        public FacturePayment()
        {
            this._Facture = default(EntityRef<Facture>);
            this._PaymentType = default(EntityRef<PaymentType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaymentTypeID", DbType = "Int NOT NULL")]
        public int PaymentTypeID
        {
            get
            {
                return this._PaymentTypeID;
            }
            set
            {
                if ((this._PaymentTypeID != value))
                {
                    if (this._PaymentType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPaymentTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentTypeID = value;
                    this.SendPropertyChanged("PaymentTypeID");
                    this.OnPaymentTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaymentID", DbType = "Int NOT NULL")]
        public int PaymentID
        {
            get
            {
                return this._PaymentID;
            }
            set
            {
                if ((this._PaymentID != value))
                {
                    this.OnPaymentIDChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentID = value;
                    this.SendPropertyChanged("PaymentID");
                    this.OnPaymentIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureID", DbType = "Int NOT NULL")]
        public int FactureID
        {
            get
            {
                return this._FactureID;
            }
            set
            {
                if ((this._FactureID != value))
                {
                    if (this._Facture.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFactureIDChanging(value);
                    this.SendPropertyChanging();
                    this._FactureID = value;
                    this.SendPropertyChanged("FactureID");
                    this.OnFactureIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Facture_FacturePayment", Storage = "_Facture", ThisKey = "FactureID", OtherKey = "ID", IsForeignKey = true)]
        public Facture Facture
        {
            get
            {
                return this._Facture.Entity;
            }
            set
            {
                Facture previousValue = this._Facture.Entity;
                if (((previousValue != value)
                            || (this._Facture.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Facture.Entity = null;
                        previousValue.FacturePayments.Remove(this);
                    }
                    this._Facture.Entity = value;
                    if ((value != null))
                    {
                        value.FacturePayments.Add(this);
                        this._FactureID = value.ID;
                    }
                    else
                    {
                        this._FactureID = default(int);
                    }
                    this.SendPropertyChanged("Facture");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PaymentType_FacturePayment", Storage = "_PaymentType", ThisKey = "PaymentTypeID", OtherKey = "ID", IsForeignKey = true)]
        public PaymentType PaymentType
        {
            get
            {
                return this._PaymentType.Entity;
            }
            set
            {
                PaymentType previousValue = this._PaymentType.Entity;
                if (((previousValue != value)
                            || (this._PaymentType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PaymentType.Entity = null;
                        previousValue.FacturePayments.Remove(this);
                    }
                    this._PaymentType.Entity = value;
                    if ((value != null))
                    {
                        value.FacturePayments.Add(this);
                        this._PaymentTypeID = value.ID;
                    }
                    else
                    {
                        this._PaymentTypeID = default(int);
                    }
                    this.SendPropertyChanged("PaymentType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Factures")]
    public partial class Facture : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _FactureNumber;

        private decimal _TotalCost;

        private decimal _BrokerageValue;

        private System.DateTime _DateOfCreation;

        private int _StatusID;

        private int _ClientID;

        private int _DocumentSubTypeID;

        private int _UserID;

        private System.DateTime _FromDate;

        private System.DateTime _ToDate;

        private System.DateTime _DateOfPayment;

        private System.Nullable<int> _InsuranceCompanyID;

        private bool _Discard;

        private EntitySet<FactureItem> _FactureItems;

        private EntitySet<FacturePayment> _FacturePayments;

        private EntitySet<FactureSpecification> _FactureSpecifications;

        private EntitySet<PaymentItem> _PaymentItems;

        private EntityRef<Client> _Client;

        private EntityRef<DocumentSubType> _DocumentSubType;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<Statuse> _Statuse;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFactureNumberChanging(string value);
        partial void OnFactureNumberChanged();
        partial void OnTotalCostChanging(decimal value);
        partial void OnTotalCostChanged();
        partial void OnBrokerageValueChanging(decimal value);
        partial void OnBrokerageValueChanged();
        partial void OnDateOfCreationChanging(System.DateTime value);
        partial void OnDateOfCreationChanged();
        partial void OnStatusIDChanging(int value);
        partial void OnStatusIDChanged();
        partial void OnClientIDChanging(int value);
        partial void OnClientIDChanged();
        partial void OnDocumentSubTypeIDChanging(int value);
        partial void OnDocumentSubTypeIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnFromDateChanging(System.DateTime value);
        partial void OnFromDateChanged();
        partial void OnToDateChanging(System.DateTime value);
        partial void OnToDateChanged();
        partial void OnDateOfPaymentChanging(System.DateTime value);
        partial void OnDateOfPaymentChanged();
        partial void OnInsuranceCompanyIDChanging(System.Nullable<int> value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnDiscardChanging(bool value);
        partial void OnDiscardChanged();
        #endregion

        public Facture()
        {
            this._FactureItems = new EntitySet<FactureItem>(new Action<FactureItem>(this.attach_FactureItems), new Action<FactureItem>(this.detach_FactureItems));
            this._FacturePayments = new EntitySet<FacturePayment>(new Action<FacturePayment>(this.attach_FacturePayments), new Action<FacturePayment>(this.detach_FacturePayments));
            this._FactureSpecifications = new EntitySet<FactureSpecification>(new Action<FactureSpecification>(this.attach_FactureSpecifications), new Action<FactureSpecification>(this.detach_FactureSpecifications));
            this._PaymentItems = new EntitySet<PaymentItem>(new Action<PaymentItem>(this.attach_PaymentItems), new Action<PaymentItem>(this.detach_PaymentItems));
            this._Client = default(EntityRef<Client>);
            this._DocumentSubType = default(EntityRef<DocumentSubType>);
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._Statuse = default(EntityRef<Statuse>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string FactureNumber
        {
            get
            {
                return this._FactureNumber;
            }
            set
            {
                if ((this._FactureNumber != value))
                {
                    this.OnFactureNumberChanging(value);
                    this.SendPropertyChanging();
                    this._FactureNumber = value;
                    this.SendPropertyChanged("FactureNumber");
                    this.OnFactureNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalCost", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalCost
        {
            get
            {
                return this._TotalCost;
            }
            set
            {
                if ((this._TotalCost != value))
                {
                    this.OnTotalCostChanging(value);
                    this.SendPropertyChanging();
                    this._TotalCost = value;
                    this.SendPropertyChanged("TotalCost");
                    this.OnTotalCostChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this.OnBrokerageValueChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageValue = value;
                    this.SendPropertyChanged("BrokerageValue");
                    this.OnBrokerageValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DateOfCreation", DbType = "DateTime NOT NULL")]
        public System.DateTime DateOfCreation
        {
            get
            {
                return this._DateOfCreation;
            }
            set
            {
                if ((this._DateOfCreation != value))
                {
                    this.OnDateOfCreationChanging(value);
                    this.SendPropertyChanging();
                    this._DateOfCreation = value;
                    this.SendPropertyChanged("DateOfCreation");
                    this.OnDateOfCreationChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusID", DbType = "Int NOT NULL")]
        public int StatusID
        {
            get
            {
                return this._StatusID;
            }
            set
            {
                if ((this._StatusID != value))
                {
                    if (this._Statuse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnStatusIDChanging(value);
                    this.SendPropertyChanging();
                    this._StatusID = value;
                    this.SendPropertyChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeID", DbType = "Int NOT NULL")]
        public int DocumentSubTypeID
        {
            get
            {
                return this._DocumentSubTypeID;
            }
            set
            {
                if ((this._DocumentSubTypeID != value))
                {
                    if (this._DocumentSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDocumentSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentSubTypeID = value;
                    this.SendPropertyChanged("DocumentSubTypeID");
                    this.OnDocumentSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if ((this._FromDate != value))
                {
                    this.OnFromDateChanging(value);
                    this.SendPropertyChanging();
                    this._FromDate = value;
                    this.SendPropertyChanged("FromDate");
                    this.OnFromDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if ((this._ToDate != value))
                {
                    this.OnToDateChanging(value);
                    this.SendPropertyChanging();
                    this._ToDate = value;
                    this.SendPropertyChanged("ToDate");
                    this.OnToDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DateOfPayment", DbType = "DateTime NOT NULL")]
        public System.DateTime DateOfPayment
        {
            get
            {
                return this._DateOfPayment;
            }
            set
            {
                if ((this._DateOfPayment != value))
                {
                    this.OnDateOfPaymentChanging(value);
                    this.SendPropertyChanging();
                    this._DateOfPayment = value;
                    this.SendPropertyChanged("DateOfPayment");
                    this.OnDateOfPaymentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int")]
        public System.Nullable<int> InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Discard", DbType = "Bit NOT NULL")]
        public bool Discard
        {
            get
            {
                return this._Discard;
            }
            set
            {
                if ((this._Discard != value))
                {
                    this.OnDiscardChanging(value);
                    this.SendPropertyChanging();
                    this._Discard = value;
                    this.SendPropertyChanged("Discard");
                    this.OnDiscardChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Facture_FactureItem", Storage = "_FactureItems", ThisKey = "ID", OtherKey = "FactureID")]
        public EntitySet<FactureItem> FactureItems
        {
            get
            {
                return this._FactureItems;
            }
            set
            {
                this._FactureItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Facture_FacturePayment", Storage = "_FacturePayments", ThisKey = "ID", OtherKey = "FactureID")]
        public EntitySet<FacturePayment> FacturePayments
        {
            get
            {
                return this._FacturePayments;
            }
            set
            {
                this._FacturePayments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Facture_FactureSpecification", Storage = "_FactureSpecifications", ThisKey = "ID", OtherKey = "FactureID")]
        public EntitySet<FactureSpecification> FactureSpecifications
        {
            get
            {
                return this._FactureSpecifications;
            }
            set
            {
                this._FactureSpecifications.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Facture_PaymentItem", Storage = "_PaymentItems", ThisKey = "ID", OtherKey = "FactureID")]
        public EntitySet<PaymentItem> PaymentItems
        {
            get
            {
                return this._PaymentItems;
            }
            set
            {
                this._PaymentItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Facture", Storage = "_Client", ThisKey = "ClientID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if (((previousValue != value)
                            || (this._Client.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client.Entity = null;
                        previousValue.Factures.Remove(this);
                    }
                    this._Client.Entity = value;
                    if ((value != null))
                    {
                        value.Factures.Add(this);
                        this._ClientID = value.ID;
                    }
                    else
                    {
                        this._ClientID = default(int);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentSubType_Facture", Storage = "_DocumentSubType", ThisKey = "DocumentSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public DocumentSubType DocumentSubType
        {
            get
            {
                return this._DocumentSubType.Entity;
            }
            set
            {
                DocumentSubType previousValue = this._DocumentSubType.Entity;
                if (((previousValue != value)
                            || (this._DocumentSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DocumentSubType.Entity = null;
                        previousValue.Factures.Remove(this);
                    }
                    this._DocumentSubType.Entity = value;
                    if ((value != null))
                    {
                        value.Factures.Add(this);
                        this._DocumentSubTypeID = value.ID;
                    }
                    else
                    {
                        this._DocumentSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("DocumentSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_Facture", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.Factures.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.Factures.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Statuse_Facture", Storage = "_Statuse", ThisKey = "StatusID", OtherKey = "ID", IsForeignKey = true)]
        public Statuse Statuse
        {
            get
            {
                return this._Statuse.Entity;
            }
            set
            {
                Statuse previousValue = this._Statuse.Entity;
                if (((previousValue != value)
                            || (this._Statuse.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Statuse.Entity = null;
                        previousValue.Factures.Remove(this);
                    }
                    this._Statuse.Entity = value;
                    if ((value != null))
                    {
                        value.Factures.Add(this);
                        this._StatusID = value.ID;
                    }
                    else
                    {
                        this._StatusID = default(int);
                    }
                    this.SendPropertyChanged("Statuse");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Facture", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Factures.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Factures.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_FactureItems(FactureItem entity)
        {
            this.SendPropertyChanging();
            entity.Facture = this;
        }

        private void detach_FactureItems(FactureItem entity)
        {
            this.SendPropertyChanging();
            entity.Facture = null;
        }

        private void attach_FacturePayments(FacturePayment entity)
        {
            this.SendPropertyChanging();
            entity.Facture = this;
        }

        private void detach_FacturePayments(FacturePayment entity)
        {
            this.SendPropertyChanging();
            entity.Facture = null;
        }

        private void attach_FactureSpecifications(FactureSpecification entity)
        {
            this.SendPropertyChanging();
            entity.Facture = this;
        }

        private void detach_FactureSpecifications(FactureSpecification entity)
        {
            this.SendPropertyChanging();
            entity.Facture = null;
        }

        private void attach_PaymentItems(PaymentItem entity)
        {
            this.SendPropertyChanging();
            entity.Facture = this;
        }

        private void detach_PaymentItems(PaymentItem entity)
        {
            this.SendPropertyChanging();
            entity.Facture = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.FactureSpecifications")]
    public partial class FactureSpecification : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _FactureID;

        private int _DDVTypeID;

        private decimal _DDVValue;

        private decimal _TotalValue;

        private EntityRef<DDVType> _DDVType;

        private EntityRef<Facture> _Facture;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFactureIDChanging(int value);
        partial void OnFactureIDChanged();
        partial void OnDDVTypeIDChanging(int value);
        partial void OnDDVTypeIDChanged();
        partial void OnDDVValueChanging(decimal value);
        partial void OnDDVValueChanged();
        partial void OnTotalValueChanging(decimal value);
        partial void OnTotalValueChanged();
        #endregion

        public FactureSpecification()
        {
            this._DDVType = default(EntityRef<DDVType>);
            this._Facture = default(EntityRef<Facture>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureID", DbType = "Int NOT NULL")]
        public int FactureID
        {
            get
            {
                return this._FactureID;
            }
            set
            {
                if ((this._FactureID != value))
                {
                    if (this._Facture.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFactureIDChanging(value);
                    this.SendPropertyChanging();
                    this._FactureID = value;
                    this.SendPropertyChanged("FactureID");
                    this.OnFactureIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DDVTypeID", DbType = "Int NOT NULL")]
        public int DDVTypeID
        {
            get
            {
                return this._DDVTypeID;
            }
            set
            {
                if ((this._DDVTypeID != value))
                {
                    if (this._DDVType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDDVTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._DDVTypeID = value;
                    this.SendPropertyChanged("DDVTypeID");
                    this.OnDDVTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DDVValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DDVValue
        {
            get
            {
                return this._DDVValue;
            }
            set
            {
                if ((this._DDVValue != value))
                {
                    this.OnDDVValueChanging(value);
                    this.SendPropertyChanging();
                    this._DDVValue = value;
                    this.SendPropertyChanged("DDVValue");
                    this.OnDDVValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalValue
        {
            get
            {
                return this._TotalValue;
            }
            set
            {
                if ((this._TotalValue != value))
                {
                    this.OnTotalValueChanging(value);
                    this.SendPropertyChanging();
                    this._TotalValue = value;
                    this.SendPropertyChanged("TotalValue");
                    this.OnTotalValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DDVType_FactureSpecification", Storage = "_DDVType", ThisKey = "DDVTypeID", OtherKey = "ID", IsForeignKey = true)]
        public DDVType DDVType
        {
            get
            {
                return this._DDVType.Entity;
            }
            set
            {
                DDVType previousValue = this._DDVType.Entity;
                if (((previousValue != value)
                            || (this._DDVType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DDVType.Entity = null;
                        previousValue.FactureSpecifications.Remove(this);
                    }
                    this._DDVType.Entity = value;
                    if ((value != null))
                    {
                        value.FactureSpecifications.Add(this);
                        this._DDVTypeID = value.ID;
                    }
                    else
                    {
                        this._DDVTypeID = default(int);
                    }
                    this.SendPropertyChanged("DDVType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Facture_FactureSpecification", Storage = "_Facture", ThisKey = "FactureID", OtherKey = "ID", IsForeignKey = true)]
        public Facture Facture
        {
            get
            {
                return this._Facture.Entity;
            }
            set
            {
                Facture previousValue = this._Facture.Entity;
                if (((previousValue != value)
                            || (this._Facture.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Facture.Entity = null;
                        previousValue.FactureSpecifications.Remove(this);
                    }
                    this._Facture.Entity = value;
                    if ((value != null))
                    {
                        value.FactureSpecifications.Add(this);
                        this._FactureID = value.ID;
                    }
                    else
                    {
                        this._FactureID = default(int);
                    }
                    this.SendPropertyChanged("Facture");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.FieldTypes")]
    public partial class FieldType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private bool _IsBindable;

        private EntitySet<Control> _Controls;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnIsBindableChanging(bool value);
        partial void OnIsBindableChanged();
        #endregion

        public FieldType()
        {
            this._Controls = new EntitySet<Control>(new Action<Control>(this.attach_Controls), new Action<Control>(this.detach_Controls));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsBindable", DbType = "Bit NOT NULL")]
        public bool IsBindable
        {
            get
            {
                return this._IsBindable;
            }
            set
            {
                if ((this._IsBindable != value))
                {
                    this.OnIsBindableChanging(value);
                    this.SendPropertyChanging();
                    this._IsBindable = value;
                    this.SendPropertyChanged("IsBindable");
                    this.OnIsBindableChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FieldType_Control", Storage = "_Controls", ThisKey = "ID", OtherKey = "FieldTypeID")]
        public EntitySet<Control> Controls
        {
            get
            {
                return this._Controls;
            }
            set
            {
                this._Controls.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Controls(Control entity)
        {
            this.SendPropertyChanging();
            entity.FieldType = this;
        }

        private void detach_Controls(Control entity)
        {
            this.SendPropertyChanging();
            entity.FieldType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Functions")]
    public partial class Function : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private string _Description;

        private bool _CanBeGiven;

        private EntitySet<RolesFunction> _RolesFunctions;

        private EntitySet<UsersFunction> _UsersFunctions;

        private EntitySet<WebPage> _WebPages;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCanBeGivenChanging(bool value);
        partial void OnCanBeGivenChanged();
        #endregion

        public Function()
        {
            this._RolesFunctions = new EntitySet<RolesFunction>(new Action<RolesFunction>(this.attach_RolesFunctions), new Action<RolesFunction>(this.detach_RolesFunctions));
            this._UsersFunctions = new EntitySet<UsersFunction>(new Action<UsersFunction>(this.attach_UsersFunctions), new Action<UsersFunction>(this.detach_UsersFunctions));
            this._WebPages = new EntitySet<WebPage>(new Action<WebPage>(this.attach_WebPages), new Action<WebPage>(this.detach_WebPages));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(100)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CanBeGiven", DbType = "Bit NOT NULL")]
        public bool CanBeGiven
        {
            get
            {
                return this._CanBeGiven;
            }
            set
            {
                if ((this._CanBeGiven != value))
                {
                    this.OnCanBeGivenChanging(value);
                    this.SendPropertyChanging();
                    this._CanBeGiven = value;
                    this.SendPropertyChanged("CanBeGiven");
                    this.OnCanBeGivenChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Function_RolesFunction", Storage = "_RolesFunctions", ThisKey = "ID", OtherKey = "FunctionID")]
        public EntitySet<RolesFunction> RolesFunctions
        {
            get
            {
                return this._RolesFunctions;
            }
            set
            {
                this._RolesFunctions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Function_UsersFunction", Storage = "_UsersFunctions", ThisKey = "ID", OtherKey = "FunctionID")]
        public EntitySet<UsersFunction> UsersFunctions
        {
            get
            {
                return this._UsersFunctions;
            }
            set
            {
                this._UsersFunctions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Function_WebPage", Storage = "_WebPages", ThisKey = "ID", OtherKey = "FunctionID")]
        public EntitySet<WebPage> WebPages
        {
            get
            {
                return this._WebPages;
            }
            set
            {
                this._WebPages.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_RolesFunctions(RolesFunction entity)
        {
            this.SendPropertyChanging();
            entity.Function = this;
        }

        private void detach_RolesFunctions(RolesFunction entity)
        {
            this.SendPropertyChanging();
            entity.Function = null;
        }

        private void attach_UsersFunctions(UsersFunction entity)
        {
            this.SendPropertyChanging();
            entity.Function = this;
        }

        private void detach_UsersFunctions(UsersFunction entity)
        {
            this.SendPropertyChanging();
            entity.Function = null;
        }

        private void attach_WebPages(WebPage entity)
        {
            this.SendPropertyChanging();
            entity.Function = this;
        }

        private void detach_WebPages(WebPage entity)
        {
            this.SendPropertyChanging();
            entity.Function = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.IncomingFacturePolicyItems")]
    public partial class IncomingFacturePolicyItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _IncomingFactureID;

        private int _PolicyItemID;

        private bool _IsActive;

        private EntityRef<IncomingFacture> _IncomingFacture;

        private EntityRef<PolicyItem> _PolicyItem;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIncomingFactureIDChanging(int value);
        partial void OnIncomingFactureIDChanged();
        partial void OnPolicyItemIDChanging(int value);
        partial void OnPolicyItemIDChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public IncomingFacturePolicyItem()
        {
            this._IncomingFacture = default(EntityRef<IncomingFacture>);
            this._PolicyItem = default(EntityRef<PolicyItem>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IncomingFactureID", DbType = "Int NOT NULL")]
        public int IncomingFactureID
        {
            get
            {
                return this._IncomingFactureID;
            }
            set
            {
                if ((this._IncomingFactureID != value))
                {
                    if (this._IncomingFacture.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnIncomingFactureIDChanging(value);
                    this.SendPropertyChanging();
                    this._IncomingFactureID = value;
                    this.SendPropertyChanged("IncomingFactureID");
                    this.OnIncomingFactureIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL")]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    if (this._PolicyItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPolicyItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyItemID = value;
                    this.SendPropertyChanged("PolicyItemID");
                    this.OnPolicyItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "IncomingFacture_IncomingFacturePolicyItem", Storage = "_IncomingFacture", ThisKey = "IncomingFactureID", OtherKey = "ID", IsForeignKey = true)]
        public IncomingFacture IncomingFacture
        {
            get
            {
                return this._IncomingFacture.Entity;
            }
            set
            {
                IncomingFacture previousValue = this._IncomingFacture.Entity;
                if (((previousValue != value)
                            || (this._IncomingFacture.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._IncomingFacture.Entity = null;
                        previousValue.IncomingFacturePolicyItems.Remove(this);
                    }
                    this._IncomingFacture.Entity = value;
                    if ((value != null))
                    {
                        value.IncomingFacturePolicyItems.Add(this);
                        this._IncomingFactureID = value.ID;
                    }
                    else
                    {
                        this._IncomingFactureID = default(int);
                    }
                    this.SendPropertyChanged("IncomingFacture");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_IncomingFacturePolicyItem", Storage = "_PolicyItem", ThisKey = "PolicyItemID", OtherKey = "ID", IsForeignKey = true)]
        public PolicyItem PolicyItem
        {
            get
            {
                return this._PolicyItem.Entity;
            }
            set
            {
                PolicyItem previousValue = this._PolicyItem.Entity;
                if (((previousValue != value)
                            || (this._PolicyItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PolicyItem.Entity = null;
                        previousValue.IncomingFacturePolicyItems.Remove(this);
                    }
                    this._PolicyItem.Entity = value;
                    if ((value != null))
                    {
                        value.IncomingFacturePolicyItems.Add(this);
                        this._PolicyItemID = value.ID;
                    }
                    else
                    {
                        this._PolicyItemID = default(int);
                    }
                    this.SendPropertyChanged("PolicyItem");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.IncomingFactures")]
    public partial class IncomingFacture : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _FactureNumber;

        private string _EMBG;

        private string _TaxNumber;

        private string _Name;

        private string _Address;

        private decimal _TaxValue;

        private decimal _TotalCost;

        private System.DateTime _FactureDate;

        private System.DateTime _ValuteDate;

        private int _IncomingFactureTypeID;

        private System.Nullable<int> _InsuranceCompanyID;

        private bool _IsAccountBooked;

        private int _UserID;

        private int _BranchID;

        private int _PlaceID;

        private EntitySet<IncomingFacturePolicyItem> _IncomingFacturePolicyItems;

        private EntityRef<Branch> _Branch;

        private EntityRef<IncomingFactureType> _IncomingFactureType;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<Place> _Place;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFactureNumberChanging(string value);
        partial void OnFactureNumberChanged();
        partial void OnEMBGChanging(string value);
        partial void OnEMBGChanged();
        partial void OnTaxNumberChanging(string value);
        partial void OnTaxNumberChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnTaxValueChanging(decimal value);
        partial void OnTaxValueChanged();
        partial void OnTotalCostChanging(decimal value);
        partial void OnTotalCostChanged();
        partial void OnFactureDateChanging(System.DateTime value);
        partial void OnFactureDateChanged();
        partial void OnValuteDateChanging(System.DateTime value);
        partial void OnValuteDateChanged();
        partial void OnIncomingFactureTypeIDChanging(int value);
        partial void OnIncomingFactureTypeIDChanged();
        partial void OnInsuranceCompanyIDChanging(System.Nullable<int> value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnIsAccountBookedChanging(bool value);
        partial void OnIsAccountBookedChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnBranchIDChanging(int value);
        partial void OnBranchIDChanged();
        partial void OnPlaceIDChanging(int value);
        partial void OnPlaceIDChanged();
        #endregion

        public IncomingFacture()
        {
            this._IncomingFacturePolicyItems = new EntitySet<IncomingFacturePolicyItem>(new Action<IncomingFacturePolicyItem>(this.attach_IncomingFacturePolicyItems), new Action<IncomingFacturePolicyItem>(this.detach_IncomingFacturePolicyItems));
            this._Branch = default(EntityRef<Branch>);
            this._IncomingFactureType = default(EntityRef<IncomingFactureType>);
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._Place = default(EntityRef<Place>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string FactureNumber
        {
            get
            {
                return this._FactureNumber;
            }
            set
            {
                if ((this._FactureNumber != value))
                {
                    this.OnFactureNumberChanging(value);
                    this.SendPropertyChanging();
                    this._FactureNumber = value;
                    this.SendPropertyChanged("FactureNumber");
                    this.OnFactureNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this.OnEMBGChanging(value);
                    this.SendPropertyChanging();
                    this._EMBG = value;
                    this.SendPropertyChanged("EMBG");
                    this.OnEMBGChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TaxNumber", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string TaxNumber
        {
            get
            {
                return this._TaxNumber;
            }
            set
            {
                if ((this._TaxNumber != value))
                {
                    this.OnTaxNumberChanging(value);
                    this.SendPropertyChanging();
                    this._TaxNumber = value;
                    this.SendPropertyChanged("TaxNumber");
                    this.OnTaxNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TaxValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TaxValue
        {
            get
            {
                return this._TaxValue;
            }
            set
            {
                if ((this._TaxValue != value))
                {
                    this.OnTaxValueChanging(value);
                    this.SendPropertyChanging();
                    this._TaxValue = value;
                    this.SendPropertyChanged("TaxValue");
                    this.OnTaxValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalCost", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalCost
        {
            get
            {
                return this._TotalCost;
            }
            set
            {
                if ((this._TotalCost != value))
                {
                    this.OnTotalCostChanging(value);
                    this.SendPropertyChanging();
                    this._TotalCost = value;
                    this.SendPropertyChanged("TotalCost");
                    this.OnTotalCostChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FactureDate
        {
            get
            {
                return this._FactureDate;
            }
            set
            {
                if ((this._FactureDate != value))
                {
                    this.OnFactureDateChanging(value);
                    this.SendPropertyChanging();
                    this._FactureDate = value;
                    this.SendPropertyChanged("FactureDate");
                    this.OnFactureDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ValuteDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ValuteDate
        {
            get
            {
                return this._ValuteDate;
            }
            set
            {
                if ((this._ValuteDate != value))
                {
                    this.OnValuteDateChanging(value);
                    this.SendPropertyChanging();
                    this._ValuteDate = value;
                    this.SendPropertyChanged("ValuteDate");
                    this.OnValuteDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IncomingFactureTypeID", DbType = "Int NOT NULL")]
        public int IncomingFactureTypeID
        {
            get
            {
                return this._IncomingFactureTypeID;
            }
            set
            {
                if ((this._IncomingFactureTypeID != value))
                {
                    if (this._IncomingFactureType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnIncomingFactureTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._IncomingFactureTypeID = value;
                    this.SendPropertyChanged("IncomingFactureTypeID");
                    this.OnIncomingFactureTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int")]
        public System.Nullable<int> InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsAccountBooked", DbType = "Bit NOT NULL")]
        public bool IsAccountBooked
        {
            get
            {
                return this._IsAccountBooked;
            }
            set
            {
                if ((this._IsAccountBooked != value))
                {
                    this.OnIsAccountBookedChanging(value);
                    this.SendPropertyChanging();
                    this._IsAccountBooked = value;
                    this.SendPropertyChanged("IsAccountBooked");
                    this.OnIsAccountBookedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBranchIDChanging(value);
                    this.SendPropertyChanging();
                    this._BranchID = value;
                    this.SendPropertyChanged("BranchID");
                    this.OnBranchIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PlaceID", DbType = "Int NOT NULL")]
        public int PlaceID
        {
            get
            {
                return this._PlaceID;
            }
            set
            {
                if ((this._PlaceID != value))
                {
                    if (this._Place.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPlaceIDChanging(value);
                    this.SendPropertyChanging();
                    this._PlaceID = value;
                    this.SendPropertyChanged("PlaceID");
                    this.OnPlaceIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "IncomingFacture_IncomingFacturePolicyItem", Storage = "_IncomingFacturePolicyItems", ThisKey = "ID", OtherKey = "IncomingFactureID")]
        public EntitySet<IncomingFacturePolicyItem> IncomingFacturePolicyItems
        {
            get
            {
                return this._IncomingFacturePolicyItems;
            }
            set
            {
                this._IncomingFacturePolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_IncomingFacture", Storage = "_Branch", ThisKey = "BranchID", OtherKey = "ID", IsForeignKey = true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if (((previousValue != value)
                            || (this._Branch.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Branch.Entity = null;
                        previousValue.IncomingFactures.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if ((value != null))
                    {
                        value.IncomingFactures.Add(this);
                        this._BranchID = value.ID;
                    }
                    else
                    {
                        this._BranchID = default(int);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "IncomingFactureType_IncomingFacture", Storage = "_IncomingFactureType", ThisKey = "IncomingFactureTypeID", OtherKey = "ID", IsForeignKey = true)]
        public IncomingFactureType IncomingFactureType
        {
            get
            {
                return this._IncomingFactureType.Entity;
            }
            set
            {
                IncomingFactureType previousValue = this._IncomingFactureType.Entity;
                if (((previousValue != value)
                            || (this._IncomingFactureType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._IncomingFactureType.Entity = null;
                        previousValue.IncomingFactures.Remove(this);
                    }
                    this._IncomingFactureType.Entity = value;
                    if ((value != null))
                    {
                        value.IncomingFactures.Add(this);
                        this._IncomingFactureTypeID = value.ID;
                    }
                    else
                    {
                        this._IncomingFactureTypeID = default(int);
                    }
                    this.SendPropertyChanged("IncomingFactureType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_IncomingFacture", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.IncomingFactures.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.IncomingFactures.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Place_IncomingFacture", Storage = "_Place", ThisKey = "PlaceID", OtherKey = "ID", IsForeignKey = true)]
        public Place Place
        {
            get
            {
                return this._Place.Entity;
            }
            set
            {
                Place previousValue = this._Place.Entity;
                if (((previousValue != value)
                            || (this._Place.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Place.Entity = null;
                        previousValue.IncomingFactures.Remove(this);
                    }
                    this._Place.Entity = value;
                    if ((value != null))
                    {
                        value.IncomingFactures.Add(this);
                        this._PlaceID = value.ID;
                    }
                    else
                    {
                        this._PlaceID = default(int);
                    }
                    this.SendPropertyChanged("Place");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_IncomingFacture", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.IncomingFactures.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.IncomingFactures.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_IncomingFacturePolicyItems(IncomingFacturePolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.IncomingFacture = this;
        }

        private void detach_IncomingFacturePolicyItems(IncomingFacturePolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.IncomingFacture = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.IncomingFactureTypes")]
    public partial class IncomingFactureType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private EntitySet<IncomingFacture> _IncomingFactures;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public IncomingFactureType()
        {
            this._IncomingFactures = new EntitySet<IncomingFacture>(new Action<IncomingFacture>(this.attach_IncomingFactures), new Action<IncomingFacture>(this.detach_IncomingFactures));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "IncomingFactureType_IncomingFacture", Storage = "_IncomingFactures", ThisKey = "ID", OtherKey = "IncomingFactureTypeID")]
        public EntitySet<IncomingFacture> IncomingFactures
        {
            get
            {
                return this._IncomingFactures;
            }
            set
            {
                this._IncomingFactures.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_IncomingFactures(IncomingFacture entity)
        {
            this.SendPropertyChanging();
            entity.IncomingFactureType = this;
        }

        private void detach_IncomingFactures(IncomingFacture entity)
        {
            this.SendPropertyChanging();
            entity.IncomingFactureType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.InsuranceCompanies")]
    public partial class InsuranceCompany : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private string _Address;

        private string _EMBG;

        private bool _IsActive;

        private string _ShortName;

        private string _Prefix;

        private EntitySet<AccountFacture> _AccountFactures;

        private EntitySet<BrokeragesForMarketingAgent> _BrokeragesForMarketingAgents;

        private EntitySet<BrokerageSlip> _BrokerageSlips;

        private EntitySet<Deal> _Deals;

        private EntitySet<DistributionRoute> _DistributionRoutes;

        private EntitySet<Distribution> _Distributions;

        private EntitySet<Facture> _Factures;

        private EntitySet<IncomingFacture> _IncomingFactures;

        private EntitySet<LifeDeal> _LifeDeals;

        private EntitySet<LifePolicy> _LifePolicies;

        private EntitySet<OfferItem> _OfferItems;

        private EntitySet<Packet> _Packets;

        private EntitySet<Policy> _Policies;

        private EntitySet<RestrictionsRollBackDistribution> _RestrictionsRollBackDistributions;

        private EntitySet<RightRestrictionDistribution> _RightRestrictionDistributions;

        private EntitySet<RightRestriction> _RightRestrictions;

        private EntitySet<RollBackDistribution> _RollBackDistributions;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnEMBGChanging(string value);
        partial void OnEMBGChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnShortNameChanging(string value);
        partial void OnShortNameChanged();
        partial void OnPrefixChanging(string value);
        partial void OnPrefixChanged();
        #endregion

        public InsuranceCompany()
        {
            this._AccountFactures = new EntitySet<AccountFacture>(new Action<AccountFacture>(this.attach_AccountFactures), new Action<AccountFacture>(this.detach_AccountFactures));
            this._BrokeragesForMarketingAgents = new EntitySet<BrokeragesForMarketingAgent>(new Action<BrokeragesForMarketingAgent>(this.attach_BrokeragesForMarketingAgents), new Action<BrokeragesForMarketingAgent>(this.detach_BrokeragesForMarketingAgents));
            this._BrokerageSlips = new EntitySet<BrokerageSlip>(new Action<BrokerageSlip>(this.attach_BrokerageSlips), new Action<BrokerageSlip>(this.detach_BrokerageSlips));
            this._Deals = new EntitySet<Deal>(new Action<Deal>(this.attach_Deals), new Action<Deal>(this.detach_Deals));
            this._DistributionRoutes = new EntitySet<DistributionRoute>(new Action<DistributionRoute>(this.attach_DistributionRoutes), new Action<DistributionRoute>(this.detach_DistributionRoutes));
            this._Distributions = new EntitySet<Distribution>(new Action<Distribution>(this.attach_Distributions), new Action<Distribution>(this.detach_Distributions));
            this._Factures = new EntitySet<Facture>(new Action<Facture>(this.attach_Factures), new Action<Facture>(this.detach_Factures));
            this._IncomingFactures = new EntitySet<IncomingFacture>(new Action<IncomingFacture>(this.attach_IncomingFactures), new Action<IncomingFacture>(this.detach_IncomingFactures));
            this._LifeDeals = new EntitySet<LifeDeal>(new Action<LifeDeal>(this.attach_LifeDeals), new Action<LifeDeal>(this.detach_LifeDeals));
            this._LifePolicies = new EntitySet<LifePolicy>(new Action<LifePolicy>(this.attach_LifePolicies), new Action<LifePolicy>(this.detach_LifePolicies));
            this._OfferItems = new EntitySet<OfferItem>(new Action<OfferItem>(this.attach_OfferItems), new Action<OfferItem>(this.detach_OfferItems));
            this._Packets = new EntitySet<Packet>(new Action<Packet>(this.attach_Packets), new Action<Packet>(this.detach_Packets));
            this._Policies = new EntitySet<Policy>(new Action<Policy>(this.attach_Policies), new Action<Policy>(this.detach_Policies));
            this._RestrictionsRollBackDistributions = new EntitySet<RestrictionsRollBackDistribution>(new Action<RestrictionsRollBackDistribution>(this.attach_RestrictionsRollBackDistributions), new Action<RestrictionsRollBackDistribution>(this.detach_RestrictionsRollBackDistributions));
            this._RightRestrictionDistributions = new EntitySet<RightRestrictionDistribution>(new Action<RightRestrictionDistribution>(this.attach_RightRestrictionDistributions), new Action<RightRestrictionDistribution>(this.detach_RightRestrictionDistributions));
            this._RightRestrictions = new EntitySet<RightRestriction>(new Action<RightRestriction>(this.attach_RightRestrictions), new Action<RightRestriction>(this.detach_RightRestrictions));
            this._RollBackDistributions = new EntitySet<RollBackDistribution>(new Action<RollBackDistribution>(this.attach_RollBackDistributions), new Action<RollBackDistribution>(this.detach_RollBackDistributions));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(100)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15)")]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this.OnEMBGChanging(value);
                    this.SendPropertyChanging();
                    this._EMBG = value;
                    this.SendPropertyChanged("EMBG");
                    this.OnEMBGChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ShortName", DbType = "NVarChar(50)")]
        public string ShortName
        {
            get
            {
                return this._ShortName;
            }
            set
            {
                if ((this._ShortName != value))
                {
                    this.OnShortNameChanging(value);
                    this.SendPropertyChanging();
                    this._ShortName = value;
                    this.SendPropertyChanged("ShortName");
                    this.OnShortNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Prefix", DbType = "NVarChar(10)")]
        public string Prefix
        {
            get
            {
                return this._Prefix;
            }
            set
            {
                if ((this._Prefix != value))
                {
                    this.OnPrefixChanging(value);
                    this.SendPropertyChanging();
                    this._Prefix = value;
                    this.SendPropertyChanged("Prefix");
                    this.OnPrefixChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_AccountFacture", Storage = "_AccountFactures", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<AccountFacture> AccountFactures
        {
            get
            {
                return this._AccountFactures;
            }
            set
            {
                this._AccountFactures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_BrokeragesForMarketingAgent", Storage = "_BrokeragesForMarketingAgents", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<BrokeragesForMarketingAgent> BrokeragesForMarketingAgents
        {
            get
            {
                return this._BrokeragesForMarketingAgents;
            }
            set
            {
                this._BrokeragesForMarketingAgents.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_BrokerageSlip", Storage = "_BrokerageSlips", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<BrokerageSlip> BrokerageSlips
        {
            get
            {
                return this._BrokerageSlips;
            }
            set
            {
                this._BrokerageSlips.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_Deal", Storage = "_Deals", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<Deal> Deals
        {
            get
            {
                return this._Deals;
            }
            set
            {
                this._Deals.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_DistributionRoute", Storage = "_DistributionRoutes", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<DistributionRoute> DistributionRoutes
        {
            get
            {
                return this._DistributionRoutes;
            }
            set
            {
                this._DistributionRoutes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_Distribution", Storage = "_Distributions", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<Distribution> Distributions
        {
            get
            {
                return this._Distributions;
            }
            set
            {
                this._Distributions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_Facture", Storage = "_Factures", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<Facture> Factures
        {
            get
            {
                return this._Factures;
            }
            set
            {
                this._Factures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_IncomingFacture", Storage = "_IncomingFactures", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<IncomingFacture> IncomingFactures
        {
            get
            {
                return this._IncomingFactures;
            }
            set
            {
                this._IncomingFactures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_LifeDeal", Storage = "_LifeDeals", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<LifeDeal> LifeDeals
        {
            get
            {
                return this._LifeDeals;
            }
            set
            {
                this._LifeDeals.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_LifePolicy", Storage = "_LifePolicies", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<LifePolicy> LifePolicies
        {
            get
            {
                return this._LifePolicies;
            }
            set
            {
                this._LifePolicies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_OfferItem", Storage = "_OfferItems", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<OfferItem> OfferItems
        {
            get
            {
                return this._OfferItems;
            }
            set
            {
                this._OfferItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_Packet", Storage = "_Packets", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<Packet> Packets
        {
            get
            {
                return this._Packets;
            }
            set
            {
                this._Packets.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_Policy", Storage = "_Policies", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<Policy> Policies
        {
            get
            {
                return this._Policies;
            }
            set
            {
                this._Policies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_RestrictionsRollBackDistribution", Storage = "_RestrictionsRollBackDistributions", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<RestrictionsRollBackDistribution> RestrictionsRollBackDistributions
        {
            get
            {
                return this._RestrictionsRollBackDistributions;
            }
            set
            {
                this._RestrictionsRollBackDistributions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_RightRestrictionDistribution", Storage = "_RightRestrictionDistributions", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<RightRestrictionDistribution> RightRestrictionDistributions
        {
            get
            {
                return this._RightRestrictionDistributions;
            }
            set
            {
                this._RightRestrictionDistributions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_RightRestriction", Storage = "_RightRestrictions", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<RightRestriction> RightRestrictions
        {
            get
            {
                return this._RightRestrictions;
            }
            set
            {
                this._RightRestrictions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_RollBackDistribution", Storage = "_RollBackDistributions", ThisKey = "ID", OtherKey = "InsuranceCompanyID")]
        public EntitySet<RollBackDistribution> RollBackDistributions
        {
            get
            {
                return this._RollBackDistributions;
            }
            set
            {
                this._RollBackDistributions.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_BrokeragesForMarketingAgents(BrokeragesForMarketingAgent entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_BrokeragesForMarketingAgents(BrokeragesForMarketingAgent entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_BrokerageSlips(BrokerageSlip entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_BrokerageSlips(BrokerageSlip entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_Deals(Deal entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_Deals(Deal entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_DistributionRoutes(DistributionRoute entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_DistributionRoutes(DistributionRoute entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_Distributions(Distribution entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_Distributions(Distribution entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_Factures(Facture entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_Factures(Facture entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_IncomingFactures(IncomingFacture entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_IncomingFactures(IncomingFacture entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_LifeDeals(LifeDeal entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_LifeDeals(LifeDeal entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_OfferItems(OfferItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_OfferItems(OfferItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_Packets(Packet entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_Packets(Packet entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_RestrictionsRollBackDistributions(RestrictionsRollBackDistribution entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_RestrictionsRollBackDistributions(RestrictionsRollBackDistribution entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_RightRestrictionDistributions(RightRestrictionDistribution entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_RightRestrictionDistributions(RightRestrictionDistribution entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_RightRestrictions(RightRestriction entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_RightRestrictions(RightRestriction entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }

        private void attach_RollBackDistributions(RollBackDistribution entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = this;
        }

        private void detach_RollBackDistributions(RollBackDistribution entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceCompany = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.InsuranceSubTypes")]
    public partial class InsuranceSubType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _InsuranceTypeID;

        private string _Code;

        private string _Description;

        private string _ShortDescription;

        private EntitySet<AccountFactureItem> _AccountFactureItems;

        private EntitySet<Brokerage> _Brokerages;

        private EntitySet<BrokeragesForMarketingAgent> _BrokeragesForMarketingAgents;

        private EntitySet<BrokerageSlipInsuranceSubType> _BrokerageSlipInsuranceSubTypes;

        private EntitySet<ControlAppropriateInsuranceSubType> _ControlAppropriateInsuranceSubTypes;

        private EntitySet<Control> _Controls;

        private EntitySet<DistributionRoute> _DistributionRoutes;

        private EntitySet<Distribution> _Distributions;

        private EntitySet<FacCollPaidValuesPerInsSubType> _FacCollPaidValuesPerInsSubTypes;

        private EntitySet<FactureItem> _FactureItems;

        private EntitySet<InusranceCompanyInsuranceSubTypeDescription> _InusranceCompanyInsuranceSubTypeDescriptions;

        private EntitySet<LifeDeal> _LifeDeals;

        private EntitySet<LifePolicy> _LifePolicies;

        private EntitySet<OfferItem> _OfferItems;

        private EntitySet<OrderItem> _OrderItems;

        private EntitySet<PacketsInsuranceSubType> _PacketsInsuranceSubTypes;

        private EntitySet<PaymentsPerInsSubType> _PaymentsPerInsSubTypes;

        private EntitySet<PolicyItem> _PolicyItems;

        private EntitySet<RateDealInsuranceSubType> _RateDealInsuranceSubTypes;

        private EntityRef<InsuranceType> _InsuranceType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnInsuranceTypeIDChanging(int value);
        partial void OnInsuranceTypeIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnShortDescriptionChanging(string value);
        partial void OnShortDescriptionChanged();
        #endregion

        public InsuranceSubType()
        {
            this._AccountFactureItems = new EntitySet<AccountFactureItem>(new Action<AccountFactureItem>(this.attach_AccountFactureItems), new Action<AccountFactureItem>(this.detach_AccountFactureItems));
            this._Brokerages = new EntitySet<Brokerage>(new Action<Brokerage>(this.attach_Brokerages), new Action<Brokerage>(this.detach_Brokerages));
            this._BrokeragesForMarketingAgents = new EntitySet<BrokeragesForMarketingAgent>(new Action<BrokeragesForMarketingAgent>(this.attach_BrokeragesForMarketingAgents), new Action<BrokeragesForMarketingAgent>(this.detach_BrokeragesForMarketingAgents));
            this._BrokerageSlipInsuranceSubTypes = new EntitySet<BrokerageSlipInsuranceSubType>(new Action<BrokerageSlipInsuranceSubType>(this.attach_BrokerageSlipInsuranceSubTypes), new Action<BrokerageSlipInsuranceSubType>(this.detach_BrokerageSlipInsuranceSubTypes));
            this._ControlAppropriateInsuranceSubTypes = new EntitySet<ControlAppropriateInsuranceSubType>(new Action<ControlAppropriateInsuranceSubType>(this.attach_ControlAppropriateInsuranceSubTypes), new Action<ControlAppropriateInsuranceSubType>(this.detach_ControlAppropriateInsuranceSubTypes));
            this._Controls = new EntitySet<Control>(new Action<Control>(this.attach_Controls), new Action<Control>(this.detach_Controls));
            this._DistributionRoutes = new EntitySet<DistributionRoute>(new Action<DistributionRoute>(this.attach_DistributionRoutes), new Action<DistributionRoute>(this.detach_DistributionRoutes));
            this._Distributions = new EntitySet<Distribution>(new Action<Distribution>(this.attach_Distributions), new Action<Distribution>(this.detach_Distributions));
            this._FacCollPaidValuesPerInsSubTypes = new EntitySet<FacCollPaidValuesPerInsSubType>(new Action<FacCollPaidValuesPerInsSubType>(this.attach_FacCollPaidValuesPerInsSubTypes), new Action<FacCollPaidValuesPerInsSubType>(this.detach_FacCollPaidValuesPerInsSubTypes));
            this._FactureItems = new EntitySet<FactureItem>(new Action<FactureItem>(this.attach_FactureItems), new Action<FactureItem>(this.detach_FactureItems));
            this._InusranceCompanyInsuranceSubTypeDescriptions = new EntitySet<InusranceCompanyInsuranceSubTypeDescription>(new Action<InusranceCompanyInsuranceSubTypeDescription>(this.attach_InusranceCompanyInsuranceSubTypeDescriptions), new Action<InusranceCompanyInsuranceSubTypeDescription>(this.detach_InusranceCompanyInsuranceSubTypeDescriptions));
            this._LifeDeals = new EntitySet<LifeDeal>(new Action<LifeDeal>(this.attach_LifeDeals), new Action<LifeDeal>(this.detach_LifeDeals));
            this._LifePolicies = new EntitySet<LifePolicy>(new Action<LifePolicy>(this.attach_LifePolicies), new Action<LifePolicy>(this.detach_LifePolicies));
            this._OfferItems = new EntitySet<OfferItem>(new Action<OfferItem>(this.attach_OfferItems), new Action<OfferItem>(this.detach_OfferItems));
            this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
            this._PacketsInsuranceSubTypes = new EntitySet<PacketsInsuranceSubType>(new Action<PacketsInsuranceSubType>(this.attach_PacketsInsuranceSubTypes), new Action<PacketsInsuranceSubType>(this.detach_PacketsInsuranceSubTypes));
            this._PaymentsPerInsSubTypes = new EntitySet<PaymentsPerInsSubType>(new Action<PaymentsPerInsSubType>(this.attach_PaymentsPerInsSubTypes), new Action<PaymentsPerInsSubType>(this.detach_PaymentsPerInsSubTypes));
            this._PolicyItems = new EntitySet<PolicyItem>(new Action<PolicyItem>(this.attach_PolicyItems), new Action<PolicyItem>(this.detach_PolicyItems));
            this._RateDealInsuranceSubTypes = new EntitySet<RateDealInsuranceSubType>(new Action<RateDealInsuranceSubType>(this.attach_RateDealInsuranceSubTypes), new Action<RateDealInsuranceSubType>(this.detach_RateDealInsuranceSubTypes));
            this._InsuranceType = default(EntityRef<InsuranceType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeID", DbType = "Int NOT NULL")]
        public int InsuranceTypeID
        {
            get
            {
                return this._InsuranceTypeID;
            }
            set
            {
                if ((this._InsuranceTypeID != value))
                {
                    if (this._InsuranceType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceTypeID = value;
                    this.SendPropertyChanged("InsuranceTypeID");
                    this.OnInsuranceTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ShortDescription", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string ShortDescription
        {
            get
            {
                return this._ShortDescription;
            }
            set
            {
                if ((this._ShortDescription != value))
                {
                    this.OnShortDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._ShortDescription = value;
                    this.SendPropertyChanged("ShortDescription");
                    this.OnShortDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_AccountFactureItem", Storage = "_AccountFactureItems", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<AccountFactureItem> AccountFactureItems
        {
            get
            {
                return this._AccountFactureItems;
            }
            set
            {
                this._AccountFactureItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_Brokerage", Storage = "_Brokerages", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<Brokerage> Brokerages
        {
            get
            {
                return this._Brokerages;
            }
            set
            {
                this._Brokerages.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_BrokeragesForMarketingAgent", Storage = "_BrokeragesForMarketingAgents", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<BrokeragesForMarketingAgent> BrokeragesForMarketingAgents
        {
            get
            {
                return this._BrokeragesForMarketingAgents;
            }
            set
            {
                this._BrokeragesForMarketingAgents.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_BrokerageSlipInsuranceSubType", Storage = "_BrokerageSlipInsuranceSubTypes", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<BrokerageSlipInsuranceSubType> BrokerageSlipInsuranceSubTypes
        {
            get
            {
                return this._BrokerageSlipInsuranceSubTypes;
            }
            set
            {
                this._BrokerageSlipInsuranceSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_ControlAppropriateInsuranceSubType", Storage = "_ControlAppropriateInsuranceSubTypes", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<ControlAppropriateInsuranceSubType> ControlAppropriateInsuranceSubTypes
        {
            get
            {
                return this._ControlAppropriateInsuranceSubTypes;
            }
            set
            {
                this._ControlAppropriateInsuranceSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_Control", Storage = "_Controls", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<Control> Controls
        {
            get
            {
                return this._Controls;
            }
            set
            {
                this._Controls.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_DistributionRoute", Storage = "_DistributionRoutes", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<DistributionRoute> DistributionRoutes
        {
            get
            {
                return this._DistributionRoutes;
            }
            set
            {
                this._DistributionRoutes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_Distribution", Storage = "_Distributions", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<Distribution> Distributions
        {
            get
            {
                return this._Distributions;
            }
            set
            {
                this._Distributions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_FacCollPaidValuesPerInsSubType", Storage = "_FacCollPaidValuesPerInsSubTypes", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<FacCollPaidValuesPerInsSubType> FacCollPaidValuesPerInsSubTypes
        {
            get
            {
                return this._FacCollPaidValuesPerInsSubTypes;
            }
            set
            {
                this._FacCollPaidValuesPerInsSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_FactureItem", Storage = "_FactureItems", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<FactureItem> FactureItems
        {
            get
            {
                return this._FactureItems;
            }
            set
            {
                this._FactureItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_InusranceCompanyInsuranceSubTypeDescription", Storage = "_InusranceCompanyInsuranceSubTypeDescriptions", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<InusranceCompanyInsuranceSubTypeDescription> InusranceCompanyInsuranceSubTypeDescriptions
        {
            get
            {
                return this._InusranceCompanyInsuranceSubTypeDescriptions;
            }
            set
            {
                this._InusranceCompanyInsuranceSubTypeDescriptions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_LifeDeal", Storage = "_LifeDeals", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<LifeDeal> LifeDeals
        {
            get
            {
                return this._LifeDeals;
            }
            set
            {
                this._LifeDeals.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_LifePolicy", Storage = "_LifePolicies", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<LifePolicy> LifePolicies
        {
            get
            {
                return this._LifePolicies;
            }
            set
            {
                this._LifePolicies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_OfferItem", Storage = "_OfferItems", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<OfferItem> OfferItems
        {
            get
            {
                return this._OfferItems;
            }
            set
            {
                this._OfferItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_OrderItem", Storage = "_OrderItems", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<OrderItem> OrderItems
        {
            get
            {
                return this._OrderItems;
            }
            set
            {
                this._OrderItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_PacketsInsuranceSubType", Storage = "_PacketsInsuranceSubTypes", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<PacketsInsuranceSubType> PacketsInsuranceSubTypes
        {
            get
            {
                return this._PacketsInsuranceSubTypes;
            }
            set
            {
                this._PacketsInsuranceSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_PaymentsPerInsSubType", Storage = "_PaymentsPerInsSubTypes", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<PaymentsPerInsSubType> PaymentsPerInsSubTypes
        {
            get
            {
                return this._PaymentsPerInsSubTypes;
            }
            set
            {
                this._PaymentsPerInsSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_PolicyItem", Storage = "_PolicyItems", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<PolicyItem> PolicyItems
        {
            get
            {
                return this._PolicyItems;
            }
            set
            {
                this._PolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_RateDealInsuranceSubType", Storage = "_RateDealInsuranceSubTypes", ThisKey = "ID", OtherKey = "InsuranceSubTypeID")]
        public EntitySet<RateDealInsuranceSubType> RateDealInsuranceSubTypes
        {
            get
            {
                return this._RateDealInsuranceSubTypes;
            }
            set
            {
                this._RateDealInsuranceSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceType_InsuranceSubType", Storage = "_InsuranceType", ThisKey = "InsuranceTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceType InsuranceType
        {
            get
            {
                return this._InsuranceType.Entity;
            }
            set
            {
                InsuranceType previousValue = this._InsuranceType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceType.Entity = null;
                        previousValue.InsuranceSubTypes.Remove(this);
                    }
                    this._InsuranceType.Entity = value;
                    if ((value != null))
                    {
                        value.InsuranceSubTypes.Add(this);
                        this._InsuranceTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccountFactureItems(AccountFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_AccountFactureItems(AccountFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_Brokerages(Brokerage entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_Brokerages(Brokerage entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_BrokeragesForMarketingAgents(BrokeragesForMarketingAgent entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_BrokeragesForMarketingAgents(BrokeragesForMarketingAgent entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_BrokerageSlipInsuranceSubTypes(BrokerageSlipInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_BrokerageSlipInsuranceSubTypes(BrokerageSlipInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_ControlAppropriateInsuranceSubTypes(ControlAppropriateInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_ControlAppropriateInsuranceSubTypes(ControlAppropriateInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_Controls(Control entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_Controls(Control entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_DistributionRoutes(DistributionRoute entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_DistributionRoutes(DistributionRoute entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_Distributions(Distribution entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_Distributions(Distribution entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_FacCollPaidValuesPerInsSubTypes(FacCollPaidValuesPerInsSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_FacCollPaidValuesPerInsSubTypes(FacCollPaidValuesPerInsSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_FactureItems(FactureItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_FactureItems(FactureItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_InusranceCompanyInsuranceSubTypeDescriptions(InusranceCompanyInsuranceSubTypeDescription entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_InusranceCompanyInsuranceSubTypeDescriptions(InusranceCompanyInsuranceSubTypeDescription entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_LifeDeals(LifeDeal entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_LifeDeals(LifeDeal entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_OfferItems(OfferItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_OfferItems(OfferItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_OrderItems(OrderItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_OrderItems(OrderItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_PacketsInsuranceSubTypes(PacketsInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_PacketsInsuranceSubTypes(PacketsInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_PaymentsPerInsSubTypes(PaymentsPerInsSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_PaymentsPerInsSubTypes(PaymentsPerInsSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }

        private void attach_RateDealInsuranceSubTypes(RateDealInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = this;
        }

        private void detach_RateDealInsuranceSubTypes(RateDealInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceSubType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.InsuranceTypes")]
    public partial class InsuranceType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private string _ShortName;

        private bool _IsForLive;

        private EntitySet<AccreditationInsuranceType> _AccreditationInsuranceTypes;

        private EntitySet<InsuranceSubType> _InsuranceSubTypes;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnShortNameChanging(string value);
        partial void OnShortNameChanged();
        partial void OnIsForLiveChanging(bool value);
        partial void OnIsForLiveChanged();
        #endregion

        public InsuranceType()
        {
            this._AccreditationInsuranceTypes = new EntitySet<AccreditationInsuranceType>(new Action<AccreditationInsuranceType>(this.attach_AccreditationInsuranceTypes), new Action<AccreditationInsuranceType>(this.detach_AccreditationInsuranceTypes));
            this._InsuranceSubTypes = new EntitySet<InsuranceSubType>(new Action<InsuranceSubType>(this.attach_InsuranceSubTypes), new Action<InsuranceSubType>(this.detach_InsuranceSubTypes));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(70) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ShortName", DbType = "NVarChar(50)")]
        public string ShortName
        {
            get
            {
                return this._ShortName;
            }
            set
            {
                if ((this._ShortName != value))
                {
                    this.OnShortNameChanging(value);
                    this.SendPropertyChanging();
                    this._ShortName = value;
                    this.SendPropertyChanged("ShortName");
                    this.OnShortNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsForLive", DbType = "Bit NOT NULL")]
        public bool IsForLive
        {
            get
            {
                return this._IsForLive;
            }
            set
            {
                if ((this._IsForLive != value))
                {
                    this.OnIsForLiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsForLive = value;
                    this.SendPropertyChanged("IsForLive");
                    this.OnIsForLiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceType_AccreditationInsuranceType", Storage = "_AccreditationInsuranceTypes", ThisKey = "ID", OtherKey = "InsuranceTypeID")]
        public EntitySet<AccreditationInsuranceType> AccreditationInsuranceTypes
        {
            get
            {
                return this._AccreditationInsuranceTypes;
            }
            set
            {
                this._AccreditationInsuranceTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceType_InsuranceSubType", Storage = "_InsuranceSubTypes", ThisKey = "ID", OtherKey = "InsuranceTypeID")]
        public EntitySet<InsuranceSubType> InsuranceSubTypes
        {
            get
            {
                return this._InsuranceSubTypes;
            }
            set
            {
                this._InsuranceSubTypes.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccreditationInsuranceTypes(AccreditationInsuranceType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceType = this;
        }

        private void detach_AccreditationInsuranceTypes(AccreditationInsuranceType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceType = null;
        }

        private void attach_InsuranceSubTypes(InsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceType = this;
        }

        private void detach_InsuranceSubTypes(InsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.InsuranceType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.InusranceCompanyInsuranceSubTypeDescriptions")]
    public partial class InusranceCompanyInsuranceSubTypeDescription : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _InsuranceSubTypeID;

        private int _InsuranceCompanyID;

        private string _Description;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public InusranceCompanyInsuranceSubTypeDescription()
        {
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_InusranceCompanyInsuranceSubTypeDescription", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.InusranceCompanyInsuranceSubTypeDescriptions.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.InusranceCompanyInsuranceSubTypeDescriptions.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.LifeDealBrokerages")]
    public partial class LifeDealBrokerage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _LifeDealID;

        private int _OrdinalNumber;

        private decimal _BrokeragePecentForYear;

        private EntityRef<LifeDeal> _LifeDeal;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLifeDealIDChanging(int value);
        partial void OnLifeDealIDChanged();
        partial void OnOrdinalNumberChanging(int value);
        partial void OnOrdinalNumberChanged();
        partial void OnBrokeragePecentForYearChanging(decimal value);
        partial void OnBrokeragePecentForYearChanged();
        #endregion

        public LifeDealBrokerage()
        {
            this._LifeDeal = default(EntityRef<LifeDeal>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LifeDealID", DbType = "Int NOT NULL")]
        public int LifeDealID
        {
            get
            {
                return this._LifeDealID;
            }
            set
            {
                if ((this._LifeDealID != value))
                {
                    if (this._LifeDeal.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnLifeDealIDChanging(value);
                    this.SendPropertyChanging();
                    this._LifeDealID = value;
                    this.SendPropertyChanged("LifeDealID");
                    this.OnLifeDealIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrdinalNumber", DbType = "Int NOT NULL")]
        public int OrdinalNumber
        {
            get
            {
                return this._OrdinalNumber;
            }
            set
            {
                if ((this._OrdinalNumber != value))
                {
                    this.OnOrdinalNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrdinalNumber = value;
                    this.SendPropertyChanged("OrdinalNumber");
                    this.OnOrdinalNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokeragePecentForYear", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokeragePecentForYear
        {
            get
            {
                return this._BrokeragePecentForYear;
            }
            set
            {
                if ((this._BrokeragePecentForYear != value))
                {
                    this.OnBrokeragePecentForYearChanging(value);
                    this.SendPropertyChanging();
                    this._BrokeragePecentForYear = value;
                    this.SendPropertyChanged("BrokeragePecentForYear");
                    this.OnBrokeragePecentForYearChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LifeDeal_LifeDealBrokerage", Storage = "_LifeDeal", ThisKey = "LifeDealID", OtherKey = "ID", IsForeignKey = true)]
        public LifeDeal LifeDeal
        {
            get
            {
                return this._LifeDeal.Entity;
            }
            set
            {
                LifeDeal previousValue = this._LifeDeal.Entity;
                if (((previousValue != value)
                            || (this._LifeDeal.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._LifeDeal.Entity = null;
                        previousValue.LifeDealBrokerages.Remove(this);
                    }
                    this._LifeDeal.Entity = value;
                    if ((value != null))
                    {
                        value.LifeDealBrokerages.Add(this);
                        this._LifeDealID = value.ID;
                    }
                    else
                    {
                        this._LifeDealID = default(int);
                    }
                    this.SendPropertyChanged("LifeDeal");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.LifeDeals")]
    public partial class LifeDeal : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private string _Description;

        private int _InsuranceCompanyID;

        private int _InsuranceSubTypeID;

        private decimal _PercentageFromSumForRestLiving;

        private decimal _PercentageFromPremiumForAccident;

        private bool _IsActive;

        private EntitySet<LifeDealBrokerage> _LifeDealBrokerages;

        private EntitySet<LifePolicy> _LifePolicies;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnPercentageFromSumForRestLivingChanging(decimal value);
        partial void OnPercentageFromSumForRestLivingChanged();
        partial void OnPercentageFromPremiumForAccidentChanging(decimal value);
        partial void OnPercentageFromPremiumForAccidentChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public LifeDeal()
        {
            this._LifeDealBrokerages = new EntitySet<LifeDealBrokerage>(new Action<LifeDealBrokerage>(this.attach_LifeDealBrokerages), new Action<LifeDealBrokerage>(this.detach_LifeDealBrokerages));
            this._LifePolicies = new EntitySet<LifePolicy>(new Action<LifePolicy>(this.attach_LifePolicies), new Action<LifePolicy>(this.detach_LifePolicies));
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(500)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageFromSumForRestLiving", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageFromSumForRestLiving
        {
            get
            {
                return this._PercentageFromSumForRestLiving;
            }
            set
            {
                if ((this._PercentageFromSumForRestLiving != value))
                {
                    this.OnPercentageFromSumForRestLivingChanging(value);
                    this.SendPropertyChanging();
                    this._PercentageFromSumForRestLiving = value;
                    this.SendPropertyChanged("PercentageFromSumForRestLiving");
                    this.OnPercentageFromSumForRestLivingChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageFromPremiumForAccident", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageFromPremiumForAccident
        {
            get
            {
                return this._PercentageFromPremiumForAccident;
            }
            set
            {
                if ((this._PercentageFromPremiumForAccident != value))
                {
                    this.OnPercentageFromPremiumForAccidentChanging(value);
                    this.SendPropertyChanging();
                    this._PercentageFromPremiumForAccident = value;
                    this.SendPropertyChanged("PercentageFromPremiumForAccident");
                    this.OnPercentageFromPremiumForAccidentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LifeDeal_LifeDealBrokerage", Storage = "_LifeDealBrokerages", ThisKey = "ID", OtherKey = "LifeDealID")]
        public EntitySet<LifeDealBrokerage> LifeDealBrokerages
        {
            get
            {
                return this._LifeDealBrokerages;
            }
            set
            {
                this._LifeDealBrokerages.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LifeDeal_LifePolicy", Storage = "_LifePolicies", ThisKey = "ID", OtherKey = "LifeDealID")]
        public EntitySet<LifePolicy> LifePolicies
        {
            get
            {
                return this._LifePolicies;
            }
            set
            {
                this._LifePolicies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_LifeDeal", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.LifeDeals.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.LifeDeals.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_LifeDeal", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.LifeDeals.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.LifeDeals.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_LifeDealBrokerages(LifeDealBrokerage entity)
        {
            this.SendPropertyChanging();
            entity.LifeDeal = this;
        }

        private void detach_LifeDealBrokerages(LifeDealBrokerage entity)
        {
            this.SendPropertyChanging();
            entity.LifeDeal = null;
        }

        private void attach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.LifeDeal = this;
        }

        private void detach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.LifeDeal = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.LifePolicies")]
    public partial class LifePolicy : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _PolicyNumber;

        private string _OfferNumber;

        private int _InsuranceCompanyID;

        private int _InsuranceSubTypeID;

        private int _LifeDealID;

        private System.DateTime _ApplicationDate;

        private System.DateTime _InsertDate;

        private int _UserID;

        private int _BranchID;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private bool _Discard;

        private decimal _TotalInsuranceCoverageSum;

        private decimal _TotalInsuranceCoverageSumEuro;

        private decimal _TotalPremumValue;

        private decimal _TotalPremiumValueEuro;

        private decimal _YearlyPremiumValueForLife;

        private decimal _YearlyPremiumValueForLifeEuro;

        private decimal _YearlyPremiumValueForAccident;

        private decimal _YearlyPremiumValueForAccidentEuro;

        private int _ClientID;

        private int _OwnerID;

        private decimal _InsuranceCoverageOne;

        private decimal _InsuranceCoverageOneEuro;

        private decimal _InsuranceCoverageTwo;

        private decimal _InsuranceCoverageTwoEuro;

        private EntitySet<LifePolicyBrokerage> _LifePolicyBrokerages;

        private EntitySet<LifePolicyFactureItem> _LifePolicyFactureItems;

        private EntitySet<LifePolicyPremiumValue> _LifePolicyPremiumValues;

        private EntityRef<Branch> _Branch;

        private EntityRef<Client> _Client;

        private EntityRef<Client> _Client1;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        private EntityRef<LifeDeal> _LifeDeal;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPolicyNumberChanging(string value);
        partial void OnPolicyNumberChanged();
        partial void OnOfferNumberChanging(string value);
        partial void OnOfferNumberChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnLifeDealIDChanging(int value);
        partial void OnLifeDealIDChanged();
        partial void OnApplicationDateChanging(System.DateTime value);
        partial void OnApplicationDateChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnBranchIDChanging(int value);
        partial void OnBranchIDChanged();
        partial void OnStartDateChanging(System.DateTime value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime value);
        partial void OnEndDateChanged();
        partial void OnDiscardChanging(bool value);
        partial void OnDiscardChanged();
        partial void OnTotalInsuranceCoverageSumChanging(decimal value);
        partial void OnTotalInsuranceCoverageSumChanged();
        partial void OnTotalInsuranceCoverageSumEuroChanging(decimal value);
        partial void OnTotalInsuranceCoverageSumEuroChanged();
        partial void OnTotalPremumValueChanging(decimal value);
        partial void OnTotalPremumValueChanged();
        partial void OnTotalPremiumValueEuroChanging(decimal value);
        partial void OnTotalPremiumValueEuroChanged();
        partial void OnYearlyPremiumValueForLifeChanging(decimal value);
        partial void OnYearlyPremiumValueForLifeChanged();
        partial void OnYearlyPremiumValueForLifeEuroChanging(decimal value);
        partial void OnYearlyPremiumValueForLifeEuroChanged();
        partial void OnYearlyPremiumValueForAccidentChanging(decimal value);
        partial void OnYearlyPremiumValueForAccidentChanged();
        partial void OnYearlyPremiumValueForAccidentEuroChanging(decimal value);
        partial void OnYearlyPremiumValueForAccidentEuroChanged();
        partial void OnClientIDChanging(int value);
        partial void OnClientIDChanged();
        partial void OnOwnerIDChanging(int value);
        partial void OnOwnerIDChanged();
        partial void OnInsuranceCoverageOneChanging(decimal value);
        partial void OnInsuranceCoverageOneChanged();
        partial void OnInsuranceCoverageOneEuroChanging(decimal value);
        partial void OnInsuranceCoverageOneEuroChanged();
        partial void OnInsuranceCoverageTwoChanging(decimal value);
        partial void OnInsuranceCoverageTwoChanged();
        partial void OnInsuranceCoverageTwoEuroChanging(decimal value);
        partial void OnInsuranceCoverageTwoEuroChanged();
        #endregion

        public LifePolicy()
        {
            this._LifePolicyBrokerages = new EntitySet<LifePolicyBrokerage>(new Action<LifePolicyBrokerage>(this.attach_LifePolicyBrokerages), new Action<LifePolicyBrokerage>(this.detach_LifePolicyBrokerages));
            this._LifePolicyFactureItems = new EntitySet<LifePolicyFactureItem>(new Action<LifePolicyFactureItem>(this.attach_LifePolicyFactureItems), new Action<LifePolicyFactureItem>(this.detach_LifePolicyFactureItems));
            this._LifePolicyPremiumValues = new EntitySet<LifePolicyPremiumValue>(new Action<LifePolicyPremiumValue>(this.attach_LifePolicyPremiumValues), new Action<LifePolicyPremiumValue>(this.detach_LifePolicyPremiumValues));
            this._Branch = default(EntityRef<Branch>);
            this._Client = default(EntityRef<Client>);
            this._Client1 = default(EntityRef<Client>);
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            this._LifeDeal = default(EntityRef<LifeDeal>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string PolicyNumber
        {
            get
            {
                return this._PolicyNumber;
            }
            set
            {
                if ((this._PolicyNumber != value))
                {
                    this.OnPolicyNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyNumber = value;
                    this.SendPropertyChanged("PolicyNumber");
                    this.OnPolicyNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OfferNumber", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string OfferNumber
        {
            get
            {
                return this._OfferNumber;
            }
            set
            {
                if ((this._OfferNumber != value))
                {
                    this.OnOfferNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OfferNumber = value;
                    this.SendPropertyChanged("OfferNumber");
                    this.OnOfferNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LifeDealID", DbType = "Int NOT NULL")]
        public int LifeDealID
        {
            get
            {
                return this._LifeDealID;
            }
            set
            {
                if ((this._LifeDealID != value))
                {
                    if (this._LifeDeal.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnLifeDealIDChanging(value);
                    this.SendPropertyChanging();
                    this._LifeDealID = value;
                    this.SendPropertyChanged("LifeDealID");
                    this.OnLifeDealIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ApplicationDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ApplicationDate
        {
            get
            {
                return this._ApplicationDate;
            }
            set
            {
                if ((this._ApplicationDate != value))
                {
                    this.OnApplicationDateChanging(value);
                    this.SendPropertyChanging();
                    this._ApplicationDate = value;
                    this.SendPropertyChanged("ApplicationDate");
                    this.OnApplicationDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsertDate", DbType = "DateTime NOT NULL")]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if ((this._InsertDate != value))
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBranchIDChanging(value);
                    this.SendPropertyChanging();
                    this._BranchID = value;
                    this.SendPropertyChanged("BranchID");
                    this.OnBranchIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "DateTime NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "DateTime NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Discard", DbType = "Bit NOT NULL")]
        public bool Discard
        {
            get
            {
                return this._Discard;
            }
            set
            {
                if ((this._Discard != value))
                {
                    this.OnDiscardChanging(value);
                    this.SendPropertyChanging();
                    this._Discard = value;
                    this.SendPropertyChanged("Discard");
                    this.OnDiscardChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalInsuranceCoverageSum", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalInsuranceCoverageSum
        {
            get
            {
                return this._TotalInsuranceCoverageSum;
            }
            set
            {
                if ((this._TotalInsuranceCoverageSum != value))
                {
                    this.OnTotalInsuranceCoverageSumChanging(value);
                    this.SendPropertyChanging();
                    this._TotalInsuranceCoverageSum = value;
                    this.SendPropertyChanged("TotalInsuranceCoverageSum");
                    this.OnTotalInsuranceCoverageSumChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalInsuranceCoverageSumEuro", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalInsuranceCoverageSumEuro
        {
            get
            {
                return this._TotalInsuranceCoverageSumEuro;
            }
            set
            {
                if ((this._TotalInsuranceCoverageSumEuro != value))
                {
                    this.OnTotalInsuranceCoverageSumEuroChanging(value);
                    this.SendPropertyChanging();
                    this._TotalInsuranceCoverageSumEuro = value;
                    this.SendPropertyChanged("TotalInsuranceCoverageSumEuro");
                    this.OnTotalInsuranceCoverageSumEuroChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalPremumValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalPremumValue
        {
            get
            {
                return this._TotalPremumValue;
            }
            set
            {
                if ((this._TotalPremumValue != value))
                {
                    this.OnTotalPremumValueChanging(value);
                    this.SendPropertyChanging();
                    this._TotalPremumValue = value;
                    this.SendPropertyChanged("TotalPremumValue");
                    this.OnTotalPremumValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalPremiumValueEuro", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalPremiumValueEuro
        {
            get
            {
                return this._TotalPremiumValueEuro;
            }
            set
            {
                if ((this._TotalPremiumValueEuro != value))
                {
                    this.OnTotalPremiumValueEuroChanging(value);
                    this.SendPropertyChanging();
                    this._TotalPremiumValueEuro = value;
                    this.SendPropertyChanged("TotalPremiumValueEuro");
                    this.OnTotalPremiumValueEuroChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_YearlyPremiumValueForLife", DbType = "Decimal(18,2) NOT NULL")]
        public decimal YearlyPremiumValueForLife
        {
            get
            {
                return this._YearlyPremiumValueForLife;
            }
            set
            {
                if ((this._YearlyPremiumValueForLife != value))
                {
                    this.OnYearlyPremiumValueForLifeChanging(value);
                    this.SendPropertyChanging();
                    this._YearlyPremiumValueForLife = value;
                    this.SendPropertyChanged("YearlyPremiumValueForLife");
                    this.OnYearlyPremiumValueForLifeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_YearlyPremiumValueForLifeEuro", DbType = "Decimal(18,2) NOT NULL")]
        public decimal YearlyPremiumValueForLifeEuro
        {
            get
            {
                return this._YearlyPremiumValueForLifeEuro;
            }
            set
            {
                if ((this._YearlyPremiumValueForLifeEuro != value))
                {
                    this.OnYearlyPremiumValueForLifeEuroChanging(value);
                    this.SendPropertyChanging();
                    this._YearlyPremiumValueForLifeEuro = value;
                    this.SendPropertyChanged("YearlyPremiumValueForLifeEuro");
                    this.OnYearlyPremiumValueForLifeEuroChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_YearlyPremiumValueForAccident", DbType = "Decimal(18,2) NOT NULL")]
        public decimal YearlyPremiumValueForAccident
        {
            get
            {
                return this._YearlyPremiumValueForAccident;
            }
            set
            {
                if ((this._YearlyPremiumValueForAccident != value))
                {
                    this.OnYearlyPremiumValueForAccidentChanging(value);
                    this.SendPropertyChanging();
                    this._YearlyPremiumValueForAccident = value;
                    this.SendPropertyChanged("YearlyPremiumValueForAccident");
                    this.OnYearlyPremiumValueForAccidentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_YearlyPremiumValueForAccidentEuro", DbType = "Decimal(18,2) NOT NULL")]
        public decimal YearlyPremiumValueForAccidentEuro
        {
            get
            {
                return this._YearlyPremiumValueForAccidentEuro;
            }
            set
            {
                if ((this._YearlyPremiumValueForAccidentEuro != value))
                {
                    this.OnYearlyPremiumValueForAccidentEuroChanging(value);
                    this.SendPropertyChanging();
                    this._YearlyPremiumValueForAccidentEuro = value;
                    this.SendPropertyChanged("YearlyPremiumValueForAccidentEuro");
                    this.OnYearlyPremiumValueForAccidentEuroChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerID", DbType = "Int NOT NULL")]
        public int OwnerID
        {
            get
            {
                return this._OwnerID;
            }
            set
            {
                if ((this._OwnerID != value))
                {
                    if (this._Client1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOwnerIDChanging(value);
                    this.SendPropertyChanging();
                    this._OwnerID = value;
                    this.SendPropertyChanged("OwnerID");
                    this.OnOwnerIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCoverageOne", DbType = "Decimal(18,2) NOT NULL")]
        public decimal InsuranceCoverageOne
        {
            get
            {
                return this._InsuranceCoverageOne;
            }
            set
            {
                if ((this._InsuranceCoverageOne != value))
                {
                    this.OnInsuranceCoverageOneChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCoverageOne = value;
                    this.SendPropertyChanged("InsuranceCoverageOne");
                    this.OnInsuranceCoverageOneChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCoverageOneEuro", DbType = "Decimal(18,2) NOT NULL")]
        public decimal InsuranceCoverageOneEuro
        {
            get
            {
                return this._InsuranceCoverageOneEuro;
            }
            set
            {
                if ((this._InsuranceCoverageOneEuro != value))
                {
                    this.OnInsuranceCoverageOneEuroChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCoverageOneEuro = value;
                    this.SendPropertyChanged("InsuranceCoverageOneEuro");
                    this.OnInsuranceCoverageOneEuroChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCoverageTwo", DbType = "Decimal(18,2) NOT NULL")]
        public decimal InsuranceCoverageTwo
        {
            get
            {
                return this._InsuranceCoverageTwo;
            }
            set
            {
                if ((this._InsuranceCoverageTwo != value))
                {
                    this.OnInsuranceCoverageTwoChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCoverageTwo = value;
                    this.SendPropertyChanged("InsuranceCoverageTwo");
                    this.OnInsuranceCoverageTwoChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCoverageTwoEuro", DbType = "Decimal(18,2) NOT NULL")]
        public decimal InsuranceCoverageTwoEuro
        {
            get
            {
                return this._InsuranceCoverageTwoEuro;
            }
            set
            {
                if ((this._InsuranceCoverageTwoEuro != value))
                {
                    this.OnInsuranceCoverageTwoEuroChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCoverageTwoEuro = value;
                    this.SendPropertyChanged("InsuranceCoverageTwoEuro");
                    this.OnInsuranceCoverageTwoEuroChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LifePolicy_LifePolicyBrokerage", Storage = "_LifePolicyBrokerages", ThisKey = "ID", OtherKey = "LifePolicyID")]
        public EntitySet<LifePolicyBrokerage> LifePolicyBrokerages
        {
            get
            {
                return this._LifePolicyBrokerages;
            }
            set
            {
                this._LifePolicyBrokerages.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LifePolicy_LifePolicyFactureItem", Storage = "_LifePolicyFactureItems", ThisKey = "ID", OtherKey = "LifePolicyD")]
        public EntitySet<LifePolicyFactureItem> LifePolicyFactureItems
        {
            get
            {
                return this._LifePolicyFactureItems;
            }
            set
            {
                this._LifePolicyFactureItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LifePolicy_LifePolicyPremiumValue", Storage = "_LifePolicyPremiumValues", ThisKey = "ID", OtherKey = "LifePolicyID")]
        public EntitySet<LifePolicyPremiumValue> LifePolicyPremiumValues
        {
            get
            {
                return this._LifePolicyPremiumValues;
            }
            set
            {
                this._LifePolicyPremiumValues.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_LifePolicy", Storage = "_Branch", ThisKey = "BranchID", OtherKey = "ID", IsForeignKey = true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if (((previousValue != value)
                            || (this._Branch.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Branch.Entity = null;
                        previousValue.LifePolicies.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if ((value != null))
                    {
                        value.LifePolicies.Add(this);
                        this._BranchID = value.ID;
                    }
                    else
                    {
                        this._BranchID = default(int);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_LifePolicy", Storage = "_Client", ThisKey = "ClientID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if (((previousValue != value)
                            || (this._Client.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client.Entity = null;
                        previousValue.LifePolicies.Remove(this);
                    }
                    this._Client.Entity = value;
                    if ((value != null))
                    {
                        value.LifePolicies.Add(this);
                        this._ClientID = value.ID;
                    }
                    else
                    {
                        this._ClientID = default(int);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_LifePolicy1", Storage = "_Client1", ThisKey = "OwnerID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client1
        {
            get
            {
                return this._Client1.Entity;
            }
            set
            {
                Client previousValue = this._Client1.Entity;
                if (((previousValue != value)
                            || (this._Client1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client1.Entity = null;
                        previousValue.LifePolicies1.Remove(this);
                    }
                    this._Client1.Entity = value;
                    if ((value != null))
                    {
                        value.LifePolicies1.Add(this);
                        this._OwnerID = value.ID;
                    }
                    else
                    {
                        this._OwnerID = default(int);
                    }
                    this.SendPropertyChanged("Client1");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_LifePolicy", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.LifePolicies.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.LifePolicies.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_LifePolicy", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.LifePolicies.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.LifePolicies.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LifeDeal_LifePolicy", Storage = "_LifeDeal", ThisKey = "LifeDealID", OtherKey = "ID", IsForeignKey = true)]
        public LifeDeal LifeDeal
        {
            get
            {
                return this._LifeDeal.Entity;
            }
            set
            {
                LifeDeal previousValue = this._LifeDeal.Entity;
                if (((previousValue != value)
                            || (this._LifeDeal.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._LifeDeal.Entity = null;
                        previousValue.LifePolicies.Remove(this);
                    }
                    this._LifeDeal.Entity = value;
                    if ((value != null))
                    {
                        value.LifePolicies.Add(this);
                        this._LifeDealID = value.ID;
                    }
                    else
                    {
                        this._LifeDealID = default(int);
                    }
                    this.SendPropertyChanged("LifeDeal");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_LifePolicy", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.LifePolicies.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.LifePolicies.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_LifePolicyBrokerages(LifePolicyBrokerage entity)
        {
            this.SendPropertyChanging();
            entity.LifePolicy = this;
        }

        private void detach_LifePolicyBrokerages(LifePolicyBrokerage entity)
        {
            this.SendPropertyChanging();
            entity.LifePolicy = null;
        }

        private void attach_LifePolicyFactureItems(LifePolicyFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.LifePolicy = this;
        }

        private void detach_LifePolicyFactureItems(LifePolicyFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.LifePolicy = null;
        }

        private void attach_LifePolicyPremiumValues(LifePolicyPremiumValue entity)
        {
            this.SendPropertyChanging();
            entity.LifePolicy = this;
        }

        private void detach_LifePolicyPremiumValues(LifePolicyPremiumValue entity)
        {
            this.SendPropertyChanging();
            entity.LifePolicy = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.LifePolicyBrokerages")]
    public partial class LifePolicyBrokerage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _LifePolicyID;

        private int _OrdinalNumber;

        private System.DateTime _FromDate;

        private System.DateTime _ToDate;

        private decimal _Value;

        private bool _IsFactured;

        private EntityRef<LifePolicy> _LifePolicy;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLifePolicyIDChanging(int value);
        partial void OnLifePolicyIDChanged();
        partial void OnOrdinalNumberChanging(int value);
        partial void OnOrdinalNumberChanged();
        partial void OnFromDateChanging(System.DateTime value);
        partial void OnFromDateChanged();
        partial void OnToDateChanging(System.DateTime value);
        partial void OnToDateChanged();
        partial void OnValueChanging(decimal value);
        partial void OnValueChanged();
        partial void OnIsFacturedChanging(bool value);
        partial void OnIsFacturedChanged();
        #endregion

        public LifePolicyBrokerage()
        {
            this._LifePolicy = default(EntityRef<LifePolicy>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LifePolicyID", DbType = "Int NOT NULL")]
        public int LifePolicyID
        {
            get
            {
                return this._LifePolicyID;
            }
            set
            {
                if ((this._LifePolicyID != value))
                {
                    if (this._LifePolicy.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnLifePolicyIDChanging(value);
                    this.SendPropertyChanging();
                    this._LifePolicyID = value;
                    this.SendPropertyChanged("LifePolicyID");
                    this.OnLifePolicyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrdinalNumber", DbType = "Int NOT NULL")]
        public int OrdinalNumber
        {
            get
            {
                return this._OrdinalNumber;
            }
            set
            {
                if ((this._OrdinalNumber != value))
                {
                    this.OnOrdinalNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrdinalNumber = value;
                    this.SendPropertyChanged("OrdinalNumber");
                    this.OnOrdinalNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if ((this._FromDate != value))
                {
                    this.OnFromDateChanging(value);
                    this.SendPropertyChanging();
                    this._FromDate = value;
                    this.SendPropertyChanged("FromDate");
                    this.OnFromDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if ((this._ToDate != value))
                {
                    this.OnToDateChanging(value);
                    this.SendPropertyChanging();
                    this._ToDate = value;
                    this.SendPropertyChanged("ToDate");
                    this.OnToDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "Decimal(18,2) NOT NULL")]
        public decimal Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsFactured", DbType = "Bit NOT NULL")]
        public bool IsFactured
        {
            get
            {
                return this._IsFactured;
            }
            set
            {
                if ((this._IsFactured != value))
                {
                    this.OnIsFacturedChanging(value);
                    this.SendPropertyChanging();
                    this._IsFactured = value;
                    this.SendPropertyChanged("IsFactured");
                    this.OnIsFacturedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LifePolicy_LifePolicyBrokerage", Storage = "_LifePolicy", ThisKey = "LifePolicyID", OtherKey = "ID", IsForeignKey = true)]
        public LifePolicy LifePolicy
        {
            get
            {
                return this._LifePolicy.Entity;
            }
            set
            {
                LifePolicy previousValue = this._LifePolicy.Entity;
                if (((previousValue != value)
                            || (this._LifePolicy.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._LifePolicy.Entity = null;
                        previousValue.LifePolicyBrokerages.Remove(this);
                    }
                    this._LifePolicy.Entity = value;
                    if ((value != null))
                    {
                        value.LifePolicyBrokerages.Add(this);
                        this._LifePolicyID = value.ID;
                    }
                    else
                    {
                        this._LifePolicyID = default(int);
                    }
                    this.SendPropertyChanged("LifePolicy");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.LifePolicyFactureItems")]
    public partial class LifePolicyFactureItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _FactureItemID;

        private int _LifePolicyD;

        private EntityRef<FactureItem> _FactureItem;

        private EntityRef<LifePolicy> _LifePolicy;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnFactureItemIDChanging(int value);
        partial void OnFactureItemIDChanged();
        partial void OnLifePolicyDChanging(int value);
        partial void OnLifePolicyDChanged();
        #endregion

        public LifePolicyFactureItem()
        {
            this._FactureItem = default(EntityRef<FactureItem>);
            this._LifePolicy = default(EntityRef<LifePolicy>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureItemID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int FactureItemID
        {
            get
            {
                return this._FactureItemID;
            }
            set
            {
                if ((this._FactureItemID != value))
                {
                    if (this._FactureItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFactureItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._FactureItemID = value;
                    this.SendPropertyChanged("FactureItemID");
                    this.OnFactureItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LifePolicyD", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int LifePolicyD
        {
            get
            {
                return this._LifePolicyD;
            }
            set
            {
                if ((this._LifePolicyD != value))
                {
                    if (this._LifePolicy.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnLifePolicyDChanging(value);
                    this.SendPropertyChanging();
                    this._LifePolicyD = value;
                    this.SendPropertyChanged("LifePolicyD");
                    this.OnLifePolicyDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FactureItem_LifePolicyFactureItem", Storage = "_FactureItem", ThisKey = "FactureItemID", OtherKey = "ID", IsForeignKey = true)]
        public FactureItem FactureItem
        {
            get
            {
                return this._FactureItem.Entity;
            }
            set
            {
                FactureItem previousValue = this._FactureItem.Entity;
                if (((previousValue != value)
                            || (this._FactureItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._FactureItem.Entity = null;
                        previousValue.LifePolicyFactureItems.Remove(this);
                    }
                    this._FactureItem.Entity = value;
                    if ((value != null))
                    {
                        value.LifePolicyFactureItems.Add(this);
                        this._FactureItemID = value.ID;
                    }
                    else
                    {
                        this._FactureItemID = default(int);
                    }
                    this.SendPropertyChanged("FactureItem");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LifePolicy_LifePolicyFactureItem", Storage = "_LifePolicy", ThisKey = "LifePolicyD", OtherKey = "ID", IsForeignKey = true)]
        public LifePolicy LifePolicy
        {
            get
            {
                return this._LifePolicy.Entity;
            }
            set
            {
                LifePolicy previousValue = this._LifePolicy.Entity;
                if (((previousValue != value)
                            || (this._LifePolicy.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._LifePolicy.Entity = null;
                        previousValue.LifePolicyFactureItems.Remove(this);
                    }
                    this._LifePolicy.Entity = value;
                    if ((value != null))
                    {
                        value.LifePolicyFactureItems.Add(this);
                        this._LifePolicyD = value.ID;
                    }
                    else
                    {
                        this._LifePolicyD = default(int);
                    }
                    this.SendPropertyChanged("LifePolicy");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.LifePolicyPremiumValues")]
    public partial class LifePolicyPremiumValue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _LifePolicyID;

        private int _OrdinalNumberYear;

        private System.DateTime _FromDate;

        private System.DateTime _ToDate;

        private decimal _TotalPremiumValue;

        private decimal _TotalPremiumValueEuro;

        private decimal _PremiumValueForLife;

        private decimal _PremiumValueForLifeEuro;

        private decimal _PremiumValueForAccident;

        private decimal _PremiumValueForAccidentEuro;

        private EntityRef<LifePolicy> _LifePolicy;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLifePolicyIDChanging(int value);
        partial void OnLifePolicyIDChanged();
        partial void OnOrdinalNumberYearChanging(int value);
        partial void OnOrdinalNumberYearChanged();
        partial void OnFromDateChanging(System.DateTime value);
        partial void OnFromDateChanged();
        partial void OnToDateChanging(System.DateTime value);
        partial void OnToDateChanged();
        partial void OnTotalPremiumValueChanging(decimal value);
        partial void OnTotalPremiumValueChanged();
        partial void OnTotalPremiumValueEuroChanging(decimal value);
        partial void OnTotalPremiumValueEuroChanged();
        partial void OnPremiumValueForLifeChanging(decimal value);
        partial void OnPremiumValueForLifeChanged();
        partial void OnPremiumValueForLifeEuroChanging(decimal value);
        partial void OnPremiumValueForLifeEuroChanged();
        partial void OnPremiumValueForAccidentChanging(decimal value);
        partial void OnPremiumValueForAccidentChanged();
        partial void OnPremiumValueForAccidentEuroChanging(decimal value);
        partial void OnPremiumValueForAccidentEuroChanged();
        #endregion

        public LifePolicyPremiumValue()
        {
            this._LifePolicy = default(EntityRef<LifePolicy>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LifePolicyID", DbType = "Int NOT NULL")]
        public int LifePolicyID
        {
            get
            {
                return this._LifePolicyID;
            }
            set
            {
                if ((this._LifePolicyID != value))
                {
                    if (this._LifePolicy.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnLifePolicyIDChanging(value);
                    this.SendPropertyChanging();
                    this._LifePolicyID = value;
                    this.SendPropertyChanged("LifePolicyID");
                    this.OnLifePolicyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrdinalNumberYear", DbType = "Int NOT NULL")]
        public int OrdinalNumberYear
        {
            get
            {
                return this._OrdinalNumberYear;
            }
            set
            {
                if ((this._OrdinalNumberYear != value))
                {
                    this.OnOrdinalNumberYearChanging(value);
                    this.SendPropertyChanging();
                    this._OrdinalNumberYear = value;
                    this.SendPropertyChanged("OrdinalNumberYear");
                    this.OnOrdinalNumberYearChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if ((this._FromDate != value))
                {
                    this.OnFromDateChanging(value);
                    this.SendPropertyChanging();
                    this._FromDate = value;
                    this.SendPropertyChanged("FromDate");
                    this.OnFromDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if ((this._ToDate != value))
                {
                    this.OnToDateChanging(value);
                    this.SendPropertyChanging();
                    this._ToDate = value;
                    this.SendPropertyChanged("ToDate");
                    this.OnToDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalPremiumValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalPremiumValue
        {
            get
            {
                return this._TotalPremiumValue;
            }
            set
            {
                if ((this._TotalPremiumValue != value))
                {
                    this.OnTotalPremiumValueChanging(value);
                    this.SendPropertyChanging();
                    this._TotalPremiumValue = value;
                    this.SendPropertyChanged("TotalPremiumValue");
                    this.OnTotalPremiumValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalPremiumValueEuro", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalPremiumValueEuro
        {
            get
            {
                return this._TotalPremiumValueEuro;
            }
            set
            {
                if ((this._TotalPremiumValueEuro != value))
                {
                    this.OnTotalPremiumValueEuroChanging(value);
                    this.SendPropertyChanging();
                    this._TotalPremiumValueEuro = value;
                    this.SendPropertyChanged("TotalPremiumValueEuro");
                    this.OnTotalPremiumValueEuroChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PremiumValueForLife", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PremiumValueForLife
        {
            get
            {
                return this._PremiumValueForLife;
            }
            set
            {
                if ((this._PremiumValueForLife != value))
                {
                    this.OnPremiumValueForLifeChanging(value);
                    this.SendPropertyChanging();
                    this._PremiumValueForLife = value;
                    this.SendPropertyChanged("PremiumValueForLife");
                    this.OnPremiumValueForLifeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PremiumValueForLifeEuro", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PremiumValueForLifeEuro
        {
            get
            {
                return this._PremiumValueForLifeEuro;
            }
            set
            {
                if ((this._PremiumValueForLifeEuro != value))
                {
                    this.OnPremiumValueForLifeEuroChanging(value);
                    this.SendPropertyChanging();
                    this._PremiumValueForLifeEuro = value;
                    this.SendPropertyChanged("PremiumValueForLifeEuro");
                    this.OnPremiumValueForLifeEuroChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PremiumValueForAccident", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PremiumValueForAccident
        {
            get
            {
                return this._PremiumValueForAccident;
            }
            set
            {
                if ((this._PremiumValueForAccident != value))
                {
                    this.OnPremiumValueForAccidentChanging(value);
                    this.SendPropertyChanging();
                    this._PremiumValueForAccident = value;
                    this.SendPropertyChanged("PremiumValueForAccident");
                    this.OnPremiumValueForAccidentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PremiumValueForAccidentEuro", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PremiumValueForAccidentEuro
        {
            get
            {
                return this._PremiumValueForAccidentEuro;
            }
            set
            {
                if ((this._PremiumValueForAccidentEuro != value))
                {
                    this.OnPremiumValueForAccidentEuroChanging(value);
                    this.SendPropertyChanging();
                    this._PremiumValueForAccidentEuro = value;
                    this.SendPropertyChanged("PremiumValueForAccidentEuro");
                    this.OnPremiumValueForAccidentEuroChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "LifePolicy_LifePolicyPremiumValue", Storage = "_LifePolicy", ThisKey = "LifePolicyID", OtherKey = "ID", IsForeignKey = true)]
        public LifePolicy LifePolicy
        {
            get
            {
                return this._LifePolicy.Entity;
            }
            set
            {
                LifePolicy previousValue = this._LifePolicy.Entity;
                if (((previousValue != value)
                            || (this._LifePolicy.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._LifePolicy.Entity = null;
                        previousValue.LifePolicyPremiumValues.Remove(this);
                    }
                    this._LifePolicy.Entity = value;
                    if ((value != null))
                    {
                        value.LifePolicyPremiumValues.Add(this);
                        this._LifePolicyID = value.ID;
                    }
                    else
                    {
                        this._LifePolicyID = default(int);
                    }
                    this.SendPropertyChanged("LifePolicy");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.LoginLogs")]
    public partial class LoginLog : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _IpAddress;

        private string _UserName;

        private string _Password;

        private bool _IsSuccessFul;

        private System.DateTime _Time;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIpAddressChanging(string value);
        partial void OnIpAddressChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnIsSuccessFulChanging(bool value);
        partial void OnIsSuccessFulChanged();
        partial void OnTimeChanging(System.DateTime value);
        partial void OnTimeChanged();
        #endregion

        public LoginLog()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IpAddress", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string IpAddress
        {
            get
            {
                return this._IpAddress;
            }
            set
            {
                if ((this._IpAddress != value))
                {
                    this.OnIpAddressChanging(value);
                    this.SendPropertyChanging();
                    this._IpAddress = value;
                    this.SendPropertyChanged("IpAddress");
                    this.OnIpAddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Password", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if ((this._Password != value))
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsSuccessFul", DbType = "Bit NOT NULL")]
        public bool IsSuccessFul
        {
            get
            {
                return this._IsSuccessFul;
            }
            set
            {
                if ((this._IsSuccessFul != value))
                {
                    this.OnIsSuccessFulChanging(value);
                    this.SendPropertyChanging();
                    this._IsSuccessFul = value;
                    this.SendPropertyChanged("IsSuccessFul");
                    this.OnIsSuccessFulChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Time", DbType = "DateTime NOT NULL")]
        public System.DateTime Time
        {
            get
            {
                return this._Time;
            }
            set
            {
                if ((this._Time != value))
                {
                    this.OnTimeChanging(value);
                    this.SendPropertyChanging();
                    this._Time = value;
                    this.SendPropertyChanged("Time");
                    this.OnTimeChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Municipalities")]
    public partial class Municipality : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private int _StateID;

        private bool _IsActive;

        private EntitySet<Appartment> _Appartments;

        private EntitySet<Branch> _Branches;

        private EntitySet<Place> _Places;

        private EntityRef<State> _State;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnStateIDChanging(int value);
        partial void OnStateIDChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public Municipality()
        {
            this._Appartments = new EntitySet<Appartment>(new Action<Appartment>(this.attach_Appartments), new Action<Appartment>(this.detach_Appartments));
            this._Branches = new EntitySet<Branch>(new Action<Branch>(this.attach_Branches), new Action<Branch>(this.detach_Branches));
            this._Places = new EntitySet<Place>(new Action<Place>(this.attach_Places), new Action<Place>(this.detach_Places));
            this._State = default(EntityRef<State>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StateID", DbType = "Int NOT NULL")]
        public int StateID
        {
            get
            {
                return this._StateID;
            }
            set
            {
                if ((this._StateID != value))
                {
                    if (this._State.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnStateIDChanging(value);
                    this.SendPropertyChanging();
                    this._StateID = value;
                    this.SendPropertyChanged("StateID");
                    this.OnStateIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Municipality_Appartment", Storage = "_Appartments", ThisKey = "ID", OtherKey = "MunicipalityID")]
        public EntitySet<Appartment> Appartments
        {
            get
            {
                return this._Appartments;
            }
            set
            {
                this._Appartments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Municipality_Branch", Storage = "_Branches", ThisKey = "ID", OtherKey = "MunicipalityID")]
        public EntitySet<Branch> Branches
        {
            get
            {
                return this._Branches;
            }
            set
            {
                this._Branches.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Municipality_Place", Storage = "_Places", ThisKey = "ID", OtherKey = "MunicipalityID")]
        public EntitySet<Place> Places
        {
            get
            {
                return this._Places;
            }
            set
            {
                this._Places.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "State_Municipality", Storage = "_State", ThisKey = "StateID", OtherKey = "ID", IsForeignKey = true)]
        public State State
        {
            get
            {
                return this._State.Entity;
            }
            set
            {
                State previousValue = this._State.Entity;
                if (((previousValue != value)
                            || (this._State.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._State.Entity = null;
                        previousValue.Municipalities.Remove(this);
                    }
                    this._State.Entity = value;
                    if ((value != null))
                    {
                        value.Municipalities.Add(this);
                        this._StateID = value.ID;
                    }
                    else
                    {
                        this._StateID = default(int);
                    }
                    this.SendPropertyChanged("State");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Appartments(Appartment entity)
        {
            this.SendPropertyChanging();
            entity.Municipality = this;
        }

        private void detach_Appartments(Appartment entity)
        {
            this.SendPropertyChanging();
            entity.Municipality = null;
        }

        private void attach_Branches(Branch entity)
        {
            this.SendPropertyChanging();
            entity.Municipality = this;
        }

        private void detach_Branches(Branch entity)
        {
            this.SendPropertyChanging();
            entity.Municipality = null;
        }

        private void attach_Places(Place entity)
        {
            this.SendPropertyChanging();
            entity.Municipality = this;
        }

        private void detach_Places(Place entity)
        {
            this.SendPropertyChanging();
            entity.Municipality = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.OfferItems")]
    public partial class OfferItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _OfferID;

        private System.Nullable<int> _OrderItemID;

        private int _InsuranceCompanyID;

        private int _InsuranceSubTypeID;

        private decimal _Cost;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        private EntityRef<Offer> _Offer;

        private EntityRef<OrderItem> _OrderItem;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOfferIDChanging(int value);
        partial void OnOfferIDChanged();
        partial void OnOrderItemIDChanging(System.Nullable<int> value);
        partial void OnOrderItemIDChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnCostChanging(decimal value);
        partial void OnCostChanged();
        #endregion

        public OfferItem()
        {
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            this._Offer = default(EntityRef<Offer>);
            this._OrderItem = default(EntityRef<OrderItem>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OfferID", DbType = "Int NOT NULL")]
        public int OfferID
        {
            get
            {
                return this._OfferID;
            }
            set
            {
                if ((this._OfferID != value))
                {
                    if (this._Offer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOfferIDChanging(value);
                    this.SendPropertyChanging();
                    this._OfferID = value;
                    this.SendPropertyChanged("OfferID");
                    this.OnOfferIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderItemID", DbType = "Int")]
        public System.Nullable<int> OrderItemID
        {
            get
            {
                return this._OrderItemID;
            }
            set
            {
                if ((this._OrderItemID != value))
                {
                    if (this._OrderItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOrderItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderItemID = value;
                    this.SendPropertyChanged("OrderItemID");
                    this.OnOrderItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Cost", DbType = "Decimal(18,2) NOT NULL")]
        public decimal Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if ((this._Cost != value))
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_OfferItem", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.OfferItems.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.OfferItems.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_OfferItem", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.OfferItems.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.OfferItems.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Offer_OfferItem", Storage = "_Offer", ThisKey = "OfferID", OtherKey = "ID", IsForeignKey = true)]
        public Offer Offer
        {
            get
            {
                return this._Offer.Entity;
            }
            set
            {
                Offer previousValue = this._Offer.Entity;
                if (((previousValue != value)
                            || (this._Offer.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Offer.Entity = null;
                        previousValue.OfferItems.Remove(this);
                    }
                    this._Offer.Entity = value;
                    if ((value != null))
                    {
                        value.OfferItems.Add(this);
                        this._OfferID = value.ID;
                    }
                    else
                    {
                        this._OfferID = default(int);
                    }
                    this.SendPropertyChanged("Offer");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "OrderItem_OfferItem", Storage = "_OrderItem", ThisKey = "OrderItemID", OtherKey = "ID", IsForeignKey = true)]
        public OrderItem OrderItem
        {
            get
            {
                return this._OrderItem.Entity;
            }
            set
            {
                OrderItem previousValue = this._OrderItem.Entity;
                if (((previousValue != value)
                            || (this._OrderItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._OrderItem.Entity = null;
                        previousValue.OfferItems.Remove(this);
                    }
                    this._OrderItem.Entity = value;
                    if ((value != null))
                    {
                        value.OfferItems.Add(this);
                        this._OrderItemID = value.ID;
                    }
                    else
                    {
                        this._OrderItemID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("OrderItem");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Offers")]
    public partial class Offer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private System.Nullable<int> _OrderID;

        private int _ClientID;

        private int _OwnerID;

        private string _OfferNumber;

        private decimal _Cost;

        private string _Description;

        private int _StatusID;

        private int _UserID;

        private System.DateTime _OfferDate;

        private EntitySet<OfferItem> _OfferItems;

        private EntitySet<Policy> _Policies;

        private EntityRef<Client> _Client;

        private EntityRef<Client> _Client1;

        private EntityRef<Order> _Order;

        private EntityRef<Statuse> _Statuse;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOrderIDChanging(System.Nullable<int> value);
        partial void OnOrderIDChanged();
        partial void OnClientIDChanging(int value);
        partial void OnClientIDChanged();
        partial void OnOwnerIDChanging(int value);
        partial void OnOwnerIDChanged();
        partial void OnOfferNumberChanging(string value);
        partial void OnOfferNumberChanged();
        partial void OnCostChanging(decimal value);
        partial void OnCostChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnStatusIDChanging(int value);
        partial void OnStatusIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnOfferDateChanging(System.DateTime value);
        partial void OnOfferDateChanged();
        #endregion

        public Offer()
        {
            this._OfferItems = new EntitySet<OfferItem>(new Action<OfferItem>(this.attach_OfferItems), new Action<OfferItem>(this.detach_OfferItems));
            this._Policies = new EntitySet<Policy>(new Action<Policy>(this.attach_Policies), new Action<Policy>(this.detach_Policies));
            this._Client = default(EntityRef<Client>);
            this._Client1 = default(EntityRef<Client>);
            this._Order = default(EntityRef<Order>);
            this._Statuse = default(EntityRef<Statuse>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderID", DbType = "Int")]
        public System.Nullable<int> OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if ((this._OrderID != value))
                {
                    if (this._Order.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerID", DbType = "Int NOT NULL")]
        public int OwnerID
        {
            get
            {
                return this._OwnerID;
            }
            set
            {
                if ((this._OwnerID != value))
                {
                    if (this._Client1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOwnerIDChanging(value);
                    this.SendPropertyChanging();
                    this._OwnerID = value;
                    this.SendPropertyChanged("OwnerID");
                    this.OnOwnerIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OfferNumber", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string OfferNumber
        {
            get
            {
                return this._OfferNumber;
            }
            set
            {
                if ((this._OfferNumber != value))
                {
                    this.OnOfferNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OfferNumber = value;
                    this.SendPropertyChanged("OfferNumber");
                    this.OnOfferNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Cost", DbType = "Decimal(18,2) NOT NULL")]
        public decimal Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if ((this._Cost != value))
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusID", DbType = "Int NOT NULL")]
        public int StatusID
        {
            get
            {
                return this._StatusID;
            }
            set
            {
                if ((this._StatusID != value))
                {
                    if (this._Statuse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnStatusIDChanging(value);
                    this.SendPropertyChanging();
                    this._StatusID = value;
                    this.SendPropertyChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OfferDate", DbType = "DateTime NOT NULL")]
        public System.DateTime OfferDate
        {
            get
            {
                return this._OfferDate;
            }
            set
            {
                if ((this._OfferDate != value))
                {
                    this.OnOfferDateChanging(value);
                    this.SendPropertyChanging();
                    this._OfferDate = value;
                    this.SendPropertyChanged("OfferDate");
                    this.OnOfferDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Offer_OfferItem", Storage = "_OfferItems", ThisKey = "ID", OtherKey = "OfferID")]
        public EntitySet<OfferItem> OfferItems
        {
            get
            {
                return this._OfferItems;
            }
            set
            {
                this._OfferItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Offer_Policy", Storage = "_Policies", ThisKey = "ID", OtherKey = "OfferID")]
        public EntitySet<Policy> Policies
        {
            get
            {
                return this._Policies;
            }
            set
            {
                this._Policies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Offer", Storage = "_Client", ThisKey = "ClientID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if (((previousValue != value)
                            || (this._Client.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client.Entity = null;
                        previousValue.Offers.Remove(this);
                    }
                    this._Client.Entity = value;
                    if ((value != null))
                    {
                        value.Offers.Add(this);
                        this._ClientID = value.ID;
                    }
                    else
                    {
                        this._ClientID = default(int);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Offer1", Storage = "_Client1", ThisKey = "OwnerID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client1
        {
            get
            {
                return this._Client1.Entity;
            }
            set
            {
                Client previousValue = this._Client1.Entity;
                if (((previousValue != value)
                            || (this._Client1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client1.Entity = null;
                        previousValue.Offers1.Remove(this);
                    }
                    this._Client1.Entity = value;
                    if ((value != null))
                    {
                        value.Offers1.Add(this);
                        this._OwnerID = value.ID;
                    }
                    else
                    {
                        this._OwnerID = default(int);
                    }
                    this.SendPropertyChanged("Client1");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Order_Offer", Storage = "_Order", ThisKey = "OrderID", OtherKey = "ID", IsForeignKey = true)]
        public Order Order
        {
            get
            {
                return this._Order.Entity;
            }
            set
            {
                Order previousValue = this._Order.Entity;
                if (((previousValue != value)
                            || (this._Order.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Order.Entity = null;
                        previousValue.Offers.Remove(this);
                    }
                    this._Order.Entity = value;
                    if ((value != null))
                    {
                        value.Offers.Add(this);
                        this._OrderID = value.ID;
                    }
                    else
                    {
                        this._OrderID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Order");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Statuse_Offer", Storage = "_Statuse", ThisKey = "StatusID", OtherKey = "ID", IsForeignKey = true)]
        public Statuse Statuse
        {
            get
            {
                return this._Statuse.Entity;
            }
            set
            {
                Statuse previousValue = this._Statuse.Entity;
                if (((previousValue != value)
                            || (this._Statuse.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Statuse.Entity = null;
                        previousValue.Offers.Remove(this);
                    }
                    this._Statuse.Entity = value;
                    if ((value != null))
                    {
                        value.Offers.Add(this);
                        this._StatusID = value.ID;
                    }
                    else
                    {
                        this._StatusID = default(int);
                    }
                    this.SendPropertyChanged("Statuse");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Offer", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Offers.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Offers.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_OfferItems(OfferItem entity)
        {
            this.SendPropertyChanging();
            entity.Offer = this;
        }

        private void detach_OfferItems(OfferItem entity)
        {
            this.SendPropertyChanging();
            entity.Offer = null;
        }

        private void attach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Offer = this;
        }

        private void detach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Offer = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.OrderItems")]
    public partial class OrderItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _OrdinalNumber;

        private int _OrderID;

        private int _InsuranceSubTypeID;

        private int _PaymentTypeID;

        private string _Description;

        private EntitySet<OfferItem> _OfferItems;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        private EntityRef<Order> _Order;

        private EntityRef<PaymentType> _PaymentType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOrdinalNumberChanging(int value);
        partial void OnOrdinalNumberChanged();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnPaymentTypeIDChanging(int value);
        partial void OnPaymentTypeIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public OrderItem()
        {
            this._OfferItems = new EntitySet<OfferItem>(new Action<OfferItem>(this.attach_OfferItems), new Action<OfferItem>(this.detach_OfferItems));
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            this._Order = default(EntityRef<Order>);
            this._PaymentType = default(EntityRef<PaymentType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrdinalNumber", DbType = "Int NOT NULL")]
        public int OrdinalNumber
        {
            get
            {
                return this._OrdinalNumber;
            }
            set
            {
                if ((this._OrdinalNumber != value))
                {
                    this.OnOrdinalNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrdinalNumber = value;
                    this.SendPropertyChanged("OrdinalNumber");
                    this.OnOrdinalNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderID", DbType = "Int NOT NULL")]
        public int OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if ((this._OrderID != value))
                {
                    if (this._Order.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaymentTypeID", DbType = "Int NOT NULL")]
        public int PaymentTypeID
        {
            get
            {
                return this._PaymentTypeID;
            }
            set
            {
                if ((this._PaymentTypeID != value))
                {
                    if (this._PaymentType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPaymentTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentTypeID = value;
                    this.SendPropertyChanged("PaymentTypeID");
                    this.OnPaymentTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(100)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "OrderItem_OfferItem", Storage = "_OfferItems", ThisKey = "ID", OtherKey = "OrderItemID")]
        public EntitySet<OfferItem> OfferItems
        {
            get
            {
                return this._OfferItems;
            }
            set
            {
                this._OfferItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_OrderItem", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.OrderItems.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.OrderItems.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Order_OrderItem", Storage = "_Order", ThisKey = "OrderID", OtherKey = "ID", IsForeignKey = true)]
        public Order Order
        {
            get
            {
                return this._Order.Entity;
            }
            set
            {
                Order previousValue = this._Order.Entity;
                if (((previousValue != value)
                            || (this._Order.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Order.Entity = null;
                        previousValue.OrderItems.Remove(this);
                    }
                    this._Order.Entity = value;
                    if ((value != null))
                    {
                        value.OrderItems.Add(this);
                        this._OrderID = value.ID;
                    }
                    else
                    {
                        this._OrderID = default(int);
                    }
                    this.SendPropertyChanged("Order");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PaymentType_OrderItem", Storage = "_PaymentType", ThisKey = "PaymentTypeID", OtherKey = "ID", IsForeignKey = true)]
        public PaymentType PaymentType
        {
            get
            {
                return this._PaymentType.Entity;
            }
            set
            {
                PaymentType previousValue = this._PaymentType.Entity;
                if (((previousValue != value)
                            || (this._PaymentType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PaymentType.Entity = null;
                        previousValue.OrderItems.Remove(this);
                    }
                    this._PaymentType.Entity = value;
                    if ((value != null))
                    {
                        value.OrderItems.Add(this);
                        this._PaymentTypeID = value.ID;
                    }
                    else
                    {
                        this._PaymentTypeID = default(int);
                    }
                    this.SendPropertyChanged("PaymentType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_OfferItems(OfferItem entity)
        {
            this.SendPropertyChanging();
            entity.OrderItem = this;
        }

        private void detach_OfferItems(OfferItem entity)
        {
            this.SendPropertyChanging();
            entity.OrderItem = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Orders")]
    public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _DocumentSubTypeID;

        private int _ClientID;

        private int _UserID;

        private string _OrderNumber;

        private System.DateTime _OrderDate;

        private int _OwnerID;

        private int _ToUserID;

        private System.DateTime _FinishDate;

        private EntitySet<Offer> _Offers;

        private EntitySet<OrderItem> _OrderItems;

        private EntityRef<Client> _Client;

        private EntityRef<Client> _Client1;

        private EntityRef<DocumentSubType> _DocumentSubType;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDocumentSubTypeIDChanging(int value);
        partial void OnDocumentSubTypeIDChanged();
        partial void OnClientIDChanging(int value);
        partial void OnClientIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnOrderNumberChanging(string value);
        partial void OnOrderNumberChanged();
        partial void OnOrderDateChanging(System.DateTime value);
        partial void OnOrderDateChanged();
        partial void OnOwnerIDChanging(int value);
        partial void OnOwnerIDChanged();
        partial void OnToUserIDChanging(int value);
        partial void OnToUserIDChanged();
        partial void OnFinishDateChanging(System.DateTime value);
        partial void OnFinishDateChanged();
        #endregion

        public Order()
        {
            this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
            this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
            this._Client = default(EntityRef<Client>);
            this._Client1 = default(EntityRef<Client>);
            this._DocumentSubType = default(EntityRef<DocumentSubType>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeID", DbType = "Int NOT NULL")]
        public int DocumentSubTypeID
        {
            get
            {
                return this._DocumentSubTypeID;
            }
            set
            {
                if ((this._DocumentSubTypeID != value))
                {
                    if (this._DocumentSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDocumentSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentSubTypeID = value;
                    this.SendPropertyChanged("DocumentSubTypeID");
                    this.OnDocumentSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderNumber", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string OrderNumber
        {
            get
            {
                return this._OrderNumber;
            }
            set
            {
                if ((this._OrderNumber != value))
                {
                    this.OnOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrderNumber = value;
                    this.SendPropertyChanged("OrderNumber");
                    this.OnOrderNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderDate", DbType = "DateTime NOT NULL")]
        public System.DateTime OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if ((this._OrderDate != value))
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerID", DbType = "Int NOT NULL")]
        public int OwnerID
        {
            get
            {
                return this._OwnerID;
            }
            set
            {
                if ((this._OwnerID != value))
                {
                    if (this._Client1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOwnerIDChanging(value);
                    this.SendPropertyChanging();
                    this._OwnerID = value;
                    this.SendPropertyChanged("OwnerID");
                    this.OnOwnerIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToUserID", DbType = "Int NOT NULL")]
        public int ToUserID
        {
            get
            {
                return this._ToUserID;
            }
            set
            {
                if ((this._ToUserID != value))
                {
                    this.OnToUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._ToUserID = value;
                    this.SendPropertyChanged("ToUserID");
                    this.OnToUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FinishDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FinishDate
        {
            get
            {
                return this._FinishDate;
            }
            set
            {
                if ((this._FinishDate != value))
                {
                    this.OnFinishDateChanging(value);
                    this.SendPropertyChanging();
                    this._FinishDate = value;
                    this.SendPropertyChanged("FinishDate");
                    this.OnFinishDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Order_Offer", Storage = "_Offers", ThisKey = "ID", OtherKey = "OrderID")]
        public EntitySet<Offer> Offers
        {
            get
            {
                return this._Offers;
            }
            set
            {
                this._Offers.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Order_OrderItem", Storage = "_OrderItems", ThisKey = "ID", OtherKey = "OrderID")]
        public EntitySet<OrderItem> OrderItems
        {
            get
            {
                return this._OrderItems;
            }
            set
            {
                this._OrderItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Order", Storage = "_Client", ThisKey = "ClientID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if (((previousValue != value)
                            || (this._Client.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._Client.Entity = value;
                    if ((value != null))
                    {
                        value.Orders.Add(this);
                        this._ClientID = value.ID;
                    }
                    else
                    {
                        this._ClientID = default(int);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Order1", Storage = "_Client1", ThisKey = "OwnerID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client1
        {
            get
            {
                return this._Client1.Entity;
            }
            set
            {
                Client previousValue = this._Client1.Entity;
                if (((previousValue != value)
                            || (this._Client1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client1.Entity = null;
                        previousValue.Orders1.Remove(this);
                    }
                    this._Client1.Entity = value;
                    if ((value != null))
                    {
                        value.Orders1.Add(this);
                        this._OwnerID = value.ID;
                    }
                    else
                    {
                        this._OwnerID = default(int);
                    }
                    this.SendPropertyChanged("Client1");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentSubType_Order", Storage = "_DocumentSubType", ThisKey = "DocumentSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public DocumentSubType DocumentSubType
        {
            get
            {
                return this._DocumentSubType.Entity;
            }
            set
            {
                DocumentSubType previousValue = this._DocumentSubType.Entity;
                if (((previousValue != value)
                            || (this._DocumentSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DocumentSubType.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._DocumentSubType.Entity = value;
                    if ((value != null))
                    {
                        value.Orders.Add(this);
                        this._DocumentSubTypeID = value.ID;
                    }
                    else
                    {
                        this._DocumentSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("DocumentSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Order", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Orders.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Offers(Offer entity)
        {
            this.SendPropertyChanging();
            entity.Order = this;
        }

        private void detach_Offers(Offer entity)
        {
            this.SendPropertyChanging();
            entity.Order = null;
        }

        private void attach_OrderItems(OrderItem entity)
        {
            this.SendPropertyChanging();
            entity.Order = this;
        }

        private void detach_OrderItems(OrderItem entity)
        {
            this.SendPropertyChanging();
            entity.Order = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Packets")]
    public partial class Packet : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private string _Description;

        private int _InsuranceCompanyID;

        private bool _IsActive;

        private EntitySet<PacketsInsuranceSubType> _PacketsInsuranceSubTypes;

        private EntitySet<Policy> _Policies;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public Packet()
        {
            this._PacketsInsuranceSubTypes = new EntitySet<PacketsInsuranceSubType>(new Action<PacketsInsuranceSubType>(this.attach_PacketsInsuranceSubTypes), new Action<PacketsInsuranceSubType>(this.detach_PacketsInsuranceSubTypes));
            this._Policies = new EntitySet<Policy>(new Action<Policy>(this.attach_Policies), new Action<Policy>(this.detach_Policies));
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(255)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Packet_PacketsInsuranceSubType", Storage = "_PacketsInsuranceSubTypes", ThisKey = "ID", OtherKey = "PacketID")]
        public EntitySet<PacketsInsuranceSubType> PacketsInsuranceSubTypes
        {
            get
            {
                return this._PacketsInsuranceSubTypes;
            }
            set
            {
                this._PacketsInsuranceSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Packet_Policy", Storage = "_Policies", ThisKey = "ID", OtherKey = "PacketID")]
        public EntitySet<Policy> Policies
        {
            get
            {
                return this._Policies;
            }
            set
            {
                this._Policies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_Packet", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.Packets.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.Packets.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_PacketsInsuranceSubTypes(PacketsInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.Packet = this;
        }

        private void detach_PacketsInsuranceSubTypes(PacketsInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.Packet = null;
        }

        private void attach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Packet = this;
        }

        private void detach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Packet = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.PacketsInsuranceSubTypes")]
    public partial class PacketsInsuranceSubType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _PacketID;

        private int _InsuranceSubTypeID;

        private decimal _BrokeragePecentageForPrivates;

        private decimal _BrokeragePecentageForLaws;

        private EntitySet<PolicyItem> _PolicyItems;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        private EntityRef<Packet> _Packet;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPacketIDChanging(int value);
        partial void OnPacketIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnBrokeragePecentageForPrivatesChanging(decimal value);
        partial void OnBrokeragePecentageForPrivatesChanged();
        partial void OnBrokeragePecentageForLawsChanging(decimal value);
        partial void OnBrokeragePecentageForLawsChanged();
        #endregion

        public PacketsInsuranceSubType()
        {
            this._PolicyItems = new EntitySet<PolicyItem>(new Action<PolicyItem>(this.attach_PolicyItems), new Action<PolicyItem>(this.detach_PolicyItems));
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            this._Packet = default(EntityRef<Packet>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PacketID", DbType = "Int NOT NULL")]
        public int PacketID
        {
            get
            {
                return this._PacketID;
            }
            set
            {
                if ((this._PacketID != value))
                {
                    if (this._Packet.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPacketIDChanging(value);
                    this.SendPropertyChanging();
                    this._PacketID = value;
                    this.SendPropertyChanged("PacketID");
                    this.OnPacketIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokeragePecentageForPrivates", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokeragePecentageForPrivates
        {
            get
            {
                return this._BrokeragePecentageForPrivates;
            }
            set
            {
                if ((this._BrokeragePecentageForPrivates != value))
                {
                    this.OnBrokeragePecentageForPrivatesChanging(value);
                    this.SendPropertyChanging();
                    this._BrokeragePecentageForPrivates = value;
                    this.SendPropertyChanged("BrokeragePecentageForPrivates");
                    this.OnBrokeragePecentageForPrivatesChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokeragePecentageForLaws", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokeragePecentageForLaws
        {
            get
            {
                return this._BrokeragePecentageForLaws;
            }
            set
            {
                if ((this._BrokeragePecentageForLaws != value))
                {
                    this.OnBrokeragePecentageForLawsChanging(value);
                    this.SendPropertyChanging();
                    this._BrokeragePecentageForLaws = value;
                    this.SendPropertyChanged("BrokeragePecentageForLaws");
                    this.OnBrokeragePecentageForLawsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PacketsInsuranceSubType_PolicyItem", Storage = "_PolicyItems", ThisKey = "ID", OtherKey = "PacketBrokerageID")]
        public EntitySet<PolicyItem> PolicyItems
        {
            get
            {
                return this._PolicyItems;
            }
            set
            {
                this._PolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_PacketsInsuranceSubType", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.PacketsInsuranceSubTypes.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.PacketsInsuranceSubTypes.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Packet_PacketsInsuranceSubType", Storage = "_Packet", ThisKey = "PacketID", OtherKey = "ID", IsForeignKey = true)]
        public Packet Packet
        {
            get
            {
                return this._Packet.Entity;
            }
            set
            {
                Packet previousValue = this._Packet.Entity;
                if (((previousValue != value)
                            || (this._Packet.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Packet.Entity = null;
                        previousValue.PacketsInsuranceSubTypes.Remove(this);
                    }
                    this._Packet.Entity = value;
                    if ((value != null))
                    {
                        value.PacketsInsuranceSubTypes.Add(this);
                        this._PacketID = value.ID;
                    }
                    else
                    {
                        this._PacketID = default(int);
                    }
                    this.SendPropertyChanged("Packet");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.PacketsInsuranceSubType = this;
        }

        private void detach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.PacketsInsuranceSubType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Parameters")]
    public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private int _VariableTypeID;

        private string _Value;

        private EntityRef<VariableType> _VariableType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnVariableTypeIDChanging(int value);
        partial void OnVariableTypeIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        #endregion

        public Parameter()
        {
            this._VariableType = default(EntityRef<VariableType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_VariableTypeID", DbType = "Int NOT NULL")]
        public int VariableTypeID
        {
            get
            {
                return this._VariableTypeID;
            }
            set
            {
                if ((this._VariableTypeID != value))
                {
                    if (this._VariableType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnVariableTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._VariableTypeID = value;
                    this.SendPropertyChanged("VariableTypeID");
                    this.OnVariableTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "VariableType_Parameter", Storage = "_VariableType", ThisKey = "VariableTypeID", OtherKey = "ID", IsForeignKey = true)]
        public VariableType VariableType
        {
            get
            {
                return this._VariableType.Entity;
            }
            set
            {
                VariableType previousValue = this._VariableType.Entity;
                if (((previousValue != value)
                            || (this._VariableType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._VariableType.Entity = null;
                        previousValue.Parameters.Remove(this);
                    }
                    this._VariableType.Entity = value;
                    if ((value != null))
                    {
                        value.Parameters.Add(this);
                        this._VariableTypeID = value.ID;
                    }
                    else
                    {
                        this._VariableTypeID = default(int);
                    }
                    this.SendPropertyChanged("VariableType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.PaymentItems")]
    public partial class PaymentItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _BankslipItemID;

        private int _FactureID;

        private decimal _DebtValue;

        private decimal _DemandValue;

        private EntityRef<BankslipItem> _BankslipItem;

        private EntityRef<Facture> _Facture;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBankslipItemIDChanging(int value);
        partial void OnBankslipItemIDChanged();
        partial void OnFactureIDChanging(int value);
        partial void OnFactureIDChanged();
        partial void OnDebtValueChanging(decimal value);
        partial void OnDebtValueChanged();
        partial void OnDemandValueChanging(decimal value);
        partial void OnDemandValueChanged();
        #endregion

        public PaymentItem()
        {
            this._BankslipItem = default(EntityRef<BankslipItem>);
            this._Facture = default(EntityRef<Facture>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankslipItemID", DbType = "Int NOT NULL")]
        public int BankslipItemID
        {
            get
            {
                return this._BankslipItemID;
            }
            set
            {
                if ((this._BankslipItemID != value))
                {
                    if (this._BankslipItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBankslipItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._BankslipItemID = value;
                    this.SendPropertyChanged("BankslipItemID");
                    this.OnBankslipItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureID", DbType = "Int NOT NULL")]
        public int FactureID
        {
            get
            {
                return this._FactureID;
            }
            set
            {
                if ((this._FactureID != value))
                {
                    if (this._Facture.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFactureIDChanging(value);
                    this.SendPropertyChanging();
                    this._FactureID = value;
                    this.SendPropertyChanged("FactureID");
                    this.OnFactureIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DebtValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DebtValue
        {
            get
            {
                return this._DebtValue;
            }
            set
            {
                if ((this._DebtValue != value))
                {
                    this.OnDebtValueChanging(value);
                    this.SendPropertyChanging();
                    this._DebtValue = value;
                    this.SendPropertyChanged("DebtValue");
                    this.OnDebtValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DemandValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DemandValue
        {
            get
            {
                return this._DemandValue;
            }
            set
            {
                if ((this._DemandValue != value))
                {
                    this.OnDemandValueChanging(value);
                    this.SendPropertyChanging();
                    this._DemandValue = value;
                    this.SendPropertyChanged("DemandValue");
                    this.OnDemandValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BankslipItem_PaymentItem", Storage = "_BankslipItem", ThisKey = "BankslipItemID", OtherKey = "ID", IsForeignKey = true)]
        public BankslipItem BankslipItem
        {
            get
            {
                return this._BankslipItem.Entity;
            }
            set
            {
                BankslipItem previousValue = this._BankslipItem.Entity;
                if (((previousValue != value)
                            || (this._BankslipItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BankslipItem.Entity = null;
                        previousValue.PaymentItems.Remove(this);
                    }
                    this._BankslipItem.Entity = value;
                    if ((value != null))
                    {
                        value.PaymentItems.Add(this);
                        this._BankslipItemID = value.ID;
                    }
                    else
                    {
                        this._BankslipItemID = default(int);
                    }
                    this.SendPropertyChanged("BankslipItem");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Facture_PaymentItem", Storage = "_Facture", ThisKey = "FactureID", OtherKey = "ID", IsForeignKey = true)]
        public Facture Facture
        {
            get
            {
                return this._Facture.Entity;
            }
            set
            {
                Facture previousValue = this._Facture.Entity;
                if (((previousValue != value)
                            || (this._Facture.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Facture.Entity = null;
                        previousValue.PaymentItems.Remove(this);
                    }
                    this._Facture.Entity = value;
                    if ((value != null))
                    {
                        value.PaymentItems.Add(this);
                        this._FactureID = value.ID;
                    }
                    else
                    {
                        this._FactureID = default(int);
                    }
                    this.SendPropertyChanged("Facture");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Payments")]
    public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _RateID;

        private decimal _Value;

        private System.DateTime _Date;

        private bool _IsFactured;

        private int _PaymentTypeID;

        private System.Nullable<int> _BankCreditCardID;

        private int _UserID;

        private int _BranchID;

        private string _BankslipNumber;

        private System.Nullable<int> _BankslipBankID;

        private bool _IsCashReported;

        private EntitySet<CashReportItem> _CashReportItems;

        private EntitySet<PaymentsPerInsSubType> _PaymentsPerInsSubTypes;

        private EntityRef<BankCreditCard> _BankCreditCard;

        private EntityRef<Bank> _Bank;

        private EntityRef<Branch> _Branch;

        private EntityRef<PaymentType> _PaymentType;

        private EntityRef<Rate> _Rate;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnRateIDChanging(int value);
        partial void OnRateIDChanged();
        partial void OnValueChanging(decimal value);
        partial void OnValueChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnIsFacturedChanging(bool value);
        partial void OnIsFacturedChanged();
        partial void OnPaymentTypeIDChanging(int value);
        partial void OnPaymentTypeIDChanged();
        partial void OnBankCreditCardIDChanging(System.Nullable<int> value);
        partial void OnBankCreditCardIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnBranchIDChanging(int value);
        partial void OnBranchIDChanged();
        partial void OnBankslipNumberChanging(string value);
        partial void OnBankslipNumberChanged();
        partial void OnBankslipBankIDChanging(System.Nullable<int> value);
        partial void OnBankslipBankIDChanged();
        partial void OnIsCashReportedChanging(bool value);
        partial void OnIsCashReportedChanged();
        #endregion

        public Payment()
        {
            this._CashReportItems = new EntitySet<CashReportItem>(new Action<CashReportItem>(this.attach_CashReportItems), new Action<CashReportItem>(this.detach_CashReportItems));
            this._PaymentsPerInsSubTypes = new EntitySet<PaymentsPerInsSubType>(new Action<PaymentsPerInsSubType>(this.attach_PaymentsPerInsSubTypes), new Action<PaymentsPerInsSubType>(this.detach_PaymentsPerInsSubTypes));
            this._BankCreditCard = default(EntityRef<BankCreditCard>);
            this._Bank = default(EntityRef<Bank>);
            this._Branch = default(EntityRef<Branch>);
            this._PaymentType = default(EntityRef<PaymentType>);
            this._Rate = default(EntityRef<Rate>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RateID", DbType = "Int NOT NULL")]
        public int RateID
        {
            get
            {
                return this._RateID;
            }
            set
            {
                if ((this._RateID != value))
                {
                    if (this._Rate.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnRateIDChanging(value);
                    this.SendPropertyChanging();
                    this._RateID = value;
                    this.SendPropertyChanged("RateID");
                    this.OnRateIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "Decimal(18,2) NOT NULL")]
        public decimal Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsFactured", DbType = "Bit NOT NULL")]
        public bool IsFactured
        {
            get
            {
                return this._IsFactured;
            }
            set
            {
                if ((this._IsFactured != value))
                {
                    this.OnIsFacturedChanging(value);
                    this.SendPropertyChanging();
                    this._IsFactured = value;
                    this.SendPropertyChanged("IsFactured");
                    this.OnIsFacturedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaymentTypeID", DbType = "Int NOT NULL")]
        public int PaymentTypeID
        {
            get
            {
                return this._PaymentTypeID;
            }
            set
            {
                if ((this._PaymentTypeID != value))
                {
                    if (this._PaymentType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPaymentTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentTypeID = value;
                    this.SendPropertyChanged("PaymentTypeID");
                    this.OnPaymentTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankCreditCardID", DbType = "Int")]
        public System.Nullable<int> BankCreditCardID
        {
            get
            {
                return this._BankCreditCardID;
            }
            set
            {
                if ((this._BankCreditCardID != value))
                {
                    if (this._BankCreditCard.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBankCreditCardIDChanging(value);
                    this.SendPropertyChanging();
                    this._BankCreditCardID = value;
                    this.SendPropertyChanged("BankCreditCardID");
                    this.OnBankCreditCardIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBranchIDChanging(value);
                    this.SendPropertyChanging();
                    this._BranchID = value;
                    this.SendPropertyChanged("BranchID");
                    this.OnBranchIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankslipNumber", DbType = "NVarChar(250)")]
        public string BankslipNumber
        {
            get
            {
                return this._BankslipNumber;
            }
            set
            {
                if ((this._BankslipNumber != value))
                {
                    this.OnBankslipNumberChanging(value);
                    this.SendPropertyChanging();
                    this._BankslipNumber = value;
                    this.SendPropertyChanged("BankslipNumber");
                    this.OnBankslipNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankslipBankID", DbType = "Int")]
        public System.Nullable<int> BankslipBankID
        {
            get
            {
                return this._BankslipBankID;
            }
            set
            {
                if ((this._BankslipBankID != value))
                {
                    if (this._Bank.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBankslipBankIDChanging(value);
                    this.SendPropertyChanging();
                    this._BankslipBankID = value;
                    this.SendPropertyChanged("BankslipBankID");
                    this.OnBankslipBankIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsCashReported", DbType = "Bit NOT NULL")]
        public bool IsCashReported
        {
            get
            {
                return this._IsCashReported;
            }
            set
            {
                if ((this._IsCashReported != value))
                {
                    this.OnIsCashReportedChanging(value);
                    this.SendPropertyChanging();
                    this._IsCashReported = value;
                    this.SendPropertyChanged("IsCashReported");
                    this.OnIsCashReportedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Payment_CashReportItem", Storage = "_CashReportItems", ThisKey = "ID", OtherKey = "PaymentID")]
        public EntitySet<CashReportItem> CashReportItems
        {
            get
            {
                return this._CashReportItems;
            }
            set
            {
                this._CashReportItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Payment_PaymentsPerInsSubType", Storage = "_PaymentsPerInsSubTypes", ThisKey = "ID", OtherKey = "PaymentID")]
        public EntitySet<PaymentsPerInsSubType> PaymentsPerInsSubTypes
        {
            get
            {
                return this._PaymentsPerInsSubTypes;
            }
            set
            {
                this._PaymentsPerInsSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BankCreditCard_Payment", Storage = "_BankCreditCard", ThisKey = "BankCreditCardID", OtherKey = "ID", IsForeignKey = true)]
        public BankCreditCard BankCreditCard
        {
            get
            {
                return this._BankCreditCard.Entity;
            }
            set
            {
                BankCreditCard previousValue = this._BankCreditCard.Entity;
                if (((previousValue != value)
                            || (this._BankCreditCard.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BankCreditCard.Entity = null;
                        previousValue.Payments.Remove(this);
                    }
                    this._BankCreditCard.Entity = value;
                    if ((value != null))
                    {
                        value.Payments.Add(this);
                        this._BankCreditCardID = value.ID;
                    }
                    else
                    {
                        this._BankCreditCardID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("BankCreditCard");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_Payment", Storage = "_Bank", ThisKey = "BankslipBankID", OtherKey = "ID", IsForeignKey = true)]
        public Bank Bank
        {
            get
            {
                return this._Bank.Entity;
            }
            set
            {
                Bank previousValue = this._Bank.Entity;
                if (((previousValue != value)
                            || (this._Bank.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Bank.Entity = null;
                        previousValue.Payments.Remove(this);
                    }
                    this._Bank.Entity = value;
                    if ((value != null))
                    {
                        value.Payments.Add(this);
                        this._BankslipBankID = value.ID;
                    }
                    else
                    {
                        this._BankslipBankID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Bank");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_Payment", Storage = "_Branch", ThisKey = "BranchID", OtherKey = "ID", IsForeignKey = true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if (((previousValue != value)
                            || (this._Branch.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Branch.Entity = null;
                        previousValue.Payments.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if ((value != null))
                    {
                        value.Payments.Add(this);
                        this._BranchID = value.ID;
                    }
                    else
                    {
                        this._BranchID = default(int);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PaymentType_Payment", Storage = "_PaymentType", ThisKey = "PaymentTypeID", OtherKey = "ID", IsForeignKey = true)]
        public PaymentType PaymentType
        {
            get
            {
                return this._PaymentType.Entity;
            }
            set
            {
                PaymentType previousValue = this._PaymentType.Entity;
                if (((previousValue != value)
                            || (this._PaymentType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PaymentType.Entity = null;
                        previousValue.Payments.Remove(this);
                    }
                    this._PaymentType.Entity = value;
                    if ((value != null))
                    {
                        value.Payments.Add(this);
                        this._PaymentTypeID = value.ID;
                    }
                    else
                    {
                        this._PaymentTypeID = default(int);
                    }
                    this.SendPropertyChanged("PaymentType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Rate_Payment", Storage = "_Rate", ThisKey = "RateID", OtherKey = "ID", IsForeignKey = true)]
        public Rate Rate
        {
            get
            {
                return this._Rate.Entity;
            }
            set
            {
                Rate previousValue = this._Rate.Entity;
                if (((previousValue != value)
                            || (this._Rate.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Rate.Entity = null;
                        previousValue.Payments.Remove(this);
                    }
                    this._Rate.Entity = value;
                    if ((value != null))
                    {
                        value.Payments.Add(this);
                        this._RateID = value.ID;
                    }
                    else
                    {
                        this._RateID = default(int);
                    }
                    this.SendPropertyChanged("Rate");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Payment", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Payments.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Payments.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_CashReportItems(CashReportItem entity)
        {
            this.SendPropertyChanging();
            entity.Payment = this;
        }

        private void detach_CashReportItems(CashReportItem entity)
        {
            this.SendPropertyChanging();
            entity.Payment = null;
        }

        private void attach_PaymentsPerInsSubTypes(PaymentsPerInsSubType entity)
        {
            this.SendPropertyChanging();
            entity.Payment = this;
        }

        private void detach_PaymentsPerInsSubTypes(PaymentsPerInsSubType entity)
        {
            this.SendPropertyChanging();
            entity.Payment = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.PaymentsPerInsSubTypes")]
    public partial class PaymentsPerInsSubType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _PaymentID;

        private int _InsuranceSubTypeID;

        private decimal _PaidValue;

        private decimal _BrokerageValue;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        private EntityRef<Payment> _Payment;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPaymentIDChanging(int value);
        partial void OnPaymentIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnPaidValueChanging(decimal value);
        partial void OnPaidValueChanged();
        partial void OnBrokerageValueChanging(decimal value);
        partial void OnBrokerageValueChanged();
        #endregion

        public PaymentsPerInsSubType()
        {
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            this._Payment = default(EntityRef<Payment>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaymentID", DbType = "Int NOT NULL")]
        public int PaymentID
        {
            get
            {
                return this._PaymentID;
            }
            set
            {
                if ((this._PaymentID != value))
                {
                    if (this._Payment.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPaymentIDChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentID = value;
                    this.SendPropertyChanged("PaymentID");
                    this.OnPaymentIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaidValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PaidValue
        {
            get
            {
                return this._PaidValue;
            }
            set
            {
                if ((this._PaidValue != value))
                {
                    this.OnPaidValueChanging(value);
                    this.SendPropertyChanging();
                    this._PaidValue = value;
                    this.SendPropertyChanged("PaidValue");
                    this.OnPaidValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this.OnBrokerageValueChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageValue = value;
                    this.SendPropertyChanged("BrokerageValue");
                    this.OnBrokerageValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_PaymentsPerInsSubType", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.PaymentsPerInsSubTypes.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.PaymentsPerInsSubTypes.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Payment_PaymentsPerInsSubType", Storage = "_Payment", ThisKey = "PaymentID", OtherKey = "ID", IsForeignKey = true)]
        public Payment Payment
        {
            get
            {
                return this._Payment.Entity;
            }
            set
            {
                Payment previousValue = this._Payment.Entity;
                if (((previousValue != value)
                            || (this._Payment.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Payment.Entity = null;
                        previousValue.PaymentsPerInsSubTypes.Remove(this);
                    }
                    this._Payment.Entity = value;
                    if ((value != null))
                    {
                        value.PaymentsPerInsSubTypes.Add(this);
                        this._PaymentID = value.ID;
                    }
                    else
                    {
                        this._PaymentID = default(int);
                    }
                    this.SendPropertyChanged("Payment");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.PaymentTypes")]
    public partial class PaymentType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private string _Description;

        private decimal _BrokerageValue;

        private EntitySet<FacturePayment> _FacturePayments;

        private EntitySet<OrderItem> _OrderItems;

        private EntitySet<Payment> _Payments;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnBrokerageValueChanging(decimal value);
        partial void OnBrokerageValueChanged();
        #endregion

        public PaymentType()
        {
            this._FacturePayments = new EntitySet<FacturePayment>(new Action<FacturePayment>(this.attach_FacturePayments), new Action<FacturePayment>(this.detach_FacturePayments));
            this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
            this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this.OnBrokerageValueChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageValue = value;
                    this.SendPropertyChanged("BrokerageValue");
                    this.OnBrokerageValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PaymentType_FacturePayment", Storage = "_FacturePayments", ThisKey = "ID", OtherKey = "PaymentTypeID")]
        public EntitySet<FacturePayment> FacturePayments
        {
            get
            {
                return this._FacturePayments;
            }
            set
            {
                this._FacturePayments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PaymentType_OrderItem", Storage = "_OrderItems", ThisKey = "ID", OtherKey = "PaymentTypeID")]
        public EntitySet<OrderItem> OrderItems
        {
            get
            {
                return this._OrderItems;
            }
            set
            {
                this._OrderItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PaymentType_Payment", Storage = "_Payments", ThisKey = "ID", OtherKey = "PaymentTypeID")]
        public EntitySet<Payment> Payments
        {
            get
            {
                return this._Payments;
            }
            set
            {
                this._Payments.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_FacturePayments(FacturePayment entity)
        {
            this.SendPropertyChanging();
            entity.PaymentType = this;
        }

        private void detach_FacturePayments(FacturePayment entity)
        {
            this.SendPropertyChanging();
            entity.PaymentType = null;
        }

        private void attach_OrderItems(OrderItem entity)
        {
            this.SendPropertyChanging();
            entity.PaymentType = this;
        }

        private void detach_OrderItems(OrderItem entity)
        {
            this.SendPropertyChanging();
            entity.PaymentType = null;
        }

        private void attach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.PaymentType = this;
        }

        private void detach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.PaymentType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Places")]
    public partial class Place : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private int _MunicipalityID;

        private bool _IsActive;

        private EntitySet<Client> _Clients;

        private EntitySet<IncomingFacture> _IncomingFactures;

        private EntityRef<Municipality> _Municipality;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnMunicipalityIDChanging(int value);
        partial void OnMunicipalityIDChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public Place()
        {
            this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
            this._IncomingFactures = new EntitySet<IncomingFacture>(new Action<IncomingFacture>(this.attach_IncomingFactures), new Action<IncomingFacture>(this.detach_IncomingFactures));
            this._Municipality = default(EntityRef<Municipality>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MunicipalityID", DbType = "Int NOT NULL")]
        public int MunicipalityID
        {
            get
            {
                return this._MunicipalityID;
            }
            set
            {
                if ((this._MunicipalityID != value))
                {
                    if (this._Municipality.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnMunicipalityIDChanging(value);
                    this.SendPropertyChanging();
                    this._MunicipalityID = value;
                    this.SendPropertyChanged("MunicipalityID");
                    this.OnMunicipalityIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Place_Client", Storage = "_Clients", ThisKey = "ID", OtherKey = "PlaceID")]
        public EntitySet<Client> Clients
        {
            get
            {
                return this._Clients;
            }
            set
            {
                this._Clients.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Place_IncomingFacture", Storage = "_IncomingFactures", ThisKey = "ID", OtherKey = "PlaceID")]
        public EntitySet<IncomingFacture> IncomingFactures
        {
            get
            {
                return this._IncomingFactures;
            }
            set
            {
                this._IncomingFactures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Municipality_Place", Storage = "_Municipality", ThisKey = "MunicipalityID", OtherKey = "ID", IsForeignKey = true)]
        public Municipality Municipality
        {
            get
            {
                return this._Municipality.Entity;
            }
            set
            {
                Municipality previousValue = this._Municipality.Entity;
                if (((previousValue != value)
                            || (this._Municipality.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Municipality.Entity = null;
                        previousValue.Places.Remove(this);
                    }
                    this._Municipality.Entity = value;
                    if ((value != null))
                    {
                        value.Places.Add(this);
                        this._MunicipalityID = value.ID;
                    }
                    else
                    {
                        this._MunicipalityID = default(int);
                    }
                    this.SendPropertyChanged("Municipality");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Clients(Client entity)
        {
            this.SendPropertyChanging();
            entity.Place = this;
        }

        private void detach_Clients(Client entity)
        {
            this.SendPropertyChanging();
            entity.Place = null;
        }

        private void attach_IncomingFactures(IncomingFacture entity)
        {
            this.SendPropertyChanging();
            entity.Place = this;
        }

        private void detach_IncomingFactures(IncomingFacture entity)
        {
            this.SendPropertyChanging();
            entity.Place = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Policies")]
    public partial class Policy : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private System.Nullable<int> _OfferID;

        private string _PolicyNumber;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private bool _Discard;

        private int _UserID;

        private int _BranchID;

        private int _InsuranceCompanyID;

        private int _ClientID;

        private int _OwnerID;

        private System.DateTime _ApplicationDate;

        private decimal _TotalSum;

        private decimal _BrokeragePercentage;

        private int _StatusID;

        private System.Nullable<int> _PacketID;

        private System.DateTime _InsertDate;

        private System.Nullable<int> _RatesApproverID;

        private System.Nullable<int> _MarketingAgentID;

        private EntitySet<PolicyItem> _PolicyItems;

        private EntityRef<Branch> _Branch;

        private EntityRef<Client> _Client;

        private EntityRef<Client> _Client1;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<Offer> _Offer;

        private EntityRef<Packet> _Packet;

        private EntityRef<Statuse> _Statuse;

        private EntityRef<User> _User;

        private EntityRef<User> _User1;

        private EntityRef<User> _User2;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOfferIDChanging(System.Nullable<int> value);
        partial void OnOfferIDChanged();
        partial void OnPolicyNumberChanging(string value);
        partial void OnPolicyNumberChanged();
        partial void OnStartDateChanging(System.DateTime value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime value);
        partial void OnEndDateChanged();
        partial void OnDiscardChanging(bool value);
        partial void OnDiscardChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnBranchIDChanging(int value);
        partial void OnBranchIDChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnClientIDChanging(int value);
        partial void OnClientIDChanged();
        partial void OnOwnerIDChanging(int value);
        partial void OnOwnerIDChanged();
        partial void OnApplicationDateChanging(System.DateTime value);
        partial void OnApplicationDateChanged();
        partial void OnTotalSumChanging(decimal value);
        partial void OnTotalSumChanged();
        partial void OnBrokeragePercentageChanging(decimal value);
        partial void OnBrokeragePercentageChanged();
        partial void OnStatusIDChanging(int value);
        partial void OnStatusIDChanged();
        partial void OnPacketIDChanging(System.Nullable<int> value);
        partial void OnPacketIDChanged();
        partial void OnInsertDateChanging(System.DateTime value);
        partial void OnInsertDateChanged();
        partial void OnRatesApproverIDChanging(System.Nullable<int> value);
        partial void OnRatesApproverIDChanged();
        partial void OnMarketingAgentIDChanging(System.Nullable<int> value);
        partial void OnMarketingAgentIDChanged();
        #endregion

        public Policy()
        {
            this._PolicyItems = new EntitySet<PolicyItem>(new Action<PolicyItem>(this.attach_PolicyItems), new Action<PolicyItem>(this.detach_PolicyItems));
            this._Branch = default(EntityRef<Branch>);
            this._Client = default(EntityRef<Client>);
            this._Client1 = default(EntityRef<Client>);
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._Offer = default(EntityRef<Offer>);
            this._Packet = default(EntityRef<Packet>);
            this._Statuse = default(EntityRef<Statuse>);
            this._User = default(EntityRef<User>);
            this._User1 = default(EntityRef<User>);
            this._User2 = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OfferID", DbType = "Int")]
        public System.Nullable<int> OfferID
        {
            get
            {
                return this._OfferID;
            }
            set
            {
                if ((this._OfferID != value))
                {
                    if (this._Offer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOfferIDChanging(value);
                    this.SendPropertyChanging();
                    this._OfferID = value;
                    this.SendPropertyChanged("OfferID");
                    this.OnOfferIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyNumber", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string PolicyNumber
        {
            get
            {
                return this._PolicyNumber;
            }
            set
            {
                if ((this._PolicyNumber != value))
                {
                    this.OnPolicyNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyNumber = value;
                    this.SendPropertyChanged("PolicyNumber");
                    this.OnPolicyNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "DateTime NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "DateTime NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Discard", DbType = "Bit NOT NULL")]
        public bool Discard
        {
            get
            {
                return this._Discard;
            }
            set
            {
                if ((this._Discard != value))
                {
                    this.OnDiscardChanging(value);
                    this.SendPropertyChanging();
                    this._Discard = value;
                    this.SendPropertyChanged("Discard");
                    this.OnDiscardChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBranchIDChanging(value);
                    this.SendPropertyChanging();
                    this._BranchID = value;
                    this.SendPropertyChanged("BranchID");
                    this.OnBranchIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerID", DbType = "Int NOT NULL")]
        public int OwnerID
        {
            get
            {
                return this._OwnerID;
            }
            set
            {
                if ((this._OwnerID != value))
                {
                    if (this._Client1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOwnerIDChanging(value);
                    this.SendPropertyChanging();
                    this._OwnerID = value;
                    this.SendPropertyChanged("OwnerID");
                    this.OnOwnerIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ApplicationDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ApplicationDate
        {
            get
            {
                return this._ApplicationDate;
            }
            set
            {
                if ((this._ApplicationDate != value))
                {
                    this.OnApplicationDateChanging(value);
                    this.SendPropertyChanging();
                    this._ApplicationDate = value;
                    this.SendPropertyChanged("ApplicationDate");
                    this.OnApplicationDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalSum", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalSum
        {
            get
            {
                return this._TotalSum;
            }
            set
            {
                if ((this._TotalSum != value))
                {
                    this.OnTotalSumChanging(value);
                    this.SendPropertyChanging();
                    this._TotalSum = value;
                    this.SendPropertyChanged("TotalSum");
                    this.OnTotalSumChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokeragePercentage", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokeragePercentage
        {
            get
            {
                return this._BrokeragePercentage;
            }
            set
            {
                if ((this._BrokeragePercentage != value))
                {
                    this.OnBrokeragePercentageChanging(value);
                    this.SendPropertyChanging();
                    this._BrokeragePercentage = value;
                    this.SendPropertyChanged("BrokeragePercentage");
                    this.OnBrokeragePercentageChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusID", DbType = "Int NOT NULL")]
        public int StatusID
        {
            get
            {
                return this._StatusID;
            }
            set
            {
                if ((this._StatusID != value))
                {
                    if (this._Statuse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnStatusIDChanging(value);
                    this.SendPropertyChanging();
                    this._StatusID = value;
                    this.SendPropertyChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PacketID", DbType = "Int")]
        public System.Nullable<int> PacketID
        {
            get
            {
                return this._PacketID;
            }
            set
            {
                if ((this._PacketID != value))
                {
                    if (this._Packet.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPacketIDChanging(value);
                    this.SendPropertyChanging();
                    this._PacketID = value;
                    this.SendPropertyChanged("PacketID");
                    this.OnPacketIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsertDate", DbType = "DateTime NOT NULL")]
        public System.DateTime InsertDate
        {
            get
            {
                return this._InsertDate;
            }
            set
            {
                if ((this._InsertDate != value))
                {
                    this.OnInsertDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertDate = value;
                    this.SendPropertyChanged("InsertDate");
                    this.OnInsertDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RatesApproverID", DbType = "Int")]
        public System.Nullable<int> RatesApproverID
        {
            get
            {
                return this._RatesApproverID;
            }
            set
            {
                if ((this._RatesApproverID != value))
                {
                    if (this._User1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnRatesApproverIDChanging(value);
                    this.SendPropertyChanging();
                    this._RatesApproverID = value;
                    this.SendPropertyChanged("RatesApproverID");
                    this.OnRatesApproverIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MarketingAgentID", DbType = "Int")]
        public System.Nullable<int> MarketingAgentID
        {
            get
            {
                return this._MarketingAgentID;
            }
            set
            {
                if ((this._MarketingAgentID != value))
                {
                    if (this._User2.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnMarketingAgentIDChanging(value);
                    this.SendPropertyChanging();
                    this._MarketingAgentID = value;
                    this.SendPropertyChanged("MarketingAgentID");
                    this.OnMarketingAgentIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Policy_PolicyItem", Storage = "_PolicyItems", ThisKey = "ID", OtherKey = "PolicyID")]
        public EntitySet<PolicyItem> PolicyItems
        {
            get
            {
                return this._PolicyItems;
            }
            set
            {
                this._PolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_Policy", Storage = "_Branch", ThisKey = "BranchID", OtherKey = "ID", IsForeignKey = true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if (((previousValue != value)
                            || (this._Branch.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Branch.Entity = null;
                        previousValue.Policies.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if ((value != null))
                    {
                        value.Policies.Add(this);
                        this._BranchID = value.ID;
                    }
                    else
                    {
                        this._BranchID = default(int);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Policy", Storage = "_Client", ThisKey = "ClientID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if (((previousValue != value)
                            || (this._Client.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client.Entity = null;
                        previousValue.Policies.Remove(this);
                    }
                    this._Client.Entity = value;
                    if ((value != null))
                    {
                        value.Policies.Add(this);
                        this._ClientID = value.ID;
                    }
                    else
                    {
                        this._ClientID = default(int);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Policy1", Storage = "_Client1", ThisKey = "OwnerID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client1
        {
            get
            {
                return this._Client1.Entity;
            }
            set
            {
                Client previousValue = this._Client1.Entity;
                if (((previousValue != value)
                            || (this._Client1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client1.Entity = null;
                        previousValue.Policies1.Remove(this);
                    }
                    this._Client1.Entity = value;
                    if ((value != null))
                    {
                        value.Policies1.Add(this);
                        this._OwnerID = value.ID;
                    }
                    else
                    {
                        this._OwnerID = default(int);
                    }
                    this.SendPropertyChanged("Client1");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_Policy", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.Policies.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.Policies.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Offer_Policy", Storage = "_Offer", ThisKey = "OfferID", OtherKey = "ID", IsForeignKey = true)]
        public Offer Offer
        {
            get
            {
                return this._Offer.Entity;
            }
            set
            {
                Offer previousValue = this._Offer.Entity;
                if (((previousValue != value)
                            || (this._Offer.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Offer.Entity = null;
                        previousValue.Policies.Remove(this);
                    }
                    this._Offer.Entity = value;
                    if ((value != null))
                    {
                        value.Policies.Add(this);
                        this._OfferID = value.ID;
                    }
                    else
                    {
                        this._OfferID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Offer");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Packet_Policy", Storage = "_Packet", ThisKey = "PacketID", OtherKey = "ID", IsForeignKey = true)]
        public Packet Packet
        {
            get
            {
                return this._Packet.Entity;
            }
            set
            {
                Packet previousValue = this._Packet.Entity;
                if (((previousValue != value)
                            || (this._Packet.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Packet.Entity = null;
                        previousValue.Policies.Remove(this);
                    }
                    this._Packet.Entity = value;
                    if ((value != null))
                    {
                        value.Policies.Add(this);
                        this._PacketID = value.ID;
                    }
                    else
                    {
                        this._PacketID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Packet");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Statuse_Policy", Storage = "_Statuse", ThisKey = "StatusID", OtherKey = "ID", IsForeignKey = true)]
        public Statuse Statuse
        {
            get
            {
                return this._Statuse.Entity;
            }
            set
            {
                Statuse previousValue = this._Statuse.Entity;
                if (((previousValue != value)
                            || (this._Statuse.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Statuse.Entity = null;
                        previousValue.Policies.Remove(this);
                    }
                    this._Statuse.Entity = value;
                    if ((value != null))
                    {
                        value.Policies.Add(this);
                        this._StatusID = value.ID;
                    }
                    else
                    {
                        this._StatusID = default(int);
                    }
                    this.SendPropertyChanged("Statuse");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Policy", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Policies.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Policies.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Policy1", Storage = "_User1", ThisKey = "RatesApproverID", OtherKey = "ID", IsForeignKey = true)]
        public User User1
        {
            get
            {
                return this._User1.Entity;
            }
            set
            {
                User previousValue = this._User1.Entity;
                if (((previousValue != value)
                            || (this._User1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User1.Entity = null;
                        previousValue.Policies1.Remove(this);
                    }
                    this._User1.Entity = value;
                    if ((value != null))
                    {
                        value.Policies1.Add(this);
                        this._RatesApproverID = value.ID;
                    }
                    else
                    {
                        this._RatesApproverID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("User1");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Policy2", Storage = "_User2", ThisKey = "MarketingAgentID", OtherKey = "ID", IsForeignKey = true)]
        public User User2
        {
            get
            {
                return this._User2.Entity;
            }
            set
            {
                User previousValue = this._User2.Entity;
                if (((previousValue != value)
                            || (this._User2.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User2.Entity = null;
                        previousValue.Policies2.Remove(this);
                    }
                    this._User2.Entity = value;
                    if ((value != null))
                    {
                        value.Policies2.Add(this);
                        this._MarketingAgentID = value.ID;
                    }
                    else
                    {
                        this._MarketingAgentID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("User2");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.Policy = this;
        }

        private void detach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.Policy = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.PolicyExtendInformations")]
    public partial class PolicyExtendInformation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _PolicyItemID;

        private int _ControlID;

        private string _Value;

        private System.Nullable<int> _ValueID;

        private EntityRef<Control> _Control;

        private EntityRef<PolicyItem> _PolicyItem;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPolicyItemIDChanging(int value);
        partial void OnPolicyItemIDChanged();
        partial void OnControlIDChanging(int value);
        partial void OnControlIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnValueIDChanging(System.Nullable<int> value);
        partial void OnValueIDChanged();
        #endregion

        public PolicyExtendInformation()
        {
            this._Control = default(EntityRef<Control>);
            this._PolicyItem = default(EntityRef<PolicyItem>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL")]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    if (this._PolicyItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPolicyItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyItemID = value;
                    this.SendPropertyChanged("PolicyItemID");
                    this.OnPolicyItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ControlID", DbType = "Int NOT NULL")]
        public int ControlID
        {
            get
            {
                return this._ControlID;
            }
            set
            {
                if ((this._ControlID != value))
                {
                    if (this._Control.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnControlIDChanging(value);
                    this.SendPropertyChanging();
                    this._ControlID = value;
                    this.SendPropertyChanged("ControlID");
                    this.OnControlIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "NVarChar(300) NOT NULL", CanBeNull = false)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ValueID", DbType = "Int")]
        public System.Nullable<int> ValueID
        {
            get
            {
                return this._ValueID;
            }
            set
            {
                if ((this._ValueID != value))
                {
                    this.OnValueIDChanging(value);
                    this.SendPropertyChanging();
                    this._ValueID = value;
                    this.SendPropertyChanged("ValueID");
                    this.OnValueIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Control_PolicyExtendInformation", Storage = "_Control", ThisKey = "ControlID", OtherKey = "ID", IsForeignKey = true)]
        public Control Control
        {
            get
            {
                return this._Control.Entity;
            }
            set
            {
                Control previousValue = this._Control.Entity;
                if (((previousValue != value)
                            || (this._Control.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Control.Entity = null;
                        previousValue.PolicyExtendInformations.Remove(this);
                    }
                    this._Control.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyExtendInformations.Add(this);
                        this._ControlID = value.ID;
                    }
                    else
                    {
                        this._ControlID = default(int);
                    }
                    this.SendPropertyChanged("Control");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_PolicyExtendInformation", Storage = "_PolicyItem", ThisKey = "PolicyItemID", OtherKey = "ID", IsForeignKey = true)]
        public PolicyItem PolicyItem
        {
            get
            {
                return this._PolicyItem.Entity;
            }
            set
            {
                PolicyItem previousValue = this._PolicyItem.Entity;
                if (((previousValue != value)
                            || (this._PolicyItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PolicyItem.Entity = null;
                        previousValue.PolicyExtendInformations.Remove(this);
                    }
                    this._PolicyItem.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyExtendInformations.Add(this);
                        this._PolicyItemID = value.ID;
                    }
                    else
                    {
                        this._PolicyItemID = default(int);
                    }
                    this.SendPropertyChanged("PolicyItem");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.PolicyIncomeFactureStatuses")]
    public partial class PolicyIncomeFactureStatuse : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private EntitySet<PolicyItem> _PolicyItems;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public PolicyIncomeFactureStatuse()
        {
            this._PolicyItems = new EntitySet<PolicyItem>(new Action<PolicyItem>(this.attach_PolicyItems), new Action<PolicyItem>(this.detach_PolicyItems));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyIncomeFactureStatuse_PolicyItem", Storage = "_PolicyItems", ThisKey = "ID", OtherKey = "PolicyIncomeFactureStatusID")]
        public EntitySet<PolicyItem> PolicyItems
        {
            get
            {
                return this._PolicyItems;
            }
            set
            {
                this._PolicyItems.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyIncomeFactureStatuse = this;
        }

        private void detach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyIncomeFactureStatuse = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.PolicyItemFactureItems")]
    public partial class PolicyItemFactureItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _FactureItemID;

        private int _PolicyItemID;

        private EntityRef<FactureItem> _FactureItem;

        private EntityRef<PolicyItem> _PolicyItem;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnFactureItemIDChanging(int value);
        partial void OnFactureItemIDChanged();
        partial void OnPolicyItemIDChanging(int value);
        partial void OnPolicyItemIDChanged();
        #endregion

        public PolicyItemFactureItem()
        {
            this._FactureItem = default(EntityRef<FactureItem>);
            this._PolicyItem = default(EntityRef<PolicyItem>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureItemID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int FactureItemID
        {
            get
            {
                return this._FactureItemID;
            }
            set
            {
                if ((this._FactureItemID != value))
                {
                    if (this._FactureItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFactureItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._FactureItemID = value;
                    this.SendPropertyChanged("FactureItemID");
                    this.OnFactureItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    if (this._PolicyItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPolicyItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyItemID = value;
                    this.SendPropertyChanged("PolicyItemID");
                    this.OnPolicyItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FactureItem_PolicyItemFactureItem", Storage = "_FactureItem", ThisKey = "FactureItemID", OtherKey = "ID", IsForeignKey = true)]
        public FactureItem FactureItem
        {
            get
            {
                return this._FactureItem.Entity;
            }
            set
            {
                FactureItem previousValue = this._FactureItem.Entity;
                if (((previousValue != value)
                            || (this._FactureItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._FactureItem.Entity = null;
                        previousValue.PolicyItemFactureItems.Remove(this);
                    }
                    this._FactureItem.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyItemFactureItems.Add(this);
                        this._FactureItemID = value.ID;
                    }
                    else
                    {
                        this._FactureItemID = default(int);
                    }
                    this.SendPropertyChanged("FactureItem");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_PolicyItemFactureItem", Storage = "_PolicyItem", ThisKey = "PolicyItemID", OtherKey = "ID", IsForeignKey = true)]
        public PolicyItem PolicyItem
        {
            get
            {
                return this._PolicyItem.Entity;
            }
            set
            {
                PolicyItem previousValue = this._PolicyItem.Entity;
                if (((previousValue != value)
                            || (this._PolicyItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PolicyItem.Entity = null;
                        previousValue.PolicyItemFactureItems.Remove(this);
                    }
                    this._PolicyItem.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyItemFactureItems.Add(this);
                        this._PolicyItemID = value.ID;
                    }
                    else
                    {
                        this._PolicyItemID = default(int);
                    }
                    this.SendPropertyChanged("PolicyItem");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.PolicyItems")]
    public partial class PolicyItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _PolicyID;

        private int _InsuranceSubTypeID;

        private decimal _PremiumValue;

        private decimal _BrokeragePercentage;

        private decimal _BrokerageValue;

        private string _PolicyNumber;

        private int _StatusID;

        private bool _IsPaidInBrokerHouse;

        private bool _IsRollBacked;

        private System.Nullable<int> _BrokerageID;

        private System.Nullable<int> _PacketBrokerageID;

        private int _PolicyIncomeFactureStatusID;

        private bool _IsAccountFactured;

        private bool _IsBrokerageSliped;

        private System.Nullable<int> _MarketingAgentBrokerageID;

        private System.Nullable<int> _RateDealInsuranceSubTypeID;

        private System.Nullable<bool> _IsFactureCreated;

        private decimal _RealPremiumValue;

        private decimal _DiscountValue;

        private EntitySet<AccountFactureItemPolicyItem> _AccountFactureItemPolicyItems;

        private EntitySet<BrokerageSlipPolicyItem> _BrokerageSlipPolicyItems;

        private EntitySet<Damage> _Damages;

        private EntitySet<IncomingFacturePolicyItem> _IncomingFacturePolicyItems;

        private EntitySet<PolicyExtendInformation> _PolicyExtendInformations;

        private EntitySet<PolicyItemFactureItem> _PolicyItemFactureItems;

        private EntitySet<Rate> _Rates;

        private EntitySet<RightRestriction> _RightRestrictions;

        private EntitySet<RollBackDistributionItem> _RollBackDistributionItems;

        private EntityRef<Brokerage> _Brokerage;

        private EntityRef<BrokeragesForMarketingAgent> _BrokeragesForMarketingAgent;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        private EntityRef<PacketsInsuranceSubType> _PacketsInsuranceSubType;

        private EntityRef<Policy> _Policy;

        private EntityRef<PolicyIncomeFactureStatuse> _PolicyIncomeFactureStatuse;

        private EntityRef<RateDealInsuranceSubType> _RateDealInsuranceSubType;

        private EntityRef<Statuse> _Statuse;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPolicyIDChanging(int value);
        partial void OnPolicyIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnPremiumValueChanging(decimal value);
        partial void OnPremiumValueChanged();
        partial void OnBrokeragePercentageChanging(decimal value);
        partial void OnBrokeragePercentageChanged();
        partial void OnBrokerageValueChanging(decimal value);
        partial void OnBrokerageValueChanged();
        partial void OnPolicyNumberChanging(string value);
        partial void OnPolicyNumberChanged();
        partial void OnStatusIDChanging(int value);
        partial void OnStatusIDChanged();
        partial void OnIsPaidInBrokerHouseChanging(bool value);
        partial void OnIsPaidInBrokerHouseChanged();
        partial void OnIsRollBackedChanging(bool value);
        partial void OnIsRollBackedChanged();
        partial void OnBrokerageIDChanging(System.Nullable<int> value);
        partial void OnBrokerageIDChanged();
        partial void OnPacketBrokerageIDChanging(System.Nullable<int> value);
        partial void OnPacketBrokerageIDChanged();
        partial void OnPolicyIncomeFactureStatusIDChanging(int value);
        partial void OnPolicyIncomeFactureStatusIDChanged();
        partial void OnIsAccountFacturedChanging(bool value);
        partial void OnIsAccountFacturedChanged();
        partial void OnIsBrokerageSlipedChanging(bool value);
        partial void OnIsBrokerageSlipedChanged();
        partial void OnMarketingAgentBrokerageIDChanging(System.Nullable<int> value);
        partial void OnMarketingAgentBrokerageIDChanged();
        partial void OnRateDealInsuranceSubTypeIDChanging(System.Nullable<int> value);
        partial void OnRateDealInsuranceSubTypeIDChanged();
        partial void OnIsFactureCreatedChanging(System.Nullable<bool> value);
        partial void OnIsFactureCreatedChanged();
        partial void OnRealPremiumValueChanging(decimal value);
        partial void OnRealPremiumValueChanged();
        partial void OnDiscountValueChanging(decimal value);
        partial void OnDiscountValueChanged();
        #endregion

        public PolicyItem()
        {
            this._AccountFactureItemPolicyItems = new EntitySet<AccountFactureItemPolicyItem>(new Action<AccountFactureItemPolicyItem>(this.attach_AccountFactureItemPolicyItems), new Action<AccountFactureItemPolicyItem>(this.detach_AccountFactureItemPolicyItems));
            this._BrokerageSlipPolicyItems = new EntitySet<BrokerageSlipPolicyItem>(new Action<BrokerageSlipPolicyItem>(this.attach_BrokerageSlipPolicyItems), new Action<BrokerageSlipPolicyItem>(this.detach_BrokerageSlipPolicyItems));
            this._Damages = new EntitySet<Damage>(new Action<Damage>(this.attach_Damages), new Action<Damage>(this.detach_Damages));
            this._IncomingFacturePolicyItems = new EntitySet<IncomingFacturePolicyItem>(new Action<IncomingFacturePolicyItem>(this.attach_IncomingFacturePolicyItems), new Action<IncomingFacturePolicyItem>(this.detach_IncomingFacturePolicyItems));
            this._PolicyExtendInformations = new EntitySet<PolicyExtendInformation>(new Action<PolicyExtendInformation>(this.attach_PolicyExtendInformations), new Action<PolicyExtendInformation>(this.detach_PolicyExtendInformations));
            this._PolicyItemFactureItems = new EntitySet<PolicyItemFactureItem>(new Action<PolicyItemFactureItem>(this.attach_PolicyItemFactureItems), new Action<PolicyItemFactureItem>(this.detach_PolicyItemFactureItems));
            this._Rates = new EntitySet<Rate>(new Action<Rate>(this.attach_Rates), new Action<Rate>(this.detach_Rates));
            this._RightRestrictions = new EntitySet<RightRestriction>(new Action<RightRestriction>(this.attach_RightRestrictions), new Action<RightRestriction>(this.detach_RightRestrictions));
            this._RollBackDistributionItems = new EntitySet<RollBackDistributionItem>(new Action<RollBackDistributionItem>(this.attach_RollBackDistributionItems), new Action<RollBackDistributionItem>(this.detach_RollBackDistributionItems));
            this._Brokerage = default(EntityRef<Brokerage>);
            this._BrokeragesForMarketingAgent = default(EntityRef<BrokeragesForMarketingAgent>);
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            this._PacketsInsuranceSubType = default(EntityRef<PacketsInsuranceSubType>);
            this._Policy = default(EntityRef<Policy>);
            this._PolicyIncomeFactureStatuse = default(EntityRef<PolicyIncomeFactureStatuse>);
            this._RateDealInsuranceSubType = default(EntityRef<RateDealInsuranceSubType>);
            this._Statuse = default(EntityRef<Statuse>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyID", DbType = "Int NOT NULL")]
        public int PolicyID
        {
            get
            {
                return this._PolicyID;
            }
            set
            {
                if ((this._PolicyID != value))
                {
                    if (this._Policy.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPolicyIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyID = value;
                    this.SendPropertyChanged("PolicyID");
                    this.OnPolicyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PremiumValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PremiumValue
        {
            get
            {
                return this._PremiumValue;
            }
            set
            {
                if ((this._PremiumValue != value))
                {
                    this.OnPremiumValueChanging(value);
                    this.SendPropertyChanging();
                    this._PremiumValue = value;
                    this.SendPropertyChanged("PremiumValue");
                    this.OnPremiumValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokeragePercentage", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokeragePercentage
        {
            get
            {
                return this._BrokeragePercentage;
            }
            set
            {
                if ((this._BrokeragePercentage != value))
                {
                    this.OnBrokeragePercentageChanging(value);
                    this.SendPropertyChanging();
                    this._BrokeragePercentage = value;
                    this.SendPropertyChanged("BrokeragePercentage");
                    this.OnBrokeragePercentageChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this.OnBrokerageValueChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageValue = value;
                    this.SendPropertyChanged("BrokerageValue");
                    this.OnBrokerageValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string PolicyNumber
        {
            get
            {
                return this._PolicyNumber;
            }
            set
            {
                if ((this._PolicyNumber != value))
                {
                    this.OnPolicyNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyNumber = value;
                    this.SendPropertyChanged("PolicyNumber");
                    this.OnPolicyNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusID", DbType = "Int NOT NULL")]
        public int StatusID
        {
            get
            {
                return this._StatusID;
            }
            set
            {
                if ((this._StatusID != value))
                {
                    if (this._Statuse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnStatusIDChanging(value);
                    this.SendPropertyChanging();
                    this._StatusID = value;
                    this.SendPropertyChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsPaidInBrokerHouse", DbType = "Bit NOT NULL")]
        public bool IsPaidInBrokerHouse
        {
            get
            {
                return this._IsPaidInBrokerHouse;
            }
            set
            {
                if ((this._IsPaidInBrokerHouse != value))
                {
                    this.OnIsPaidInBrokerHouseChanging(value);
                    this.SendPropertyChanging();
                    this._IsPaidInBrokerHouse = value;
                    this.SendPropertyChanged("IsPaidInBrokerHouse");
                    this.OnIsPaidInBrokerHouseChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsRollBacked", DbType = "Bit NOT NULL")]
        public bool IsRollBacked
        {
            get
            {
                return this._IsRollBacked;
            }
            set
            {
                if ((this._IsRollBacked != value))
                {
                    this.OnIsRollBackedChanging(value);
                    this.SendPropertyChanging();
                    this._IsRollBacked = value;
                    this.SendPropertyChanged("IsRollBacked");
                    this.OnIsRollBackedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageID", DbType = "Int")]
        public System.Nullable<int> BrokerageID
        {
            get
            {
                return this._BrokerageID;
            }
            set
            {
                if ((this._BrokerageID != value))
                {
                    if (this._Brokerage.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBrokerageIDChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageID = value;
                    this.SendPropertyChanged("BrokerageID");
                    this.OnBrokerageIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PacketBrokerageID", DbType = "Int")]
        public System.Nullable<int> PacketBrokerageID
        {
            get
            {
                return this._PacketBrokerageID;
            }
            set
            {
                if ((this._PacketBrokerageID != value))
                {
                    if (this._PacketsInsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPacketBrokerageIDChanging(value);
                    this.SendPropertyChanging();
                    this._PacketBrokerageID = value;
                    this.SendPropertyChanged("PacketBrokerageID");
                    this.OnPacketBrokerageIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyIncomeFactureStatusID", DbType = "Int NOT NULL")]
        public int PolicyIncomeFactureStatusID
        {
            get
            {
                return this._PolicyIncomeFactureStatusID;
            }
            set
            {
                if ((this._PolicyIncomeFactureStatusID != value))
                {
                    if (this._PolicyIncomeFactureStatuse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPolicyIncomeFactureStatusIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyIncomeFactureStatusID = value;
                    this.SendPropertyChanged("PolicyIncomeFactureStatusID");
                    this.OnPolicyIncomeFactureStatusIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsAccountFactured", DbType = "Bit NOT NULL")]
        public bool IsAccountFactured
        {
            get
            {
                return this._IsAccountFactured;
            }
            set
            {
                if ((this._IsAccountFactured != value))
                {
                    this.OnIsAccountFacturedChanging(value);
                    this.SendPropertyChanging();
                    this._IsAccountFactured = value;
                    this.SendPropertyChanged("IsAccountFactured");
                    this.OnIsAccountFacturedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsBrokerageSliped", DbType = "Bit NOT NULL")]
        public bool IsBrokerageSliped
        {
            get
            {
                return this._IsBrokerageSliped;
            }
            set
            {
                if ((this._IsBrokerageSliped != value))
                {
                    this.OnIsBrokerageSlipedChanging(value);
                    this.SendPropertyChanging();
                    this._IsBrokerageSliped = value;
                    this.SendPropertyChanged("IsBrokerageSliped");
                    this.OnIsBrokerageSlipedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MarketingAgentBrokerageID", DbType = "Int")]
        public System.Nullable<int> MarketingAgentBrokerageID
        {
            get
            {
                return this._MarketingAgentBrokerageID;
            }
            set
            {
                if ((this._MarketingAgentBrokerageID != value))
                {
                    if (this._BrokeragesForMarketingAgent.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnMarketingAgentBrokerageIDChanging(value);
                    this.SendPropertyChanging();
                    this._MarketingAgentBrokerageID = value;
                    this.SendPropertyChanged("MarketingAgentBrokerageID");
                    this.OnMarketingAgentBrokerageIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RateDealInsuranceSubTypeID", DbType = "Int")]
        public System.Nullable<int> RateDealInsuranceSubTypeID
        {
            get
            {
                return this._RateDealInsuranceSubTypeID;
            }
            set
            {
                if ((this._RateDealInsuranceSubTypeID != value))
                {
                    if (this._RateDealInsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnRateDealInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._RateDealInsuranceSubTypeID = value;
                    this.SendPropertyChanged("RateDealInsuranceSubTypeID");
                    this.OnRateDealInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsFactureCreated", DbType = "Bit")]
        public System.Nullable<bool> IsFactureCreated
        {
            get
            {
                return this._IsFactureCreated;
            }
            set
            {
                if ((this._IsFactureCreated != value))
                {
                    this.OnIsFactureCreatedChanging(value);
                    this.SendPropertyChanging();
                    this._IsFactureCreated = value;
                    this.SendPropertyChanged("IsFactureCreated");
                    this.OnIsFactureCreatedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RealPremiumValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal RealPremiumValue
        {
            get
            {
                return this._RealPremiumValue;
            }
            set
            {
                if ((this._RealPremiumValue != value))
                {
                    this.OnRealPremiumValueChanging(value);
                    this.SendPropertyChanging();
                    this._RealPremiumValue = value;
                    this.SendPropertyChanged("RealPremiumValue");
                    this.OnRealPremiumValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DiscountValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DiscountValue
        {
            get
            {
                return this._DiscountValue;
            }
            set
            {
                if ((this._DiscountValue != value))
                {
                    this.OnDiscountValueChanging(value);
                    this.SendPropertyChanging();
                    this._DiscountValue = value;
                    this.SendPropertyChanged("DiscountValue");
                    this.OnDiscountValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_AccountFactureItemPolicyItem", Storage = "_AccountFactureItemPolicyItems", ThisKey = "ID", OtherKey = "PolicyItemID")]
        public EntitySet<AccountFactureItemPolicyItem> AccountFactureItemPolicyItems
        {
            get
            {
                return this._AccountFactureItemPolicyItems;
            }
            set
            {
                this._AccountFactureItemPolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_BrokerageSlipPolicyItem", Storage = "_BrokerageSlipPolicyItems", ThisKey = "ID", OtherKey = "PolicyItemID")]
        public EntitySet<BrokerageSlipPolicyItem> BrokerageSlipPolicyItems
        {
            get
            {
                return this._BrokerageSlipPolicyItems;
            }
            set
            {
                this._BrokerageSlipPolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_Damage", Storage = "_Damages", ThisKey = "ID", OtherKey = "PolicyItemID")]
        public EntitySet<Damage> Damages
        {
            get
            {
                return this._Damages;
            }
            set
            {
                this._Damages.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_IncomingFacturePolicyItem", Storage = "_IncomingFacturePolicyItems", ThisKey = "ID", OtherKey = "PolicyItemID")]
        public EntitySet<IncomingFacturePolicyItem> IncomingFacturePolicyItems
        {
            get
            {
                return this._IncomingFacturePolicyItems;
            }
            set
            {
                this._IncomingFacturePolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_PolicyExtendInformation", Storage = "_PolicyExtendInformations", ThisKey = "ID", OtherKey = "PolicyItemID")]
        public EntitySet<PolicyExtendInformation> PolicyExtendInformations
        {
            get
            {
                return this._PolicyExtendInformations;
            }
            set
            {
                this._PolicyExtendInformations.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_PolicyItemFactureItem", Storage = "_PolicyItemFactureItems", ThisKey = "ID", OtherKey = "PolicyItemID")]
        public EntitySet<PolicyItemFactureItem> PolicyItemFactureItems
        {
            get
            {
                return this._PolicyItemFactureItems;
            }
            set
            {
                this._PolicyItemFactureItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_Rate", Storage = "_Rates", ThisKey = "ID", OtherKey = "PolicyItemID")]
        public EntitySet<Rate> Rates
        {
            get
            {
                return this._Rates;
            }
            set
            {
                this._Rates.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_RightRestriction", Storage = "_RightRestrictions", ThisKey = "ID", OtherKey = "PolicyItemID")]
        public EntitySet<RightRestriction> RightRestrictions
        {
            get
            {
                return this._RightRestrictions;
            }
            set
            {
                this._RightRestrictions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_RollBackDistributionItem", Storage = "_RollBackDistributionItems", ThisKey = "ID", OtherKey = "PolicyItemID")]
        public EntitySet<RollBackDistributionItem> RollBackDistributionItems
        {
            get
            {
                return this._RollBackDistributionItems;
            }
            set
            {
                this._RollBackDistributionItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Brokerage_PolicyItem", Storage = "_Brokerage", ThisKey = "BrokerageID", OtherKey = "ID", IsForeignKey = true)]
        public Brokerage Brokerage
        {
            get
            {
                return this._Brokerage.Entity;
            }
            set
            {
                Brokerage previousValue = this._Brokerage.Entity;
                if (((previousValue != value)
                            || (this._Brokerage.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Brokerage.Entity = null;
                        previousValue.PolicyItems.Remove(this);
                    }
                    this._Brokerage.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyItems.Add(this);
                        this._BrokerageID = value.ID;
                    }
                    else
                    {
                        this._BrokerageID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Brokerage");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "BrokeragesForMarketingAgent_PolicyItem", Storage = "_BrokeragesForMarketingAgent", ThisKey = "MarketingAgentBrokerageID", OtherKey = "ID", IsForeignKey = true)]
        public BrokeragesForMarketingAgent BrokeragesForMarketingAgent
        {
            get
            {
                return this._BrokeragesForMarketingAgent.Entity;
            }
            set
            {
                BrokeragesForMarketingAgent previousValue = this._BrokeragesForMarketingAgent.Entity;
                if (((previousValue != value)
                            || (this._BrokeragesForMarketingAgent.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._BrokeragesForMarketingAgent.Entity = null;
                        previousValue.PolicyItems.Remove(this);
                    }
                    this._BrokeragesForMarketingAgent.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyItems.Add(this);
                        this._MarketingAgentBrokerageID = value.ID;
                    }
                    else
                    {
                        this._MarketingAgentBrokerageID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("BrokeragesForMarketingAgent");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_PolicyItem", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.PolicyItems.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyItems.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PacketsInsuranceSubType_PolicyItem", Storage = "_PacketsInsuranceSubType", ThisKey = "PacketBrokerageID", OtherKey = "ID", IsForeignKey = true)]
        public PacketsInsuranceSubType PacketsInsuranceSubType
        {
            get
            {
                return this._PacketsInsuranceSubType.Entity;
            }
            set
            {
                PacketsInsuranceSubType previousValue = this._PacketsInsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._PacketsInsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PacketsInsuranceSubType.Entity = null;
                        previousValue.PolicyItems.Remove(this);
                    }
                    this._PacketsInsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyItems.Add(this);
                        this._PacketBrokerageID = value.ID;
                    }
                    else
                    {
                        this._PacketBrokerageID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("PacketsInsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Policy_PolicyItem", Storage = "_Policy", ThisKey = "PolicyID", OtherKey = "ID", IsForeignKey = true)]
        public Policy Policy
        {
            get
            {
                return this._Policy.Entity;
            }
            set
            {
                Policy previousValue = this._Policy.Entity;
                if (((previousValue != value)
                            || (this._Policy.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Policy.Entity = null;
                        previousValue.PolicyItems.Remove(this);
                    }
                    this._Policy.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyItems.Add(this);
                        this._PolicyID = value.ID;
                    }
                    else
                    {
                        this._PolicyID = default(int);
                    }
                    this.SendPropertyChanged("Policy");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyIncomeFactureStatuse_PolicyItem", Storage = "_PolicyIncomeFactureStatuse", ThisKey = "PolicyIncomeFactureStatusID", OtherKey = "ID", IsForeignKey = true)]
        public PolicyIncomeFactureStatuse PolicyIncomeFactureStatuse
        {
            get
            {
                return this._PolicyIncomeFactureStatuse.Entity;
            }
            set
            {
                PolicyIncomeFactureStatuse previousValue = this._PolicyIncomeFactureStatuse.Entity;
                if (((previousValue != value)
                            || (this._PolicyIncomeFactureStatuse.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PolicyIncomeFactureStatuse.Entity = null;
                        previousValue.PolicyItems.Remove(this);
                    }
                    this._PolicyIncomeFactureStatuse.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyItems.Add(this);
                        this._PolicyIncomeFactureStatusID = value.ID;
                    }
                    else
                    {
                        this._PolicyIncomeFactureStatusID = default(int);
                    }
                    this.SendPropertyChanged("PolicyIncomeFactureStatuse");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RateDealInsuranceSubType_PolicyItem", Storage = "_RateDealInsuranceSubType", ThisKey = "RateDealInsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public RateDealInsuranceSubType RateDealInsuranceSubType
        {
            get
            {
                return this._RateDealInsuranceSubType.Entity;
            }
            set
            {
                RateDealInsuranceSubType previousValue = this._RateDealInsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._RateDealInsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._RateDealInsuranceSubType.Entity = null;
                        previousValue.PolicyItems.Remove(this);
                    }
                    this._RateDealInsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyItems.Add(this);
                        this._RateDealInsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._RateDealInsuranceSubTypeID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("RateDealInsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Statuse_PolicyItem", Storage = "_Statuse", ThisKey = "StatusID", OtherKey = "ID", IsForeignKey = true)]
        public Statuse Statuse
        {
            get
            {
                return this._Statuse.Entity;
            }
            set
            {
                Statuse previousValue = this._Statuse.Entity;
                if (((previousValue != value)
                            || (this._Statuse.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Statuse.Entity = null;
                        previousValue.PolicyItems.Remove(this);
                    }
                    this._Statuse.Entity = value;
                    if ((value != null))
                    {
                        value.PolicyItems.Add(this);
                        this._StatusID = value.ID;
                    }
                    else
                    {
                        this._StatusID = default(int);
                    }
                    this.SendPropertyChanged("Statuse");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccountFactureItemPolicyItems(AccountFactureItemPolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = this;
        }

        private void detach_AccountFactureItemPolicyItems(AccountFactureItemPolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = null;
        }

        private void attach_BrokerageSlipPolicyItems(BrokerageSlipPolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = this;
        }

        private void detach_BrokerageSlipPolicyItems(BrokerageSlipPolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = null;
        }

        private void attach_Damages(Damage entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = this;
        }

        private void detach_Damages(Damage entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = null;
        }

        private void attach_IncomingFacturePolicyItems(IncomingFacturePolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = this;
        }

        private void detach_IncomingFacturePolicyItems(IncomingFacturePolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = null;
        }

        private void attach_PolicyExtendInformations(PolicyExtendInformation entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = this;
        }

        private void detach_PolicyExtendInformations(PolicyExtendInformation entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = null;
        }

        private void attach_PolicyItemFactureItems(PolicyItemFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = this;
        }

        private void detach_PolicyItemFactureItems(PolicyItemFactureItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = null;
        }

        private void attach_Rates(Rate entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = this;
        }

        private void detach_Rates(Rate entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = null;
        }

        private void attach_RightRestrictions(RightRestriction entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = this;
        }

        private void detach_RightRestrictions(RightRestriction entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = null;
        }

        private void attach_RollBackDistributionItems(RollBackDistributionItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = this;
        }

        private void detach_RollBackDistributionItems(RollBackDistributionItem entity)
        {
            this.SendPropertyChanging();
            entity.PolicyItem = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ProvisionRates")]
    public partial class ProvisionRate : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private decimal _Provision;

        private bool _IsActive;

        private int _BankID;

        private EntitySet<Slip> _Slips;

        private EntityRef<Bank> _Bank;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnProvisionChanging(decimal value);
        partial void OnProvisionChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnBankIDChanging(int value);
        partial void OnBankIDChanged();
        #endregion

        public ProvisionRate()
        {
            this._Slips = new EntitySet<Slip>(new Action<Slip>(this.attach_Slips), new Action<Slip>(this.detach_Slips));
            this._Bank = default(EntityRef<Bank>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Provision", DbType = "Decimal(18,4) NOT NULL")]
        public decimal Provision
        {
            get
            {
                return this._Provision;
            }
            set
            {
                if ((this._Provision != value))
                {
                    this.OnProvisionChanging(value);
                    this.SendPropertyChanging();
                    this._Provision = value;
                    this.SendPropertyChanged("Provision");
                    this.OnProvisionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankID", DbType = "Int NOT NULL")]
        public int BankID
        {
            get
            {
                return this._BankID;
            }
            set
            {
                if ((this._BankID != value))
                {
                    if (this._Bank.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBankIDChanging(value);
                    this.SendPropertyChanging();
                    this._BankID = value;
                    this.SendPropertyChanged("BankID");
                    this.OnBankIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "ProvisionRate_Slip", Storage = "_Slips", ThisKey = "ID", OtherKey = "ProvisionRateID")]
        public EntitySet<Slip> Slips
        {
            get
            {
                return this._Slips;
            }
            set
            {
                this._Slips.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_ProvisionRate", Storage = "_Bank", ThisKey = "BankID", OtherKey = "ID", IsForeignKey = true)]
        public Bank Bank
        {
            get
            {
                return this._Bank.Entity;
            }
            set
            {
                Bank previousValue = this._Bank.Entity;
                if (((previousValue != value)
                            || (this._Bank.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Bank.Entity = null;
                        previousValue.ProvisionRates.Remove(this);
                    }
                    this._Bank.Entity = value;
                    if ((value != null))
                    {
                        value.ProvisionRates.Add(this);
                        this._BankID = value.ID;
                    }
                    else
                    {
                        this._BankID = default(int);
                    }
                    this.SendPropertyChanged("Bank");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Slips(Slip entity)
        {
            this.SendPropertyChanging();
            entity.ProvisionRate = this;
        }

        private void detach_Slips(Slip entity)
        {
            this.SendPropertyChanging();
            entity.ProvisionRate = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RateDealInsuranceSubTypes")]
    public partial class RateDealInsuranceSubType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _RateDealID;

        private int _InsuranceSubTypeID;

        private int _NumberOfRates;

        private decimal _FromValue;

        private decimal _ToValue;

        private EntitySet<PolicyItem> _PolicyItems;

        private EntityRef<InsuranceSubType> _InsuranceSubType;

        private EntityRef<RateDeal> _RateDeal;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnRateDealIDChanging(int value);
        partial void OnRateDealIDChanged();
        partial void OnInsuranceSubTypeIDChanging(int value);
        partial void OnInsuranceSubTypeIDChanged();
        partial void OnNumberOfRatesChanging(int value);
        partial void OnNumberOfRatesChanged();
        partial void OnFromValueChanging(decimal value);
        partial void OnFromValueChanged();
        partial void OnToValueChanging(decimal value);
        partial void OnToValueChanged();
        #endregion

        public RateDealInsuranceSubType()
        {
            this._PolicyItems = new EntitySet<PolicyItem>(new Action<PolicyItem>(this.attach_PolicyItems), new Action<PolicyItem>(this.detach_PolicyItems));
            this._InsuranceSubType = default(EntityRef<InsuranceSubType>);
            this._RateDeal = default(EntityRef<RateDeal>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RateDealID", DbType = "Int NOT NULL")]
        public int RateDealID
        {
            get
            {
                return this._RateDealID;
            }
            set
            {
                if ((this._RateDealID != value))
                {
                    if (this._RateDeal.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnRateDealIDChanging(value);
                    this.SendPropertyChanging();
                    this._RateDealID = value;
                    this.SendPropertyChanged("RateDealID");
                    this.OnRateDealIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    if (this._InsuranceSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceSubTypeID = value;
                    this.SendPropertyChanged("InsuranceSubTypeID");
                    this.OnInsuranceSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NumberOfRates", DbType = "Int NOT NULL")]
        public int NumberOfRates
        {
            get
            {
                return this._NumberOfRates;
            }
            set
            {
                if ((this._NumberOfRates != value))
                {
                    this.OnNumberOfRatesChanging(value);
                    this.SendPropertyChanging();
                    this._NumberOfRates = value;
                    this.SendPropertyChanged("NumberOfRates");
                    this.OnNumberOfRatesChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal FromValue
        {
            get
            {
                return this._FromValue;
            }
            set
            {
                if ((this._FromValue != value))
                {
                    this.OnFromValueChanging(value);
                    this.SendPropertyChanging();
                    this._FromValue = value;
                    this.SendPropertyChanged("FromValue");
                    this.OnFromValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal ToValue
        {
            get
            {
                return this._ToValue;
            }
            set
            {
                if ((this._ToValue != value))
                {
                    this.OnToValueChanging(value);
                    this.SendPropertyChanging();
                    this._ToValue = value;
                    this.SendPropertyChanged("ToValue");
                    this.OnToValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RateDealInsuranceSubType_PolicyItem", Storage = "_PolicyItems", ThisKey = "ID", OtherKey = "RateDealInsuranceSubTypeID")]
        public EntitySet<PolicyItem> PolicyItems
        {
            get
            {
                return this._PolicyItems;
            }
            set
            {
                this._PolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceSubType_RateDealInsuranceSubType", Storage = "_InsuranceSubType", ThisKey = "InsuranceSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceSubType InsuranceSubType
        {
            get
            {
                return this._InsuranceSubType.Entity;
            }
            set
            {
                InsuranceSubType previousValue = this._InsuranceSubType.Entity;
                if (((previousValue != value)
                            || (this._InsuranceSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceSubType.Entity = null;
                        previousValue.RateDealInsuranceSubTypes.Remove(this);
                    }
                    this._InsuranceSubType.Entity = value;
                    if ((value != null))
                    {
                        value.RateDealInsuranceSubTypes.Add(this);
                        this._InsuranceSubTypeID = value.ID;
                    }
                    else
                    {
                        this._InsuranceSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceSubType");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RateDeal_RateDealInsuranceSubType", Storage = "_RateDeal", ThisKey = "RateDealID", OtherKey = "ID", IsForeignKey = true)]
        public RateDeal RateDeal
        {
            get
            {
                return this._RateDeal.Entity;
            }
            set
            {
                RateDeal previousValue = this._RateDeal.Entity;
                if (((previousValue != value)
                            || (this._RateDeal.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._RateDeal.Entity = null;
                        previousValue.RateDealInsuranceSubTypes.Remove(this);
                    }
                    this._RateDeal.Entity = value;
                    if ((value != null))
                    {
                        value.RateDealInsuranceSubTypes.Add(this);
                        this._RateDealID = value.ID;
                    }
                    else
                    {
                        this._RateDealID = default(int);
                    }
                    this.SendPropertyChanged("RateDeal");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.RateDealInsuranceSubType = this;
        }

        private void detach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.RateDealInsuranceSubType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RateDeals")]
    public partial class RateDeal : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ClientID;

        private string _DealNumber;

        private System.DateTime _FromDate;

        private System.DateTime _ToDate;

        private System.DateTime _DealDate;

        private bool _IsActive;

        private EntitySet<RateDealInsuranceSubType> _RateDealInsuranceSubTypes;

        private EntityRef<Client> _Client;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnClientIDChanging(int value);
        partial void OnClientIDChanged();
        partial void OnDealNumberChanging(string value);
        partial void OnDealNumberChanged();
        partial void OnFromDateChanging(System.DateTime value);
        partial void OnFromDateChanged();
        partial void OnToDateChanging(System.DateTime value);
        partial void OnToDateChanged();
        partial void OnDealDateChanging(System.DateTime value);
        partial void OnDealDateChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public RateDeal()
        {
            this._RateDealInsuranceSubTypes = new EntitySet<RateDealInsuranceSubType>(new Action<RateDealInsuranceSubType>(this.attach_RateDealInsuranceSubTypes), new Action<RateDealInsuranceSubType>(this.detach_RateDealInsuranceSubTypes));
            this._Client = default(EntityRef<Client>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DealNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DealNumber
        {
            get
            {
                return this._DealNumber;
            }
            set
            {
                if ((this._DealNumber != value))
                {
                    this.OnDealNumberChanging(value);
                    this.SendPropertyChanging();
                    this._DealNumber = value;
                    this.SendPropertyChanged("DealNumber");
                    this.OnDealNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if ((this._FromDate != value))
                {
                    this.OnFromDateChanging(value);
                    this.SendPropertyChanging();
                    this._FromDate = value;
                    this.SendPropertyChanged("FromDate");
                    this.OnFromDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if ((this._ToDate != value))
                {
                    this.OnToDateChanging(value);
                    this.SendPropertyChanging();
                    this._ToDate = value;
                    this.SendPropertyChanged("ToDate");
                    this.OnToDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DealDate", DbType = "DateTime NOT NULL")]
        public System.DateTime DealDate
        {
            get
            {
                return this._DealDate;
            }
            set
            {
                if ((this._DealDate != value))
                {
                    this.OnDealDateChanging(value);
                    this.SendPropertyChanging();
                    this._DealDate = value;
                    this.SendPropertyChanged("DealDate");
                    this.OnDealDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RateDeal_RateDealInsuranceSubType", Storage = "_RateDealInsuranceSubTypes", ThisKey = "ID", OtherKey = "RateDealID")]
        public EntitySet<RateDealInsuranceSubType> RateDealInsuranceSubTypes
        {
            get
            {
                return this._RateDealInsuranceSubTypes;
            }
            set
            {
                this._RateDealInsuranceSubTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_RateDeal", Storage = "_Client", ThisKey = "ClientID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if (((previousValue != value)
                            || (this._Client.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client.Entity = null;
                        previousValue.RateDeals.Remove(this);
                    }
                    this._Client.Entity = value;
                    if ((value != null))
                    {
                        value.RateDeals.Add(this);
                        this._ClientID = value.ID;
                    }
                    else
                    {
                        this._ClientID = default(int);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_RateDealInsuranceSubTypes(RateDealInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.RateDeal = this;
        }

        private void detach_RateDealInsuranceSubTypes(RateDealInsuranceSubType entity)
        {
            this.SendPropertyChanging();
            entity.RateDeal = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Rates")]
    public partial class Rate : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _Number;

        private System.DateTime _Date;

        private decimal _Value;

        private decimal _BrokerageValue;

        private decimal _PaidValue;

        private int _PolicyItemID;

        private EntitySet<Payment> _Payments;

        private EntityRef<PolicyItem> _PolicyItem;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnValueChanging(decimal value);
        partial void OnValueChanged();
        partial void OnBrokerageValueChanging(decimal value);
        partial void OnBrokerageValueChanged();
        partial void OnPaidValueChanging(decimal value);
        partial void OnPaidValueChanged();
        partial void OnPolicyItemIDChanging(int value);
        partial void OnPolicyItemIDChanged();
        #endregion

        public Rate()
        {
            this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
            this._PolicyItem = default(EntityRef<PolicyItem>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "Int NOT NULL")]
        public int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "Decimal(18,2) NOT NULL")]
        public decimal Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this.OnBrokerageValueChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageValue = value;
                    this.SendPropertyChanged("BrokerageValue");
                    this.OnBrokerageValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaidValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PaidValue
        {
            get
            {
                return this._PaidValue;
            }
            set
            {
                if ((this._PaidValue != value))
                {
                    this.OnPaidValueChanging(value);
                    this.SendPropertyChanging();
                    this._PaidValue = value;
                    this.SendPropertyChanged("PaidValue");
                    this.OnPaidValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL")]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    if (this._PolicyItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPolicyItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyItemID = value;
                    this.SendPropertyChanged("PolicyItemID");
                    this.OnPolicyItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Rate_Payment", Storage = "_Payments", ThisKey = "ID", OtherKey = "RateID")]
        public EntitySet<Payment> Payments
        {
            get
            {
                return this._Payments;
            }
            set
            {
                this._Payments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_Rate", Storage = "_PolicyItem", ThisKey = "PolicyItemID", OtherKey = "ID", IsForeignKey = true)]
        public PolicyItem PolicyItem
        {
            get
            {
                return this._PolicyItem.Entity;
            }
            set
            {
                PolicyItem previousValue = this._PolicyItem.Entity;
                if (((previousValue != value)
                            || (this._PolicyItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PolicyItem.Entity = null;
                        previousValue.Rates.Remove(this);
                    }
                    this._PolicyItem.Entity = value;
                    if ((value != null))
                    {
                        value.Rates.Add(this);
                        this._PolicyItemID = value.ID;
                    }
                    else
                    {
                        this._PolicyItemID = default(int);
                    }
                    this.SendPropertyChanged("PolicyItem");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.Rate = this;
        }

        private void detach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.Rate = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RestrictionsRestrictionRollBacks")]
    public partial class RestrictionsRestrictionRollBack : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _RestrictionRollBackID;

        private int _RestrictionID;

        private EntityRef<RestrictionsRollBackDistribution> _RestrictionsRollBackDistribution;

        private EntityRef<RightRestriction> _RightRestriction;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnRestrictionRollBackIDChanging(int value);
        partial void OnRestrictionRollBackIDChanged();
        partial void OnRestrictionIDChanging(int value);
        partial void OnRestrictionIDChanged();
        #endregion

        public RestrictionsRestrictionRollBack()
        {
            this._RestrictionsRollBackDistribution = default(EntityRef<RestrictionsRollBackDistribution>);
            this._RightRestriction = default(EntityRef<RightRestriction>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RestrictionRollBackID", DbType = "Int NOT NULL")]
        public int RestrictionRollBackID
        {
            get
            {
                return this._RestrictionRollBackID;
            }
            set
            {
                if ((this._RestrictionRollBackID != value))
                {
                    if (this._RestrictionsRollBackDistribution.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnRestrictionRollBackIDChanging(value);
                    this.SendPropertyChanging();
                    this._RestrictionRollBackID = value;
                    this.SendPropertyChanged("RestrictionRollBackID");
                    this.OnRestrictionRollBackIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RestrictionID", DbType = "Int NOT NULL")]
        public int RestrictionID
        {
            get
            {
                return this._RestrictionID;
            }
            set
            {
                if ((this._RestrictionID != value))
                {
                    if (this._RightRestriction.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnRestrictionIDChanging(value);
                    this.SendPropertyChanging();
                    this._RestrictionID = value;
                    this.SendPropertyChanged("RestrictionID");
                    this.OnRestrictionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RestrictionsRollBackDistribution_RestrictionsRestrictionRollBack", Storage = "_RestrictionsRollBackDistribution", ThisKey = "RestrictionRollBackID", OtherKey = "ID", IsForeignKey = true)]
        public RestrictionsRollBackDistribution RestrictionsRollBackDistribution
        {
            get
            {
                return this._RestrictionsRollBackDistribution.Entity;
            }
            set
            {
                RestrictionsRollBackDistribution previousValue = this._RestrictionsRollBackDistribution.Entity;
                if (((previousValue != value)
                            || (this._RestrictionsRollBackDistribution.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._RestrictionsRollBackDistribution.Entity = null;
                        previousValue.RestrictionsRestrictionRollBacks.Remove(this);
                    }
                    this._RestrictionsRollBackDistribution.Entity = value;
                    if ((value != null))
                    {
                        value.RestrictionsRestrictionRollBacks.Add(this);
                        this._RestrictionRollBackID = value.ID;
                    }
                    else
                    {
                        this._RestrictionRollBackID = default(int);
                    }
                    this.SendPropertyChanged("RestrictionsRollBackDistribution");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RightRestriction_RestrictionsRestrictionRollBack", Storage = "_RightRestriction", ThisKey = "RestrictionID", OtherKey = "ID", IsForeignKey = true)]
        public RightRestriction RightRestriction
        {
            get
            {
                return this._RightRestriction.Entity;
            }
            set
            {
                RightRestriction previousValue = this._RightRestriction.Entity;
                if (((previousValue != value)
                            || (this._RightRestriction.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._RightRestriction.Entity = null;
                        previousValue.RestrictionsRestrictionRollBacks.Remove(this);
                    }
                    this._RightRestriction.Entity = value;
                    if ((value != null))
                    {
                        value.RestrictionsRestrictionRollBacks.Add(this);
                        this._RestrictionID = value.ID;
                    }
                    else
                    {
                        this._RestrictionID = default(int);
                    }
                    this.SendPropertyChanged("RightRestriction");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RestrictionsRollBackDistributions")]
    public partial class RestrictionsRollBackDistribution : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _Number;

        private int _InsuranceCompanyID;

        private System.DateTime _Date;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private EntitySet<RestrictionsRestrictionRollBack> _RestrictionsRestrictionRollBacks;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnStartDateChanging(System.DateTime value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime value);
        partial void OnEndDateChanged();
        #endregion

        public RestrictionsRollBackDistribution()
        {
            this._RestrictionsRestrictionRollBacks = new EntitySet<RestrictionsRestrictionRollBack>(new Action<RestrictionsRestrictionRollBack>(this.attach_RestrictionsRestrictionRollBacks), new Action<RestrictionsRestrictionRollBack>(this.detach_RestrictionsRestrictionRollBacks));
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "Int NOT NULL")]
        public int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", AutoSync = AutoSync.Always, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true)]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "DateTime NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "DateTime NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RestrictionsRollBackDistribution_RestrictionsRestrictionRollBack", Storage = "_RestrictionsRestrictionRollBacks", ThisKey = "ID", OtherKey = "RestrictionRollBackID")]
        public EntitySet<RestrictionsRestrictionRollBack> RestrictionsRestrictionRollBacks
        {
            get
            {
                return this._RestrictionsRestrictionRollBacks;
            }
            set
            {
                this._RestrictionsRestrictionRollBacks.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_RestrictionsRollBackDistribution", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.RestrictionsRollBackDistributions.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.RestrictionsRollBackDistributions.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_RestrictionsRestrictionRollBacks(RestrictionsRestrictionRollBack entity)
        {
            this.SendPropertyChanging();
            entity.RestrictionsRollBackDistribution = this;
        }

        private void detach_RestrictionsRestrictionRollBacks(RestrictionsRestrictionRollBack entity)
        {
            this.SendPropertyChanging();
            entity.RestrictionsRollBackDistribution = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RightRestrictionDistributions")]
    public partial class RightRestrictionDistribution : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _InsuranceCompanyID;

        private System.DateTime _Date;

        private string _Number;

        private bool _IsUsed;

        private int _UserID;

        private int _DocumentTypeID;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnNumberChanging(string value);
        partial void OnNumberChanged();
        partial void OnIsUsedChanging(bool value);
        partial void OnIsUsedChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnDocumentTypeIDChanging(int value);
        partial void OnDocumentTypeIDChanged();
        #endregion

        public RightRestrictionDistribution()
        {
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsUsed", DbType = "Bit NOT NULL")]
        public bool IsUsed
        {
            get
            {
                return this._IsUsed;
            }
            set
            {
                if ((this._IsUsed != value))
                {
                    this.OnIsUsedChanging(value);
                    this.SendPropertyChanging();
                    this._IsUsed = value;
                    this.SendPropertyChanged("IsUsed");
                    this.OnIsUsedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentTypeID", DbType = "Int NOT NULL")]
        public int DocumentTypeID
        {
            get
            {
                return this._DocumentTypeID;
            }
            set
            {
                if ((this._DocumentTypeID != value))
                {
                    this.OnDocumentTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentTypeID = value;
                    this.SendPropertyChanged("DocumentTypeID");
                    this.OnDocumentTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_RightRestrictionDistribution", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.RightRestrictionDistributions.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.RightRestrictionDistributions.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_RightRestrictionDistribution", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.RightRestrictionDistributions.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.RightRestrictionDistributions.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RightRestrictions")]
    public partial class RightRestriction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Number;

        private System.Nullable<int> _BankID;

        private string _RigthOwner;

        private decimal _Value;

        private System.DateTime _ApplicationDate;

        private int _PolicyItemID;

        private string _Description;

        private bool _Discard;

        private int _InsuranceCompanyID;

        private bool _IsRollBacked;

        private EntitySet<RestrictionsRestrictionRollBack> _RestrictionsRestrictionRollBacks;

        private EntityRef<Bank> _Bank;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<PolicyItem> _PolicyItem;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNumberChanging(string value);
        partial void OnNumberChanged();
        partial void OnBankIDChanging(System.Nullable<int> value);
        partial void OnBankIDChanged();
        partial void OnRigthOwnerChanging(string value);
        partial void OnRigthOwnerChanged();
        partial void OnValueChanging(decimal value);
        partial void OnValueChanged();
        partial void OnApplicationDateChanging(System.DateTime value);
        partial void OnApplicationDateChanged();
        partial void OnPolicyItemIDChanging(int value);
        partial void OnPolicyItemIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDiscardChanging(bool value);
        partial void OnDiscardChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnIsRollBackedChanging(bool value);
        partial void OnIsRollBackedChanged();
        #endregion

        public RightRestriction()
        {
            this._RestrictionsRestrictionRollBacks = new EntitySet<RestrictionsRestrictionRollBack>(new Action<RestrictionsRestrictionRollBack>(this.attach_RestrictionsRestrictionRollBacks), new Action<RestrictionsRestrictionRollBack>(this.detach_RestrictionsRestrictionRollBacks));
            this._Bank = default(EntityRef<Bank>);
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._PolicyItem = default(EntityRef<PolicyItem>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankID", DbType = "Int")]
        public System.Nullable<int> BankID
        {
            get
            {
                return this._BankID;
            }
            set
            {
                if ((this._BankID != value))
                {
                    if (this._Bank.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBankIDChanging(value);
                    this.SendPropertyChanging();
                    this._BankID = value;
                    this.SendPropertyChanged("BankID");
                    this.OnBankIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RigthOwner", DbType = "NVarChar(200)")]
        public string RigthOwner
        {
            get
            {
                return this._RigthOwner;
            }
            set
            {
                if ((this._RigthOwner != value))
                {
                    this.OnRigthOwnerChanging(value);
                    this.SendPropertyChanging();
                    this._RigthOwner = value;
                    this.SendPropertyChanged("RigthOwner");
                    this.OnRigthOwnerChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Value", DbType = "Decimal(18,2) NOT NULL")]
        public decimal Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if ((this._Value != value))
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ApplicationDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ApplicationDate
        {
            get
            {
                return this._ApplicationDate;
            }
            set
            {
                if ((this._ApplicationDate != value))
                {
                    this.OnApplicationDateChanging(value);
                    this.SendPropertyChanging();
                    this._ApplicationDate = value;
                    this.SendPropertyChanged("ApplicationDate");
                    this.OnApplicationDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL")]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    if (this._PolicyItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPolicyItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyItemID = value;
                    this.SendPropertyChanged("PolicyItemID");
                    this.OnPolicyItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Discard", DbType = "Bit NOT NULL")]
        public bool Discard
        {
            get
            {
                return this._Discard;
            }
            set
            {
                if ((this._Discard != value))
                {
                    this.OnDiscardChanging(value);
                    this.SendPropertyChanging();
                    this._Discard = value;
                    this.SendPropertyChanged("Discard");
                    this.OnDiscardChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsRollBacked", DbType = "Bit NOT NULL")]
        public bool IsRollBacked
        {
            get
            {
                return this._IsRollBacked;
            }
            set
            {
                if ((this._IsRollBacked != value))
                {
                    this.OnIsRollBackedChanging(value);
                    this.SendPropertyChanging();
                    this._IsRollBacked = value;
                    this.SendPropertyChanged("IsRollBacked");
                    this.OnIsRollBackedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RightRestriction_RestrictionsRestrictionRollBack", Storage = "_RestrictionsRestrictionRollBacks", ThisKey = "ID", OtherKey = "RestrictionID")]
        public EntitySet<RestrictionsRestrictionRollBack> RestrictionsRestrictionRollBacks
        {
            get
            {
                return this._RestrictionsRestrictionRollBacks;
            }
            set
            {
                this._RestrictionsRestrictionRollBacks.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_RightRestriction", Storage = "_Bank", ThisKey = "BankID", OtherKey = "ID", IsForeignKey = true)]
        public Bank Bank
        {
            get
            {
                return this._Bank.Entity;
            }
            set
            {
                Bank previousValue = this._Bank.Entity;
                if (((previousValue != value)
                            || (this._Bank.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Bank.Entity = null;
                        previousValue.RightRestrictions.Remove(this);
                    }
                    this._Bank.Entity = value;
                    if ((value != null))
                    {
                        value.RightRestrictions.Add(this);
                        this._BankID = value.ID;
                    }
                    else
                    {
                        this._BankID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Bank");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_RightRestriction", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.RightRestrictions.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.RightRestrictions.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_RightRestriction", Storage = "_PolicyItem", ThisKey = "PolicyItemID", OtherKey = "ID", IsForeignKey = true)]
        public PolicyItem PolicyItem
        {
            get
            {
                return this._PolicyItem.Entity;
            }
            set
            {
                PolicyItem previousValue = this._PolicyItem.Entity;
                if (((previousValue != value)
                            || (this._PolicyItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PolicyItem.Entity = null;
                        previousValue.RightRestrictions.Remove(this);
                    }
                    this._PolicyItem.Entity = value;
                    if ((value != null))
                    {
                        value.RightRestrictions.Add(this);
                        this._PolicyItemID = value.ID;
                    }
                    else
                    {
                        this._PolicyItemID = default(int);
                    }
                    this.SendPropertyChanged("PolicyItem");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_RestrictionsRestrictionRollBacks(RestrictionsRestrictionRollBack entity)
        {
            this.SendPropertyChanging();
            entity.RightRestriction = this;
        }

        private void detach_RestrictionsRestrictionRollBacks(RestrictionsRestrictionRollBack entity)
        {
            this.SendPropertyChanging();
            entity.RightRestriction = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Roles")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Description;

        private string _Name;

        private bool _IsVisible;

        private EntitySet<RolesFunction> _RolesFunctions;

        private EntitySet<User> _Users;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnIsVisibleChanging(bool value);
        partial void OnIsVisibleChanged();
        #endregion

        public Role()
        {
            this._RolesFunctions = new EntitySet<RolesFunction>(new Action<RolesFunction>(this.attach_RolesFunctions), new Action<RolesFunction>(this.detach_RolesFunctions));
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsVisible", DbType = "Bit NOT NULL")]
        public bool IsVisible
        {
            get
            {
                return this._IsVisible;
            }
            set
            {
                if ((this._IsVisible != value))
                {
                    this.OnIsVisibleChanging(value);
                    this.SendPropertyChanging();
                    this._IsVisible = value;
                    this.SendPropertyChanged("IsVisible");
                    this.OnIsVisibleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Role_RolesFunction", Storage = "_RolesFunctions", ThisKey = "ID", OtherKey = "RoleID")]
        public EntitySet<RolesFunction> RolesFunctions
        {
            get
            {
                return this._RolesFunctions;
            }
            set
            {
                this._RolesFunctions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Role_User", Storage = "_Users", ThisKey = "ID", OtherKey = "RoleID")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_RolesFunctions(RolesFunction entity)
        {
            this.SendPropertyChanging();
            entity.Role = this;
        }

        private void detach_RolesFunctions(RolesFunction entity)
        {
            this.SendPropertyChanging();
            entity.Role = null;
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging();
            entity.Role = this;
        }

        private void detach_Users(User entity)
        {
            this.SendPropertyChanging();
            entity.Role = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RolesFunctions")]
    public partial class RolesFunction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _RoleID;

        private int _FunctionID;

        private EntityRef<Function> _Function;

        private EntityRef<Role> _Role;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRoleIDChanging(int value);
        partial void OnRoleIDChanged();
        partial void OnFunctionIDChanging(int value);
        partial void OnFunctionIDChanged();
        #endregion

        public RolesFunction()
        {
            this._Function = default(EntityRef<Function>);
            this._Role = default(EntityRef<Role>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RoleID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if ((this._RoleID != value))
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnRoleIDChanging(value);
                    this.SendPropertyChanging();
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FunctionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int FunctionID
        {
            get
            {
                return this._FunctionID;
            }
            set
            {
                if ((this._FunctionID != value))
                {
                    if (this._Function.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFunctionIDChanging(value);
                    this.SendPropertyChanging();
                    this._FunctionID = value;
                    this.SendPropertyChanged("FunctionID");
                    this.OnFunctionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Function_RolesFunction", Storage = "_Function", ThisKey = "FunctionID", OtherKey = "ID", IsForeignKey = true)]
        public Function Function
        {
            get
            {
                return this._Function.Entity;
            }
            set
            {
                Function previousValue = this._Function.Entity;
                if (((previousValue != value)
                            || (this._Function.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Function.Entity = null;
                        previousValue.RolesFunctions.Remove(this);
                    }
                    this._Function.Entity = value;
                    if ((value != null))
                    {
                        value.RolesFunctions.Add(this);
                        this._FunctionID = value.ID;
                    }
                    else
                    {
                        this._FunctionID = default(int);
                    }
                    this.SendPropertyChanged("Function");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Role_RolesFunction", Storage = "_Role", ThisKey = "RoleID", OtherKey = "ID", IsForeignKey = true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if (((previousValue != value)
                            || (this._Role.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Role.Entity = null;
                        previousValue.RolesFunctions.Remove(this);
                    }
                    this._Role.Entity = value;
                    if ((value != null))
                    {
                        value.RolesFunctions.Add(this);
                        this._RoleID = value.ID;
                    }
                    else
                    {
                        this._RoleID = default(int);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RollBackDistributionItemPolicyItems")]
    public partial class RollBackDistributionItemPolicyItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _RollbackDisrtibutionItemID;

        private int _PolicyItemID;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRollbackDisrtibutionItemIDChanging(int value);
        partial void OnRollbackDisrtibutionItemIDChanged();
        partial void OnPolicyItemIDChanging(int value);
        partial void OnPolicyItemIDChanged();
        #endregion

        public RollBackDistributionItemPolicyItem()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RollbackDisrtibutionItemID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int RollbackDisrtibutionItemID
        {
            get
            {
                return this._RollbackDisrtibutionItemID;
            }
            set
            {
                if ((this._RollbackDisrtibutionItemID != value))
                {
                    this.OnRollbackDisrtibutionItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._RollbackDisrtibutionItemID = value;
                    this.SendPropertyChanged("RollbackDisrtibutionItemID");
                    this.OnRollbackDisrtibutionItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    this.OnPolicyItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyItemID = value;
                    this.SendPropertyChanged("PolicyItemID");
                    this.OnPolicyItemIDChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RollBackDistributionItems")]
    public partial class RollBackDistributionItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _RollBackDistributionID;

        private int _PolicyItemID;

        private EntityRef<PolicyItem> _PolicyItem;

        private EntityRef<RollBackDistribution> _RollBackDistribution;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnRollBackDistributionIDChanging(int value);
        partial void OnRollBackDistributionIDChanged();
        partial void OnPolicyItemIDChanging(int value);
        partial void OnPolicyItemIDChanged();
        #endregion

        public RollBackDistributionItem()
        {
            this._PolicyItem = default(EntityRef<PolicyItem>);
            this._RollBackDistribution = default(EntityRef<RollBackDistribution>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RollBackDistributionID", DbType = "Int NOT NULL")]
        public int RollBackDistributionID
        {
            get
            {
                return this._RollBackDistributionID;
            }
            set
            {
                if ((this._RollBackDistributionID != value))
                {
                    if (this._RollBackDistribution.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnRollBackDistributionIDChanging(value);
                    this.SendPropertyChanging();
                    this._RollBackDistributionID = value;
                    this.SendPropertyChanged("RollBackDistributionID");
                    this.OnRollBackDistributionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL")]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    if (this._PolicyItem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPolicyItemIDChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyItemID = value;
                    this.SendPropertyChanged("PolicyItemID");
                    this.OnPolicyItemIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "PolicyItem_RollBackDistributionItem", Storage = "_PolicyItem", ThisKey = "PolicyItemID", OtherKey = "ID", IsForeignKey = true)]
        public PolicyItem PolicyItem
        {
            get
            {
                return this._PolicyItem.Entity;
            }
            set
            {
                PolicyItem previousValue = this._PolicyItem.Entity;
                if (((previousValue != value)
                            || (this._PolicyItem.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PolicyItem.Entity = null;
                        previousValue.RollBackDistributionItems.Remove(this);
                    }
                    this._PolicyItem.Entity = value;
                    if ((value != null))
                    {
                        value.RollBackDistributionItems.Add(this);
                        this._PolicyItemID = value.ID;
                    }
                    else
                    {
                        this._PolicyItemID = default(int);
                    }
                    this.SendPropertyChanged("PolicyItem");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RollBackDistribution_RollBackDistributionItem", Storage = "_RollBackDistribution", ThisKey = "RollBackDistributionID", OtherKey = "ID", IsForeignKey = true)]
        public RollBackDistribution RollBackDistribution
        {
            get
            {
                return this._RollBackDistribution.Entity;
            }
            set
            {
                RollBackDistribution previousValue = this._RollBackDistribution.Entity;
                if (((previousValue != value)
                            || (this._RollBackDistribution.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._RollBackDistribution.Entity = null;
                        previousValue.RollBackDistributionItems.Remove(this);
                    }
                    this._RollBackDistribution.Entity = value;
                    if ((value != null))
                    {
                        value.RollBackDistributionItems.Add(this);
                        this._RollBackDistributionID = value.ID;
                    }
                    else
                    {
                        this._RollBackDistributionID = default(int);
                    }
                    this.SendPropertyChanged("RollBackDistribution");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RollBackDistributionParentships")]
    public partial class RollBackDistributionParentship : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _BranchRollBackID;

        private int _MainRollBackID;

        private EntityRef<RollBackDistribution> _RollBackDistribution;

        private EntityRef<RollBackDistribution> _RollBackDistribution1;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBranchRollBackIDChanging(int value);
        partial void OnBranchRollBackIDChanged();
        partial void OnMainRollBackIDChanging(int value);
        partial void OnMainRollBackIDChanged();
        #endregion

        public RollBackDistributionParentship()
        {
            this._RollBackDistribution = default(EntityRef<RollBackDistribution>);
            this._RollBackDistribution1 = default(EntityRef<RollBackDistribution>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchRollBackID", DbType = "Int NOT NULL")]
        public int BranchRollBackID
        {
            get
            {
                return this._BranchRollBackID;
            }
            set
            {
                if ((this._BranchRollBackID != value))
                {
                    if (this._RollBackDistribution.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBranchRollBackIDChanging(value);
                    this.SendPropertyChanging();
                    this._BranchRollBackID = value;
                    this.SendPropertyChanged("BranchRollBackID");
                    this.OnBranchRollBackIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MainRollBackID", DbType = "Int NOT NULL")]
        public int MainRollBackID
        {
            get
            {
                return this._MainRollBackID;
            }
            set
            {
                if ((this._MainRollBackID != value))
                {
                    if (this._RollBackDistribution1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnMainRollBackIDChanging(value);
                    this.SendPropertyChanging();
                    this._MainRollBackID = value;
                    this.SendPropertyChanged("MainRollBackID");
                    this.OnMainRollBackIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RollBackDistribution_RollBackDistributionParentship", Storage = "_RollBackDistribution", ThisKey = "BranchRollBackID", OtherKey = "ID", IsForeignKey = true)]
        public RollBackDistribution RollBackDistribution
        {
            get
            {
                return this._RollBackDistribution.Entity;
            }
            set
            {
                RollBackDistribution previousValue = this._RollBackDistribution.Entity;
                if (((previousValue != value)
                            || (this._RollBackDistribution.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._RollBackDistribution.Entity = null;
                        previousValue.RollBackDistributionParentships.Remove(this);
                    }
                    this._RollBackDistribution.Entity = value;
                    if ((value != null))
                    {
                        value.RollBackDistributionParentships.Add(this);
                        this._BranchRollBackID = value.ID;
                    }
                    else
                    {
                        this._BranchRollBackID = default(int);
                    }
                    this.SendPropertyChanged("RollBackDistribution");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RollBackDistribution_RollBackDistributionParentship1", Storage = "_RollBackDistribution1", ThisKey = "MainRollBackID", OtherKey = "ID", IsForeignKey = true)]
        public RollBackDistribution RollBackDistribution1
        {
            get
            {
                return this._RollBackDistribution1.Entity;
            }
            set
            {
                RollBackDistribution previousValue = this._RollBackDistribution1.Entity;
                if (((previousValue != value)
                            || (this._RollBackDistribution1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._RollBackDistribution1.Entity = null;
                        previousValue.RollBackDistributionParentships1.Remove(this);
                    }
                    this._RollBackDistribution1.Entity = value;
                    if ((value != null))
                    {
                        value.RollBackDistributionParentships1.Add(this);
                        this._MainRollBackID = value.ID;
                    }
                    else
                    {
                        this._MainRollBackID = default(int);
                    }
                    this.SendPropertyChanged("RollBackDistribution1");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RollBackDistributions")]
    public partial class RollBackDistribution : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _Number;

        private int _InsuranceCompanyID;

        private System.DateTime _Date;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private decimal _TotalValue;

        private decimal _BrokerageValue;

        private System.Nullable<int> _BranchID;

        private int _UserID;

        private int _RollBackStatusID;

        private EntitySet<RollBackDistributionItem> _RollBackDistributionItems;

        private EntitySet<RollBackDistributionParentship> _RollBackDistributionParentships;

        private EntitySet<RollBackDistributionParentship> _RollBackDistributionParentships1;

        private EntityRef<Branch> _Branch;

        private EntityRef<InsuranceCompany> _InsuranceCompany;

        private EntityRef<RollBackDistributionStatuse> _RollBackDistributionStatuse;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();
        partial void OnInsuranceCompanyIDChanging(int value);
        partial void OnInsuranceCompanyIDChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnStartDateChanging(System.DateTime value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime value);
        partial void OnEndDateChanged();
        partial void OnTotalValueChanging(decimal value);
        partial void OnTotalValueChanged();
        partial void OnBrokerageValueChanging(decimal value);
        partial void OnBrokerageValueChanged();
        partial void OnBranchIDChanging(System.Nullable<int> value);
        partial void OnBranchIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnRollBackStatusIDChanging(int value);
        partial void OnRollBackStatusIDChanged();
        #endregion

        public RollBackDistribution()
        {
            this._RollBackDistributionItems = new EntitySet<RollBackDistributionItem>(new Action<RollBackDistributionItem>(this.attach_RollBackDistributionItems), new Action<RollBackDistributionItem>(this.detach_RollBackDistributionItems));
            this._RollBackDistributionParentships = new EntitySet<RollBackDistributionParentship>(new Action<RollBackDistributionParentship>(this.attach_RollBackDistributionParentships), new Action<RollBackDistributionParentship>(this.detach_RollBackDistributionParentships));
            this._RollBackDistributionParentships1 = new EntitySet<RollBackDistributionParentship>(new Action<RollBackDistributionParentship>(this.attach_RollBackDistributionParentships1), new Action<RollBackDistributionParentship>(this.detach_RollBackDistributionParentships1));
            this._Branch = default(EntityRef<Branch>);
            this._InsuranceCompany = default(EntityRef<InsuranceCompany>);
            this._RollBackDistributionStatuse = default(EntityRef<RollBackDistributionStatuse>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "Int NOT NULL")]
        public int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    if (this._InsuranceCompany.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInsuranceCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._InsuranceCompanyID = value;
                    this.SendPropertyChanged("InsuranceCompanyID");
                    this.OnInsuranceCompanyIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "DateTime NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "DateTime NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalValue
        {
            get
            {
                return this._TotalValue;
            }
            set
            {
                if ((this._TotalValue != value))
                {
                    this.OnTotalValueChanging(value);
                    this.SendPropertyChanging();
                    this._TotalValue = value;
                    this.SendPropertyChanged("TotalValue");
                    this.OnTotalValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this.OnBrokerageValueChanging(value);
                    this.SendPropertyChanging();
                    this._BrokerageValue = value;
                    this.SendPropertyChanged("BrokerageValue");
                    this.OnBrokerageValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int")]
        public System.Nullable<int> BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBranchIDChanging(value);
                    this.SendPropertyChanging();
                    this._BranchID = value;
                    this.SendPropertyChanged("BranchID");
                    this.OnBranchIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RollBackStatusID", DbType = "Int NOT NULL")]
        public int RollBackStatusID
        {
            get
            {
                return this._RollBackStatusID;
            }
            set
            {
                if ((this._RollBackStatusID != value))
                {
                    if (this._RollBackDistributionStatuse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnRollBackStatusIDChanging(value);
                    this.SendPropertyChanging();
                    this._RollBackStatusID = value;
                    this.SendPropertyChanged("RollBackStatusID");
                    this.OnRollBackStatusIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RollBackDistribution_RollBackDistributionItem", Storage = "_RollBackDistributionItems", ThisKey = "ID", OtherKey = "RollBackDistributionID")]
        public EntitySet<RollBackDistributionItem> RollBackDistributionItems
        {
            get
            {
                return this._RollBackDistributionItems;
            }
            set
            {
                this._RollBackDistributionItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RollBackDistribution_RollBackDistributionParentship", Storage = "_RollBackDistributionParentships", ThisKey = "ID", OtherKey = "BranchRollBackID")]
        public EntitySet<RollBackDistributionParentship> RollBackDistributionParentships
        {
            get
            {
                return this._RollBackDistributionParentships;
            }
            set
            {
                this._RollBackDistributionParentships.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RollBackDistribution_RollBackDistributionParentship1", Storage = "_RollBackDistributionParentships1", ThisKey = "ID", OtherKey = "MainRollBackID")]
        public EntitySet<RollBackDistributionParentship> RollBackDistributionParentships1
        {
            get
            {
                return this._RollBackDistributionParentships1;
            }
            set
            {
                this._RollBackDistributionParentships1.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_RollBackDistribution", Storage = "_Branch", ThisKey = "BranchID", OtherKey = "ID", IsForeignKey = true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if (((previousValue != value)
                            || (this._Branch.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Branch.Entity = null;
                        previousValue.RollBackDistributions.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if ((value != null))
                    {
                        value.RollBackDistributions.Add(this);
                        this._BranchID = value.ID;
                    }
                    else
                    {
                        this._BranchID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "InsuranceCompany_RollBackDistribution", Storage = "_InsuranceCompany", ThisKey = "InsuranceCompanyID", OtherKey = "ID", IsForeignKey = true)]
        public InsuranceCompany InsuranceCompany
        {
            get
            {
                return this._InsuranceCompany.Entity;
            }
            set
            {
                InsuranceCompany previousValue = this._InsuranceCompany.Entity;
                if (((previousValue != value)
                            || (this._InsuranceCompany.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._InsuranceCompany.Entity = null;
                        previousValue.RollBackDistributions.Remove(this);
                    }
                    this._InsuranceCompany.Entity = value;
                    if ((value != null))
                    {
                        value.RollBackDistributions.Add(this);
                        this._InsuranceCompanyID = value.ID;
                    }
                    else
                    {
                        this._InsuranceCompanyID = default(int);
                    }
                    this.SendPropertyChanged("InsuranceCompany");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RollBackDistributionStatuse_RollBackDistribution", Storage = "_RollBackDistributionStatuse", ThisKey = "RollBackStatusID", OtherKey = "ID", IsForeignKey = true)]
        public RollBackDistributionStatuse RollBackDistributionStatuse
        {
            get
            {
                return this._RollBackDistributionStatuse.Entity;
            }
            set
            {
                RollBackDistributionStatuse previousValue = this._RollBackDistributionStatuse.Entity;
                if (((previousValue != value)
                            || (this._RollBackDistributionStatuse.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._RollBackDistributionStatuse.Entity = null;
                        previousValue.RollBackDistributions.Remove(this);
                    }
                    this._RollBackDistributionStatuse.Entity = value;
                    if ((value != null))
                    {
                        value.RollBackDistributions.Add(this);
                        this._RollBackStatusID = value.ID;
                    }
                    else
                    {
                        this._RollBackStatusID = default(int);
                    }
                    this.SendPropertyChanged("RollBackDistributionStatuse");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_RollBackDistribution", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.RollBackDistributions.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.RollBackDistributions.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_RollBackDistributionItems(RollBackDistributionItem entity)
        {
            this.SendPropertyChanging();
            entity.RollBackDistribution = this;
        }

        private void detach_RollBackDistributionItems(RollBackDistributionItem entity)
        {
            this.SendPropertyChanging();
            entity.RollBackDistribution = null;
        }

        private void attach_RollBackDistributionParentships(RollBackDistributionParentship entity)
        {
            this.SendPropertyChanging();
            entity.RollBackDistribution = this;
        }

        private void detach_RollBackDistributionParentships(RollBackDistributionParentship entity)
        {
            this.SendPropertyChanging();
            entity.RollBackDistribution = null;
        }

        private void attach_RollBackDistributionParentships1(RollBackDistributionParentship entity)
        {
            this.SendPropertyChanging();
            entity.RollBackDistribution1 = this;
        }

        private void detach_RollBackDistributionParentships1(RollBackDistributionParentship entity)
        {
            this.SendPropertyChanging();
            entity.RollBackDistribution1 = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RollBackDistributionStatuses")]
    public partial class RollBackDistributionStatuse : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Description;

        private EntitySet<RollBackDistribution> _RollBackDistributions;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public RollBackDistributionStatuse()
        {
            this._RollBackDistributions = new EntitySet<RollBackDistribution>(new Action<RollBackDistribution>(this.attach_RollBackDistributions), new Action<RollBackDistribution>(this.detach_RollBackDistributions));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(2) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RollBackDistributionStatuse_RollBackDistribution", Storage = "_RollBackDistributions", ThisKey = "ID", OtherKey = "RollBackStatusID")]
        public EntitySet<RollBackDistribution> RollBackDistributions
        {
            get
            {
                return this._RollBackDistributions;
            }
            set
            {
                this._RollBackDistributions.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_RollBackDistributions(RollBackDistribution entity)
        {
            this.SendPropertyChanging();
            entity.RollBackDistributionStatuse = this;
        }

        private void detach_RollBackDistributions(RollBackDistribution entity)
        {
            this.SendPropertyChanging();
            entity.RollBackDistributionStatuse = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Services")]
    public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _DocumentSubTypeID;

        private decimal _Cost;

        private string _ServiceNumber;

        private System.DateTime _ServiceDate;

        private EntityRef<DocumentSubType> _DocumentSubType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDocumentSubTypeIDChanging(int value);
        partial void OnDocumentSubTypeIDChanged();
        partial void OnCostChanging(decimal value);
        partial void OnCostChanged();
        partial void OnServiceNumberChanging(string value);
        partial void OnServiceNumberChanged();
        partial void OnServiceDateChanging(System.DateTime value);
        partial void OnServiceDateChanged();
        #endregion

        public Service()
        {
            this._DocumentSubType = default(EntityRef<DocumentSubType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeID", DbType = "Int NOT NULL")]
        public int DocumentSubTypeID
        {
            get
            {
                return this._DocumentSubTypeID;
            }
            set
            {
                if ((this._DocumentSubTypeID != value))
                {
                    if (this._DocumentSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDocumentSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentSubTypeID = value;
                    this.SendPropertyChanged("DocumentSubTypeID");
                    this.OnDocumentSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Cost", DbType = "Decimal(18,2) NOT NULL")]
        public decimal Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if ((this._Cost != value))
                {
                    this.OnCostChanging(value);
                    this.SendPropertyChanging();
                    this._Cost = value;
                    this.SendPropertyChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ServiceNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ServiceNumber
        {
            get
            {
                return this._ServiceNumber;
            }
            set
            {
                if ((this._ServiceNumber != value))
                {
                    this.OnServiceNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ServiceNumber = value;
                    this.SendPropertyChanged("ServiceNumber");
                    this.OnServiceNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ServiceDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ServiceDate
        {
            get
            {
                return this._ServiceDate;
            }
            set
            {
                if ((this._ServiceDate != value))
                {
                    this.OnServiceDateChanging(value);
                    this.SendPropertyChanging();
                    this._ServiceDate = value;
                    this.SendPropertyChanged("ServiceDate");
                    this.OnServiceDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentSubType_Service", Storage = "_DocumentSubType", ThisKey = "DocumentSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public DocumentSubType DocumentSubType
        {
            get
            {
                return this._DocumentSubType.Entity;
            }
            set
            {
                DocumentSubType previousValue = this._DocumentSubType.Entity;
                if (((previousValue != value)
                            || (this._DocumentSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DocumentSubType.Entity = null;
                        previousValue.Services.Remove(this);
                    }
                    this._DocumentSubType.Entity = value;
                    if ((value != null))
                    {
                        value.Services.Add(this);
                        this._DocumentSubTypeID = value.ID;
                    }
                    else
                    {
                        this._DocumentSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("DocumentSubType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Slips")]
    public partial class Slip : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _SlipNumber;

        private decimal _TotalValue;

        private System.DateTime _Date;

        private decimal _PartialValue;

        private int _BankID;

        private int _ProvisionRateID;

        private string _PolicyNumber;

        private EntityRef<Bank> _Bank;

        private EntityRef<ProvisionRate> _ProvisionRate;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnSlipNumberChanging(string value);
        partial void OnSlipNumberChanged();
        partial void OnTotalValueChanging(decimal value);
        partial void OnTotalValueChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnPartialValueChanging(decimal value);
        partial void OnPartialValueChanged();
        partial void OnBankIDChanging(int value);
        partial void OnBankIDChanged();
        partial void OnProvisionRateIDChanging(int value);
        partial void OnProvisionRateIDChanged();
        partial void OnPolicyNumberChanging(string value);
        partial void OnPolicyNumberChanged();
        #endregion

        public Slip()
        {
            this._Bank = default(EntityRef<Bank>);
            this._ProvisionRate = default(EntityRef<ProvisionRate>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SlipNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string SlipNumber
        {
            get
            {
                return this._SlipNumber;
            }
            set
            {
                if ((this._SlipNumber != value))
                {
                    this.OnSlipNumberChanging(value);
                    this.SendPropertyChanging();
                    this._SlipNumber = value;
                    this.SendPropertyChanged("SlipNumber");
                    this.OnSlipNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalValue
        {
            get
            {
                return this._TotalValue;
            }
            set
            {
                if ((this._TotalValue != value))
                {
                    this.OnTotalValueChanging(value);
                    this.SendPropertyChanging();
                    this._TotalValue = value;
                    this.SendPropertyChanged("TotalValue");
                    this.OnTotalValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PartialValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PartialValue
        {
            get
            {
                return this._PartialValue;
            }
            set
            {
                if ((this._PartialValue != value))
                {
                    this.OnPartialValueChanging(value);
                    this.SendPropertyChanging();
                    this._PartialValue = value;
                    this.SendPropertyChanged("PartialValue");
                    this.OnPartialValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankID", DbType = "Int NOT NULL")]
        public int BankID
        {
            get
            {
                return this._BankID;
            }
            set
            {
                if ((this._BankID != value))
                {
                    if (this._Bank.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBankIDChanging(value);
                    this.SendPropertyChanging();
                    this._BankID = value;
                    this.SendPropertyChanged("BankID");
                    this.OnBankIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ProvisionRateID", DbType = "Int NOT NULL")]
        public int ProvisionRateID
        {
            get
            {
                return this._ProvisionRateID;
            }
            set
            {
                if ((this._ProvisionRateID != value))
                {
                    if (this._ProvisionRate.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnProvisionRateIDChanging(value);
                    this.SendPropertyChanging();
                    this._ProvisionRateID = value;
                    this.SendPropertyChanged("ProvisionRateID");
                    this.OnProvisionRateIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string PolicyNumber
        {
            get
            {
                return this._PolicyNumber;
            }
            set
            {
                if ((this._PolicyNumber != value))
                {
                    this.OnPolicyNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyNumber = value;
                    this.SendPropertyChanged("PolicyNumber");
                    this.OnPolicyNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Bank_Slip", Storage = "_Bank", ThisKey = "BankID", OtherKey = "ID", IsForeignKey = true)]
        public Bank Bank
        {
            get
            {
                return this._Bank.Entity;
            }
            set
            {
                Bank previousValue = this._Bank.Entity;
                if (((previousValue != value)
                            || (this._Bank.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Bank.Entity = null;
                        previousValue.Slips.Remove(this);
                    }
                    this._Bank.Entity = value;
                    if ((value != null))
                    {
                        value.Slips.Add(this);
                        this._BankID = value.ID;
                    }
                    else
                    {
                        this._BankID = default(int);
                    }
                    this.SendPropertyChanged("Bank");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "ProvisionRate_Slip", Storage = "_ProvisionRate", ThisKey = "ProvisionRateID", OtherKey = "ID", IsForeignKey = true)]
        public ProvisionRate ProvisionRate
        {
            get
            {
                return this._ProvisionRate.Entity;
            }
            set
            {
                ProvisionRate previousValue = this._ProvisionRate.Entity;
                if (((previousValue != value)
                            || (this._ProvisionRate.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._ProvisionRate.Entity = null;
                        previousValue.Slips.Remove(this);
                    }
                    this._ProvisionRate.Entity = value;
                    if ((value != null))
                    {
                        value.Slips.Add(this);
                        this._ProvisionRateID = value.ID;
                    }
                    else
                    {
                        this._ProvisionRateID = default(int);
                    }
                    this.SendPropertyChanged("ProvisionRate");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.SpecialFieldTypes")]
    public partial class SpecialFieldType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Description;

        private string _Code;

        private EntitySet<Control> _Controls;

        private EntitySet<ControlsSpecialType> _ControlsSpecialTypes;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        #endregion

        public SpecialFieldType()
        {
            this._Controls = new EntitySet<Control>(new Action<Control>(this.attach_Controls), new Action<Control>(this.detach_Controls));
            this._ControlsSpecialTypes = new EntitySet<ControlsSpecialType>(new Action<ControlsSpecialType>(this.attach_ControlsSpecialTypes), new Action<ControlsSpecialType>(this.detach_ControlsSpecialTypes));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(5) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "SpecialFieldType_Control", Storage = "_Controls", ThisKey = "ID", OtherKey = "SpecialFieldTypeID")]
        public EntitySet<Control> Controls
        {
            get
            {
                return this._Controls;
            }
            set
            {
                this._Controls.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "SpecialFieldType_ControlsSpecialType", Storage = "_ControlsSpecialTypes", ThisKey = "ID", OtherKey = "SpecialFieldTypeID")]
        public EntitySet<ControlsSpecialType> ControlsSpecialTypes
        {
            get
            {
                return this._ControlsSpecialTypes;
            }
            set
            {
                this._ControlsSpecialTypes.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Controls(Control entity)
        {
            this.SendPropertyChanging();
            entity.SpecialFieldType = this;
        }

        private void detach_Controls(Control entity)
        {
            this.SendPropertyChanging();
            entity.SpecialFieldType = null;
        }

        private void attach_ControlsSpecialTypes(ControlsSpecialType entity)
        {
            this.SendPropertyChanging();
            entity.SpecialFieldType = this;
        }

        private void detach_ControlsSpecialTypes(ControlsSpecialType entity)
        {
            this.SendPropertyChanging();
            entity.SpecialFieldType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.States")]
    public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private bool _IsActive;

        private EntitySet<Municipality> _Municipalities;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public State()
        {
            this._Municipalities = new EntitySet<Municipality>(new Action<Municipality>(this.attach_Municipalities), new Action<Municipality>(this.detach_Municipalities));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "State_Municipality", Storage = "_Municipalities", ThisKey = "ID", OtherKey = "StateID")]
        public EntitySet<Municipality> Municipalities
        {
            get
            {
                return this._Municipalities;
            }
            set
            {
                this._Municipalities.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Municipalities(Municipality entity)
        {
            this.SendPropertyChanging();
            entity.State = this;
        }

        private void detach_Municipalities(Municipality entity)
        {
            this.SendPropertyChanging();
            entity.State = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Statuses")]
    public partial class Statuse : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Description;

        private int _DocumentSubTypeID;

        private bool _IsActive;

        private EntitySet<AccountFacture> _AccountFactures;

        private EntitySet<Facture> _Factures;

        private EntitySet<Offer> _Offers;

        private EntitySet<Policy> _Policies;

        private EntitySet<PolicyItem> _PolicyItems;

        private EntityRef<DocumentSubType> _DocumentSubType;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDocumentSubTypeIDChanging(int value);
        partial void OnDocumentSubTypeIDChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public Statuse()
        {
            this._AccountFactures = new EntitySet<AccountFacture>(new Action<AccountFacture>(this.attach_AccountFactures), new Action<AccountFacture>(this.detach_AccountFactures));
            this._Factures = new EntitySet<Facture>(new Action<Facture>(this.attach_Factures), new Action<Facture>(this.detach_Factures));
            this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
            this._Policies = new EntitySet<Policy>(new Action<Policy>(this.attach_Policies), new Action<Policy>(this.detach_Policies));
            this._PolicyItems = new EntitySet<PolicyItem>(new Action<PolicyItem>(this.attach_PolicyItems), new Action<PolicyItem>(this.detach_PolicyItems));
            this._DocumentSubType = default(EntityRef<DocumentSubType>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeID", DbType = "Int NOT NULL")]
        public int DocumentSubTypeID
        {
            get
            {
                return this._DocumentSubTypeID;
            }
            set
            {
                if ((this._DocumentSubTypeID != value))
                {
                    if (this._DocumentSubType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDocumentSubTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._DocumentSubTypeID = value;
                    this.SendPropertyChanged("DocumentSubTypeID");
                    this.OnDocumentSubTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Statuse_AccountFacture", Storage = "_AccountFactures", ThisKey = "ID", OtherKey = "StatusID")]
        public EntitySet<AccountFacture> AccountFactures
        {
            get
            {
                return this._AccountFactures;
            }
            set
            {
                this._AccountFactures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Statuse_Facture", Storage = "_Factures", ThisKey = "ID", OtherKey = "StatusID")]
        public EntitySet<Facture> Factures
        {
            get
            {
                return this._Factures;
            }
            set
            {
                this._Factures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Statuse_Offer", Storage = "_Offers", ThisKey = "ID", OtherKey = "StatusID")]
        public EntitySet<Offer> Offers
        {
            get
            {
                return this._Offers;
            }
            set
            {
                this._Offers.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Statuse_Policy", Storage = "_Policies", ThisKey = "ID", OtherKey = "StatusID")]
        public EntitySet<Policy> Policies
        {
            get
            {
                return this._Policies;
            }
            set
            {
                this._Policies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Statuse_PolicyItem", Storage = "_PolicyItems", ThisKey = "ID", OtherKey = "StatusID")]
        public EntitySet<PolicyItem> PolicyItems
        {
            get
            {
                return this._PolicyItems;
            }
            set
            {
                this._PolicyItems.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "DocumentSubType_Statuse", Storage = "_DocumentSubType", ThisKey = "DocumentSubTypeID", OtherKey = "ID", IsForeignKey = true)]
        public DocumentSubType DocumentSubType
        {
            get
            {
                return this._DocumentSubType.Entity;
            }
            set
            {
                DocumentSubType previousValue = this._DocumentSubType.Entity;
                if (((previousValue != value)
                            || (this._DocumentSubType.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DocumentSubType.Entity = null;
                        previousValue.Statuses.Remove(this);
                    }
                    this._DocumentSubType.Entity = value;
                    if ((value != null))
                    {
                        value.Statuses.Add(this);
                        this._DocumentSubTypeID = value.ID;
                    }
                    else
                    {
                        this._DocumentSubTypeID = default(int);
                    }
                    this.SendPropertyChanged("DocumentSubType");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.Statuse = this;
        }

        private void detach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.Statuse = null;
        }

        private void attach_Factures(Facture entity)
        {
            this.SendPropertyChanging();
            entity.Statuse = this;
        }

        private void detach_Factures(Facture entity)
        {
            this.SendPropertyChanging();
            entity.Statuse = null;
        }

        private void attach_Offers(Offer entity)
        {
            this.SendPropertyChanging();
            entity.Statuse = this;
        }

        private void detach_Offers(Offer entity)
        {
            this.SendPropertyChanging();
            entity.Statuse = null;
        }

        private void attach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Statuse = this;
        }

        private void detach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.Statuse = null;
        }

        private void attach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.Statuse = this;
        }

        private void detach_PolicyItems(PolicyItem entity)
        {
            this.SendPropertyChanging();
            entity.Statuse = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.TemporaryDistributions")]
    public partial class TemporaryDistribution : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _UserID;

        private System.DateTime _Time;

        private int _DistributionID;

        private EntityRef<Distribution> _Distribution;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnTimeChanging(System.DateTime value);
        partial void OnTimeChanged();
        partial void OnDistributionIDChanging(int value);
        partial void OnDistributionIDChanged();
        #endregion

        public TemporaryDistribution()
        {
            this._Distribution = default(EntityRef<Distribution>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Time", DbType = "DateTime NOT NULL")]
        public System.DateTime Time
        {
            get
            {
                return this._Time;
            }
            set
            {
                if ((this._Time != value))
                {
                    this.OnTimeChanging(value);
                    this.SendPropertyChanging();
                    this._Time = value;
                    this.SendPropertyChanged("Time");
                    this.OnTimeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionID", DbType = "Int NOT NULL")]
        public int DistributionID
        {
            get
            {
                return this._DistributionID;
            }
            set
            {
                if ((this._DistributionID != value))
                {
                    if (this._Distribution.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDistributionIDChanging(value);
                    this.SendPropertyChanging();
                    this._DistributionID = value;
                    this.SendPropertyChanged("DistributionID");
                    this.OnDistributionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Distribution_TemporaryDistribution", Storage = "_Distribution", ThisKey = "DistributionID", OtherKey = "ID", IsForeignKey = true)]
        public Distribution Distribution
        {
            get
            {
                return this._Distribution.Entity;
            }
            set
            {
                Distribution previousValue = this._Distribution.Entity;
                if (((previousValue != value)
                            || (this._Distribution.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Distribution.Entity = null;
                        previousValue.TemporaryDistributions.Remove(this);
                    }
                    this._Distribution.Entity = value;
                    if ((value != null))
                    {
                        value.TemporaryDistributions.Add(this);
                        this._DistributionID = value.ID;
                    }
                    else
                    {
                        this._DistributionID = default(int);
                    }
                    this.SendPropertyChanged("Distribution");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_TemporaryDistribution", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.TemporaryDistributions.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.TemporaryDistributions.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.TemporaryPolicies")]
    public partial class TemporaryPolicy : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _PolicyNumber;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private System.DateTime _ApplicationDate;

        private string _ClientName;

        private string _ClientAddress;

        private decimal _PremiumValue;

        private decimal _WindshieldValue;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPolicyNumberChanging(string value);
        partial void OnPolicyNumberChanged();
        partial void OnStartDateChanging(System.DateTime value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime value);
        partial void OnEndDateChanged();
        partial void OnApplicationDateChanging(System.DateTime value);
        partial void OnApplicationDateChanged();
        partial void OnClientNameChanging(string value);
        partial void OnClientNameChanged();
        partial void OnClientAddressChanging(string value);
        partial void OnClientAddressChanged();
        partial void OnPremiumValueChanging(decimal value);
        partial void OnPremiumValueChanged();
        partial void OnWindshieldValueChanging(decimal value);
        partial void OnWindshieldValueChanged();
        #endregion

        public TemporaryPolicy()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string PolicyNumber
        {
            get
            {
                return this._PolicyNumber;
            }
            set
            {
                if ((this._PolicyNumber != value))
                {
                    this.OnPolicyNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PolicyNumber = value;
                    this.SendPropertyChanged("PolicyNumber");
                    this.OnPolicyNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "DateTime NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "DateTime NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ApplicationDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ApplicationDate
        {
            get
            {
                return this._ApplicationDate;
            }
            set
            {
                if ((this._ApplicationDate != value))
                {
                    this.OnApplicationDateChanging(value);
                    this.SendPropertyChanging();
                    this._ApplicationDate = value;
                    this.SendPropertyChanged("ApplicationDate");
                    this.OnApplicationDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ClientName
        {
            get
            {
                return this._ClientName;
            }
            set
            {
                if ((this._ClientName != value))
                {
                    this.OnClientNameChanging(value);
                    this.SendPropertyChanging();
                    this._ClientName = value;
                    this.SendPropertyChanged("ClientName");
                    this.OnClientNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientAddress", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ClientAddress
        {
            get
            {
                return this._ClientAddress;
            }
            set
            {
                if ((this._ClientAddress != value))
                {
                    this.OnClientAddressChanging(value);
                    this.SendPropertyChanging();
                    this._ClientAddress = value;
                    this.SendPropertyChanged("ClientAddress");
                    this.OnClientAddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PremiumValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PremiumValue
        {
            get
            {
                return this._PremiumValue;
            }
            set
            {
                if ((this._PremiumValue != value))
                {
                    this.OnPremiumValueChanging(value);
                    this.SendPropertyChanging();
                    this._PremiumValue = value;
                    this.SendPropertyChanged("PremiumValue");
                    this.OnPremiumValueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_WindshieldValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal WindshieldValue
        {
            get
            {
                return this._WindshieldValue;
            }
            set
            {
                if ((this._WindshieldValue != value))
                {
                    this.OnWindshieldValueChanging(value);
                    this.SendPropertyChanging();
                    this._WindshieldValue = value;
                    this.SendPropertyChanged("WindshieldValue");
                    this.OnWindshieldValueChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Travelers")]
    public partial class Traveler : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ClientID;

        private string _Description;

        private EntityRef<Client> _Client;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnClientIDChanging(int value);
        partial void OnClientIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public Traveler()
        {
            this._Client = default(EntityRef<Client>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Client_Traveler", Storage = "_Client", ThisKey = "ClientID", OtherKey = "ID", IsForeignKey = true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if (((previousValue != value)
                            || (this._Client.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Client.Entity = null;
                        previousValue.Travelers.Remove(this);
                    }
                    this._Client.Entity = value;
                    if ((value != null))
                    {
                        value.Travelers.Add(this);
                        this._ClientID = value.ID;
                    }
                    else
                    {
                        this._ClientID = default(int);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _UserName;

        private string _Password;

        private string _Name;

        private int _BranchID;

        private bool _IsActive;

        private int _RoleID;

        private string _Address;

        private string _Phone;

        private string _EMBG;

        private EntitySet<AccountFacture> _AccountFactures;

        private EntitySet<BrokeragesForMarketingAgent> _BrokeragesForMarketingAgents;

        private EntitySet<CashReport> _CashReports;

        private EntitySet<Damage> _Damages;

        private EntitySet<DistributionRoute> _DistributionRoutes;

        private EntitySet<DistributionRoute> _DistributionRoutes1;

        private EntitySet<Distribution> _Distributions;

        private EntitySet<Facture> _Factures;

        private EntitySet<IncomingFacture> _IncomingFactures;

        private EntitySet<LifePolicy> _LifePolicies;

        private EntitySet<Offer> _Offers;

        private EntitySet<Order> _Orders;

        private EntitySet<Payment> _Payments;

        private EntitySet<Policy> _Policies;

        private EntitySet<Policy> _Policies1;

        private EntitySet<Policy> _Policies2;

        private EntitySet<RightRestrictionDistribution> _RightRestrictionDistributions;

        private EntitySet<RollBackDistribution> _RollBackDistributions;

        private EntitySet<TemporaryDistribution> _TemporaryDistributions;

        private EntitySet<UsersFunction> _UsersFunctions;

        private EntitySet<UsersParentship> _UsersParentships;

        private EntitySet<UsersParentship> _UsersParentships1;

        private EntitySet<UsersWebPage> _UsersWebPages;

        private EntityRef<Branch> _Branch;

        private EntityRef<Role> _Role;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnBranchIDChanging(int value);
        partial void OnBranchIDChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnRoleIDChanging(int value);
        partial void OnRoleIDChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnEMBGChanging(string value);
        partial void OnEMBGChanged();
        #endregion

        public User()
        {
            this._AccountFactures = new EntitySet<AccountFacture>(new Action<AccountFacture>(this.attach_AccountFactures), new Action<AccountFacture>(this.detach_AccountFactures));
            this._BrokeragesForMarketingAgents = new EntitySet<BrokeragesForMarketingAgent>(new Action<BrokeragesForMarketingAgent>(this.attach_BrokeragesForMarketingAgents), new Action<BrokeragesForMarketingAgent>(this.detach_BrokeragesForMarketingAgents));
            this._CashReports = new EntitySet<CashReport>(new Action<CashReport>(this.attach_CashReports), new Action<CashReport>(this.detach_CashReports));
            this._Damages = new EntitySet<Damage>(new Action<Damage>(this.attach_Damages), new Action<Damage>(this.detach_Damages));
            this._DistributionRoutes = new EntitySet<DistributionRoute>(new Action<DistributionRoute>(this.attach_DistributionRoutes), new Action<DistributionRoute>(this.detach_DistributionRoutes));
            this._DistributionRoutes1 = new EntitySet<DistributionRoute>(new Action<DistributionRoute>(this.attach_DistributionRoutes1), new Action<DistributionRoute>(this.detach_DistributionRoutes1));
            this._Distributions = new EntitySet<Distribution>(new Action<Distribution>(this.attach_Distributions), new Action<Distribution>(this.detach_Distributions));
            this._Factures = new EntitySet<Facture>(new Action<Facture>(this.attach_Factures), new Action<Facture>(this.detach_Factures));
            this._IncomingFactures = new EntitySet<IncomingFacture>(new Action<IncomingFacture>(this.attach_IncomingFactures), new Action<IncomingFacture>(this.detach_IncomingFactures));
            this._LifePolicies = new EntitySet<LifePolicy>(new Action<LifePolicy>(this.attach_LifePolicies), new Action<LifePolicy>(this.detach_LifePolicies));
            this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
            this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
            this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
            this._Policies = new EntitySet<Policy>(new Action<Policy>(this.attach_Policies), new Action<Policy>(this.detach_Policies));
            this._Policies1 = new EntitySet<Policy>(new Action<Policy>(this.attach_Policies1), new Action<Policy>(this.detach_Policies1));
            this._Policies2 = new EntitySet<Policy>(new Action<Policy>(this.attach_Policies2), new Action<Policy>(this.detach_Policies2));
            this._RightRestrictionDistributions = new EntitySet<RightRestrictionDistribution>(new Action<RightRestrictionDistribution>(this.attach_RightRestrictionDistributions), new Action<RightRestrictionDistribution>(this.detach_RightRestrictionDistributions));
            this._RollBackDistributions = new EntitySet<RollBackDistribution>(new Action<RollBackDistribution>(this.attach_RollBackDistributions), new Action<RollBackDistribution>(this.detach_RollBackDistributions));
            this._TemporaryDistributions = new EntitySet<TemporaryDistribution>(new Action<TemporaryDistribution>(this.attach_TemporaryDistributions), new Action<TemporaryDistribution>(this.detach_TemporaryDistributions));
            this._UsersFunctions = new EntitySet<UsersFunction>(new Action<UsersFunction>(this.attach_UsersFunctions), new Action<UsersFunction>(this.detach_UsersFunctions));
            this._UsersParentships = new EntitySet<UsersParentship>(new Action<UsersParentship>(this.attach_UsersParentships), new Action<UsersParentship>(this.detach_UsersParentships));
            this._UsersParentships1 = new EntitySet<UsersParentship>(new Action<UsersParentship>(this.attach_UsersParentships1), new Action<UsersParentship>(this.detach_UsersParentships1));
            this._UsersWebPages = new EntitySet<UsersWebPage>(new Action<UsersWebPage>(this.attach_UsersWebPages), new Action<UsersWebPage>(this.detach_UsersWebPages));
            this._Branch = default(EntityRef<Branch>);
            this._Role = default(EntityRef<Role>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Password", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if ((this._Password != value))
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBranchIDChanging(value);
                    this.SendPropertyChanging();
                    this._BranchID = value;
                    this.SendPropertyChanged("BranchID");
                    this.OnBranchIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RoleID", DbType = "Int NOT NULL")]
        public int RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if ((this._RoleID != value))
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnRoleIDChanging(value);
                    this.SendPropertyChanging();
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(100)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Phone", DbType = "NVarChar(50)")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if ((this._Phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this.OnEMBGChanging(value);
                    this.SendPropertyChanging();
                    this._EMBG = value;
                    this.SendPropertyChanged("EMBG");
                    this.OnEMBGChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_AccountFacture", Storage = "_AccountFactures", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<AccountFacture> AccountFactures
        {
            get
            {
                return this._AccountFactures;
            }
            set
            {
                this._AccountFactures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_BrokeragesForMarketingAgent", Storage = "_BrokeragesForMarketingAgents", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<BrokeragesForMarketingAgent> BrokeragesForMarketingAgents
        {
            get
            {
                return this._BrokeragesForMarketingAgents;
            }
            set
            {
                this._BrokeragesForMarketingAgents.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_CashReport", Storage = "_CashReports", ThisKey = "ID", OtherKey = "ApproverUserID")]
        public EntitySet<CashReport> CashReports
        {
            get
            {
                return this._CashReports;
            }
            set
            {
                this._CashReports.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Damage", Storage = "_Damages", ThisKey = "ID", OtherKey = "EntryByUserID")]
        public EntitySet<Damage> Damages
        {
            get
            {
                return this._Damages;
            }
            set
            {
                this._Damages.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_DistributionRoute", Storage = "_DistributionRoutes", ThisKey = "ID", OtherKey = "FromUserID")]
        public EntitySet<DistributionRoute> DistributionRoutes
        {
            get
            {
                return this._DistributionRoutes;
            }
            set
            {
                this._DistributionRoutes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_DistributionRoute1", Storage = "_DistributionRoutes1", ThisKey = "ID", OtherKey = "ToUserID")]
        public EntitySet<DistributionRoute> DistributionRoutes1
        {
            get
            {
                return this._DistributionRoutes1;
            }
            set
            {
                this._DistributionRoutes1.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Distribution", Storage = "_Distributions", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<Distribution> Distributions
        {
            get
            {
                return this._Distributions;
            }
            set
            {
                this._Distributions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Facture", Storage = "_Factures", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<Facture> Factures
        {
            get
            {
                return this._Factures;
            }
            set
            {
                this._Factures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_IncomingFacture", Storage = "_IncomingFactures", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<IncomingFacture> IncomingFactures
        {
            get
            {
                return this._IncomingFactures;
            }
            set
            {
                this._IncomingFactures.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_LifePolicy", Storage = "_LifePolicies", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<LifePolicy> LifePolicies
        {
            get
            {
                return this._LifePolicies;
            }
            set
            {
                this._LifePolicies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Offer", Storage = "_Offers", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<Offer> Offers
        {
            get
            {
                return this._Offers;
            }
            set
            {
                this._Offers.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Order", Storage = "_Orders", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<Order> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Payment", Storage = "_Payments", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<Payment> Payments
        {
            get
            {
                return this._Payments;
            }
            set
            {
                this._Payments.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Policy", Storage = "_Policies", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<Policy> Policies
        {
            get
            {
                return this._Policies;
            }
            set
            {
                this._Policies.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Policy1", Storage = "_Policies1", ThisKey = "ID", OtherKey = "RatesApproverID")]
        public EntitySet<Policy> Policies1
        {
            get
            {
                return this._Policies1;
            }
            set
            {
                this._Policies1.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Policy2", Storage = "_Policies2", ThisKey = "ID", OtherKey = "MarketingAgentID")]
        public EntitySet<Policy> Policies2
        {
            get
            {
                return this._Policies2;
            }
            set
            {
                this._Policies2.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_RightRestrictionDistribution", Storage = "_RightRestrictionDistributions", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<RightRestrictionDistribution> RightRestrictionDistributions
        {
            get
            {
                return this._RightRestrictionDistributions;
            }
            set
            {
                this._RightRestrictionDistributions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_RollBackDistribution", Storage = "_RollBackDistributions", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<RollBackDistribution> RollBackDistributions
        {
            get
            {
                return this._RollBackDistributions;
            }
            set
            {
                this._RollBackDistributions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_TemporaryDistribution", Storage = "_TemporaryDistributions", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<TemporaryDistribution> TemporaryDistributions
        {
            get
            {
                return this._TemporaryDistributions;
            }
            set
            {
                this._TemporaryDistributions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UsersFunction", Storage = "_UsersFunctions", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<UsersFunction> UsersFunctions
        {
            get
            {
                return this._UsersFunctions;
            }
            set
            {
                this._UsersFunctions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UsersParentship", Storage = "_UsersParentships", ThisKey = "ID", OtherKey = "ParentID")]
        public EntitySet<UsersParentship> UsersParentships
        {
            get
            {
                return this._UsersParentships;
            }
            set
            {
                this._UsersParentships.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UsersParentship1", Storage = "_UsersParentships1", ThisKey = "ID", OtherKey = "ChildID")]
        public EntitySet<UsersParentship> UsersParentships1
        {
            get
            {
                return this._UsersParentships1;
            }
            set
            {
                this._UsersParentships1.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UsersWebPage", Storage = "_UsersWebPages", ThisKey = "ID", OtherKey = "UserID")]
        public EntitySet<UsersWebPage> UsersWebPages
        {
            get
            {
                return this._UsersWebPages;
            }
            set
            {
                this._UsersWebPages.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Branch_User", Storage = "_Branch", ThisKey = "BranchID", OtherKey = "ID", IsForeignKey = true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if (((previousValue != value)
                            || (this._Branch.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Branch.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if ((value != null))
                    {
                        value.Users.Add(this);
                        this._BranchID = value.ID;
                    }
                    else
                    {
                        this._BranchID = default(int);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Role_User", Storage = "_Role", ThisKey = "RoleID", OtherKey = "ID", IsForeignKey = true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if (((previousValue != value)
                            || (this._Role.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Role.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Role.Entity = value;
                    if ((value != null))
                    {
                        value.Users.Add(this);
                        this._RoleID = value.ID;
                    }
                    else
                    {
                        this._RoleID = default(int);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_AccountFactures(AccountFacture entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_BrokeragesForMarketingAgents(BrokeragesForMarketingAgent entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_BrokeragesForMarketingAgents(BrokeragesForMarketingAgent entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_CashReports(CashReport entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_CashReports(CashReport entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_Damages(Damage entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Damages(Damage entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_DistributionRoutes(DistributionRoute entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_DistributionRoutes(DistributionRoute entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_DistributionRoutes1(DistributionRoute entity)
        {
            this.SendPropertyChanging();
            entity.User1 = this;
        }

        private void detach_DistributionRoutes1(DistributionRoute entity)
        {
            this.SendPropertyChanging();
            entity.User1 = null;
        }

        private void attach_Distributions(Distribution entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Distributions(Distribution entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_Factures(Facture entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Factures(Facture entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_IncomingFactures(IncomingFacture entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_IncomingFactures(IncomingFacture entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_LifePolicies(LifePolicy entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_Offers(Offer entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Offers(Offer entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_Orders(Order entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Orders(Order entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Payments(Payment entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Policies(Policy entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_Policies1(Policy entity)
        {
            this.SendPropertyChanging();
            entity.User1 = this;
        }

        private void detach_Policies1(Policy entity)
        {
            this.SendPropertyChanging();
            entity.User1 = null;
        }

        private void attach_Policies2(Policy entity)
        {
            this.SendPropertyChanging();
            entity.User2 = this;
        }

        private void detach_Policies2(Policy entity)
        {
            this.SendPropertyChanging();
            entity.User2 = null;
        }

        private void attach_RightRestrictionDistributions(RightRestrictionDistribution entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_RightRestrictionDistributions(RightRestrictionDistribution entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_RollBackDistributions(RollBackDistribution entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_RollBackDistributions(RollBackDistribution entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_TemporaryDistributions(TemporaryDistribution entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_TemporaryDistributions(TemporaryDistribution entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_UsersFunctions(UsersFunction entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_UsersFunctions(UsersFunction entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_UsersParentships(UsersParentship entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_UsersParentships(UsersParentship entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_UsersParentships1(UsersParentship entity)
        {
            this.SendPropertyChanging();
            entity.User1 = this;
        }

        private void detach_UsersParentships1(UsersParentship entity)
        {
            this.SendPropertyChanging();
            entity.User1 = null;
        }

        private void attach_UsersWebPages(UsersWebPage entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_UsersWebPages(UsersWebPage entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.UsersFunctions")]
    public partial class UsersFunction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _UserID;

        private int _FunctionID;

        private EntityRef<Function> _Function;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnFunctionIDChanging(int value);
        partial void OnFunctionIDChanged();
        #endregion

        public UsersFunction()
        {
            this._Function = default(EntityRef<Function>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FunctionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int FunctionID
        {
            get
            {
                return this._FunctionID;
            }
            set
            {
                if ((this._FunctionID != value))
                {
                    if (this._Function.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFunctionIDChanging(value);
                    this.SendPropertyChanging();
                    this._FunctionID = value;
                    this.SendPropertyChanged("FunctionID");
                    this.OnFunctionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Function_UsersFunction", Storage = "_Function", ThisKey = "FunctionID", OtherKey = "ID", IsForeignKey = true)]
        public Function Function
        {
            get
            {
                return this._Function.Entity;
            }
            set
            {
                Function previousValue = this._Function.Entity;
                if (((previousValue != value)
                            || (this._Function.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Function.Entity = null;
                        previousValue.UsersFunctions.Remove(this);
                    }
                    this._Function.Entity = value;
                    if ((value != null))
                    {
                        value.UsersFunctions.Add(this);
                        this._FunctionID = value.ID;
                    }
                    else
                    {
                        this._FunctionID = default(int);
                    }
                    this.SendPropertyChanged("Function");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UsersFunction", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.UsersFunctions.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.UsersFunctions.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.UsersParentships")]
    public partial class UsersParentship : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ParentID;

        private int _ChildID;

        private EntityRef<User> _User;

        private EntityRef<User> _User1;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnParentIDChanging(int value);
        partial void OnParentIDChanged();
        partial void OnChildIDChanging(int value);
        partial void OnChildIDChanged();
        #endregion

        public UsersParentship()
        {
            this._User = default(EntityRef<User>);
            this._User1 = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ParentID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int ParentID
        {
            get
            {
                return this._ParentID;
            }
            set
            {
                if ((this._ParentID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnParentIDChanging(value);
                    this.SendPropertyChanging();
                    this._ParentID = value;
                    this.SendPropertyChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ChildID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int ChildID
        {
            get
            {
                return this._ChildID;
            }
            set
            {
                if ((this._ChildID != value))
                {
                    if (this._User1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnChildIDChanging(value);
                    this.SendPropertyChanging();
                    this._ChildID = value;
                    this.SendPropertyChanged("ChildID");
                    this.OnChildIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UsersParentship", Storage = "_User", ThisKey = "ParentID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.UsersParentships.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.UsersParentships.Add(this);
                        this._ParentID = value.ID;
                    }
                    else
                    {
                        this._ParentID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UsersParentship1", Storage = "_User1", ThisKey = "ChildID", OtherKey = "ID", IsForeignKey = true)]
        public User User1
        {
            get
            {
                return this._User1.Entity;
            }
            set
            {
                User previousValue = this._User1.Entity;
                if (((previousValue != value)
                            || (this._User1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User1.Entity = null;
                        previousValue.UsersParentships1.Remove(this);
                    }
                    this._User1.Entity = value;
                    if ((value != null))
                    {
                        value.UsersParentships1.Add(this);
                        this._ChildID = value.ID;
                    }
                    else
                    {
                        this._ChildID = default(int);
                    }
                    this.SendPropertyChanged("User1");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.UsersWebPages")]
    public partial class UsersWebPage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _UserID;

        private int _WebPageID;

        private EntityRef<User> _User;

        private EntityRef<WebPage> _WebPage;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnWebPageIDChanging(int value);
        partial void OnWebPageIDChanged();
        #endregion

        public UsersWebPage()
        {
            this._User = default(EntityRef<User>);
            this._WebPage = default(EntityRef<WebPage>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_WebPageID", DbType = "Int NOT NULL")]
        public int WebPageID
        {
            get
            {
                return this._WebPageID;
            }
            set
            {
                if ((this._WebPageID != value))
                {
                    if (this._WebPage.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnWebPageIDChanging(value);
                    this.SendPropertyChanging();
                    this._WebPageID = value;
                    this.SendPropertyChanged("WebPageID");
                    this.OnWebPageIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UsersWebPage", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.UsersWebPages.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.UsersWebPages.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "WebPage_UsersWebPage", Storage = "_WebPage", ThisKey = "WebPageID", OtherKey = "ID", IsForeignKey = true)]
        public WebPage WebPage
        {
            get
            {
                return this._WebPage.Entity;
            }
            set
            {
                WebPage previousValue = this._WebPage.Entity;
                if (((previousValue != value)
                            || (this._WebPage.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._WebPage.Entity = null;
                        previousValue.UsersWebPages.Remove(this);
                    }
                    this._WebPage.Entity = value;
                    if ((value != null))
                    {
                        value.UsersWebPages.Add(this);
                        this._WebPageID = value.ID;
                    }
                    else
                    {
                        this._WebPageID = default(int);
                    }
                    this.SendPropertyChanged("WebPage");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Validators")]
    public partial class Validator : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private bool _IsActive;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        #endregion

        public Validator()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.VariableTypes")]
    public partial class VariableType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Code;

        private string _Name;

        private string _CSintakse;

        private EntitySet<Control> _Controls;

        private EntitySet<Parameter> _Parameters;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCSintakseChanging(string value);
        partial void OnCSintakseChanged();
        #endregion

        public VariableType()
        {
            this._Controls = new EntitySet<Control>(new Action<Control>(this.attach_Controls), new Action<Control>(this.detach_Controls));
            this._Parameters = new EntitySet<Parameter>(new Action<Parameter>(this.attach_Parameters), new Action<Parameter>(this.detach_Parameters));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CSintakse", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string CSintakse
        {
            get
            {
                return this._CSintakse;
            }
            set
            {
                if ((this._CSintakse != value))
                {
                    this.OnCSintakseChanging(value);
                    this.SendPropertyChanging();
                    this._CSintakse = value;
                    this.SendPropertyChanged("CSintakse");
                    this.OnCSintakseChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "VariableType_Control", Storage = "_Controls", ThisKey = "ID", OtherKey = "VariableTypeID")]
        public EntitySet<Control> Controls
        {
            get
            {
                return this._Controls;
            }
            set
            {
                this._Controls.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "VariableType_Parameter", Storage = "_Parameters", ThisKey = "ID", OtherKey = "VariableTypeID")]
        public EntitySet<Parameter> Parameters
        {
            get
            {
                return this._Parameters;
            }
            set
            {
                this._Parameters.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Controls(Control entity)
        {
            this.SendPropertyChanging();
            entity.VariableType = this;
        }

        private void detach_Controls(Control entity)
        {
            this.SendPropertyChanging();
            entity.VariableType = null;
        }

        private void attach_Parameters(Parameter entity)
        {
            this.SendPropertyChanging();
            entity.VariableType = this;
        }

        private void detach_Parameters(Parameter entity)
        {
            this.SendPropertyChanging();
            entity.VariableType = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Vehicles")]
    public partial class Vehicle : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _RegistrationNumber;

        private string _ChassisNumber;

        private string _Brand;

        private string _Model;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnRegistrationNumberChanging(string value);
        partial void OnRegistrationNumberChanged();
        partial void OnChassisNumberChanging(string value);
        partial void OnChassisNumberChanged();
        partial void OnBrandChanging(string value);
        partial void OnBrandChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        #endregion

        public Vehicle()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RegistrationNumber", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string RegistrationNumber
        {
            get
            {
                return this._RegistrationNumber;
            }
            set
            {
                if ((this._RegistrationNumber != value))
                {
                    this.OnRegistrationNumberChanging(value);
                    this.SendPropertyChanging();
                    this._RegistrationNumber = value;
                    this.SendPropertyChanged("RegistrationNumber");
                    this.OnRegistrationNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ChassisNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string ChassisNumber
        {
            get
            {
                return this._ChassisNumber;
            }
            set
            {
                if ((this._ChassisNumber != value))
                {
                    this.OnChassisNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ChassisNumber = value;
                    this.SendPropertyChanged("ChassisNumber");
                    this.OnChassisNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Brand", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Brand
        {
            get
            {
                return this._Brand;
            }
            set
            {
                if ((this._Brand != value))
                {
                    this.OnBrandChanging(value);
                    this.SendPropertyChanging();
                    this._Brand = value;
                    this.SendPropertyChanged("Brand");
                    this.OnBrandChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Model", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if ((this._Model != value))
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.WebPages")]
    public partial class WebPage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _FunctionID;

        private string _RelativeUrl;

        private System.Nullable<int> _ParentID;

        private string _Name;

        private string _Description;

        private string _Title;

        private string _RelativeImageUrl;

        private int _OrderNumber;

        private EntitySet<UsersWebPage> _UsersWebPages;

        private EntitySet<WebPage> _WebPages;

        private EntityRef<Function> _Function;

        private EntityRef<WebPage> _WebPage1;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFunctionIDChanging(int value);
        partial void OnFunctionIDChanged();
        partial void OnRelativeUrlChanging(string value);
        partial void OnRelativeUrlChanged();
        partial void OnParentIDChanging(System.Nullable<int> value);
        partial void OnParentIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnRelativeImageUrlChanging(string value);
        partial void OnRelativeImageUrlChanged();
        partial void OnOrderNumberChanging(int value);
        partial void OnOrderNumberChanged();
        #endregion

        public WebPage()
        {
            this._UsersWebPages = new EntitySet<UsersWebPage>(new Action<UsersWebPage>(this.attach_UsersWebPages), new Action<UsersWebPage>(this.detach_UsersWebPages));
            this._WebPages = new EntitySet<WebPage>(new Action<WebPage>(this.attach_WebPages), new Action<WebPage>(this.detach_WebPages));
            this._Function = default(EntityRef<Function>);
            this._WebPage1 = default(EntityRef<WebPage>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FunctionID", DbType = "Int NOT NULL")]
        public int FunctionID
        {
            get
            {
                return this._FunctionID;
            }
            set
            {
                if ((this._FunctionID != value))
                {
                    if (this._Function.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnFunctionIDChanging(value);
                    this.SendPropertyChanging();
                    this._FunctionID = value;
                    this.SendPropertyChanged("FunctionID");
                    this.OnFunctionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RelativeUrl", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string RelativeUrl
        {
            get
            {
                return this._RelativeUrl;
            }
            set
            {
                if ((this._RelativeUrl != value))
                {
                    this.OnRelativeUrlChanging(value);
                    this.SendPropertyChanging();
                    this._RelativeUrl = value;
                    this.SendPropertyChanged("RelativeUrl");
                    this.OnRelativeUrlChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ParentID", DbType = "Int")]
        public System.Nullable<int> ParentID
        {
            get
            {
                return this._ParentID;
            }
            set
            {
                if ((this._ParentID != value))
                {
                    if (this._WebPage1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnParentIDChanging(value);
                    this.SendPropertyChanging();
                    this._ParentID = value;
                    this.SendPropertyChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(255)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Title", DbType = "NVarChar(50)")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if ((this._Title != value))
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RelativeImageUrl", DbType = "NVarChar(100)")]
        public string RelativeImageUrl
        {
            get
            {
                return this._RelativeImageUrl;
            }
            set
            {
                if ((this._RelativeImageUrl != value))
                {
                    this.OnRelativeImageUrlChanging(value);
                    this.SendPropertyChanging();
                    this._RelativeImageUrl = value;
                    this.SendPropertyChanged("RelativeImageUrl");
                    this.OnRelativeImageUrlChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderNumber", DbType = "Int NOT NULL")]
        public int OrderNumber
        {
            get
            {
                return this._OrderNumber;
            }
            set
            {
                if ((this._OrderNumber != value))
                {
                    this.OnOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrderNumber = value;
                    this.SendPropertyChanged("OrderNumber");
                    this.OnOrderNumberChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "WebPage_UsersWebPage", Storage = "_UsersWebPages", ThisKey = "ID", OtherKey = "WebPageID")]
        public EntitySet<UsersWebPage> UsersWebPages
        {
            get
            {
                return this._UsersWebPages;
            }
            set
            {
                this._UsersWebPages.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "WebPage_WebPage", Storage = "_WebPages", ThisKey = "ID", OtherKey = "ParentID")]
        public EntitySet<WebPage> WebPages
        {
            get
            {
                return this._WebPages;
            }
            set
            {
                this._WebPages.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Function_WebPage", Storage = "_Function", ThisKey = "FunctionID", OtherKey = "ID", IsForeignKey = true)]
        public Function Function
        {
            get
            {
                return this._Function.Entity;
            }
            set
            {
                Function previousValue = this._Function.Entity;
                if (((previousValue != value)
                            || (this._Function.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Function.Entity = null;
                        previousValue.WebPages.Remove(this);
                    }
                    this._Function.Entity = value;
                    if ((value != null))
                    {
                        value.WebPages.Add(this);
                        this._FunctionID = value.ID;
                    }
                    else
                    {
                        this._FunctionID = default(int);
                    }
                    this.SendPropertyChanged("Function");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "WebPage_WebPage", Storage = "_WebPage1", ThisKey = "ParentID", OtherKey = "ID", IsForeignKey = true)]
        public WebPage WebPage1
        {
            get
            {
                return this._WebPage1.Entity;
            }
            set
            {
                WebPage previousValue = this._WebPage1.Entity;
                if (((previousValue != value)
                            || (this._WebPage1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._WebPage1.Entity = null;
                        previousValue.WebPages.Remove(this);
                    }
                    this._WebPage1.Entity = value;
                    if ((value != null))
                    {
                        value.WebPages.Add(this);
                        this._ParentID = value.ID;
                    }
                    else
                    {
                        this._ParentID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("WebPage1");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_UsersWebPages(UsersWebPage entity)
        {
            this.SendPropertyChanging();
            entity.WebPage = this;
        }

        private void detach_UsersWebPages(UsersWebPage entity)
        {
            this.SendPropertyChanging();
            entity.WebPage = null;
        }

        private void attach_WebPages(WebPage entity)
        {
            this.SendPropertyChanging();
            entity.WebPage1 = this;
        }

        private void detach_WebPages(WebPage entity)
        {
            this.SendPropertyChanging();
            entity.WebPage1 = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ActiveBanks")]
    public partial class ActiveBank
    {

        private int _ID;

        private string _Name;

        private string _Code;

        private string _BankAccount;

        private string _EMBG;

        private string _Phone;

        private string _Fax;

        private string _Mobile;

        private string _EMail;

        private bool _IsActive;

        public ActiveBank()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.Always, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankAccount", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string BankAccount
        {
            get
            {
                return this._BankAccount;
            }
            set
            {
                if ((this._BankAccount != value))
                {
                    this._BankAccount = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15)")]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this._EMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Phone", DbType = "NVarChar(30)")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if ((this._Phone != value))
                {
                    this._Phone = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Fax", DbType = "NVarChar(30)")]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if ((this._Fax != value))
                {
                    this._Fax = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Mobile", DbType = "NVarChar(30)")]
        public string Mobile
        {
            get
            {
                return this._Mobile;
            }
            set
            {
                if ((this._Mobile != value))
                {
                    this._Mobile = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMail", DbType = "NVarChar(100)")]
        public string EMail
        {
            get
            {
                return this._EMail;
            }
            set
            {
                if ((this._EMail != value))
                {
                    this._EMail = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ActiveBranches")]
    public partial class ActiveBranch
    {

        private int _ID;

        private string _Code;

        private string _Name;

        private bool _IsActive;

        public ActiveBranch()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.Always, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ActiveDeals")]
    public partial class ActiveDeal
    {

        private int _ID;

        private int _InsuranceCompanyID;

        private string _Code;

        private string _Description;

        private bool _IsActive;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        public ActiveDeal()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(100)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ActiveInsuranceCompanies")]
    public partial class ActiveInsuranceCompany
    {

        private int _ID;

        private string _Code;

        private string _Name;

        private string _Address;

        private string _EMBG;

        private bool _IsActive;

        public ActiveInsuranceCompany()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.Always, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(100)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this._Address = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15)")]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this._EMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ActiveMunicipalities")]
    public partial class ActiveMunicipality
    {

        private int _ID;

        private string _Code;

        private string _Name;

        private int _StateID;

        private bool _IsActive;

        private string _StateCode;

        private string _StateName;

        public ActiveMunicipality()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StateID", DbType = "Int NOT NULL")]
        public int StateID
        {
            get
            {
                return this._StateID;
            }
            set
            {
                if ((this._StateID != value))
                {
                    this._StateID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StateCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string StateCode
        {
            get
            {
                return this._StateCode;
            }
            set
            {
                if ((this._StateCode != value))
                {
                    this._StateCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StateName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string StateName
        {
            get
            {
                return this._StateName;
            }
            set
            {
                if ((this._StateName != value))
                {
                    this._StateName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ActivePackets")]
    public partial class ActivePacket
    {

        private int _ID;

        private string _Code;

        private string _Name;

        private string _Description;

        private int _InsuranceCompanyID;

        private bool _IsActive;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        public ActivePacket()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(255)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ActivePlaces")]
    public partial class ActivePlace
    {

        private int _ID;

        private string _Code;

        private string _Name;

        private int _MunicipalityID;

        private bool _IsActive;

        private string _MunicipalityCode;

        private string _MunicipalityName;

        public ActivePlace()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MunicipalityID", DbType = "Int NOT NULL")]
        public int MunicipalityID
        {
            get
            {
                return this._MunicipalityID;
            }
            set
            {
                if ((this._MunicipalityID != value))
                {
                    this._MunicipalityID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MunicipalityCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string MunicipalityCode
        {
            get
            {
                return this._MunicipalityCode;
            }
            set
            {
                if ((this._MunicipalityCode != value))
                {
                    this._MunicipalityCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MunicipalityName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string MunicipalityName
        {
            get
            {
                return this._MunicipalityName;
            }
            set
            {
                if ((this._MunicipalityName != value))
                {
                    this._MunicipalityName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ActiveStates")]
    public partial class ActiveState
    {

        private int _ID;

        private string _Code;

        private string _Name;

        private bool _IsActive;

        public ActiveState()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.Always, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ActiveStatuses")]
    public partial class ActiveStatuse
    {

        private int _ID;

        private string _Code;

        private string _Description;

        private int _DocumentSubTypeID;

        private bool _IsActive;

        private string _DocumentSubTypeCode;

        private string _DocumentSubTypeDescription;

        private int _DocumentTypeID;

        private string _DocumentTypeCode;

        private string _DocumentTypeName;

        public ActiveStatuse()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeID", DbType = "Int NOT NULL")]
        public int DocumentSubTypeID
        {
            get
            {
                return this._DocumentSubTypeID;
            }
            set
            {
                if ((this._DocumentSubTypeID != value))
                {
                    this._DocumentSubTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string DocumentSubTypeCode
        {
            get
            {
                return this._DocumentSubTypeCode;
            }
            set
            {
                if ((this._DocumentSubTypeCode != value))
                {
                    this._DocumentSubTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeDescription", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DocumentSubTypeDescription
        {
            get
            {
                return this._DocumentSubTypeDescription;
            }
            set
            {
                if ((this._DocumentSubTypeDescription != value))
                {
                    this._DocumentSubTypeDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentTypeID", DbType = "Int NOT NULL")]
        public int DocumentTypeID
        {
            get
            {
                return this._DocumentTypeID;
            }
            set
            {
                if ((this._DocumentTypeID != value))
                {
                    this._DocumentTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentTypeCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string DocumentTypeCode
        {
            get
            {
                return this._DocumentTypeCode;
            }
            set
            {
                if ((this._DocumentTypeCode != value))
                {
                    this._DocumentTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentTypeName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DocumentTypeName
        {
            get
            {
                return this._DocumentTypeName;
            }
            set
            {
                if ((this._DocumentTypeName != value))
                {
                    this._DocumentTypeName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ClientAccountsView")]
    public partial class ClientAccountsView
    {

        private string _BankName;

        private string _EMBG;

        private string _ClientName;

        private string _AccountNumber;

        private bool _IsActive;

        private int _ClientID;

        private int _BankID;

        public ClientAccountsView()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string BankName
        {
            get
            {
                return this._BankName;
            }
            set
            {
                if ((this._BankName != value))
                {
                    this._BankName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this._EMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string ClientName
        {
            get
            {
                return this._ClientName;
            }
            set
            {
                if ((this._ClientName != value))
                {
                    this._ClientName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AccountNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string AccountNumber
        {
            get
            {
                return this._AccountNumber;
            }
            set
            {
                if ((this._AccountNumber != value))
                {
                    this._AccountNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this._ClientID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankID", DbType = "Int NOT NULL")]
        public int BankID
        {
            get
            {
                return this._BankID;
            }
            set
            {
                if ((this._BankID != value))
                {
                    this._BankID = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.LifePoliciesView")]
    public partial class LifePoliciesView
    {

        private int _ID;

        private string _PolicyNumber;

        private string _OfferNumber;

        private int _InsuranceCompanyID;

        private int _InsuranceSubTypeID;

        private int _LifeDealID;

        private System.DateTime _ApplicationDate;

        private int _UserID;

        private int _BranchID;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private bool _Discard;

        private int _ClientID;

        private int _OwnerID;

        private string _UserName;

        private string _UserFullName;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        private string _InsuranceCompanyShortName;

        private string _InsuranceSubTypeCode;

        private string _InsuranceSubTypeDescription;

        private string _InsuranceSubTypeShortDescription;

        private string _ClientEMBG;

        private string _ClientName;

        private string _OwnerEMBG;

        private string _OwnerName;

        public LifePoliciesView()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string PolicyNumber
        {
            get
            {
                return this._PolicyNumber;
            }
            set
            {
                if ((this._PolicyNumber != value))
                {
                    this._PolicyNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OfferNumber", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string OfferNumber
        {
            get
            {
                return this._OfferNumber;
            }
            set
            {
                if ((this._OfferNumber != value))
                {
                    this._OfferNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    this._InsuranceSubTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LifeDealID", DbType = "Int NOT NULL")]
        public int LifeDealID
        {
            get
            {
                return this._LifeDealID;
            }
            set
            {
                if ((this._LifeDealID != value))
                {
                    this._LifeDealID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ApplicationDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ApplicationDate
        {
            get
            {
                return this._ApplicationDate;
            }
            set
            {
                if ((this._ApplicationDate != value))
                {
                    this._ApplicationDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    this._BranchID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "DateTime NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this._StartDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "DateTime NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this._EndDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Discard", DbType = "Bit NOT NULL")]
        public bool Discard
        {
            get
            {
                return this._Discard;
            }
            set
            {
                if ((this._Discard != value))
                {
                    this._Discard = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this._ClientID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerID", DbType = "Int NOT NULL")]
        public int OwnerID
        {
            get
            {
                return this._OwnerID;
            }
            set
            {
                if ((this._OwnerID != value))
                {
                    this._OwnerID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this._UserName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserFullName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string UserFullName
        {
            get
            {
                return this._UserFullName;
            }
            set
            {
                if ((this._UserFullName != value))
                {
                    this._UserFullName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyShortName", DbType = "NVarChar(50)")]
        public string InsuranceCompanyShortName
        {
            get
            {
                return this._InsuranceCompanyShortName;
            }
            set
            {
                if ((this._InsuranceCompanyShortName != value))
                {
                    this._InsuranceCompanyShortName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeCode
        {
            get
            {
                return this._InsuranceSubTypeCode;
            }
            set
            {
                if ((this._InsuranceSubTypeCode != value))
                {
                    this._InsuranceSubTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeDescription", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeDescription
        {
            get
            {
                return this._InsuranceSubTypeDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeDescription != value))
                {
                    this._InsuranceSubTypeDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeShortDescription", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeShortDescription
        {
            get
            {
                return this._InsuranceSubTypeShortDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeShortDescription != value))
                {
                    this._InsuranceSubTypeShortDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string ClientEMBG
        {
            get
            {
                return this._ClientEMBG;
            }
            set
            {
                if ((this._ClientEMBG != value))
                {
                    this._ClientEMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string ClientName
        {
            get
            {
                return this._ClientName;
            }
            set
            {
                if ((this._ClientName != value))
                {
                    this._ClientName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string OwnerEMBG
        {
            get
            {
                return this._OwnerEMBG;
            }
            set
            {
                if ((this._OwnerEMBG != value))
                {
                    this._OwnerEMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string OwnerName
        {
            get
            {
                return this._OwnerName;
            }
            set
            {
                if ((this._OwnerName != value))
                {
                    this._OwnerName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.OfferItemsView")]
    public partial class OfferItemsView
    {

        private int _OfferItemID;

        private string _OfferNumber;

        private string _InsuranceSubTypeDescription;

        private string _InsuranceCompanyName;

        private int _InsuranceSubTypeID;

        public OfferItemsView()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OfferItemID", DbType = "Int NOT NULL")]
        public int OfferItemID
        {
            get
            {
                return this._OfferItemID;
            }
            set
            {
                if ((this._OfferItemID != value))
                {
                    this._OfferItemID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OfferNumber", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string OfferNumber
        {
            get
            {
                return this._OfferNumber;
            }
            set
            {
                if ((this._OfferNumber != value))
                {
                    this._OfferNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeDescription", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeDescription
        {
            get
            {
                return this._InsuranceSubTypeDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeDescription != value))
                {
                    this._InsuranceSubTypeDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    this._InsuranceSubTypeID = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.OrdersView")]
    public partial class OrdersView
    {

        private int _ID;

        private string _ClientEMBG;

        private string _ClientName;

        private string _Description;

        private string _OrderNumber;

        private System.DateTime _OrderDate;

        private string _UserName;

        private string _OwnerEMBG;

        private string _OwnerName;

        private System.DateTime _FinishDate;

        public OrdersView()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string ClientEMBG
        {
            get
            {
                return this._ClientEMBG;
            }
            set
            {
                if ((this._ClientEMBG != value))
                {
                    this._ClientEMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string ClientName
        {
            get
            {
                return this._ClientName;
            }
            set
            {
                if ((this._ClientName != value))
                {
                    this._ClientName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderNumber", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string OrderNumber
        {
            get
            {
                return this._OrderNumber;
            }
            set
            {
                if ((this._OrderNumber != value))
                {
                    this._OrderNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderDate", DbType = "DateTime NOT NULL")]
        public System.DateTime OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if ((this._OrderDate != value))
                {
                    this._OrderDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this._UserName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string OwnerEMBG
        {
            get
            {
                return this._OwnerEMBG;
            }
            set
            {
                if ((this._OwnerEMBG != value))
                {
                    this._OwnerEMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string OwnerName
        {
            get
            {
                return this._OwnerName;
            }
            set
            {
                if ((this._OwnerName != value))
                {
                    this._OwnerName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FinishDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FinishDate
        {
            get
            {
                return this._FinishDate;
            }
            set
            {
                if ((this._FinishDate != value))
                {
                    this._FinishDate = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.PoliciesView")]
    public partial class PoliciesView
    {

        private string _BranchName;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private bool _Discard;

        private System.DateTime _ApplicationDate;

        private string _ClientEMBG;

        private string _ClientName;

        private string _OwnerEMBG;

        private string _OwnerName;

        private string _UserName;

        private string _CompanyName;

        private string _CompanyShortName;

        private int _ID;

        private int _BranchID;

        private int _UserID;

        private int _InsuranceSubTypeID;

        private decimal _PremiumValue;

        private decimal _RealPremiumValue;

        private string _PolicyNumber;

        private decimal _BrokeragePercentage;

        private decimal _BrokerageValue;

        private bool _IsPaidInBrokerHouse;

        private string _InsuranceSubTypeCode;

        private string _InsuranceSubTypeDescription;

        private string _InsuranceSubTypesShortDescription;

        private int _InsuranceTypeID;

        private string _InsuranceTypeCode;

        private string _InsuranceTypeName;

        private string _InsuranceTypeShortName;

        private decimal _PaidValue;

        private System.Nullable<decimal> _DebtValue;

        private string _RegistrationNumber;

        private string _ChassisNumber;

        public PoliciesView()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string BranchName
        {
            get
            {
                return this._BranchName;
            }
            set
            {
                if ((this._BranchName != value))
                {
                    this._BranchName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "DateTime NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this._StartDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "DateTime NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this._EndDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Discard", DbType = "Bit NOT NULL")]
        public bool Discard
        {
            get
            {
                return this._Discard;
            }
            set
            {
                if ((this._Discard != value))
                {
                    this._Discard = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ApplicationDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ApplicationDate
        {
            get
            {
                return this._ApplicationDate;
            }
            set
            {
                if ((this._ApplicationDate != value))
                {
                    this._ApplicationDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string ClientEMBG
        {
            get
            {
                return this._ClientEMBG;
            }
            set
            {
                if ((this._ClientEMBG != value))
                {
                    this._ClientEMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string ClientName
        {
            get
            {
                return this._ClientName;
            }
            set
            {
                if ((this._ClientName != value))
                {
                    this._ClientName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string OwnerEMBG
        {
            get
            {
                return this._OwnerEMBG;
            }
            set
            {
                if ((this._OwnerEMBG != value))
                {
                    this._OwnerEMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string OwnerName
        {
            get
            {
                return this._OwnerName;
            }
            set
            {
                if ((this._OwnerName != value))
                {
                    this._OwnerName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this._UserName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if ((this._CompanyName != value))
                {
                    this._CompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CompanyShortName", DbType = "NVarChar(50)")]
        public string CompanyShortName
        {
            get
            {
                return this._CompanyShortName;
            }
            set
            {
                if ((this._CompanyShortName != value))
                {
                    this._CompanyShortName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    this._BranchID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    this._InsuranceSubTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PremiumValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PremiumValue
        {
            get
            {
                return this._PremiumValue;
            }
            set
            {
                if ((this._PremiumValue != value))
                {
                    this._PremiumValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RealPremiumValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal RealPremiumValue
        {
            get
            {
                return this._RealPremiumValue;
            }
            set
            {
                if ((this._RealPremiumValue != value))
                {
                    this._RealPremiumValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string PolicyNumber
        {
            get
            {
                return this._PolicyNumber;
            }
            set
            {
                if ((this._PolicyNumber != value))
                {
                    this._PolicyNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokeragePercentage", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokeragePercentage
        {
            get
            {
                return this._BrokeragePercentage;
            }
            set
            {
                if ((this._BrokeragePercentage != value))
                {
                    this._BrokeragePercentage = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this._BrokerageValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsPaidInBrokerHouse", DbType = "Bit NOT NULL")]
        public bool IsPaidInBrokerHouse
        {
            get
            {
                return this._IsPaidInBrokerHouse;
            }
            set
            {
                if ((this._IsPaidInBrokerHouse != value))
                {
                    this._IsPaidInBrokerHouse = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeCode
        {
            get
            {
                return this._InsuranceSubTypeCode;
            }
            set
            {
                if ((this._InsuranceSubTypeCode != value))
                {
                    this._InsuranceSubTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeDescription", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeDescription
        {
            get
            {
                return this._InsuranceSubTypeDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeDescription != value))
                {
                    this._InsuranceSubTypeDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypesShortDescription", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypesShortDescription
        {
            get
            {
                return this._InsuranceSubTypesShortDescription;
            }
            set
            {
                if ((this._InsuranceSubTypesShortDescription != value))
                {
                    this._InsuranceSubTypesShortDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeID", DbType = "Int NOT NULL")]
        public int InsuranceTypeID
        {
            get
            {
                return this._InsuranceTypeID;
            }
            set
            {
                if ((this._InsuranceTypeID != value))
                {
                    this._InsuranceTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string InsuranceTypeCode
        {
            get
            {
                return this._InsuranceTypeCode;
            }
            set
            {
                if ((this._InsuranceTypeCode != value))
                {
                    this._InsuranceTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeName", DbType = "NVarChar(70) NOT NULL", CanBeNull = false)]
        public string InsuranceTypeName
        {
            get
            {
                return this._InsuranceTypeName;
            }
            set
            {
                if ((this._InsuranceTypeName != value))
                {
                    this._InsuranceTypeName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeShortName", DbType = "NVarChar(50)")]
        public string InsuranceTypeShortName
        {
            get
            {
                return this._InsuranceTypeShortName;
            }
            set
            {
                if ((this._InsuranceTypeShortName != value))
                {
                    this._InsuranceTypeShortName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaidValue", DbType = "Decimal(38,2) NOT NULL")]
        public decimal PaidValue
        {
            get
            {
                return this._PaidValue;
            }
            set
            {
                if ((this._PaidValue != value))
                {
                    this._PaidValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DebtValue", DbType = "Decimal(38,2)")]
        public System.Nullable<decimal> DebtValue
        {
            get
            {
                return this._DebtValue;
            }
            set
            {
                if ((this._DebtValue != value))
                {
                    this._DebtValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RegistrationNumber", DbType = "NVarChar(300) NOT NULL", CanBeNull = false)]
        public string RegistrationNumber
        {
            get
            {
                return this._RegistrationNumber;
            }
            set
            {
                if ((this._RegistrationNumber != value))
                {
                    this._RegistrationNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ChassisNumber", DbType = "NVarChar(300) NOT NULL", CanBeNull = false)]
        public string ChassisNumber
        {
            get
            {
                return this._ChassisNumber;
            }
            set
            {
                if ((this._ChassisNumber != value))
                {
                    this._ChassisNumber = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewAccountFactures")]
    public partial class ViewAccountFacture
    {

        private int _ID;

        private string _FactureNumber;

        private decimal _TotalCost;

        private System.DateTime _DateOfCreation;

        private int _DocumentSubTypeID;

        private int _ClientID;

        private int _StatusID;

        private string _StatusCode;

        private string _StatusDescription;

        private string _DocumentSubTypeCode;

        private string _DocumentSubTypeDescription;

        private string _ClientEMBG;

        private string _ClientName;

        private decimal _BrokerageValue;

        private int _UserID;

        private System.DateTime _FromDate;

        private System.DateTime _ToDate;

        private bool _Discard;

        private bool _IsAccountBooked;

        public ViewAccountFacture()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string FactureNumber
        {
            get
            {
                return this._FactureNumber;
            }
            set
            {
                if ((this._FactureNumber != value))
                {
                    this._FactureNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalCost", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalCost
        {
            get
            {
                return this._TotalCost;
            }
            set
            {
                if ((this._TotalCost != value))
                {
                    this._TotalCost = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DateOfCreation", DbType = "DateTime NOT NULL")]
        public System.DateTime DateOfCreation
        {
            get
            {
                return this._DateOfCreation;
            }
            set
            {
                if ((this._DateOfCreation != value))
                {
                    this._DateOfCreation = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeID", DbType = "Int NOT NULL")]
        public int DocumentSubTypeID
        {
            get
            {
                return this._DocumentSubTypeID;
            }
            set
            {
                if ((this._DocumentSubTypeID != value))
                {
                    this._DocumentSubTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this._ClientID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusID", DbType = "Int NOT NULL")]
        public int StatusID
        {
            get
            {
                return this._StatusID;
            }
            set
            {
                if ((this._StatusID != value))
                {
                    this._StatusID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string StatusCode
        {
            get
            {
                return this._StatusCode;
            }
            set
            {
                if ((this._StatusCode != value))
                {
                    this._StatusCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusDescription", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string StatusDescription
        {
            get
            {
                return this._StatusDescription;
            }
            set
            {
                if ((this._StatusDescription != value))
                {
                    this._StatusDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string DocumentSubTypeCode
        {
            get
            {
                return this._DocumentSubTypeCode;
            }
            set
            {
                if ((this._DocumentSubTypeCode != value))
                {
                    this._DocumentSubTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeDescription", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DocumentSubTypeDescription
        {
            get
            {
                return this._DocumentSubTypeDescription;
            }
            set
            {
                if ((this._DocumentSubTypeDescription != value))
                {
                    this._DocumentSubTypeDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string ClientEMBG
        {
            get
            {
                return this._ClientEMBG;
            }
            set
            {
                if ((this._ClientEMBG != value))
                {
                    this._ClientEMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string ClientName
        {
            get
            {
                return this._ClientName;
            }
            set
            {
                if ((this._ClientName != value))
                {
                    this._ClientName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this._BrokerageValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if ((this._FromDate != value))
                {
                    this._FromDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if ((this._ToDate != value))
                {
                    this._ToDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Discard", DbType = "Bit NOT NULL")]
        public bool Discard
        {
            get
            {
                return this._Discard;
            }
            set
            {
                if ((this._Discard != value))
                {
                    this._Discard = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsAccountBooked", DbType = "Bit NOT NULL")]
        public bool IsAccountBooked
        {
            get
            {
                return this._IsAccountBooked;
            }
            set
            {
                if ((this._IsAccountBooked != value))
                {
                    this._IsAccountBooked = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewBankslipItems")]
    public partial class ViewBankslipItem
    {

        private int _ID;

        private int _BankslipID;

        private string _ClientName;

        private string _ClientAccountNumber;

        private decimal _DemandValue;

        private decimal _DebtValue;

        private decimal _ProvisionValue;

        private string _Code;

        private string _PaymentDescription;

        private string _CallOnPaymentNumber;

        private string _BankslipNumber;

        public ViewBankslipItem()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankslipID", DbType = "Int NOT NULL")]
        public int BankslipID
        {
            get
            {
                return this._BankslipID;
            }
            set
            {
                if ((this._BankslipID != value))
                {
                    this._BankslipID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientName", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string ClientName
        {
            get
            {
                return this._ClientName;
            }
            set
            {
                if ((this._ClientName != value))
                {
                    this._ClientName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientAccountNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ClientAccountNumber
        {
            get
            {
                return this._ClientAccountNumber;
            }
            set
            {
                if ((this._ClientAccountNumber != value))
                {
                    this._ClientAccountNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DemandValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DemandValue
        {
            get
            {
                return this._DemandValue;
            }
            set
            {
                if ((this._DemandValue != value))
                {
                    this._DemandValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DebtValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DebtValue
        {
            get
            {
                return this._DebtValue;
            }
            set
            {
                if ((this._DebtValue != value))
                {
                    this._DebtValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ProvisionValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal ProvisionValue
        {
            get
            {
                return this._ProvisionValue;
            }
            set
            {
                if ((this._ProvisionValue != value))
                {
                    this._ProvisionValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaymentDescription", DbType = "NVarChar(300) NOT NULL", CanBeNull = false)]
        public string PaymentDescription
        {
            get
            {
                return this._PaymentDescription;
            }
            set
            {
                if ((this._PaymentDescription != value))
                {
                    this._PaymentDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CallOnPaymentNumber", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string CallOnPaymentNumber
        {
            get
            {
                return this._CallOnPaymentNumber;
            }
            set
            {
                if ((this._CallOnPaymentNumber != value))
                {
                    this._CallOnPaymentNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankslipNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string BankslipNumber
        {
            get
            {
                return this._BankslipNumber;
            }
            set
            {
                if ((this._BankslipNumber != value))
                {
                    this._BankslipNumber = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewBankslips")]
    public partial class ViewBankslip
    {

        private int _ID;

        private string _BankslipNumber;

        private int _BankID;

        private decimal _DemandValue;

        private decimal _DebtValue;

        private System.DateTime _Date;

        private string _BankName;

        private string _BankCode;

        public ViewBankslip()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankslipNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string BankslipNumber
        {
            get
            {
                return this._BankslipNumber;
            }
            set
            {
                if ((this._BankslipNumber != value))
                {
                    this._BankslipNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankID", DbType = "Int NOT NULL")]
        public int BankID
        {
            get
            {
                return this._BankID;
            }
            set
            {
                if ((this._BankID != value))
                {
                    this._BankID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DemandValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DemandValue
        {
            get
            {
                return this._DemandValue;
            }
            set
            {
                if ((this._DemandValue != value))
                {
                    this._DemandValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DebtValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal DebtValue
        {
            get
            {
                return this._DebtValue;
            }
            set
            {
                if ((this._DebtValue != value))
                {
                    this._DebtValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string BankName
        {
            get
            {
                return this._BankName;
            }
            set
            {
                if ((this._BankName != value))
                {
                    this._BankName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BankCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string BankCode
        {
            get
            {
                return this._BankCode;
            }
            set
            {
                if ((this._BankCode != value))
                {
                    this._BankCode = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewBrokerages")]
    public partial class ViewBrokerage
    {

        private int _ID;

        private int _InsuranceSubTypeID;

        private int _DealID;

        private int _InsuranceCompanyID;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        private int _InsuranceTypeID;

        private string _InsuranceSubTypeCode;

        private string _InsuranceSubTypeDescription;

        private string _InsuranceTypeCode;

        private string _InsuranceTypeName;

        private string _DealDescription;

        private decimal _PercentageForPrivates;

        private decimal _PercentageForLaws;

        public ViewBrokerage()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    this._InsuranceSubTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DealID", DbType = "Int NOT NULL")]
        public int DealID
        {
            get
            {
                return this._DealID;
            }
            set
            {
                if ((this._DealID != value))
                {
                    this._DealID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeID", DbType = "Int NOT NULL")]
        public int InsuranceTypeID
        {
            get
            {
                return this._InsuranceTypeID;
            }
            set
            {
                if ((this._InsuranceTypeID != value))
                {
                    this._InsuranceTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeCode
        {
            get
            {
                return this._InsuranceSubTypeCode;
            }
            set
            {
                if ((this._InsuranceSubTypeCode != value))
                {
                    this._InsuranceSubTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeDescription", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeDescription
        {
            get
            {
                return this._InsuranceSubTypeDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeDescription != value))
                {
                    this._InsuranceSubTypeDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string InsuranceTypeCode
        {
            get
            {
                return this._InsuranceTypeCode;
            }
            set
            {
                if ((this._InsuranceTypeCode != value))
                {
                    this._InsuranceTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeName", DbType = "NVarChar(70) NOT NULL", CanBeNull = false)]
        public string InsuranceTypeName
        {
            get
            {
                return this._InsuranceTypeName;
            }
            set
            {
                if ((this._InsuranceTypeName != value))
                {
                    this._InsuranceTypeName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DealDescription", DbType = "NVarChar(100)")]
        public string DealDescription
        {
            get
            {
                return this._DealDescription;
            }
            set
            {
                if ((this._DealDescription != value))
                {
                    this._DealDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageForPrivates", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageForPrivates
        {
            get
            {
                return this._PercentageForPrivates;
            }
            set
            {
                if ((this._PercentageForPrivates != value))
                {
                    this._PercentageForPrivates = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageForLaws", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageForLaws
        {
            get
            {
                return this._PercentageForLaws;
            }
            set
            {
                if ((this._PercentageForLaws != value))
                {
                    this._PercentageForLaws = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewBrokeragesForMarketingAgents")]
    public partial class ViewBrokeragesForMarketingAgent
    {

        private string _Name;

        private string _InsuranceTypeName;

        private string _Description;

        private string _InsuranceCompanyName;

        private decimal _PercentageForPrivates;

        private decimal _PercentageForLaws;

        private int _ID;

        public ViewBrokeragesForMarketingAgent()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeName", DbType = "NVarChar(70) NOT NULL", CanBeNull = false)]
        public string InsuranceTypeName
        {
            get
            {
                return this._InsuranceTypeName;
            }
            set
            {
                if ((this._InsuranceTypeName != value))
                {
                    this._InsuranceTypeName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageForPrivates", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageForPrivates
        {
            get
            {
                return this._PercentageForPrivates;
            }
            set
            {
                if ((this._PercentageForPrivates != value))
                {
                    this._PercentageForPrivates = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageForLaws", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageForLaws
        {
            get
            {
                return this._PercentageForLaws;
            }
            set
            {
                if ((this._PercentageForLaws != value))
                {
                    this._PercentageForLaws = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewBrokerageSlips")]
    public partial class ViewBrokerageSlip
    {

        private int _ID;

        private string _Number;

        private System.DateTime _FromDate;

        private System.DateTime _ToDate;

        private int _InsuranceCompanyID;

        private string _Insurer;

        private string _InsuranceRisks;

        private string _InsuranceThings;

        private string _BasisForCompensation;

        private string _OtherConditions;

        private string _Description;

        private System.DateTime _Date;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        public ViewBrokerageSlip()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this._Number = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if ((this._FromDate != value))
                {
                    this._FromDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if ((this._ToDate != value))
                {
                    this._ToDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Insurer", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string Insurer
        {
            get
            {
                return this._Insurer;
            }
            set
            {
                if ((this._Insurer != value))
                {
                    this._Insurer = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceRisks", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string InsuranceRisks
        {
            get
            {
                return this._InsuranceRisks;
            }
            set
            {
                if ((this._InsuranceRisks != value))
                {
                    this._InsuranceRisks = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceThings", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string InsuranceThings
        {
            get
            {
                return this._InsuranceThings;
            }
            set
            {
                if ((this._InsuranceThings != value))
                {
                    this._InsuranceThings = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BasisForCompensation", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string BasisForCompensation
        {
            get
            {
                return this._BasisForCompensation;
            }
            set
            {
                if ((this._BasisForCompensation != value))
                {
                    this._BasisForCompensation = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OtherConditions", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string OtherConditions
        {
            get
            {
                return this._OtherConditions;
            }
            set
            {
                if ((this._OtherConditions != value))
                {
                    this._OtherConditions = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewCashReports")]
    public partial class ViewCashReport
    {

        private int _ID;

        private string _Number;

        private bool _Discard;

        private int _CashReportStatusID;

        private decimal _TotalValue;

        private int _BranchID;

        private System.DateTime _CashReportDate;

        private bool _IsAccountBooked;

        private string _CashReportStatusCode;

        private string _CashReportStatusName;

        private string _BranchCode;

        private string _BranchName;

        public ViewCashReport()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this._Number = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Discard", DbType = "Bit NOT NULL")]
        public bool Discard
        {
            get
            {
                return this._Discard;
            }
            set
            {
                if ((this._Discard != value))
                {
                    this._Discard = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CashReportStatusID", DbType = "Int NOT NULL")]
        public int CashReportStatusID
        {
            get
            {
                return this._CashReportStatusID;
            }
            set
            {
                if ((this._CashReportStatusID != value))
                {
                    this._CashReportStatusID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalValue
        {
            get
            {
                return this._TotalValue;
            }
            set
            {
                if ((this._TotalValue != value))
                {
                    this._TotalValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    this._BranchID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CashReportDate", DbType = "DateTime NOT NULL")]
        public System.DateTime CashReportDate
        {
            get
            {
                return this._CashReportDate;
            }
            set
            {
                if ((this._CashReportDate != value))
                {
                    this._CashReportDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsAccountBooked", DbType = "Bit NOT NULL")]
        public bool IsAccountBooked
        {
            get
            {
                return this._IsAccountBooked;
            }
            set
            {
                if ((this._IsAccountBooked != value))
                {
                    this._IsAccountBooked = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CashReportStatusCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string CashReportStatusCode
        {
            get
            {
                return this._CashReportStatusCode;
            }
            set
            {
                if ((this._CashReportStatusCode != value))
                {
                    this._CashReportStatusCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CashReportStatusName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string CashReportStatusName
        {
            get
            {
                return this._CashReportStatusName;
            }
            set
            {
                if ((this._CashReportStatusName != value))
                {
                    this._CashReportStatusName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string BranchCode
        {
            get
            {
                return this._BranchCode;
            }
            set
            {
                if ((this._BranchCode != value))
                {
                    this._BranchCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string BranchName
        {
            get
            {
                return this._BranchName;
            }
            set
            {
                if ((this._BranchName != value))
                {
                    this._BranchName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewClients")]
    public partial class ViewClient
    {

        private int _ID;

        private string _EMBG;

        private string _Name;

        private string _Phone;

        private string _Fax;

        private string _Mobile;

        private string _EMail;

        private bool _IsLaw;

        private string _Address;

        private int _PlaceID;

        private bool _IsInsuranceCompany;

        private string _PlaceCode;

        private string _PlaceName;

        private int _MunicipalityID;

        private string _MunicipalityCode;

        private string _MunicipalityName;

        private string _StateCode;

        private string _StateName;

        public ViewClient()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this._EMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Phone", DbType = "NVarChar(30)")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if ((this._Phone != value))
                {
                    this._Phone = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Fax", DbType = "NVarChar(30)")]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if ((this._Fax != value))
                {
                    this._Fax = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Mobile", DbType = "NVarChar(30)")]
        public string Mobile
        {
            get
            {
                return this._Mobile;
            }
            set
            {
                if ((this._Mobile != value))
                {
                    this._Mobile = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMail", DbType = "NVarChar(100)")]
        public string EMail
        {
            get
            {
                return this._EMail;
            }
            set
            {
                if ((this._EMail != value))
                {
                    this._EMail = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsLaw", DbType = "Bit NOT NULL")]
        public bool IsLaw
        {
            get
            {
                return this._IsLaw;
            }
            set
            {
                if ((this._IsLaw != value))
                {
                    this._IsLaw = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(100)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this._Address = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PlaceID", DbType = "Int NOT NULL")]
        public int PlaceID
        {
            get
            {
                return this._PlaceID;
            }
            set
            {
                if ((this._PlaceID != value))
                {
                    this._PlaceID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsInsuranceCompany", DbType = "Bit NOT NULL")]
        public bool IsInsuranceCompany
        {
            get
            {
                return this._IsInsuranceCompany;
            }
            set
            {
                if ((this._IsInsuranceCompany != value))
                {
                    this._IsInsuranceCompany = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PlaceCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string PlaceCode
        {
            get
            {
                return this._PlaceCode;
            }
            set
            {
                if ((this._PlaceCode != value))
                {
                    this._PlaceCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PlaceName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string PlaceName
        {
            get
            {
                return this._PlaceName;
            }
            set
            {
                if ((this._PlaceName != value))
                {
                    this._PlaceName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MunicipalityID", DbType = "Int NOT NULL")]
        public int MunicipalityID
        {
            get
            {
                return this._MunicipalityID;
            }
            set
            {
                if ((this._MunicipalityID != value))
                {
                    this._MunicipalityID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MunicipalityCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string MunicipalityCode
        {
            get
            {
                return this._MunicipalityCode;
            }
            set
            {
                if ((this._MunicipalityCode != value))
                {
                    this._MunicipalityCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MunicipalityName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string MunicipalityName
        {
            get
            {
                return this._MunicipalityName;
            }
            set
            {
                if ((this._MunicipalityName != value))
                {
                    this._MunicipalityName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StateCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string StateCode
        {
            get
            {
                return this._StateCode;
            }
            set
            {
                if ((this._StateCode != value))
                {
                    this._StateCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StateName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string StateName
        {
            get
            {
                return this._StateName;
            }
            set
            {
                if ((this._StateName != value))
                {
                    this._StateName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDamages")]
    public partial class ViewDamage
    {

        private int _ID;

        private string _DamageNumber;

        private int _PolicyItemID;

        private System.DateTime _DamageDate;

        private System.DateTime _AplicationDate;

        private string _DamagePlace;

        private decimal _EstimatedDamageValue;

        private decimal _LiquedatedValue;

        private decimal _PaidValue;

        private string _Description;

        private string _PolicyNumber;

        private string _UserName;

        private string _InsuranceSubTypeCode;

        private string _InsuranceSubTypeDescription;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        public ViewDamage()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DamageNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DamageNumber
        {
            get
            {
                return this._DamageNumber;
            }
            set
            {
                if ((this._DamageNumber != value))
                {
                    this._DamageNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL")]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    this._PolicyItemID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DamageDate", DbType = "DateTime NOT NULL")]
        public System.DateTime DamageDate
        {
            get
            {
                return this._DamageDate;
            }
            set
            {
                if ((this._DamageDate != value))
                {
                    this._DamageDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AplicationDate", DbType = "DateTime NOT NULL")]
        public System.DateTime AplicationDate
        {
            get
            {
                return this._AplicationDate;
            }
            set
            {
                if ((this._AplicationDate != value))
                {
                    this._AplicationDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DamagePlace", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string DamagePlace
        {
            get
            {
                return this._DamagePlace;
            }
            set
            {
                if ((this._DamagePlace != value))
                {
                    this._DamagePlace = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EstimatedDamageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal EstimatedDamageValue
        {
            get
            {
                return this._EstimatedDamageValue;
            }
            set
            {
                if ((this._EstimatedDamageValue != value))
                {
                    this._EstimatedDamageValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LiquedatedValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal LiquedatedValue
        {
            get
            {
                return this._LiquedatedValue;
            }
            set
            {
                if ((this._LiquedatedValue != value))
                {
                    this._LiquedatedValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaidValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PaidValue
        {
            get
            {
                return this._PaidValue;
            }
            set
            {
                if ((this._PaidValue != value))
                {
                    this._PaidValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string PolicyNumber
        {
            get
            {
                return this._PolicyNumber;
            }
            set
            {
                if ((this._PolicyNumber != value))
                {
                    this._PolicyNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this._UserName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeCode
        {
            get
            {
                return this._InsuranceSubTypeCode;
            }
            set
            {
                if ((this._InsuranceSubTypeCode != value))
                {
                    this._InsuranceSubTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeDescription", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeDescription
        {
            get
            {
                return this._InsuranceSubTypeDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeDescription != value))
                {
                    this._InsuranceSubTypeDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDistributionDocuments")]
    public partial class ViewDistributionDocument
    {

        private int _ID;

        private string _DocumentNumber;

        private System.DateTime _DocumentDate;

        private int _DocumentStatusID;

        private string _DistributionDocumentStatusCode;

        private string _DistributionDocumentStatusName;

        private int _BranchID;

        private int _DistributionDocTypeID;

        private string _DistributionDocTypeCode;

        private string _DistributionDocTypeName;

        private string _BranchName;

        private string _BranchCode;

        private string _Description;

        public ViewDistributionDocument()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DocumentNumber
        {
            get
            {
                return this._DocumentNumber;
            }
            set
            {
                if ((this._DocumentNumber != value))
                {
                    this._DocumentNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentDate", DbType = "DateTime NOT NULL")]
        public System.DateTime DocumentDate
        {
            get
            {
                return this._DocumentDate;
            }
            set
            {
                if ((this._DocumentDate != value))
                {
                    this._DocumentDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentStatusID", DbType = "Int NOT NULL")]
        public int DocumentStatusID
        {
            get
            {
                return this._DocumentStatusID;
            }
            set
            {
                if ((this._DocumentStatusID != value))
                {
                    this._DocumentStatusID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionDocumentStatusCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DistributionDocumentStatusCode
        {
            get
            {
                return this._DistributionDocumentStatusCode;
            }
            set
            {
                if ((this._DistributionDocumentStatusCode != value))
                {
                    this._DistributionDocumentStatusCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionDocumentStatusName", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string DistributionDocumentStatusName
        {
            get
            {
                return this._DistributionDocumentStatusName;
            }
            set
            {
                if ((this._DistributionDocumentStatusName != value))
                {
                    this._DistributionDocumentStatusName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    this._BranchID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionDocTypeID", DbType = "Int NOT NULL")]
        public int DistributionDocTypeID
        {
            get
            {
                return this._DistributionDocTypeID;
            }
            set
            {
                if ((this._DistributionDocTypeID != value))
                {
                    this._DistributionDocTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionDocTypeCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string DistributionDocTypeCode
        {
            get
            {
                return this._DistributionDocTypeCode;
            }
            set
            {
                if ((this._DistributionDocTypeCode != value))
                {
                    this._DistributionDocTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionDocTypeName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DistributionDocTypeName
        {
            get
            {
                return this._DistributionDocTypeName;
            }
            set
            {
                if ((this._DistributionDocTypeName != value))
                {
                    this._DistributionDocTypeName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchName", DbType = "NVarChar(100)")]
        public string BranchName
        {
            get
            {
                return this._BranchName;
            }
            set
            {
                if ((this._BranchName != value))
                {
                    this._BranchName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchCode", DbType = "NVarChar(50)")]
        public string BranchCode
        {
            get
            {
                return this._BranchCode;
            }
            set
            {
                if ((this._BranchCode != value))
                {
                    this._BranchCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(500)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDistributionRoutes")]
    public partial class ViewDistributionRoute
    {

        private int _ID;

        private string _FromNumber;

        private string _ToNumber;

        private System.DateTime _Date;

        private int _FromUserID;

        private int _ToUserID;

        private int _DistributionDocumentID;

        private string _FromUserName;

        private string _FromName;

        private string _ToUserName;

        private string _ToName;

        private string _DocumentNumber;

        private int _InsuranceCompanyID;

        private int _InsuranceSubTypeID;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        private string _InsuranceCompanyShortName;

        private string _InsuranceSubTypeCode;

        private string _InsuranceSubTypeShortDescription;

        public ViewDistributionRoute()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string FromNumber
        {
            get
            {
                return this._FromNumber;
            }
            set
            {
                if ((this._FromNumber != value))
                {
                    this._FromNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ToNumber
        {
            get
            {
                return this._ToNumber;
            }
            set
            {
                if ((this._ToNumber != value))
                {
                    this._ToNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromUserID", DbType = "Int NOT NULL")]
        public int FromUserID
        {
            get
            {
                return this._FromUserID;
            }
            set
            {
                if ((this._FromUserID != value))
                {
                    this._FromUserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToUserID", DbType = "Int NOT NULL")]
        public int ToUserID
        {
            get
            {
                return this._ToUserID;
            }
            set
            {
                if ((this._ToUserID != value))
                {
                    this._ToUserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionDocumentID", DbType = "Int NOT NULL")]
        public int DistributionDocumentID
        {
            get
            {
                return this._DistributionDocumentID;
            }
            set
            {
                if ((this._DistributionDocumentID != value))
                {
                    this._DistributionDocumentID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromUserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string FromUserName
        {
            get
            {
                return this._FromUserName;
            }
            set
            {
                if ((this._FromUserName != value))
                {
                    this._FromUserName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string FromName
        {
            get
            {
                return this._FromName;
            }
            set
            {
                if ((this._FromName != value))
                {
                    this._FromName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToUserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string ToUserName
        {
            get
            {
                return this._ToUserName;
            }
            set
            {
                if ((this._ToUserName != value))
                {
                    this._ToUserName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ToName
        {
            get
            {
                return this._ToName;
            }
            set
            {
                if ((this._ToName != value))
                {
                    this._ToName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DocumentNumber
        {
            get
            {
                return this._DocumentNumber;
            }
            set
            {
                if ((this._DocumentNumber != value))
                {
                    this._DocumentNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    this._InsuranceSubTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyShortName", DbType = "NVarChar(50)")]
        public string InsuranceCompanyShortName
        {
            get
            {
                return this._InsuranceCompanyShortName;
            }
            set
            {
                if ((this._InsuranceCompanyShortName != value))
                {
                    this._InsuranceCompanyShortName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeCode
        {
            get
            {
                return this._InsuranceSubTypeCode;
            }
            set
            {
                if ((this._InsuranceSubTypeCode != value))
                {
                    this._InsuranceSubTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeShortDescription", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeShortDescription
        {
            get
            {
                return this._InsuranceSubTypeShortDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeShortDescription != value))
                {
                    this._InsuranceSubTypeShortDescription = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDistributions")]
    public partial class ViewDistribution
    {

        private int _ID;

        private int _InsuranceCompanyID;

        private string _PolicyNumber;

        private int _InsuranceSubTypeID;

        private System.DateTime _Date;

        private int _UserID;

        private bool _IsUsed;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        private string _UserName;

        private int _InsuranceTypeID;

        private string _InsuranceSubTypeCode;

        private string _InsuranceSubTypeDescription;

        private string _InsuranceSubTypeShortDescription;

        private string _InsuranceTypeCode;

        private string _InsuranceTypeName;

        private string _DistributionStatusName;

        private string _DistributionStatusCode;

        private string _BranchName;

        private string _BranchCode;

        private int _DistributionStatusID;

        private int _BranchID;

        public ViewDistribution()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string PolicyNumber
        {
            get
            {
                return this._PolicyNumber;
            }
            set
            {
                if ((this._PolicyNumber != value))
                {
                    this._PolicyNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    this._InsuranceSubTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsUsed", DbType = "Bit NOT NULL")]
        public bool IsUsed
        {
            get
            {
                return this._IsUsed;
            }
            set
            {
                if ((this._IsUsed != value))
                {
                    this._IsUsed = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this._UserName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeID", DbType = "Int NOT NULL")]
        public int InsuranceTypeID
        {
            get
            {
                return this._InsuranceTypeID;
            }
            set
            {
                if ((this._InsuranceTypeID != value))
                {
                    this._InsuranceTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeCode
        {
            get
            {
                return this._InsuranceSubTypeCode;
            }
            set
            {
                if ((this._InsuranceSubTypeCode != value))
                {
                    this._InsuranceSubTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeDescription", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeDescription
        {
            get
            {
                return this._InsuranceSubTypeDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeDescription != value))
                {
                    this._InsuranceSubTypeDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeShortDescription", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeShortDescription
        {
            get
            {
                return this._InsuranceSubTypeShortDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeShortDescription != value))
                {
                    this._InsuranceSubTypeShortDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string InsuranceTypeCode
        {
            get
            {
                return this._InsuranceTypeCode;
            }
            set
            {
                if ((this._InsuranceTypeCode != value))
                {
                    this._InsuranceTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeName", DbType = "NVarChar(70) NOT NULL", CanBeNull = false)]
        public string InsuranceTypeName
        {
            get
            {
                return this._InsuranceTypeName;
            }
            set
            {
                if ((this._InsuranceTypeName != value))
                {
                    this._InsuranceTypeName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionStatusName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DistributionStatusName
        {
            get
            {
                return this._DistributionStatusName;
            }
            set
            {
                if ((this._DistributionStatusName != value))
                {
                    this._DistributionStatusName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionStatusCode", DbType = "NVarChar(2) NOT NULL", CanBeNull = false)]
        public string DistributionStatusCode
        {
            get
            {
                return this._DistributionStatusCode;
            }
            set
            {
                if ((this._DistributionStatusCode != value))
                {
                    this._DistributionStatusCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchName", DbType = "NVarChar(100)")]
        public string BranchName
        {
            get
            {
                return this._BranchName;
            }
            set
            {
                if ((this._BranchName != value))
                {
                    this._BranchName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchCode", DbType = "NVarChar(50)")]
        public string BranchCode
        {
            get
            {
                return this._BranchCode;
            }
            set
            {
                if ((this._BranchCode != value))
                {
                    this._BranchCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DistributionStatusID", DbType = "Int NOT NULL")]
        public int DistributionStatusID
        {
            get
            {
                return this._DistributionStatusID;
            }
            set
            {
                if ((this._DistributionStatusID != value))
                {
                    this._DistributionStatusID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BranchID", DbType = "Int NOT NULL")]
        public int BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if ((this._BranchID != value))
                {
                    this._BranchID = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewDocumentSubTypes")]
    public partial class ViewDocumentSubType
    {

        private int _ID;

        private int _DocumentTypeID;

        private string _Code;

        private string _Description;

        private string _DocumentTypeCode;

        private string _DocumentTypeName;

        public ViewDocumentSubType()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentTypeID", DbType = "Int NOT NULL")]
        public int DocumentTypeID
        {
            get
            {
                return this._DocumentTypeID;
            }
            set
            {
                if ((this._DocumentTypeID != value))
                {
                    this._DocumentTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentTypeCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string DocumentTypeCode
        {
            get
            {
                return this._DocumentTypeCode;
            }
            set
            {
                if ((this._DocumentTypeCode != value))
                {
                    this._DocumentTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentTypeName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DocumentTypeName
        {
            get
            {
                return this._DocumentTypeName;
            }
            set
            {
                if ((this._DocumentTypeName != value))
                {
                    this._DocumentTypeName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewFactures")]
    public partial class ViewFacture
    {

        private int _ID;

        private string _FactureNumber;

        private decimal _TotalCost;

        private System.DateTime _DateOfCreation;

        private int _DocumentSubTypeID;

        private int _ClientID;

        private int _StatusID;

        private string _StatusCode;

        private string _StatusDescription;

        private string _DocumentSubTypeCode;

        private string _DocumentSubTypeDescription;

        private string _ClientEMBG;

        private string _ClientName;

        private decimal _BrokerageValue;

        private int _UserID;

        private System.DateTime _FromDate;

        private System.DateTime _ToDate;

        private bool _Discard;

        public ViewFacture()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string FactureNumber
        {
            get
            {
                return this._FactureNumber;
            }
            set
            {
                if ((this._FactureNumber != value))
                {
                    this._FactureNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalCost", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalCost
        {
            get
            {
                return this._TotalCost;
            }
            set
            {
                if ((this._TotalCost != value))
                {
                    this._TotalCost = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DateOfCreation", DbType = "DateTime NOT NULL")]
        public System.DateTime DateOfCreation
        {
            get
            {
                return this._DateOfCreation;
            }
            set
            {
                if ((this._DateOfCreation != value))
                {
                    this._DateOfCreation = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeID", DbType = "Int NOT NULL")]
        public int DocumentSubTypeID
        {
            get
            {
                return this._DocumentSubTypeID;
            }
            set
            {
                if ((this._DocumentSubTypeID != value))
                {
                    this._DocumentSubTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this._ClientID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusID", DbType = "Int NOT NULL")]
        public int StatusID
        {
            get
            {
                return this._StatusID;
            }
            set
            {
                if ((this._StatusID != value))
                {
                    this._StatusID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string StatusCode
        {
            get
            {
                return this._StatusCode;
            }
            set
            {
                if ((this._StatusCode != value))
                {
                    this._StatusCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusDescription", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string StatusDescription
        {
            get
            {
                return this._StatusDescription;
            }
            set
            {
                if ((this._StatusDescription != value))
                {
                    this._StatusDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string DocumentSubTypeCode
        {
            get
            {
                return this._DocumentSubTypeCode;
            }
            set
            {
                if ((this._DocumentSubTypeCode != value))
                {
                    this._DocumentSubTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DocumentSubTypeDescription", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DocumentSubTypeDescription
        {
            get
            {
                return this._DocumentSubTypeDescription;
            }
            set
            {
                if ((this._DocumentSubTypeDescription != value))
                {
                    this._DocumentSubTypeDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string ClientEMBG
        {
            get
            {
                return this._ClientEMBG;
            }
            set
            {
                if ((this._ClientEMBG != value))
                {
                    this._ClientEMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string ClientName
        {
            get
            {
                return this._ClientName;
            }
            set
            {
                if ((this._ClientName != value))
                {
                    this._ClientName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this._BrokerageValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if ((this._FromDate != value))
                {
                    this._FromDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if ((this._ToDate != value))
                {
                    this._ToDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Discard", DbType = "Bit NOT NULL")]
        public bool Discard
        {
            get
            {
                return this._Discard;
            }
            set
            {
                if ((this._Discard != value))
                {
                    this._Discard = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewIncomeFacturesPolicyItems")]
    public partial class ViewIncomeFacturesPolicyItem
    {

        private int _ID;

        private int _IncomingFactureID;

        private int _PolicyItemID;

        private bool _IsActive;

        private string _FactureNumber;

        private string _EMBG;

        private string _Description;

        private string _Code;

        private decimal _PremiumValue;

        private string _PolicyNumber;

        private string _ClientEMBG;

        private string _ClientName;

        private string _OwnerName;

        private string _OwnerEMBG;

        public ViewIncomeFacturesPolicyItem()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IncomingFactureID", DbType = "Int NOT NULL")]
        public int IncomingFactureID
        {
            get
            {
                return this._IncomingFactureID;
            }
            set
            {
                if ((this._IncomingFactureID != value))
                {
                    this._IncomingFactureID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyItemID", DbType = "Int NOT NULL")]
        public int PolicyItemID
        {
            get
            {
                return this._PolicyItemID;
            }
            set
            {
                if ((this._PolicyItemID != value))
                {
                    this._PolicyItemID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string FactureNumber
        {
            get
            {
                return this._FactureNumber;
            }
            set
            {
                if ((this._FactureNumber != value))
                {
                    this._FactureNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this._EMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PremiumValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PremiumValue
        {
            get
            {
                return this._PremiumValue;
            }
            set
            {
                if ((this._PremiumValue != value))
                {
                    this._PremiumValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PolicyNumber", DbType = "NVarChar(30) NOT NULL", CanBeNull = false)]
        public string PolicyNumber
        {
            get
            {
                return this._PolicyNumber;
            }
            set
            {
                if ((this._PolicyNumber != value))
                {
                    this._PolicyNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string ClientEMBG
        {
            get
            {
                return this._ClientEMBG;
            }
            set
            {
                if ((this._ClientEMBG != value))
                {
                    this._ClientEMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string ClientName
        {
            get
            {
                return this._ClientName;
            }
            set
            {
                if ((this._ClientName != value))
                {
                    this._ClientName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string OwnerName
        {
            get
            {
                return this._OwnerName;
            }
            set
            {
                if ((this._OwnerName != value))
                {
                    this._OwnerName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string OwnerEMBG
        {
            get
            {
                return this._OwnerEMBG;
            }
            set
            {
                if ((this._OwnerEMBG != value))
                {
                    this._OwnerEMBG = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewIncomingFactures")]
    public partial class ViewIncomingFacture
    {

        private int _ID;

        private string _FactureNumber;

        private string _EMBG;

        private string _TaxNumber;

        private string _Name;

        private string _Address;

        private decimal _TaxValue;

        private decimal _TotalCost;

        private System.DateTime _FactureDate;

        private System.DateTime _ValuteDate;

        private int _IncomingFactureTypeID;

        private string _IncomingFactureTypeCode;

        private string _IncomingFactureTypeName;

        public ViewIncomingFacture()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string FactureNumber
        {
            get
            {
                return this._FactureNumber;
            }
            set
            {
                if ((this._FactureNumber != value))
                {
                    this._FactureNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this._EMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TaxNumber", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string TaxNumber
        {
            get
            {
                return this._TaxNumber;
            }
            set
            {
                if ((this._TaxNumber != value))
                {
                    this._TaxNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this._Address = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TaxValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TaxValue
        {
            get
            {
                return this._TaxValue;
            }
            set
            {
                if ((this._TaxValue != value))
                {
                    this._TaxValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalCost", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalCost
        {
            get
            {
                return this._TotalCost;
            }
            set
            {
                if ((this._TotalCost != value))
                {
                    this._TotalCost = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FactureDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FactureDate
        {
            get
            {
                return this._FactureDate;
            }
            set
            {
                if ((this._FactureDate != value))
                {
                    this._FactureDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ValuteDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ValuteDate
        {
            get
            {
                return this._ValuteDate;
            }
            set
            {
                if ((this._ValuteDate != value))
                {
                    this._ValuteDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IncomingFactureTypeID", DbType = "Int NOT NULL")]
        public int IncomingFactureTypeID
        {
            get
            {
                return this._IncomingFactureTypeID;
            }
            set
            {
                if ((this._IncomingFactureTypeID != value))
                {
                    this._IncomingFactureTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IncomingFactureTypeCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string IncomingFactureTypeCode
        {
            get
            {
                return this._IncomingFactureTypeCode;
            }
            set
            {
                if ((this._IncomingFactureTypeCode != value))
                {
                    this._IncomingFactureTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IncomingFactureTypeName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string IncomingFactureTypeName
        {
            get
            {
                return this._IncomingFactureTypeName;
            }
            set
            {
                if ((this._IncomingFactureTypeName != value))
                {
                    this._IncomingFactureTypeName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewInsuranceSubTypes")]
    public partial class ViewInsuranceSubType
    {

        private int _ID;

        private int _InsuranceTypeID;

        private string _Code;

        private string _Description;

        private string _InsuranceTypeCode;

        private string _InsuranceTypeName;

        public ViewInsuranceSubType()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeID", DbType = "Int NOT NULL")]
        public int InsuranceTypeID
        {
            get
            {
                return this._InsuranceTypeID;
            }
            set
            {
                if ((this._InsuranceTypeID != value))
                {
                    this._InsuranceTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string InsuranceTypeCode
        {
            get
            {
                return this._InsuranceTypeCode;
            }
            set
            {
                if ((this._InsuranceTypeCode != value))
                {
                    this._InsuranceTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceTypeName", DbType = "NVarChar(70) NOT NULL", CanBeNull = false)]
        public string InsuranceTypeName
        {
            get
            {
                return this._InsuranceTypeName;
            }
            set
            {
                if ((this._InsuranceTypeName != value))
                {
                    this._InsuranceTypeName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewLifeDeals")]
    public partial class ViewLifeDeal
    {

        private int _ID;

        private string _Code;

        private string _Name;

        private string _Description;

        private int _InsuranceCompanyID;

        private int _InsuranceSubTypeID;

        private decimal _PercentageFromSumForRestLiving;

        private decimal _PercentageFromPremiumForAccident;

        private bool _IsActive;

        private string _InsuranceSubTypeCode;

        private string _InsuranceSubTypeDescription;

        private string _InsuranceSubTypeShortDescription;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        public ViewLifeDeal()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(500)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    this._InsuranceSubTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageFromSumForRestLiving", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageFromSumForRestLiving
        {
            get
            {
                return this._PercentageFromSumForRestLiving;
            }
            set
            {
                if ((this._PercentageFromSumForRestLiving != value))
                {
                    this._PercentageFromSumForRestLiving = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PercentageFromPremiumForAccident", DbType = "Decimal(18,2) NOT NULL")]
        public decimal PercentageFromPremiumForAccident
        {
            get
            {
                return this._PercentageFromPremiumForAccident;
            }
            set
            {
                if ((this._PercentageFromPremiumForAccident != value))
                {
                    this._PercentageFromPremiumForAccident = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeCode
        {
            get
            {
                return this._InsuranceSubTypeCode;
            }
            set
            {
                if ((this._InsuranceSubTypeCode != value))
                {
                    this._InsuranceSubTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeDescription", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeDescription
        {
            get
            {
                return this._InsuranceSubTypeDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeDescription != value))
                {
                    this._InsuranceSubTypeDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeShortDescription", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeShortDescription
        {
            get
            {
                return this._InsuranceSubTypeShortDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeShortDescription != value))
                {
                    this._InsuranceSubTypeShortDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewOffers")]
    public partial class ViewOffer
    {

        private int _ID;

        private System.Nullable<int> _OrderID;

        private int _ClientID;

        private int _OwnerID;

        private string _OfferNumber;

        private decimal _Cost;

        private string _Description;

        private int _StatusID;

        private string _StatusCode;

        private string _StatusDescription;

        private string _ClientEMBG;

        private string _ClientName;

        private string _OwnerEMBG;

        private string _OwnerName;

        public ViewOffer()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OrderID", DbType = "Int")]
        public System.Nullable<int> OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if ((this._OrderID != value))
                {
                    this._OrderID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this._ClientID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerID", DbType = "Int NOT NULL")]
        public int OwnerID
        {
            get
            {
                return this._OwnerID;
            }
            set
            {
                if ((this._OwnerID != value))
                {
                    this._OwnerID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OfferNumber", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string OfferNumber
        {
            get
            {
                return this._OfferNumber;
            }
            set
            {
                if ((this._OfferNumber != value))
                {
                    this._OfferNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Cost", DbType = "Decimal(18,2) NOT NULL")]
        public decimal Cost
        {
            get
            {
                return this._Cost;
            }
            set
            {
                if ((this._Cost != value))
                {
                    this._Cost = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusID", DbType = "Int NOT NULL")]
        public int StatusID
        {
            get
            {
                return this._StatusID;
            }
            set
            {
                if ((this._StatusID != value))
                {
                    this._StatusID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusCode", DbType = "NVarChar(10) NOT NULL", CanBeNull = false)]
        public string StatusCode
        {
            get
            {
                return this._StatusCode;
            }
            set
            {
                if ((this._StatusCode != value))
                {
                    this._StatusCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusDescription", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string StatusDescription
        {
            get
            {
                return this._StatusDescription;
            }
            set
            {
                if ((this._StatusDescription != value))
                {
                    this._StatusDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string ClientEMBG
        {
            get
            {
                return this._ClientEMBG;
            }
            set
            {
                if ((this._ClientEMBG != value))
                {
                    this._ClientEMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string ClientName
        {
            get
            {
                return this._ClientName;
            }
            set
            {
                if ((this._ClientName != value))
                {
                    this._ClientName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerEMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string OwnerEMBG
        {
            get
            {
                return this._OwnerEMBG;
            }
            set
            {
                if ((this._OwnerEMBG != value))
                {
                    this._OwnerEMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OwnerName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string OwnerName
        {
            get
            {
                return this._OwnerName;
            }
            set
            {
                if ((this._OwnerName != value))
                {
                    this._OwnerName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewRateDealInsuranceSubTypes")]
    public partial class ViewRateDealInsuranceSubType
    {

        private int _ID;

        private int _RateDealID;

        private int _InsuranceSubTypeID;

        private int _NumberOfRates;

        private decimal _FromValue;

        private decimal _ToValue;

        private string _DealNumber;

        private string _InsuranceSubTypeCode;

        private string _InsuranceSubTypeDescription;

        private string _InsuranceSubTypeShortDescription;

        public ViewRateDealInsuranceSubType()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RateDealID", DbType = "Int NOT NULL")]
        public int RateDealID
        {
            get
            {
                return this._RateDealID;
            }
            set
            {
                if ((this._RateDealID != value))
                {
                    this._RateDealID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeID", DbType = "Int NOT NULL")]
        public int InsuranceSubTypeID
        {
            get
            {
                return this._InsuranceSubTypeID;
            }
            set
            {
                if ((this._InsuranceSubTypeID != value))
                {
                    this._InsuranceSubTypeID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NumberOfRates", DbType = "Int NOT NULL")]
        public int NumberOfRates
        {
            get
            {
                return this._NumberOfRates;
            }
            set
            {
                if ((this._NumberOfRates != value))
                {
                    this._NumberOfRates = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal FromValue
        {
            get
            {
                return this._FromValue;
            }
            set
            {
                if ((this._FromValue != value))
                {
                    this._FromValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal ToValue
        {
            get
            {
                return this._ToValue;
            }
            set
            {
                if ((this._ToValue != value))
                {
                    this._ToValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DealNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DealNumber
        {
            get
            {
                return this._DealNumber;
            }
            set
            {
                if ((this._DealNumber != value))
                {
                    this._DealNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeCode
        {
            get
            {
                return this._InsuranceSubTypeCode;
            }
            set
            {
                if ((this._InsuranceSubTypeCode != value))
                {
                    this._InsuranceSubTypeCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeDescription", DbType = "NVarChar(150) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeDescription
        {
            get
            {
                return this._InsuranceSubTypeDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeDescription != value))
                {
                    this._InsuranceSubTypeDescription = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceSubTypeShortDescription", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string InsuranceSubTypeShortDescription
        {
            get
            {
                return this._InsuranceSubTypeShortDescription;
            }
            set
            {
                if ((this._InsuranceSubTypeShortDescription != value))
                {
                    this._InsuranceSubTypeShortDescription = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewRateDeals")]
    public partial class ViewRateDeal
    {

        private int _ID;

        private int _ClientID;

        private string _DealNumber;

        private System.DateTime _FromDate;

        private System.DateTime _ToDate;

        private System.DateTime _DealDate;

        private bool _IsActive;

        private string _EMBG;

        private string _Name;

        private bool _IsLaw;

        private string _Address;

        public ViewRateDeal()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
        public int ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this._ClientID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DealNumber", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string DealNumber
        {
            get
            {
                return this._DealNumber;
            }
            set
            {
                if ((this._DealNumber != value))
                {
                    this._DealNumber = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FromDate", DbType = "DateTime NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if ((this._FromDate != value))
                {
                    this._FromDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ToDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if ((this._ToDate != value))
                {
                    this._ToDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DealDate", DbType = "DateTime NOT NULL")]
        public System.DateTime DealDate
        {
            get
            {
                return this._DealDate;
            }
            set
            {
                if ((this._DealDate != value))
                {
                    this._DealDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive", DbType = "Bit NOT NULL")]
        public bool IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this._IsActive = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EMBG", DbType = "NVarChar(15) NOT NULL", CanBeNull = false)]
        public string EMBG
        {
            get
            {
                return this._EMBG;
            }
            set
            {
                if ((this._EMBG != value))
                {
                    this._EMBG = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsLaw", DbType = "Bit NOT NULL")]
        public bool IsLaw
        {
            get
            {
                return this._IsLaw;
            }
            set
            {
                if ((this._IsLaw != value))
                {
                    this._IsLaw = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(100)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this._Address = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewRightRestrictionDistributions")]
    public partial class ViewRightRestrictionDistribution
    {

        private int _ID;

        private int _InsuranceCompanyID;

        private System.DateTime _Date;

        private string _Number;

        private bool _IsUsed;

        private int _UserID;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        private string _UserName;

        private string _UserFullName;

        public ViewRightRestrictionDistribution()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this._Number = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsUsed", DbType = "Bit NOT NULL")]
        public bool IsUsed
        {
            get
            {
                return this._IsUsed;
            }
            set
            {
                if ((this._IsUsed != value))
                {
                    this._IsUsed = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this._UserID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(25) NOT NULL", CanBeNull = false)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this._UserName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserFullName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string UserFullName
        {
            get
            {
                return this._UserFullName;
            }
            set
            {
                if ((this._UserFullName != value))
                {
                    this._UserFullName = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewRollBackDistributionBranches")]
    public partial class ViewRollBackDistributionBranch
    {

        private int _Number;

        private System.DateTime _Date;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private decimal _TotalValue;

        private decimal _BrokerageValue;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        private string _Description;

        private int _ID;

        private string _Name;

        private string _Code;

        private int _StatusID;

        public ViewRollBackDistributionBranch()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "Int NOT NULL")]
        public int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this._Number = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "DateTime NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this._StartDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "DateTime NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this._EndDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalValue
        {
            get
            {
                return this._TotalValue;
            }
            set
            {
                if ((this._TotalValue != value))
                {
                    this._TotalValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this._BrokerageValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusID", DbType = "Int NOT NULL")]
        public int StatusID
        {
            get
            {
                return this._StatusID;
            }
            set
            {
                if ((this._StatusID != value))
                {
                    this._StatusID = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewRollBackDistributionCompanies")]
    public partial class ViewRollBackDistributionCompany
    {

        private int _Number;

        private System.DateTime _Date;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private decimal _TotalValue;

        private decimal _BrokerageValue;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        private string _Description;

        private int _ID;

        private string _Name;

        private string _Code;

        private int _StatusID;

        private int _InsuranceCompanyID;

        public ViewRollBackDistributionCompany()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "Int NOT NULL")]
        public int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this._Number = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "DateTime NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this._StartDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "DateTime NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this._EndDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalValue
        {
            get
            {
                return this._TotalValue;
            }
            set
            {
                if ((this._TotalValue != value))
                {
                    this._TotalValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this._BrokerageValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Code", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this._Code = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StatusID", DbType = "Int NOT NULL")]
        public int StatusID
        {
            get
            {
                return this._StatusID;
            }
            set
            {
                if ((this._StatusID != value))
                {
                    this._StatusID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ViewRollBackDistributions")]
    public partial class ViewRollBackDistribution
    {

        private int _ID;

        private int _Number;

        private int _InsuranceCompanyID;

        private System.DateTime _Date;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private decimal _TotalValue;

        private decimal _BrokerageValue;

        private string _InsuranceCompanyCode;

        private string _InsuranceCompanyName;

        private string _Description;

        public ViewRollBackDistribution()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", DbType = "Int NOT NULL")]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Number", DbType = "Int NOT NULL")]
        public int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if ((this._Number != value))
                {
                    this._Number = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyID", DbType = "Int NOT NULL")]
        public int InsuranceCompanyID
        {
            get
            {
                return this._InsuranceCompanyID;
            }
            set
            {
                if ((this._InsuranceCompanyID != value))
                {
                    this._InsuranceCompanyID = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate", DbType = "DateTime NOT NULL")]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this._StartDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate", DbType = "DateTime NOT NULL")]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if ((this._EndDate != value))
                {
                    this._EndDate = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal TotalValue
        {
            get
            {
                return this._TotalValue;
            }
            set
            {
                if ((this._TotalValue != value))
                {
                    this._TotalValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BrokerageValue", DbType = "Decimal(18,2) NOT NULL")]
        public decimal BrokerageValue
        {
            get
            {
                return this._BrokerageValue;
            }
            set
            {
                if ((this._BrokerageValue != value))
                {
                    this._BrokerageValue = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyCode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyCode
        {
            get
            {
                return this._InsuranceCompanyCode;
            }
            set
            {
                if ((this._InsuranceCompanyCode != value))
                {
                    this._InsuranceCompanyCode = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InsuranceCompanyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string InsuranceCompanyName
        {
            get
            {
                return this._InsuranceCompanyName;
            }
            set
            {
                if ((this._InsuranceCompanyName != value))
                {
                    this._InsuranceCompanyName = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }
    }
#pragma warning restore 1591
}